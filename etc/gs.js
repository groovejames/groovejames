$.Model.extend("GS.Models.Base", {cache:{},getOneFromCache:function(a, b) {
    return this.addLibraryFavoriteFlags(this.cache[_.orEqual(b, "") + a])
},addLibraryFavoriteFlags:function(a) {
    var b = this.shortName.toLowerCase() + "s";
    if (a && GS.user) {
        var c = a[a.Class.id];
        if (GS.user.favorites[b])a.isFavorite = _.defined(GS.user.favorites[b][c]) ? 1 : 0;
        if (b == "songs" && GS.user.library.songs)a.fromLibrary = _.defined(GS.user.library.songs[c]) ? 1 : 0
    }
    return a
},getManyFromCache:function(a, b) {
    for (var c = [],g = 0,h = a.length; g < h; g++)c.push(this.getOneFromCache(a[g],
            b));
    return c
},wrap:function(a, b, c) {
    var g = this.id,h = a[g];
    b = _.orEqual(b, true);
    c = _.orEqual(c, "");
    if (h && b)if (h = this.getOneFromCache(h, c))return h;
    a = this.addLibraryFavoriteFlags(this._super(a));
    if (b && a[g])this.cache[c + a[g]] = a;
    return a
},wrapCollection:function(a, b, c, g, h, k) {
    var m,n,o = [],q,v;
    b = _.orEqual(b, null);
    c = _.orEqual(c, false);
    g = _.orEqual(g, false);
    h = _.orEqual(h, true);
    k = _.orEqual(k, "");
    for (m in a)if (a.hasOwnProperty(m)) {
        q = a[m];
        v = this.wrap(q, h, k).dupe();
        if (c)for (n in q) {
            if (q.hasOwnProperty(n))v[n] = q[n]
        } else if (b)for (n in b)if (b.hasOwnProperty(n))if (n ===
                "USE_INDEX")v[b[n]] = parseInt(m, 10) + 1; else v[n] = _.orEqual(q[n], b[n]);
        if (!g || !$.isFunction(v.validate) || v.validate())o.push(v)
    }
    o._use_call = true;
    return o
},wrapCollectionInObject:function(a, b, c, g, h, k) {
    var m,n,o,q;
    b = _.orEqual(b, null);
    c = _.orEqual(c, false);
    g = _.orEqual(g, false);
    h = _.orEqual(h, true);
    k = _.orEqual(k, "");
    for (m in a)if (a.hasOwnProperty(m)) {
        o = a[m];
        (q = this.getOneFromCache(o[this.id], k)) || (q = this.wrap(o, h, k).dupe());
        if (c)for (n in o) {
            if (o.hasOwnProperty(n))q[n] = o[n]
        } else if (b)for (n in b)if (b.hasOwnProperty(n))q[n] =
                _.orEqual(o[n], b[n]);
        if (!g || !$.isFunction(q.validate) || q.validate())a[m] = q; else delete a[m]
    }
    return a
}}, {songs:{},albums:{},dupe:function() {
    return new this.Class(this.attrs())
},wrapSongCollection:function(a, b, c) {
    b = GS.Models.Song.wrapCollection(a.Songs || a.songs || a.result || a, b, c, true);
    for (c = 0; c < b.length; c++) {
        this.songs[b[c].SongID] = b[c];
        if (b[c].AlbumName && b[c].AlbumName.length) {
            if (this.albums[b[c].AlbumID]) {
                if (this.albums[b[c].AlbumID].ArtistName != b[c].ArtistName)this.albums[b[c].AlbumID].ArtistName =
                        "Various Artists"
            } else {
                album = GS.Models.Album.wrap({AlbumName:b[c].AlbumName,AlbumID:b[c].AlbumID,ArtistName:b[c].ArtistName,ArtistID:b[c].ArtistID,CoverArtFilename:b[c].CoverArtFilename,IsVerified:b[c].IsVerified}, true, "s_");
                this.albums[b[c].AlbumID] = album
            }
            this.albums[b[c].AlbumID].songs[b[c].SongID] = b[c]
        }
    }
    if (a && a.hasMore)this.currentPage++; else this.songsLoaded = true;
    return b
},playSongs:function(a) {
    var b = _.orEqual(a.index, -1),c = _.orEqual(a.playOnAdd, false),g = _.orEqual(a.shuffle, false),h = _.orEqual(a.sort,
            false),k = _.orEqual(a.numericSort, false),m = new GS.Models.PlayContext((this.shortName || "").toLowerCase(), this);
    a.verified && _.isEmpty(this.songs) && this.getSongs(this.callback("playSongs", {index:b,playOnAdd:c,sort:"TrackNum",numericSort:true,verified:false}), null, false);
    b = [];
    var n = [];
    _.forEach(this.songs, function(o) {
        n.push(o)
    });
    if (g)n = n.shuffle(); else if (h)n = n.sort(function(o, q) {
        if (o.hasOwnProperty(h) && q.hasOwnProperty(h)) {
            var v = o[h],x = q[h];
            if (k) {
                v = parseFloat(v, 10);
                if (isNaN(v))v = 0;
                x = parseFloat(x, 10);
                if (isNaN(x))x = 0;
                return v - x
            }
            if (v > x)return 1; else if (v < x)return-1;
            return 0
        } else if (o.hasOwnProperty(h))return 1;
        return 0
    });
    for (g = 0; g < n.length; g++)b.push(n[g].SongID);
    GS.player.addSongsToQueueAt(b, a.index, a.playOnAdd, m)
},getClipboardAction:function(a) {
    if (!window.contextMenuClipboards)window.contextMenuClipboards = [];
    return this.callback(function() {
        if (ZeroClipboard && a) {
            var b = $("div[id^=jjmenu_main_sub]");
            $.each(a, function(c, g) {
                var h = $(g.selector, b);
                if (window.contextMenuClipboards[c])window.contextMenuClipboards[c].reposition(h.get(0));
                else {
                    window.contextMenuClipboards[c] = new ZeroClipboard.Client(h.get(0));
                    window.contextMenuClipboards[c].addEventListener("complete", function(k, m) {
                        console.log("copied: ", m);
                        $("div[id^=jjmenu]").remove()
                    })
                }
                window.contextMenuClipboards[c].setText(g.text);
                h.bind("remove", function() {
                    try {
                        $.each(window.contextMenuClipboards, function(m, n) {
                            n.hide()
                        })
                    } catch(k) {
                    }
                })
            })
        }
    })
}});
(function(a) {
    GS.Models.Base.extend("GS.Models.Song", {id:"SongID",cache:{},artPath:"http://images.grooveshark.com/static/albums/",defaults:{AlbumID:null,AlbumName:"",ArtistID:null,ArtistName:"",CoverArtFilename:"",EstimateDuration:0,Flags:0,IsLowBitrateAvailable:0,Popularity:"0",SongID:null,SongName:"",TrackNum:"0",Year:"0",fromLibrary:0,isFavorite:0,IsVerified:0,TSAdded:"",TSFavorited:"",_token:null,tokenFailed:false},songsLoaded:false,songsUnverifiedLoaded:false,getSong:function(b, c, g, h) {
        var k = this.getOneFromCache(b),
                m = arguments[arguments.length - 1] === h ? {} : arguments[arguments.length - 1];
        h = _.orEqual(h, false);
        if (k)a.isFunction(c) && c(k); else {
            h && a.publish("gs.page.loading.page");
            GS.service.getQueueSongListFromSongIDs([b], this.callback(["wrapSingleSongFromIDs",c]), g, m)
        }
    },getOneSynchronous:function(b) {
        var c = this.getOneFromCache(b);
        if (c)return c; else {
            GS.service.getQueueSongListFromSongIDs([b], this.callback(this.wrapSingleSongFromIDs), null, {async:false});
            return this.getOneFromCache(b)
        }
    },getSongFromToken:function(b, c, g, h) {
        var k = this.getOneFromCache(b);
        h = _.orEqual(h, true);
        if (k)c(k); else {
            h && a.publish("gs.page.loading.page");
            GS.service.getSongFromToken(b, this.callback("wrapSongFromToken", b, c), g)
        }
    },getVerifiedDivider:function() {
        var b = this.wrap({SongID:-1,SongName:"",ArtistName:"",ArtistID:0,AlbumName:"",AlbumID:0,CoverArtFilename:""}, false);
        b.IsVerified = 0.5;
        return b
    },wrap:function(b, c) {
        b = _.orEqual(b, {});
        var g = _.orEqualEx(b.TrackNum, b.trackNum, "0").toString(),h = this._super({AlbumID:_.orEqualEx(b.AlbumID, b.albumID, 0),
            AlbumName:_.cleanText(_.orEqual(b.AlbumName, b.albumName)) || "Unknown Album",ArtistID:_.orEqualEx(b.ArtistID, b.artistID, 0),ArtistName:_.cleanText(_.orEqual(b.ArtistName, b.artistName)) || "Unknown Artist",CoverArtFilename:_.orEqualEx(b.CoverArtFilename, b.artFilename, ""),EstimateDuration:_.orEqualEx(b.EstimateDuration, b.estimateDuration, 0),Flags:_.orEqualEx(b.Flags, b.flags, 0),IsLowBitrateAvailable:_.orEqualEx(b.IsLowBitrateAvailable, 0),SongID:_.orEqualEx(b.SongID, b.songID, 0),SongName:_.cleanText(_.orEqualEx(b.SongName,
                    b.songName, b.Name)) || "Unknown Title",TrackNum:g,Year:_.cleanText(_.orEqualEx(b.Year, b.year, "0")),Popularity:_.orEqualEx(b.Popularity, b.popularity, 0),IsVerified:_.orEqual(parseFloat(b.IsVerified, 10), 0),_token:_.orEqualEx(b._token, null)}, c);
        if (h.TrackNum !== g && g !== "0")h.TrackNum = g;
        if (h.CoverArtFilename == "default.png")h.CoverArtFilename = null;
        return h
    },wrapQueue:function(b) {
        return this.wrapCollection(b, {Flags:0,EstimateDuration:0,autoplayVote:0,parentQueueID:0,queueSongID:0,source:"",index:-1,context:null,
            sponsoredAutoplayID:0}, false, true, true)
    },wrapSingleSongFromIDs:function(b) {
        b = this.wrapCollection(b);
        if (b.length)return b[0]
    },wrapSongFromToken:function(b, c, g) {
        if (a.isArray(g))g = {};
        g = this.wrap(g);
        g.validate() && g.checkToken({Token:b});
        a.isFunction(c) && c(g);
        return g
    },archive:function(b) {
        return{A:b.AlbumID,B:b.AlbumName,C:b.ArtistID,D:b.ArtistName,E:b.CoverArtFilename,F:b.EstimateDuration,G:b.Flags,H:b.Popularity,I:b.SongID,J:b.SongName,K:b.TSAdded,L:b.TrackNum,M:b.Year,N:b.isFavorite}
    },unarchive:function(b) {
        return{AlbumID:b.A,
            AlbumName:b.B,ArtistID:b.C,ArtistName:b.D,CoverArtFilename:b.E,EstimateDuration:b.F,Flags:b.G,Popularity:b.H,SongID:b.I,SongName:b.J,TSAdded:b.K,TrackNum:isNaN(b.L) ? "0" : b.L,Year:isNaN(b.M) ? "0" : b.M,isFavorite:b.N}
    },itemRenderer:function(b) {
        var c = "" + ('<a class="name ellipsis" href="' + b.toUrl() + '">' + b.SongName + "</a>");
        ['<a href="',b.toUrl(),'">',b.SongName,"</a>"].join("");
        var g = ['<a href="',b.toArtistUrl(),'">',b.ArtistName,"</a>"].join("");
        g = a("<span></span>").localeDataString("BY_ARTIST", {artist:g});
        var h = ['<img width="70" height="70" src="',b.getImageURL(70),'"/>'].join("");
        return['<a href="',b.toUrl(),'" class="albumImage">',h,'<span class="playBtn" data-albumid="',b.AlbumID,'"></span></a><div class="meta">',c,'<span class="by">',g.render(),"</span></div>"].join("")
    },slideItemRenderer:function(b) {
        var c = ['<a class="slideTitle songLink ellipsis" data-songid="',b.SongID,'">' + b.SongName + "</a>"].join(""),g = ['<a href="',b.toArtistUrl(),'">',b.ArtistName,"</a>"].join("");
        g = a('<span class="slideSub"></span>').localeDataString("BY_ARTIST",
                {artist:g});
        var h = ['<img src="',b.getImageURL(200),'"/>'].join("");
        return['<div class="page_content_slide exploreSlide" data-dragtype="song" data-dragid="',b.SongID,'"><a class="slideImg songLink" data-songid="',b.SongID,'">',h,'<span href="#" class="slide_playBtn" data-songid="',b.SongID,'"></span></a>',c,g.render(),"</div>"].join("")
    },matchFilter:function(b, c) {
        c = _.orEqual(c, false);
        var g;
        if (c) {
            g = RegExp("^" + b, "i");
            return function(h) {
                h.SongName.match(g)
            }
        } else {
            g = RegExp(b, "gi");
            return function(h) {
                return h.SongName.match(g) ||
                        h.ArtistName.match(g) || h.AlbumName.match(g)
            }
        }
    }}, {validate:function() {
        if (this.SongID > 0 && this.ArtistID > 0 && this.AlbumID > 0)return true;
        return false
    },init:function(b) {
        if (b) {
            this._super(b);
            this.SongName = _.orEqual(b.SongName, b.Name) || "Unknown Title";
            this.AlbumName = b.AlbumName || "Unknown Album";
            this.ArtistName = b.ArtistName || "Unknown Artist";
            this.searchText = [this.SongName,this.ArtistName,this.AlbumName].join(" ").toLowerCase();
            this.fanbase = false;
            this.songs = {};
            delete this.Name
        }
    },toUrl:function(b) {
        if (this._token)return _.cleanUrl(this.SongName,
                this.SongID, "s", this._token, b); else if (this.tokenFailed)return _.generate404(); else {
            this.getToken();
            return this._token ? _.cleanUrl(this.SongName, this.SongID, "s", this._token, b) : _.generate404()
        }
    },toArtistUrl:function(b) {
        return _.cleanUrl(this.ArtistName, this.ArtistID, "artist", null, b)
    },toAlbumUrl:function(b) {
        return _.cleanUrl(this.AlbumName, this.AlbumID, "album", null, b)
    },getToken:function() {
        if (this._token)return this._token; else if (this.tokenFailed)return null; else {
            GS.service.getTokenForSong(this.SongID,
                    this.callback(this.checkToken), this.callback(this.tokenCallFail), {async:false});
            return this._token
        }
    },checkToken:function(b) {
        if (b.Token) {
            this._token = b.Token;
            GS.Models.Song.cache[this._token] = this;
            GS.Models.Song.getOneFromCache(this.SongID)._token = this._token
        } else this.tokenFailed = true
    },tokenCallFail:function() {
        this._token = null
    },getImageURL:function(b) {
        b = _.orEqual(b, 70);
        var c = GS.Models.Song.artPath + b + "_album.png";
        if (this.CoverArtFilename && this.CoverArtFilename.indexOf("default") == -1)c = GS.Models.Song.artPath +
                b + "_" + this.CoverArtFilename;
        return c
    },getDetailsForFeeds:function() {
        return{songID:this.SongID,songName:this.SongName,albumID:this.AlbumID,albumName:this.AlbumName,artistID:this.ArtistID,artistName:this.ArtistName,artFilename:this.CoverArtFilename,track:this.TrackNum}
    },getRelatedSongs:function(b, c, g) {
        g = _.orEqual(g, true);
        this.album ? this.album.getSongs(b, c, g) : GS.Models.Album.getAlbum(this.AlbumID, this.callback(function(h) {
            this.album = h;
            h.getSongs(b, c, g)
        }), c, false)
    },getAffiliateDownloadURLs:function(b) {
        var c;
        if (_.isEmpty(this.affiliateDownloadURLs))c = this; else return this.affiliateDownloadURLs;
        var g = [];
        GS.service.getAffiliateDownloadURLs(this.SongName, this.ArtistName, function(h) {
            a.each(h, function(k, m) {
                if (k === "amazon")k = "Amazon";
                g.push({name:k,url:m.url})
            });
            c.affiliateDownloadURLs = g;
            b(c.affiliateDownloadURLs)
        }, function() {
            b({})
        })
    },getContextMenu:function(b) {
        b = _.orEqual(b, {});
        var c;
        if (b)c = _.orEqual(b.menuType, "");
        var g = GS.getGuts().extractSongItemInfo(b.gridController),h = [],k = {menuType:c,multiClick:false,
            gridController:b.gridController};
        GS.user.library.songs[this.SongID] ? h.push({title:a.localize.getString("CONTEXT_REMOVE_FROM_LIBRARY"),customClass:"last jj_menu_item_hasIcon jj_menu_item_remove_music",action:{type:"fn",callback:this.callback(function() {
            GS.user.removeFromLibrary(this.SongID);
            GS.getGuts().onContextMenuClick("contextRemoveFromLibrary", c, false, g)
        })}}) : h.push({title:a.localize.getString("CONTEXT_ADD_TO_LIBRARY"),customClass:"last jj_menu_item_hasIcon jj_menu_item_music",action:{type:"fn",
            callback:this.callback(function() {
                GS.user.addToLibrary(this.SongID);
                GS.getGuts().onContextMenuClick("contextAddToLibrary", c, false, g)
            })}});
        GS.user.favorites.songs[this.SongID] ? h.push({title:a.localize.getString("CONTEXT_REMOVE_FROM_FAVORITES"),customClass:"last jj_menu_item_hasIcon jj_menu_item_remove_favorite",action:{type:"fn",callback:this.callback(function() {
            GS.user.removeFromSongFavorites(this.SongID);
            GS.getGuts().onContextMenuClick("contextRemoveFromFavorites", c, false, g)
        })}}) : h.push({title:a.localize.getString("CONTEXT_ADD_TO_FAVORITES"),
            customClass:"last jj_menu_item_hasIcon jj_menu_item_favorites",action:{type:"fn",callback:this.callback(function() {
                GS.user.addToSongFavorites(this.SongID);
                GS.getGuts().onContextMenuClick("contextAddToFavorites", c, false, g)
            })}});
        GS.user.isShortcut("song", this.SongID) ? h.push({title:a.localize.getString("CONTEXT_REMOVE_FROM_PINBOARD"),customClass:"last jj_menu_item_hasIcon jj_menu_item_remove_music",action:{type:"fn",callback:this.callback(function() {
            GS.user.removeFromShortcuts("song", this.SongID);
            GS.getGuts().onContextMenuClick("contextRemoveFromPinboard",
                    c, false, g)
        })}}) : h.push({title:a.localize.getString("CONTEXT_ADD_TO_PINBOARD"),customClass:"last jj_menu_item_hasIcon jj_menu_item_pinboard",action:{type:"fn",callback:this.callback(function() {
            GS.user.addToShortcuts("song", this.SongID, this.SongName);
            GS.getGuts().onContextMenuClick("contextAddToPinboard", c, false, g)
        })}});
        h = h.concat([
            {customClass:"separator"},
            {title:a.localize.getString("CONTEXT_ADD_TO_PLAYLIST"),type:"sub",customClass:"jj_menu_item_hasIcon jj_menu_item_playlist",src:GS.Models.Playlist.getPlaylistsMenu(this.SongID,
                    this.callback(function(m) {
                        m.addSongs([this.SongID], null, true)
                    }), null, null, k)}
        ]);
        h.push({customClass:"separator"});
        h = h.concat([
            {title:a.localize.getString("CONTEXT_SHARE_SONG"),type:"sub",customClass:"jj_menu_item_hasIcon jj_menu_item_share",src:this.getShareMenu(c, g)},
            {customClass:"separator"},
            {title:a.localize.getString("CONTEXT_BUY_SONG"),customClass:"last jj_menu_item_hasIcon jj_menu_item_download",action:{type:"fn",callback:this.callback(function() {
                GS.getLightbox().open("buySong", this.SongID);
                GS.getGuts().onContextMenuClick("contextBuySong", c, false, g)
            })}}
        ]);
        b.isQueue = _.orEqual(b.isQueue, false);
        if (b.isQueue) {
            h.push({customClass:"separator"}, {title:a.localize.getString("CONTEXT_FLAG_SONG"),customClass:"last jj_menu_item_hasIcon jj_menu_item_flag",type:"sub",src:[
                {title:a.localize.getString("CONTEXT_FLAG_BAD_SONG"),customClass:"last jj_menu_item_hasIcon jj_menu_item_flag",action:{type:"fn",callback:function() {
                    b.flagSongCallback(1)
                }}},
                {title:a.localize.getString("CONTEXT_FLAG_BAD_METADATA"),
                    customClass:"last jj_menu_item_hasIcon jj_menu_item_flag",action:{type:"fn",callback:function() {
                    b.flagSongCallback(4)
                }}}
            ]});
            (k = GS.player.getCurrentQueue()) && k.autoplayEnabled && h.push({customClass:"separator"}, {title:a.localize.getString("QUEUE_ITEM_SMILE"),customClass:"last jj_menu_item_hasIcon jj_menu_item_smile",action:{type:"fn",callback:function() {
                b.voteSongCallback(1)
            }}}, {title:a.localize.getString("QUEUE_ITEM_FROWN"),customClass:"last jj_menu_item_hasIcon jj_menu_item_frown",action:{type:"fn",
                callback:function() {
                    b.voteSongCallback(-1)
                }}})
        }
        return h
    },getShareMenu:function(b, c) {
        var g = [];
        GS.user.isLoggedIn && g.push({title:a.localize.getString("SHARE_EMAIL"),customClass:"jj_menu_item_hasIcon jj_menu_item_share_email",action:{type:"fn",callback:this.callback(function() {
            GS.getLightbox().open("share", {service:"email",type:"song",id:this.SongID});
            GS.getGuts().onContextMenuClick("contextShareEmail", b, false, c)
        })}});
        return g = g.concat([
            {title:a.localize.getString("SHARE_FACEBOOK"),customClass:"jj_menu_item_hasIcon jj_menu_item_share_facebook",
                action:{type:"fn",callback:this.callback(function() {
                    GS.getLightbox().open("share", {service:"facebook",type:"song",id:this.SongID});
                    GS.getGuts().onContextMenuClick("contextShareFacebook", b, false, c)
                })}},
            {title:a.localize.getString("SHARE_TWITTER"),customClass:"jj_menu_item_hasIcon jj_menu_item_share_twitter",action:{type:"fn",callback:this.callback(function() {
                GS.getLightbox().open("share", {service:"twitter",type:"song",id:this.SongID});
                GS.getGuts().onContextMenuClick("contextShareTwitter", b, false, c)
            })}},
            {title:a.localize.getString("SHARE_STUMBLE"),customClass:"jj_menu_item_hasIcon jj_menu_item_share_stumbleupon",action:{type:"fn",callback:this.callback(function() {
                window.open(_.makeUrlForShare("stumbleupon", "song", this), "_blank");
                a("div[id^=jjmenu]").remove();
                GS.getGuts().onContextMenuClick("contextShareStumble", b, false, c)
            })}},
            {title:a.localize.getString("SHARE_REDDIT"),customClass:"jj_menu_item_hasIcon jj_menu_item_share jj_menu_item_share_reddit",action:{type:"fn",callback:this.callback(function() {
                window.open(_.makeUrlForShare("reddit",
                        "song", this), "_blank");
                a("div[id^=jjmenu]").remove();
                GS.getGuts().onContextMenuClick("contextShareReddit", b, false, c)
            })}},
            {title:a.localize.getString("SHARE_WIDGET"),customClass:"jj_menu_item_hasIcon jj_menu_item_share_widget",action:{type:"fn",callback:this.callback(function() {
                GS.getLightbox().open("share", {service:"widget",type:"song",id:this.SongID});
                GS.getGuts().onContextMenuClick("contextShareWidget", b, false, c)
            })}},
            {title:a.localize.getString("COPY_URL"),type:"sub",action:{type:"fn",callback:this.callback(function() {
                this.getClipboardAction([
                    {text:"http://grooveshark.com/" +
                            this.toUrl().replace("#/", ""),selector:"div.songUrl"},
                    {text:"http://grooveshark.com/" + _.cleanUrl(this.AlbumName, this.AlbumID, "album").replace("#/", ""),selector:"div.albumUrl"},
                    {text:"http://grooveshark.com/" + _.cleanUrl(this.ArtistName, this.ArtistID, "artist").replace("#/", ""),selector:"div.artistUrl"}
                ])();
                a("div[name$=Url]", elem).show()
            })},customClass:"last copyUrl jj_menu_item_hasIcon jj_menu_item_copy",src:[
                {title:a.localize.getString("SONG_URL"),customClass:"songUrl jj_menu_item_hasIcon jj_menu_item_copy"},
                {title:a.localize.getString("ALBUM_URL"),customClass:"albumUrl jj_menu_item_hasIcon jj_menu_item_copy"},
                {title:a.localize.getString("ARTIST_URL"),customClass:" artistUrl jj_menu_item_hasIcon jj_menu_item_copy"}
            ]}
        ])
    },getTitle:function() {
        return['"',this.SongName,'" by ',this.ArtistName,' on "',this.AlbumName,'"'].join("")
    },getVideos:function(b, c, g) {
        g = _.orEqual(g, 5);
        GS.getYoutube().search("", g, this.callback(function(h) {
            var k = [];
            if (h && h[0] && h[0].VideoID) {
                for (var m = 0; m < h.length; m++) {
                    h[m].title = this.ArtistName +
                            " - " + this.SongName;
                    k.push(h[m])
                }
                b(k)
            } else {
                console.warn("bad youtube search items", h);
                c([])
            }
        }), c, this)
    },toProxyLabel:function() {
        return _.getString("SELECTION_SONG_SINGLE", {SongName:_.cleanText(this.SongName),ArtistName:_.cleanText(this.ArtistName)})
    },toString:function(b) {
        return(b = _.orEqual(b, false)) ? ["Song. sid:",this.SongID,", name:",this.SongName,", aid:",this.ArtistID,", arname: ",this.ArtistName,", alid: ",this.AlbumID,", alname:",this.AlbumName,", track: ",this.TrackNum,", verified: ",this.IsVerified].join("") :
                _.getString("SELECTION_SONG_SINGLE", {SongName:_.cleanText(this.SongName),ArtistName:_.cleanText(this.ArtistName)})
    }})
})(jQuery);
(function(a) {
    GS.Models.Base.extend("GS.Models.Album", {id:"AlbumID",cache:{},artPath:"http://images.grooveshark.com/static/albums/",smallAlbum:5,defaults:{AlbumName:"",AlbumID:null,ArtistName:"",ArtistID:null,CoverArtFilename:"",Year:"",IsVerified:0,PathName:false,PathNameEmpty:false,isFavorite:0,songsLoaded:false,songsUnverifiedLoaded:false,fanbase:null},getAlbum:function(b, c, g, h) {
        var k = this.getOneFromCache(b);
        h = _.orEqual(h, false);
        if (k)a.isFunction(c) && c(k); else {
            h && a.publish("gs.page.loading.page");
            GS.service.getAlbumByID(b, this.callback(["wrap",c]), g)
        }
    },getOneSynchronous:function(b) {
        var c = this.getOneFromCache(b);
        if (c)return c; else {
            GS.service.getAlbumByID(b, this.callback(this.wrap), null, {async:false});
            return this.getOneFromCache(b)
        }
    },getFilterAll:function(b) {
        return this.wrap({AlbumID:-1,AlbumName:a.localize.getString("ALL_ALBUMS"),ArtistName:b || "",ArtistID:-1,IsVerified:2,isFilterAll:1}, false)
    },defaultSongSort:function(b, c) {
        var g = parseFloat(_.orEqual(b.TrackNum, 0), 10),h = parseFloat(_.orEqual(c.TrackNum,
                0), 10);
        if (isNaN(g))g = 0;
        if (isNaN(h))h = 0;
        if (g !== 0 && h === 0)return-1;
        if (h !== 0 && g === 0)return 1;
        return g - h
    },prettySort:function(b, c) {
        return b.IsVerified && b.CoverArtFilename || b.IsVerified && !c.CoverArtFilename ? -1 : c.IsVerified && c.CoverArtFilename ? 1 : 0
    },itemRenderer:function(b) {
        var c = "" + ('<a class="name ellipsis" href="' + b.toUrl() + '">' + b.AlbumName + "</a>"),g = ['<a href="',b.toArtistUrl(),'">',b.ArtistName,"</a>"].join("");
        g = a("<span></span>").localeDataString("BY_ARTIST", {artist:g});
        var h = ['<img width="70" height="70" src="',
            b.getImageURL(70),'"/>'].join(""),k = _.count(b.songs);
        k = k > 0 ? '<p class="numSongs">' + _.printf("NUM_SONGS", {numSongs:k}) + "</p>" : "";
        return['<a href="',b.toUrl(),'" class="albumImage insetBorder height70">',h,'<span class="playBtn" data-albumid="',b.AlbumID,'"></span></a><div class="meta">',c,'<span class="by">',g.render(),"</span>",k,"</div>"].join("")
    },exploreItemRenderer:function(b) {
        var c = "" + ('<a class="name ellipsis" href="' + b.toUrl() + '">' + b.AlbumName + "</a>"),g = ['<a href="',b.toArtistUrl(),'">',b.ArtistName,
            "</a>"].join("");
        g = a("<span></span>").localeDataString("BY_ARTIST", {artist:g});
        var h = ['<img height="120" src="',b.getImageURL(120),'"/>'].join(""),k = b.tags ? '<div class="tags"><span class="icon"></span><span class="label">' + b.tags + "</span></div>" : "";
        return['<a href="',b.toUrl(),'" class="albumImage insetBorder height120">',h,'<span class="playBtn" data-albumid="',b.AlbumID,'"></span></a><div class="meta">',c,'<span class="by ellipsis">',g.render(),"</span>",k,"</div>"].join("")
    },slideItemRenderer:function(b) {
        var c =
                "" + ('<a class="slideTitle ellipsis" href="' + b.toUrl() + '">' + b.AlbumName + "</a>"),g = ['<a href="',b.toArtistUrl(),'">',b.ArtistName,"</a>"].join("");
        g = a('<span class="slideSub"></span>').localeDataString("BY_ARTIST", {artist:g});
        var h = ['<img src="',b.getImageURL(200),'"/>'].join("");
        return['<div class="page_content_slide exploreSlide" data-dragtype="album" data-dragid="',b.AlbumID,'"><a href="',b.toUrl(),'" class="slideImg insetBorder height120">',h,'<span href="#" class="slide_playBtn" data-albumid="',
            b.AlbumID,'"></span></a>',c,g.render(),"</div>"].join("")
    },wrap:function(b, c) {
        b = _.orEqual(b, {});
        b.ArtistName = _.cleanText(b.ArtistName) || "Unknown Artist";
        b.AlbumName = _.cleanText(_.orEqual(b.AlbumName, b.Name)) || "Unknown Album";
        return this._super(b, c)
    },matchFilter:function(b) {
        var c = RegExp(b, "gi");
        return function(g) {
            return g.ArtistName.match(c) || g.AlbumName.match(c)
        }
    }}, {getSongs:function(b, c, g) {
        var h = arguments[arguments.length - 1] === g ? {} : arguments[arguments.length - 1];
        g = _.orEqual(g, true);
        if (this.songsLoaded) {
            var k =
                    this.wrapManySongs(this.songs);
            if (!_.isEmpty(k) || this.songsUnverifiedLoaded)b(k);
            if (!g && !this.songsUnverifiedLoaded) {
                this.songsUnverifiedLoaded = true;
                GS.service.albumGetSongs(this.AlbumID, false, 0, this.callback(["wrapManySongs","resetAlbumInfo",b]), c, h)
            }
        } else {
            this.songsLoaded = true;
            g ? GS.service.albumGetSongs(this.AlbumID, true, 0, this.callback(["wrapManyVerifiedSongs","resetAlbumInfo",b]), c, h) : GS.service.albumGetSongs(this.AlbumID, false, 0, this.callback(["wrapManySongs","resetAlbumInfo",b]), c, h)
        }
    },wrapManySongs:function(b, c) {
        c = _.orEqual(c, false);
        return this.wrapSongCollection(b, {IsVerified:c ? 1 : 0,TrackNum:0,AlbumName:this.AlbumName,AlbumID:this.AlbumID,CoverArtFilename:this.CoverArtFilename,Popularity:"0"})
    },wrapManyVerifiedSongs:function(b) {
        return this.wrapManySongs(b, true)
    },play:function(b, c, g) {
        this.getSongs(this.callback("playSongs", {index:b,playOnAdd:c,sort:"TrackNum",numericSort:true,verified:true,shuffle:g}))
    },resetAlbumInfo:function(b) {
        for (i = 0; i < b.length; i++) {
            b[i].AlbumName = this.AlbumName;
            b[i].AlbumID = this.AlbumID
        }
        return b
    },
        validate:function() {
            if (this.AlbumID > 0 && this.ArtistID > 0)return true;
            return false
        },init:function(b) {
            this._super(b);
            this.AlbumName = _.cleanText(_.orEqual(b.AlbumName, b.Name) || "Unknown Album");
            if (!this.isFilterAll)this.ArtistName = _.cleanText(b.ArtistName || "Unknown Artist");
            this.fanbase = false;
            this.songs = {};
            this.songsUnverifiedLoaded = this.songsLoaded = false;
            this.searchText = [this.AlbumName,this.ArtistName].join(" ").toLowerCase()
        },getDetailsForFeeds:function() {
            return{albumID:this.AlbumID,albumName:this.AlbumName,
                artistID:this.ArtistID,artistName:this.ArtistName,artFilename:this.ArtFilename}
        },toUrl:function(b) {
            return this.PathName ? _.makeUrlFromPathName(this.PathName, b) : _.cleanUrl(this.AlbumName, this.AlbumID, "album", null, b)
        },toArtistUrl:function(b) {
            return _.cleanUrl(this.ArtistName, this.ArtistID, "artist", null, b)
        },_onPathNameSuccess:function(b, c) {
            if (c.name)this.PathName = c.name; else {
                this.PathName = "";
                this.PathNameEmpty = true
            }
            a.isFunction(b) && b(this.PathName)
        },_onPathNameFailed:function(b) {
            this.PathName = "";
            this.PathNameEmpty =
                    true;
            a.isFunction(b) && b(this.PathName)
        },getImageURL:function(b) {
            b = _.orEqual(b, 70);
            var c = GS.Models.Album.artPath + b + "_album.png";
            if (this.CoverArtFilename && this.CoverArtFilename.indexOf("default") == -1)return GS.Models.Album.artPath + b + "_" + this.CoverArtFilename;
            return c
        },getTitle:function() {
            return['"',this.AlbumName,'" by ',this.ArtistName].join("")
        },getContextMenu:function() {
            new GS.Models.PlayContext(GS.player.PLAY_CONTEXT_ALBUM, this);
            var b = [
                {title:a.localize.getString("CONTEXT_PLAY_ALBUM"),action:{type:"fn",
                    callback:this.callback(function() {
                        this.play(GS.player.INDEX_DEFAULT, true)
                    })},customClass:"jj_menu_item_hasIcon jj_menu_item_play"},
                {title:a.localize.getString("CONTEXT_PLAY_ALBUM_NEXT"),action:{type:"fn",callback:this.callback(function() {
                    this.play(GS.player.INDEX_NEXT, false)
                })},customClass:"jj_menu_item_hasIcon jj_menu_item_play_next"},
                {title:a.localize.getString("CONTEXT_PLAY_ALBUM_LAST"),action:{type:"fn",callback:this.callback(function() {
                    this.play(GS.player.INDEX_LAST, false)
                })},customClass:"jj_menu_item_hasIcon jj_menu_item_play_last"},
                {customClass:"separator"},
                {title:a.localize.getString("CONTEXT_REPLACE_ALL_SONGS"),action:{type:"fn",callback:this.callback(function() {
                    this.play(GS.player.INDEX_REPLACE, GS.player.isPlaying)
                })},customClass:"jj_menu_item_hasIcon jj_menu_item_replace_playlist"},
                {customClass:"separator"}
            ];
            b = b.concat([
                {title:a.localize.getString("SHARE_ALBUM"),type:"sub",action:{type:"fn",callback:this.getClipboardAction([
                    {text:"http://grooveshark.com/" + this.toUrl().replace("#/", ""),selector:"div.albumUrl"}
                ])},src:this.getShareMenu(),
                    customClass:"jj_menu_item_hasIcon jj_menu_item_share jj_menu_item_more"},
                {customClass:"separator"}
            ]);
            GS.user.isShortcut("album", this.AlbumID) ? b.push({title:a.localize.getString("CONTEXT_REMOVE_FROM_PINBOARD"),customClass:"last jj_menu_item_hasIcon jj_menu_item_remove_pinboard",action:{type:"fn",callback:this.callback(function() {
                GS.user.removeFromShortcuts("album", this.AlbumID)
            })}}) : b.push({title:a.localize.getString("CONTEXT_ADD_TO_PINBOARD"),customClass:"last jj_menu_item_hasIcon jj_menu_item_pinboard",
                action:{type:"fn",callback:this.callback(function() {
                    GS.user.addToShortcuts("album", this.AlbumID, this.AlbumName)
                })}});
            return b
        },getShareMenu:function() {
            var b = [],c = this.AlbumID;
            b.push({title:a.localize.getString("SHARE_FACEBOOK"),action:{type:"fn",callback:function() {
                GS.getLightbox().open("share", {service:"facebook",type:"album",id:c})
            }},customClass:"jj_menu_item_hasIcon jj_menu_item_share_facebook"}, {title:a.localize.getString("SHARE_TWITTER"),action:{type:"fn",callback:function() {
                GS.getLightbox().open("share",
                        {service:"twitter",type:"album",id:c})
            }},customClass:"jj_menu_item_hasIcon jj_menu_item_share_twitter"}, {title:a.localize.getString("SHARE_STUMBLE"),action:{type:"fn",callback:this.callback(function() {
                window.open(_.makeUrlForShare("stumbleupon", "album", this), "_blank");
                a("div[id^=jjmenu]").remove()
            })},customClass:"jj_menu_item_hasIcon jj_menu_item_share_stumbleupon"}, {title:a.localize.getString("SHARE_REDDIT"),action:{type:"fn",callback:this.callback(function() {
                window.open(_.makeUrlForShare("reddit",
                        "album", this), "_blank");
                a("div[id^=jjmenu]").remove()
            })},customClass:"jj_menu_item_hasIcon jj_menu_item_share_reddit"}, {title:a.localize.getString("ALBUM_URL"),customClass:"albumUrl jj_menu_item_hasIcon jj_menu_item_copy"});
            return b
        },toProxyLabel:function() {
            return _.getString(this.ArtistName ? "SELECTION_ALBUM_SINGLE" : "SELECTION_ALBUM_SINGLE_NO_ARTIST", {AlbumName:_.cleanText(this.AlbumName),ArtistName:_.cleanText(this.ArtistName)})
        },toString:function(b) {
            b = _.orEqual(b, false);
            var c = this.ArtistName ? "SELECTION_ALBUM_SINGLE" :
                    "SELECTION_ALBUM_SINGLE_NO_ARTIST";
            return b ? ["Album. alid: ",this.AlbumID,", alname:",this.AlbumName,", aid:",this.ArtistID,", arname: ",this.ArtistName,", verified: ",this.IsVerified].join("") : _.getString(c, {AlbumName:_.cleanText(this.AlbumName),ArtistName:_.cleanText(this.ArtistName)})
        }})
})(jQuery);
(function(a) {
    GS.Models.Base.extend("GS.Models.Artist", {id:"ArtistID",cache:{},artPath:"http://images.grooveshark.com/static/artists/",defaults:{ArtistName:"",ArtistID:null,CoverArtFilename:"",PathName:null,PathNameEmpty:false,isFavorite:0,songsLoaded:false,eventsLoaded:false,eventIDs:[],fanbase:null,tunipopID:NaN,lastFMInfo:{}},getArtist:function(b, c, g, h) {
        var k = this.getOneFromCache(b);
        h = _.orEqual(h, false);
        if (k)a.isFunction(c) && c(k); else {
            h && a.publish("gs.page.loading.page");
            GS.service.getArtistByID(b,
                    this.callback(["wrap",c]), g)
        }
    },getOneSynchronous:function(b) {
        var c = this.getOneFromCache(b);
        if (c)return c; else {
            GS.service.getArtistByID(b, this.callback(this.wrap), null, {async:false});
            return this.getOneFromCache(b)
        }
    },getFilterAll:function() {
        return this.wrap({ArtistID:-1,ArtistName:a.localize.getString("ALL_ARTISTS"),IsVerified:2,isFilterAll:1}, false)
    },defaultSongSort:function(b, c) {
        var g = _.orEqual(b.AlbumName, ""),h = _.orEqual(b.AlbumName, "");
        if (g > h)return 1; else if (g < h)return-1;
        return GS.Models.Album.defaultSongSort(b,
                c)
    },itemRenderer:function(b) {
        var c = "",g = "ARTIST_FOLLOW";
        if (b.isFavorite) {
            c = "following";
            g = "ARTIST_FOLLOWING"
        }
        var h = ['<a class="name ellipsis" href="',b.toUrl(),'">',b.ArtistName,"</a>"].join("");
        ['<a href="',b.toUrl(),'">',b.ArtistName,"</a>"].join("");
        var k = ['<img width="70" height="70" src="',b.getImageURL(),'"/>'].join("");
        c = ['<button class="btn button_style2 followArtist artistID',b.ArtistID," ",c,'"data-artistid="',b.ArtistID,'"><div><span class="icon"></span><span class="label" data-translate-text="',
            g,'">',a.localize.getString(g),"</span></div></button>"].join("");
        return['<a href="',b.toUrl(),'" class="artistImage insetBorder height70">',k,'</a><div class="meta">',h,c,"</div>"].join("")
    },exploreItemRenderer:function(b) {
        var c = "",g = "";
        if (b.isFavorite) {
            c = "following";
            g = a.localize.getString("UNFOLLOW")
        }
        var h = ['<a class="name ellipsis" href="',b.toUrl(),'">',b.ArtistName,"</a>"].join("");
        ['<a href="',b.toUrl(),'">',b.ArtistName,"</a>"].join("");
        var k = ['<img src="',b.getImageURL(120),'"/>'].join("");
        c = ['<button class="followArtist artistID',b.ArtistID," ",c,'"data-artistid="',b.ArtistID,'" title="',g,'"><div><span class="icon"></span></div></button>'].join("");
        g = b.tags ? '<div class="tags"><span class="icon"></span><span class="label">' + b.tags + "</span></div>" : "";
        return['<a href="',b.toUrl(),'" class="artistImage insetBorder height120">',k,"</a>",c,'<div class="meta">',h,g,"</div>"].join("")
    },slideItemRenderer:function(b) {
        var c = "" + ('<a class="slideTitle ellipsis" href="' + b.toUrl() + '">' + b.ArtistName +
                "</a>"),g = ['<img src="',b.getImageURL(90),'"/>'].join("");
        return['<div class="page_content_slide exploreSlide artist" data-dragtype="artist" data-dragid="',b.ArtistID,'"><a href="',b.toUrl(),'" class="slideImg insetBorder height120">',g,"</a>",c,"</div>"].join("")
    },matchFilter:function(b) {
        var c = RegExp(b, "gi");
        return function(g) {
            return g.ArtistName.match(c) || g.AlbumName.match(c)
        }
    }}, {smallCollection:10,artistFeed:null,init:function(b) {
        this._super(b);
        this.ArtistName = _.cleanText(_.orEqual(b.ArtistName,
                b.Name) || "Unknown Artist");
        this.CoverArtFilename = _.orEqual(b.ArtistCoverArtFilename, b.CoverArtFilename);
        this.fanbase = false;
        this.songs = {};
        this.albums = {};
        this.songsUnverifiedLoaded = this.songsLoaded = false;
        this.eventIDs = [];
        this.eventsLoaded = false;
        this.searchText = this.ArtistName.toLowerCase();
        this.feed = false
    },loadSongs:function(b, c) {
        this.allSongs ? b(this.allSongs) : GS.service.artistGetAllSongs(this.ArtistID, this.callback(function(g) {
            this.allSongs = g;
            b(g)
        }), c, {})
    },getSongs:function(b, c, g) {
        this.loadSongs(this.callback(function(h) {
            h =
                    this._returnFreshSongCollection(h, c);
            b(h)
        }), g)
    },getAlbums:function(b, c, g) {
        this.loadSongs(this.callback(function(h) {
            var k = [],m = {},n,o,q;
            o = 0;
            for (q = h.length; o < q; o++) {
                n = h[o];
                if (!m[n.AlbumID] && n.AlbumID) {
                    k.push({AlbumName:n.AlbumName,AlbumID:n.AlbumID,ArtistName:n.ArtistName,ArtistID:n.ArtistID,CoverArtFilename:_.orEqualEx(n.CoverArtFilename, n.artFilename, ""),IsVerified:_.orEqual(parseFloat(n.IsVerified, 10), 0)});
                    m[n.AlbumID] = true
                }
            }
            k = k.sort(function(v, x) {
                return parseFloat(v.AlbumID, 10) <= parseFloat(x.AlbumID,
                        10) ? -1 : 1
            });
            k = c(k);
            o = 0;
            for (q = k.length; o < q; o++)k[o] = GS.Models.Album.wrap(k[o], false);
            b(k)
        }), g)
    },wrap:function(b, c) {
        b = _.orEqual(b, {});
        try {
            delete b.AlbumID
        } catch(g) {
        }
        b.ArtistName = _.cleanText(b.ArtistName) || "Unknown Artist";
        b.CoverArtFilename = _.orEqual(b.ArtistCoverArtFilename, b.CoverArtFilename);
        return this._super(b, c)
    },_returnFreshSongCollection:function(b, c) {
        if (typeof c === "function") {
            b = c(b);
            this.songsLoaded = false
        } else this.songsLoaded = true;
        return this.wrapSongCollection(b, {Popularity:"0"})
    },getEvent:function(b, c, g) {
        var h = arguments[arguments.length - 1] === g ? {} : arguments[arguments.length - 1];
        g = _.orEqual(g, true);
        if (this.eventsLoaded) {
            h = GS.Models.Event.getManyFromCache(this.eventIDs);
            b(h)
        } else {
            g && a.publish("gs.page.loading.grid");
            GS.service.artistGetEvents(this.ArtistID, this.ArtistName, this.callback([GS.Models.Event.wrapMany,b]), c, h)
        }
    },cacheAndReturnEvents:function(b) {
        for (var c = GS.Models.User.wrapMany(b.Users || b.Return.fans || b.Return),g = 0; g < c.length; g++) {
            var h = c[g];
            this.userIDs.push(h.UserID);
            GS.Models.User.cache[h.UserID] =
                    h
        }
        if (_.defined(b.hasMore) && b.hasMore)this.currentPage++; else this.fansLoaded = true;
        return c
    },_tunipopDeferred:null,getTunipopID:function() {
        if (!this._tunipopDeferred) {
            this._tunipopDeferred = a.Deferred();
            GS.service.getTunipopID(this.ArtistName, false, this.callback(this._tunipopSuccess), this.callback(this._tunipopFailed))
        }
        return this._tunipopDeferred.promise()
    },_tunipopSuccess:function(b) {
        b = parseInt(b, 10);
        if (isNaN(b))b = 0;
        this.tunipopID = b;
        this._tunipopDeferred.resolve(this.tunipopID)
    },_tunipopFailed:function(b) {
        console.warn("tunipop failed",
                this.ArtistName, b.details);
        this.tunipopID = 0;
        this._tunipopDeferred.resolve(this.tunipopID)
    },validate:function() {
        if (this.ArtistID > 0)return true;
        return false
    },getDetailsForFeeds:function() {
        return{artistID:this.ArtistID,artistName:this.ArtistName,artFilename:this.CoverArtFilename}
    },toUrl:function(b) {
        return this.PathName ? _.makeUrlFromPathName(this.PathName, b) : _.cleanUrl(this.ArtistName, this.ArtistID, "artist", null, b)
    },getPathName:function(b) {
        if (this.PathName || this.PathNameEmpty)a.isFunction(b) && b(this.PathName);
        else GS.service.getPageNameByIDType(this.ArtistID, "artist", this.callback(this._onPathNameSuccess, b), this.callback(this._onPathNameFailed, b))
    },_onPathNameSuccess:function(b, c) {
        if (c.name)this.PathName = c.name; else {
            this.PathName = "";
            this.PathNameEmpty = true
        }
        a.isFunction(b) && b(this.PathName)
    },_onPathNameFailed:function(b) {
        this.PathName = "";
        this.PathNameEmpty = true;
        a.isFunction(b) && b(this.PathName)
    },getImageURL:function(b) {
        b = _.orEqual(b, 70);
        if (this.CoverArtFilename)return GS.Models.Artist.artPath + b + "_" + this.CoverArtFilename;
        return GS.Models.Artist.artPath + b + "_artist.png"
    },getTitle:function() {
        return this.ArtistName
    },play:function(b, c, g) {
        this.getSongs(this.callback("playSongs", {index:b,playOnAdd:c,verified:true,shuffle:g}))
    },getArtAttribution:function(b) {
        if (this.artAttribution)a.isFunction(b) && b(this.artAttribution); else GS.service.artistGetArtAttribution(this.ArtistID, this.callback(function(c) {
            this.artAttribution = c;
            a.isFunction(b) && b(c)
        }))
    },getContextMenu:function() {
        new GS.Models.PlayContext(GS.player.PLAY_CONTEXT_ARTIST,
                this);
        var b = [
            {title:a.localize.getString("CONTEXT_PLAY_ARTIST"),action:{type:"fn",callback:this.callback(function() {
                this.play(GS.player.INDEX_DEFAULT, true)
            })},customClass:"jj_menu_item_hasIcon jj_menu_item_play"},
            {title:a.localize.getString("CONTEXT_PLAY_ARTIST_NEXT"),action:{type:"fn",callback:this.callback(function() {
                this.play(GS.player.INDEX_NEXT, false)
            })},customClass:"jj_menu_item_hasIcon jj_menu_item_play_next"},
            {title:a.localize.getString("CONTEXT_PLAY_ARTIST_LAST"),action:{type:"fn",callback:this.callback(function() {
                this.play(GS.player.INDEX_LAST,
                        false)
            })},customClass:"jj_menu_item_hasIcon jj_menu_item_play_last"},
            {customClass:"separator"},
            {title:a.localize.getString("CONTEXT_REPLACE_ALL_SONGS"),action:{type:"fn",callback:this.callback(function() {
                this.play(GS.player.INDEX_REPLACE, GS.player.isPlaying)
            })},customClass:"jj_menu_item_hasIcon jj_menu_item_replace_playlist"},
            {customClass:"separator"}
        ];
        b = b.concat([
            {title:a.localize.getString("SHARE_ARTIST"),type:"sub",action:{type:"fn",callback:this.getClipboardAction([
                {text:"http://grooveshark.com/" +
                        this.toUrl().replace("#/", ""),selector:"div.artistUrl"}
            ])},src:this.getShareMenu(),customClass:"jj_menu_item_hasIcon jj_menu_item_share jj_menu_item_more"},
            {customClass:"separator"}
        ]);
        GS.user.isShortcut("artist", this.ArtistID) ? b.push({title:a.localize.getString("CONTEXT_REMOVE_FROM_PINBOARD"),customClass:"last jj_menu_item_hasIcon jj_menu_item_remove_pinboard",action:{type:"fn",callback:this.callback(function() {
            GS.user.removeFromShortcuts("artist", this.ArtistID)
        })}}) : b.push({title:a.localize.getString("CONTEXT_ADD_TO_PINBOARD"),
            customClass:"last jj_menu_item_hasIcon jj_menu_item_pinboard",action:{type:"fn",callback:this.callback(function() {
                GS.user.addToShortcuts("artist", this.ArtistID, this.ArtistName)
            })}});
        return b
    },getShareMenu:function() {
        var b = [],c = this.ArtistID;
        b.push({title:a.localize.getString("SHARE_FACEBOOK"),action:{type:"fn",callback:function() {
            GS.getLightbox().open("share", {service:"facebook",type:"artist",id:c})
        }},customClass:"jj_menu_item_hasIcon jj_menu_item_share_facebook"}, {title:a.localize.getString("SHARE_TWITTER"),
            action:{type:"fn",callback:function() {
                GS.getLightbox().open("share", {service:"twitter",type:"artist",id:c})
            }},customClass:"jj_menu_item_hasIcon jj_menu_item_share_twitter"}, {title:a.localize.getString("SHARE_STUMBLE"),action:{type:"fn",callback:this.callback(function() {
            window.open(_.makeUrlForShare("stumbleupon", "artist", this), "_blank");
            a("div[id^=jjmenu]").remove()
        })},customClass:"jj_menu_item_hasIcon jj_menu_item_share_stumbleupon"}, {title:a.localize.getString("SHARE_REDDIT"),action:{type:"fn",
            callback:this.callback(function() {
                window.open(_.makeUrlForShare("reddit", "artist", this), "_blank");
                a("div[id^=jjmenu]").remove()
            })},customClass:"jj_menu_item_hasIcon jj_menu_item_share_reddit"}, {title:a.localize.getString("ARTIST_URL"),customClass:"artistUrl jj_menu_item_hasIcon jj_menu_item_copy"});
        return b
    },toProxyLabel:function() {
        return _.cleanText(this.ArtistName)
    },toString:function(b) {
        return(b = _.orEqual(b, false)) ? ["Artist. aid:",this.ArtistID,", arname: ",this.ArtistName].join("") : _.cleanText(this.ArtistName)
    }})
})(jQuery);
(function(a) {
    GS.Models.Base.extend("GS.Models.Playlist", {id:"PlaylistID",cache:{},artPath:"http://images.grooveshark.com/static/playlists/",defaults:{PlaylistID:0,PlaylistName:"",UserID:0,Username:"",UserName:"",FName:"",LName:"",Description:"",NumSongs:0,Picture:"",Sort:null,isFavorite:0,songs:[],originalOrder:[],songsLoaded:false,hasUnsavedChanges:false,searchText:"",fanbase:null,gridKey:1,gridKeyLookup:{},songIDLookup:{},isDeleted:false},playlistsLoaded:false,playlistIDs:[],getPlaylist:function(b, c, g, h) {
        var k = this.getOneFromCache(b);
        h = _.orEqual(h, false);
        if (k)a.isFunction(c) && c(k); else {
            h && a.publish("gs.page.loading.page");
            GS.service.getPlaylistByID(b, this.callback(["wrap",c]), g, {async:false})
        }
    },getOneSynchronous:function(b) {
        var c = this.getOneFromCache(b);
        if (c)return c; else {
            GS.service.getPlaylistByID(b, this.callback(this.wrap), null, {async:false});
            return this.getOneFromCache(b)
        }
    },getPlaylistsOrdered:function(b, c) {
        c = _.orEqual(c, false);
        b = _.orEqual(b, "PlaylistName");
        var g = [];
        a.each(c === false ? GS.user.playlists :
                GS.user.favorites.playlists, function(h, k) {
            k = GS.Models.Playlist.getOneFromCache(k.PlaylistID);
            if (c)k.TSAdded = k.TSFavorited;
            g.push(k)
        });
        g.sort(function(h, k) {
            var m,n;
            try {
                m = h[b].toString().toLowerCase();
                n = k[b].toString().toLowerCase()
            } catch(o) {
                console.warn("playlistOrdered error: " + o, b, h[b], k[b]);
                return 0
            }
            return m == n ? 0 : m > n ? 1 : -1
        });
        return g
    },getPlaylistsMenu:function(b, c, g, h, k) {
        b = a.makeArray(b);
        var m = "",n = "",o = null;
        if (k) {
            m = k.menuType;
            n = k.multiClick;
            o = k.gridController
        }
        var q = {};
        q = n ? GS.getGuts().extractMultiSongInfo(o,
                b) : GS.getGuts().extractSongItemInfo(o);
        g = _.orEqual(g, false);
        h = _.orEqual(h, true);
        var v;
        v = [];
        if (h) {
            v.push({title:a.localize.getString("CONTEXT_NEW_PLAYLIST"),customClass:"jj_menu_item_hasIcon jj_menu_item_new_playlist",action:{type:"fn",callback:function() {
                GS.getLightbox().open("newPlaylist", b);
                GS.getGuts().onContextMenuClick("contextNewPlaylist", m, n, q)
            }}});
            _.isEmpty(GS.user.playlists) || v.push({customClass:"separator"})
        }
        a.each(this.getPlaylistsOrdered("PlaylistName"), function(x, A) {
            v.push({title:A.PlaylistName,
                customClass:"jj_menu_item_hasIcon jj_menu_item_playlist",action:{type:"fn",callback:function() {
                    c(A);
                    GS.getGuts().onContextMenuClick("contextAddToExistingPlaylist", m, n, q, A.PlaylistID);
                    return true
                }}})
        });
        g && a.each(this.getPlaylistsOrdered("PlaylistName", true), function(x, A) {
            v.push({title:A.PlaylistName,customClass:"jj_menu_item_hasIcon jj_menu_item_playlist_subscribed",action:{type:"fn",callback:function() {
                c(A)
            }}})
        });
        return v
    },itemRenderer:function(b) {
        var c = "",g = "PLAYLIST_SUBSCRIBE";
        if (b.isFavorite) {
            c =
                    "subscribed";
            g = "PLAYLIST_UNSUBSCRIBE"
        }
        var h = ['<a href="',b.toUserUrl(),'">',b.UserName,"</a>"].join("");
        h = a("<span></span>").localeDataString("BY_ARTIST", {artist:h});
        var k = ['<span class="lineHeight"><a class="name ellipsis" href="',b.toUrl(),'">' + b.PlaylistName + "</a></span>"].join(""),m = ['<a href="',b.toUrl(),'"class="playlistImage insetBorder height70"><img width="70" height="70" src="',b.getImageURL(),'"/></a>'].join("");
        b = b.UserID === GS.user.UserID ? "" : ['<button class="btn button_style2 ',c,'" data-follow-userid="',
            b.UserID,'" ><div><span class="label" data-translate-text="',g,'">',a.localize.getString(g),"</span></div></button>"].join("");
        return[m,'<div class="meta">',k,'<span class="ellipsis by">',h.render(),"</span>",b,"</div>"].join("")
    },slideItemRenderer:function(b) {
        var c = "" + ('<a class="slideTitle ellipsis" href="' + b.toUrl() + '">' + b.PlaylistName + "</a>"),g = ['<img src="',b.getImageURL(200),'"/>'].join("");
        return['<div class="page_content_slide exploreSlide" data-dragtype="playlist" data-dragid="',b.PlaylistID,
            '"><a href="',b.toUrl(),'" class="slideImg">',g,'<span class="slide_playBtn" data-playlistid="',b.PlaylistID,'"></span></a>',c,"</div>"].join("")
    },prettySort:function(b, c) {
        return b.Picture || !c.Picture ? -1 : c.Picture ? 1 : 0
    },matchFilter:function(b) {
        var c = RegExp(b, "gi");
        return function(g) {
            return g.PlaylistName.match(c) || g.UserName.match(c)
        }
    }}, {init:function(b) {
        this._super(b);
        this.PlaylistName = _.defined(b.PlaylistName) ? _.cleanText(b.PlaylistName) : _.cleanText(b.Name);
        this.Description = _.orEqual(b.Description,
                b.About || "");
        this.Username = this.Username && this.Username.length ? this.Username : b.Username;
        this.UserName = _.cleanText(a.trim(this.FName + (this.LName && this.LName.length ? " " + this.LName : "")));
        this.fanbase = false;
        this.searchText = [this.PlaylistName,this.FName,this.Description].join(" ").toLowerCase();
        this.songs = [];
        this.albums = {};
        this.originalOrder = [];
        this.images = [];
        this.songsLoaded = _.orEqual(b.songsLoaded, false);
        this.hasUnsavedChanges = false;
        delete this.Name;
        delete this.About
    },getSongs:function(b, c, g) {
        var h =
                arguments[arguments.length - 1] === g ? {} : arguments[arguments.length - 1];
        g = _.orEqual(g, true);
        if (this.songsLoaded) {
            this._updateSongs();
            b(this.songs)
        } else {
            g && a.publish("gs.page.loading.grid");
            GS.service.playlistGetSongs(this.PlaylistID, this.callback(["wrapManySongs",b]), c, h)
        }
    },validate:function() {
        if (this.PlaylistID > 0)return true;
        return false
    },wrapManySongs:function(b) {
        var c = [];
        if (this.hasUnsavedChanges)c = this.songs;
        var g = b.Songs || b.songs || b.result || b;
        this.songs = [];
        this.gridKeyLookup = {};
        this.songIDLookup =
        {};
        var h;
        g.sort(function(k, m) {
            return parseFloat(k.Sort, 10) - parseFloat(m.Sort, 10)
        });
        for (h = 0; h < g.length; h++) {
            b = GS.Models.Song.wrap(g[h]).dupe();
            b.Sort = h;
            b.GridKey = this.gridKey;
            if (!this.albums[b.AlbumID]) {
                album = GS.Models.Album.wrap({AlbumName:b.AlbumName,AlbumID:b.AlbumID,ArtistName:b.ArtistName,ArtistID:b.ArtistID,CoverArtFilename:b.CoverArtFilename,IsVerified:b.IsVerified}, false);
                this.albums[b.AlbumID] = album
            }
            this.songs.push(b);
            this.gridKeyLookup[b.GridKey] = b;
            this.songIDLookup[b.SongID] = b;
            this.gridKey++
        }
        for (g =
                     0; g < c.length; g++) {
            b = c[g];
            b.Sort = g + h;
            b.GridKey = this.gridKey;
            c[g] = b;
            this.gridKeyLookup[b.GridKey] = b;
            this.songIDLookup[b.SongID] = b;
            this.gridKey++
        }
        this.originalOrder = this.songs.concat();
        this.songs = this.songs.concat(c);
        this.songsLoaded = true;
        a.publish("gs.playlist.songs.update", this);
        a.publish("gs.playlist.view.update", this);
        this.songs._use_call = true;
        return this.songs
    },_updateSongs:function() {
        var b,c,g = GS.Models.Song;
        for (b = 0; b < this.songs.length; b++) {
            c = g.getOneFromCache(this.songs[b].SongID);
            this.songs[b].isFavorite =
                    c.isFavorite;
            this.songs[b].fromLibrary = c.fromLibrary
        }
    },reapplySorts:function() {
        for (var b = 0; b < this.songs.length; b++)this.songs[b].Sort = b
    },play:function(b, c, g) {
        this.getSongs(this.callback("playSongs", {index:b,playOnAdd:c,shuffle:g}), null, false)
    },playSongs:function(b) {
        _.orEqual(b.index, -1);
        _.orEqual(b.playOnAdd, false);
        var c = _.orEqual(b.shuffle, false);
        _.orEqual(b.sort, false);
        var g = new GS.Models.PlayContext(GS.player.PLAY_CONTEXT_PLAYLIST, this),h = [];
        if (c) {
            var k = this.songs.shuffle();
            for (c = 0; c < k.length; c++)h.push(k[c].SongID)
        } else for (c =
                            0; c < this.songs.length; c++)h.push(this.songs[c].SongID);
        GS.player.addSongsToQueueAt(h, b.index, b.playOnAdd, g)
    },getImageURL:function(b) {
        b = _.orEqual(b, 200);
        var c = GS.Models.Playlist.artPath + b + "_playlist.png";
        if (this.Picture)c = GS.Models.Playlist.artPath + b + "_" + this.Picture;
        return c
    },getDefaultImageUrl:function(b) {
        return GS.Models.Playlist.artPath + b + "_playlist.png"
    },getPlaylistArt:function(b) {
        b = _.orEqual(b, 200);
        if (this.Picture)return[GS.Models.Playlist.artPath + b + "_" + this.Picture];
        var c = [],g = {},h = [];
        _.forEach(this.songs,
                function(m) {
                    if (m.CoverArtFilename)if (g.hasOwnProperty(m.AlbumID))g[m.AlbumID].weight++; else g[m.AlbumID] = {CoverArtFilename:m.CoverArtFilename,weight:1}
                });
        for (var k in g)g.hasOwnProperty(k) && h.push([k,g[k]]);
        h = h.sort(
                function(m, n) {
                    return n[1].weight - m[1].weight
                }).slice(0, 4);
        if (h.length >= 4)b = 90;
        for (k = 0; k < h.length && k < 4; ++k)c.push(GS.Models.Album.artPath + b + "_" + h[k][1].CoverArtFilename);
        return c.length ? c : [this.getDefaultImageUrl(b)]
    },_addSongAtEnd:function(b) {
        this.hasUnsavedChanges && this.addSongs([b],
                this.songs.length, true);
        if (GS.user.UserID != this.UserID)return false;
        if (!(b <= 0)) {
            GS.getGuts().logEvent("songAddedToPlaylist", {songID:b});
            if (this.songsLoaded) {
                var c;
                c = GS.Models.Song.getOneFromCache(b).dupe();
                c.GridKey = this.gridKey;
                this.gridKeyLookup[c.GridKey] = c;
                this.songIDLookup[c.SongID] = c;
                this.gridKey++;
                this.hasUnsavedChanges = true;
                GS.Controllers.PageController.ALLOW_LOAD = false;
                this.songs.push(c);
                this.reapplySorts();
                GS.user.isLoggedIn ? GS.service.playlistAddSongToExisting(this.PlaylistID, b, this.callback("saveSuccess"),
                        this.callback("saveFailed")) : this.saveSuccess();
                a.publish("gs.playlist.view.update", this)
            } else if (GS.user.isLoggedIn)GS.service.playlistAddSongToExisting(this.PlaylistID, b, this.callback("addSongSuccess"), this.callback("saveFailed")); else return false
        }
    },addSongs:function(b, c, g) {
        c = _.orEqual(c, this.songs.length);
        g = _.orEqual(g, false);
        if (this.songsLoaded && b.length + this.songs.length > 2500) {
            b = (new GS.Models.DataString(a.localize.getString("POPUP_FAIL_ADD_PLAYLIST_TOO_MANY_MSG"), {playlist:this.PlaylistName,
                numSongs:b.length})).render();
            a.publish("gs.notification", {type:"error",message:b})
        } else if (b.length == 1 && !this.hasUnsavedChanges && g && c == this.songs.length)this._addSongAtEnd(b[0]); else {
            if (GS.user.UserID != this.UserID)return false;
            for (var h,k = [],m = 0; m < b.length; m++)if (!(b[m] <= 0)) {
                h = GS.Models.Song.getOneFromCache(b[m]).dupe();
                h.GridKey = this.gridKey;
                this.gridKeyLookup[h.GridKey] = h;
                this.songIDLookup[h.SongID] = h;
                this.gridKey++;
                k.push(h);
                GS.getGuts().logEvent("songAddedToPlaylist", {songID:h.SongID})
            }
            this.hasUnsavedChanges =
                    true;
            GS.Controllers.PageController.ALLOW_LOAD = false;
            this.songs.splice.apply(this.songs, [c,0].concat(k));
            this.reapplySorts();
            g && this.save();
            a.publish("gs.playlist.view.update", this)
        }
    },removeSongs:function(b, c) {
        if (GS.user.UserID != this.UserID)return false;
        c = _.orEqual(c, false);
        this.hasUnsavedChanges = true;
        GS.Controllers.PageController.ALLOW_LOAD = false;
        for (var g,h = 0; h < b.length; h++)if (g = this.songs[b[h]])g.isDeleted = true;
        this.reapplySorts();
        c && this.save();
        a.publish("gs.playlist.view.update", this)
    },overwriteWithSongs:function(b, c) {
        if (GS.user.UserID != this.UserID)return false;
        c = _.orEqual(c, false);
        this.songs = [];
        for (var g = 0; g < b.length; g++)if (!(b[g] <= 0)) {
            song = GS.Models.Song.getOneFromCache(b[g]).dupe();
            song.GridKey = this.gridKey;
            this.gridKeyLookup[song.GridKey] = song;
            this.songIDLookup[song.SongID] = song;
            this.gridKey++;
            this.songs.push(song)
        }
        this.reapplySorts();
        this.hasUnsavedChanges = this.songsLoaded = true;
        GS.Controllers.PageController.ALLOW_LOAD = false;
        c && this.save();
        a.publish("gs.playlist.view.update", this)
    },moveSongsTo:function(b, c, g) {
        if (GS.user.UserID != this.UserID)return false;
        g = _.orEqual(g, false);
        this.hasUnsavedChanges = true;
        GS.Controllers.PageController.ALLOW_LOAD = false;
        var h,k = [];
        for (h = 0; h < b.length; h++)k.push(this.songs[b[h]]);
        for (h = 0; h < k.length; h++) {
            b = this.songs.indexOf(k[h]);
            this.songs.splice(b, 1);
            b < c && c--
        }
        this.songs.splice.apply(this.songs, [c,0].concat(k));
        this.reapplySorts();
        g && this.save();
        a.publish("gs.playlist.view.update", this)
    },save:function() {
        if (this.songsLoaded) {
            var b,c = [],g = [];
            for (b = 0; b < this.songs.length; b++)this.songs[b].isDeleted ?
                    GS.getGuts().logEvent("songRemovedFromPlaylist", {songID:this.songs[b].SongID}) : c.push(this.songs[b].SongID);
            for (b = 0; b < this.originalOrder.length; b++)g.push(this.originalOrder[b].SongID);
            if (c.join(".") == g.join(".")) {
                this.originalOrder = this.songs.concat();
                this.hasUnsavedChanges = false;
                GS.Controllers.PageController.ALLOW_LOAD = true;
                a.publish("gs.playlist.view.update", this)
            } else {
                GS.user.isLoggedIn ? GS.service.overwritePlaylist(this.PlaylistID, this.PlaylistName, c, this.callback("saveSuccess"), this.callback("saveFailed")) :
                        this.saveSuccess();
                GS.getGuts().gaTrackEvent("playlist", "savePlaylist")
            }
        } else this.getSongs(this.callback("save"), this.callback("saveFailed"), false)
    },saveSuccess:function() {
        for (var b = [],c = 0; c < this.songs.length; c++)this.songs[c].isDeleted || b.push(this.songs[c]);
        this.songsLoaded = true;
        this.songs = b;
        this.originalOrder = this.songs.concat();
        this.hasUnsavedChanges = false;
        GS.Controllers.PageController.ALLOW_LOAD = true;
        b = (new GS.Models.DataString(a.localize.getString("POPUP_SAVE_PLAYLIST_MSG"), {playlist:this.PlaylistName})).render();
        a.publish("gs.notification", {type:"notice",message:b});
        a.publish("gs.playlist.songs.update", this);
        a.publish("gs.playlist.view.update", this)
    },addSongSuccess:function() {
        var b = (new GS.Models.DataString(a.localize.getString("POPUP_SAVE_PLAYLIST_MSG"), {playlist:this.PlaylistName})).render();
        a.publish("gs.notification", {type:"notice",message:b});
        a.publish("gs.playlist.songs.update", this);
        a.publish("gs.playlist.view.update", this)
    },saveFailed:function() {
        a.publish("gs.notification", {type:"error",message:a.localize.getString("POPUP_FAIL_SAVE_PLAYLIST_MSG")})
    },
        remove:function(b) {
            GS.user.deletePlaylist(this.PlaylistID, b);
            GS.getGuts().logEvent("playlistDeleted", {playlistID:this.PlaylistID})
        },restore:function(b) {
            GS.user.restorePlaylist(this.PlaylistID, b)
        },undo:function() {
            this.songs = this.originalOrder.concat();
            for (var b = 0; b < this.songs.length; b++)this.songs[b].isDeleted = false;
            this.hasUnsavedChanges = false;
            GS.Controllers.PageController.ALLOW_LOAD = true;
            this.reapplySorts();
            a.publish("gs.playlist.songs.update", this);
            a.publish("gs.playlist.view.update", this)
        },rename:function(b, c, g) {
            GS.service.renamePlaylist(this.PlaylistID, b, this.callback([this._renameSuccess,c], b), this.callback([this._renameFailed,g]))
        },_renameSuccess:function(b, c) {
            this.PlaylistName = b;
            var g = this.Class.getOneFromCache(this.PlaylistID);
            if (g)g.PlaylistName = b;
            if (g = GS.user.playlists[this.PlaylistID])g.PlaylistName = b;
            a.publish("gs.playlist.view.update", this);
            a.publish("gs.auth.playlists.update", this);
            return c
        },_renameFailed:function(b) {
            return b
        },changeDescription:function(b, c, g) {
            GS.service.setPlaylistAbout(this.PlaylistID,
                    b, this.callback([this._changeDescSuccess,c], b), this.callback([this._changeDescFailed,g]))
        },_changeDescSuccess:function(b, c) {
            this.Description = b;
            var g = this.Class.getOneFromCache(this.PlaylistID);
            if (g)g.Description = b;
            if (g = GS.user.playlists[this.PlaylistID])g.Description = b;
            a.publish("gs.playlist.view.update", this);
            return c
        },_changeDescFailed:function(b) {
            return b
        },getDetailsForFeeds:function() {
            var b = {playlistID:this.PlaylistID,playlistName:this.PlaylistName,userID:this.UserID,displayName:this.FName + (this.LName &&
                    this.LName.length ? " " + this.LName : ""),artFilename:this.Picture};
            if (this.songs) {
                b.songs = [];
                for (var c = 0; c < b.songs; c++)b.songs.push(songs[c].getDetailsForFeeds())
            }
            return b
        },getTitle:function() {
            return['"',this.PlaylistName,'" by ',this.UserName].join("")
        },isSubscribed:function() {
            return GS.user.UserID != this.UserID && this.isFavorite || !_.isEmpty(GS.user.favorites.playlists[this.PlaylistID])
        },subscribe:function() {
            GS.user.addToPlaylistFavorites(this.PlaylistID)
        },unsubscribe:function() {
            GS.user.removeFromPlaylistFavorites(this.PlaylistID)
        },
        getContextMenu:function() {
            var b = new GS.Models.PlayContext(GS.player.PLAY_CONTEXT_PLAYLIST, this),c = [
                {title:a.localize.getString("CONTEXT_PLAY_PLAYLIST"),customClass:"last jj_menu_item_hasIcon jj_menu_item_play",action:{type:"fn",callback:this.callback(function() {
                    this.getSongs(function(g) {
                        var h = [];
                        a.each(g, function(k, m) {
                            h.push(m.SongID)
                        });
                        GS.player.addSongsToQueueAt(h, GS.player.INDEX_DEFAULT, true, b)
                    }, function() {
                    }, false)
                })}},
                {title:a.localize.getString("CONTEXT_PLAY_PLAYLIST_NEXT"),customClass:"last jj_menu_item_hasIcon jj_menu_item_play_next",
                    action:{type:"fn",callback:this.callback(function() {
                        this.getSongs(function(g) {
                            var h = [];
                            a.each(g, function(k, m) {
                                h.push(m.SongID)
                            });
                            GS.player.addSongsToQueueAt(h, GS.player.INDEX_NEXT, false, b)
                        }, function() {
                        }, false)
                    })}},
                {title:a.localize.getString("CONTEXT_PLAY_PLAYLIST_LAST"),customClass:"last jj_menu_item_hasIcon jj_menu_item_play_last",action:{type:"fn",callback:this.callback(function() {
                    this.getSongs(function(g) {
                        var h = [];
                        a.each(g, function(k, m) {
                            h.push(m.SongID)
                        });
                        GS.player.addSongsToQueueAt(h, GS.player.INDEX_LAST,
                                false, b)
                    }, function() {
                    }, false)
                })}},
                {customClass:"separator"}
            ];
            if (this.PlaylistID > 0)c = c.concat([
                {title:a.localize.getString("SHARE_PLAYLIST"),type:"sub",action:{type:"fn",callback:this.getClipboardAction([
                    {text:"http://grooveshark.com/" + this.toUrl().replace("#/", ""),selector:"div.playlistUrl"}
                ])},src:this.getShareMenu(),customClass:"jj_menu_item_hasIcon jj_menu_item_share jj_menu_item_more"},
                {customClass:"separator"}
            ]);
            c = c.concat([
                {title:a.localize.getString("CONTEXT_REPLACE_ALL_SONGS"),customClass:"last jj_menu_item_hasIcon jj_menu_item_now_playing",
                    action:{type:"fn",callback:this.callback(function() {
                        this.getSongs(function(g) {
                            var h = [],k = GS.player.isPlaying;
                            a.each(g, function(m, n) {
                                h.push(n.SongID)
                            });
                            GS.player.addSongsToQueueAt(h, GS.player.INDEX_REPLACE, k, b)
                        }, function() {
                        }, false)
                    })}},
                {customClass:"separator"}
            ]);
            GS.user.isShortcut("playlist", this.PlaylistID) ? c.push({title:a.localize.getString("CONTEXT_REMOVE_FROM_PINBOARD"),customClass:"last jj_menu_item_hasIcon jj_menu_item_remove_pinboard",action:{type:"fn",callback:this.callback(function() {
                GS.user.removeFromShortcuts("playlist",
                        this.PlaylistID)
            })}}) : c.push({title:a.localize.getString("CONTEXT_ADD_TO_PINBOARD"),customClass:"last jj_menu_item_hasIcon jj_menu_item_pinboard",action:{type:"fn",callback:this.callback(function() {
                GS.user.addToShortcuts("playlist", this.PlaylistID, this.PlaylistName)
            })}});
            return c
        },getShareMenu:function() {
            var b = [];
            GS.user.isLoggedIn && b.push({title:a.localize.getString("SHARE_EMAIL"),customClass:"jj_menu_item_hasIcon jj_menu_item_share_email",action:{type:"fn",callback:this.callback(function() {
                GS.getLightbox().open("share",
                        {service:"email",type:"playlist",id:this.PlaylistID})
            })}});
            return b = b.concat([
                {title:a.localize.getString("SHARE_FACEBOOK"),customClass:"jj_menu_item_hasIcon jj_menu_item_share_facebook",action:{type:"fn",callback:this.callback(function() {
                    GS.getLightbox().open("share", {service:"facebook",type:"playlist",id:this.PlaylistID})
                })}},
                {title:a.localize.getString("SHARE_TWITTER"),customClass:"jj_menu_item_hasIcon jj_menu_item_share_twitter",action:{type:"fn",callback:this.callback(function() {
                    GS.getLightbox().open("share",
                            {service:"twitter",type:"playlist",id:this.PlaylistID})
                })}},
                {title:a.localize.getString("SHARE_STUMBLE"),customClass:"jj_menu_item_hasIcon jj_menu_item_share_stumbleupon",action:{type:"fn",callback:this.callback(function() {
                    window.open(_.makeUrlForShare("stumbleupon", "playlist", this), "_blank");
                    a("div[id^=jjmenu]").remove()
                })}},
                {title:a.localize.getString("SHARE_REDDIT"),customClass:"jj_menu_item_hasIcon jj_menu_item_share jj_menu_item_share_reddit",action:{type:"fn",callback:this.callback(function() {
                    window.open(_.makeUrlForShare("reddit",
                            "playlist", this), "_blank");
                    a("div[id^=jjmenu]").remove()
                })}},
                {title:a.localize.getString("SHARE_WIDGET"),customClass:"jj_menu_item_hasIcon jj_menu_item_share_widget",action:{type:"fn",callback:this.callback(function() {
                    GS.getLightbox().open("share", {service:"widget",type:"playlist",id:this.PlaylistID})
                })}},
                {title:a.localize.getString("PLAYLIST_URL"),customClass:"playlistUrl jj_menu_item_hasIcon jj_menu_item_copy"}
            ])
        },toUrl:function(b) {
            return _.cleanUrl(this.PlaylistName, this.PlaylistID, "playlist",
                    null, b)
        },toUserUrl:function(b) {
            return _.cleanUrl(this.UserName, this.UserID, "user", null, b)
        },toProxyLabel:function() {
            return _.getString("SELECTION_PLAYLIST_SINGLE", {PlaylistName:_.cleanText(this.PlaylistName),Username:_.cleanText(this.UserName)})
        },toString:function(b) {
            return(b = _.orEqual(b, false)) ? ["Playlist. pid: ",this.PlaylistID,", pname:",this.PlaylistName,", uid:",this.UserID,", uname: ",this.UserName].join("") : _.getString("SELECTION_PLAYLIST_SINGLE", {PlaylistName:_.cleanText(this.PlaylistName),
                Username:_.cleanText(this.UserName)})
        }})
})(jQuery);
(function(a) {
    GS.Models.Base.extend("GS.Models.Explore", {cache:{},getType:function(b) {
        var c = this.getOneFromCache(b);
        if (!c) {
            c = this.wrap({type:b});
            this.cache[b] = c
        }
        return c
    },slideProxyRenderer:function(b, c, g) {
        if (b.PlaylistID)return GS.Models.Playlist.slideItemRenderer(b, c, g); else if (b.SongID)return GS.Models.Song.slideItemRenderer(b, c, g); else if (b.AlbumID)return GS.Models.Album.slideItemRenderer(b, c, g); else if (b.ArtistID)return GS.Models.Artist.slideItemRenderer(b, c, g); else console.warn("Wrong type of object for featured itemrenderers")
    },
        proxyRenderer:function(b, c, g) {
            if (b.PlaylistID)return GS.Models.Playlist.exploreItemRenderer(b, c, g); else if (b.SongID)return GS.Models.Song.exploreItemRenderer(b, c, g); else if (b.AlbumID)return GS.Models.Album.exploreItemRenderer(b, c, g); else if (b.ArtistID)return GS.Models.Artist.exploreItemRenderer(b, c, g); else console.warn("Wrong type of object for featured itemrenderers")
        }}, {type:null,songsLoaded:false,featuredData:null,init:function(b) {
        this._super(b);
        this.songsLoaded = false;
        this.songs = []
    },getFeaturedData:function(b, c, g) {
        _.orEqual(g, false);
        this.featureData ? b(this.featuredData) : GS.service.featuredGetCurrentFeatured(null, this.callback(["wrapFeatured",b]), c)
    },wrapFeatured:function(b) {
        this.featuredData = b;
        i = 0;
        for (l = this.featuredData.Contents.length; i < l; i++) {
            j = 0;
            for (l2 = this.featuredData.Contents[i].items.length; j < l2; j++)if (this.featuredData.Contents[i].items[j].PlaylistID)this.featuredData.Contents[i].items[j] = GS.Models.Playlist.wrap(this.featuredData.Contents[i].items[j], false); else if (this.featuredData.Contents[i].items[j].SongID)this.featuredData.Contents[i].items[j] =
                    GS.Models.Song.wrap(this.featuredData.Contents[i].items[j], false); else if (this.featuredData.Contents[i].items[j].AlbumID)this.featuredData.Contents[i].items[j] = GS.Models.Album.wrap(this.featuredData.Contents[i].items[j], false); else if (this.featuredData.Contents[i].items[j].ArtistID)this.featuredData.Contents[i].items[j] = GS.Models.Artist.wrap(this.featuredData.Contents[i].items[j], false)
        }
    },getPopularSongs:function(b, c, g) {
        g = _.orEqual(g, false);
        if (this.songsLoaded) {
            this.songs = this.wrapSongCollection(this.songs,
                    {Popularity:0,Weight:"",NumPlays:""});
            b(this.songs)
        } else {
            g && a.publish("gs.page.loading.grid");
            GS.service.popularGetSongs(this.type, this.callback(["wrapManySongs",b]), c)
        }
    },wrapManySongs:function(b) {
        b.Songs && b.Songs.reverse();
        return this.wrapSongCollection(b, {USE_INDEX:"Popularity",Weight:"",NumPlays:""})
    }})
})(jQuery);
(function(a) {
    GS.Models.Base.extend("GS.Models.User", {id:"UserID",cache:{},usersLoaded:false,userIDs:[],artPath:"http://images.grooveshark.com/static/users/",defaults:{UserID:0,Username:"",Name:"",FName:"",LName:"",Picture:"",IsPremium:0,SignupDate:null,Location:"",Sex:"",FollowingFlags:0,Flags:0,PathName:null,PathNameEmpty:false,isFavorite:0,library:{},favorites:{songs:{},albums:{},artists:{},playlists:{},users:{}},fanbase:null,playlists:{},profileFeed:{},communityFeed:{},mentionsFeed:{}},getUser:function(b, c, g, h) {
        var k = this.getOneFromCache(b);
        h = _.orEqual(h, false);
        if (k)c(k); else {
            h && a.publish("gs.page.loading.page");
            GS.service.getUserByID(b, this.callback(["wrapProxy",c]), g)
        }
    },itemRenderer:function(b) {
        var c = GS.user.favorites.users && GS.user.favorites.users[b.UserID] ? " following" : "",g = GS.user.favorites.users && GS.user.favorites.users[b.UserID] ? "FOLLOWING" : "FOLLOW",h = "" + ('<a class="name ellipsis capitalize" href="' + _.cleanUrl(b.UserID, b.Name, "user") + '">' + b.Name + "</a>"),k = b.City && b.State && b.Country ? b.Location :
                b.Country ? b.Country : "";
        k = ['<span class="location ellipsis',k.length ? "" : " emphasis",'">',k.length ? k : a.localize.getString("USER_NO_LOCATION"),"</span>"].join("");
        var m = b.getImageURL(70);
        m = ['<img src="',m,'"/>'].join("");
        c = b.UserID === GS.user.UserID ? "" : ['<button class="follow btn button_style2 ',c,'" data-follow-userid="',b.UserID,'" ><div><span class="icon"></span><span class="label" data-translate-text="',g,'">',a.localize.getString(g),"</span></div></button>"].join("");
        return['<a href="',_.cleanUrl(b.UserID,
                b.Name, "user"),'" class="userImage insetBorder height70"><div class="status ',b.getVipPackage(),'"></div>',m,'</a><div class="meta">',h,k,c,"</div>"].join("")
    },sliderRenderer:function(b) {
        var c = '<div class="page_content_slide subcontent-item fans"><a href="' + b.toUrl() + '" class="image"><img src="' + b.getImageURL() + '"></a><a class="title" href="' + b.toUrl() + '">' + (b.FName || b.Name) + '</a><span class="duration">';
        b = b.getAccountDuration();
        c += a("<span></span>").localeDataString(b.key, b).render();
        c += "</span></div>";
        return c
    },matchFilter:function(b) {
        var c = RegExp(b, "gi");
        return function(g) {
            return g.Name.match(c)
        }
    },wrapProxy:function(b) {
        return this.wrap(b.User || b)
    },FLAG_PLUS:1,FLAG_LASTFM:2,FLAG_FACEBOOK:4,FLAG_FACEBOOKUSER:16,FLAG_GOOGLEUSER:32,FLAG_GOOGLE:64,FLAG_ANYWHERE:128,FLAG_ISARTIST:256,FLAG_MUSIC_BUSINESS:1024}, {validate:function() {
        if (this.UserID > 0)return true;
        return false
    },init:function(b) {
        this._super(b);
        var c = _.orEqual(this.City, "");
        c += this.State && c.length ? ", " + this.State : _.orEqual(this.State, "");
        c +=
                this.Country && c.length ? ", " + this.Country : _.orEqual(this.Country, "");
        this.Name = _.defined(this.displayName) ? this.displayName : _.cleanText(this.FName) + (this.LName && this.LName.length ? " " + _.cleanText(this.LName) : "");
        this.Username = this.UserID > 0 ? this.Username && this.Username.length ? this.Username : this.Name : "New User";
        this.Location = c;
        this.IsPremium = this.IsPremium == 1 ? 1 : 0;
        this.library = this.isAuth ? {} : false;
        this.communityFeed = this.profileFeed = this.fanbase = false;
        this.mentionsFeed = GS.Models.MentionsFeed.wrap({user:this});
        this.searchText = [this.Locale,this.FName,this.LName].join(" ").toLowerCase();
        this.playlists = {};
        this.favorites = {songs:{},albums:{},artists:{},playlists:{},users:{}};
        this.TSAdded = _.orEqual(b.TSAdded, false)
    },autocompleteFavoriteUsers:function() {
        var b = [];
        a.each(this.favorites.users, function(c, g) {
            a.each(g.searchText.trim().split(), function(h, k) {
                b.push([k.trim(),g.UserID])
            })
        });
        return b
    },getFavoritesByType:function(b, c, g) {
        var h = arguments[arguments.length - 1] === g ? {} : arguments[arguments.length - 1],k = b.toLowerCase();
        if (_.isEmpty(this.favorites[k]))GS.service.getFavorites(this.UserID, b, !this.isAuth, this.callback(["load" + b + "Favorites",c]), g, h); else {
            h = this.favorites[k];
            this.favorites[k] = GS.Models[b.substring(0, b.length - 1)].wrapCollectionInObject(h, {TSFavorited:"",TSAdded:""});
            c(this.favorites[k])
        }
    },loadAlbumsFavorites:function(b) {
        var c = {};
        for (var g in b)if (b.hasOwnProperty(g)) {
            b[g].TSAdded = b[g].TSFavorited;
            c[b[g].AlbumID] = b[g];
            if (this.isAuth)b[g].isFavorite = 1
        }
        this.favorites.albums = GS.Models.Album.wrapCollectionInObject(c,
                {TSFavorited:"",TSAdded:""});
        return this.favorites.albums
    },loadArtistsFavorites:function(b) {
        var c = {};
        for (var g in b)if (b.hasOwnProperty(g)) {
            b[g].TSAdded = b[g].TSFavorited;
            c[b[g].ArtistID] = b[g];
            if (this.isAuth)b[g].isFavorite = 1
        }
        this.favorites.artists = GS.Models.Artist.wrapCollectionInObject(c, {TSFavorited:"",TSAdded:""});
        return this.favorites.artists
    },loadPlaylistsFavorites:function(b) {
        var c = {};
        for (var g in b)if (b.hasOwnProperty(g)) {
            b[g].TSAdded = b[g].TSFavorited;
            c[b[g].PlaylistID] = b[g];
            if (this.isAuth)b[g].isFavorite =
                    1
        }
        this.favorites.playlists = GS.Models.Playlist.wrapCollectionInObject(c, {TSFavorited:"",TSAdded:""});
        return this.favorites.playlists
    },loadSongsFavorites:function(b) {
        var c = {};
        for (var g in b)if (b.hasOwnProperty(g)) {
            b[g].TSAdded = b[g].TSFavorited;
            c[b[g].SongID] = b[g]
        }
        this.favorites.songs = GS.Models.Song.wrapCollectionInObject(c, {TSFavorited:"",TSAdded:""});
        if (!this.library)this.library = GS.Models.Library.wrap({userID:this.UserID});
        for (g in this.favorites.songs)if (this.favorites.songs.hasOwnProperty(g)) {
            b =
                    this.favorites.songs[g];
            if (this.isAuth) {
                b.isFavorite = 1;
                b.fromLibrary = 1
            }
            this.library.songs[b.SongID] = b.dupe()
        }
        return this.favorites.songs
    },loadUsersFavorites:function(b) {
        var c = {};
        for (var g in b)if (b.hasOwnProperty(g)) {
            b[g].FollowingFlags = parseInt(b[g].FollowingFlags, 10);
            c[b[g].UserID] = b[g];
            if (this.isAuth)b[g].isFavorite = 1
        }
        this.favorites.users = GS.Models.User.wrapCollectionInObject(c, {TSFavorited:"",TSAdded:"",FollowingFlags:0});
        return this.favorites.users
    },getPlaylists:function(b, c) {
        if (_.isEmpty(this.playlists))GS.service.userGetPlaylists(this.UserID,
                !this.isAuth, this.callback(["cachePlaylists",b]), c); else a.isFunction(b) && b()
    },cachePlaylists:function(b) {
        var c = {};
        b = b.Playlists;
        for (var g in b)if (b.hasOwnProperty(g)) {
            b[g].UserName = this.Name;
            b[g].FName = this.FName;
            b[g].LName = this.LName;
            b[g].UserID = this.UserID;
            c[b[g].PlaylistID] = b[g]
        }
        g = this.playlists;
        this.playlists = GS.Models.Playlist.wrapCollectionInObject(c);
        if (this.isAuth) {
            _.forEach(g, function(h) {
                _.defined(this.playlists[h.PlaylistID]) || (this.playlists[h.PlaylistID] = h)
            }, this);
            a.publish("gs.auth.playlists.update")
        }
    },
        getProfileFeed:function(b, c) {
            if (!this.profileFeed)this.profileFeed = GS.Models.ProfileFeed.wrap({user:this});
            this.profileFeed.getFeed(this.callback(b), c)
        },getCommunityExceptions:function() {
            return this.isAuth ? this.filterFriends(1) : this.favorites.users
        },getCommunityFeed:function(b, c) {
            var g = [];
            if (!this.communityFeed)this.communityFeed = GS.Models.CommunityFeed.wrap({user:user});
            if (this.isAuth)g = _.toArrayID(this.getCommunityExceptions());
            if (this.UserID > 0) {
                this.communityFeed.userIDs = g;
                this.communityFeed.getFeed(this.callback(b),
                        c)
            }
        },playUserRadio:function() {
        },filterFriends:function(b, c) {
            var g = {};
            if (c)for (var h in this.favorites.users)this.favorites.users[h].FollowingFlags & b || (g[h] = this.favorites.users[h]); else for (h in this.favorites.users)if (this.favorites.users[h].FollowingFlags & b)g[h] = this.favorites.users[h];
            return g
        },getRecentlyActiveUsersFeed:function(b, c) {
            this.recentActiveUsersFeed.getFeed(this.callback(b), c)
        },getVipPackage:function() {
            var b = "";
            if (this.Flags & GS.Models.User.FLAG_ANYWHERE)b = "anywhere"; else if (this.Flags &
                    GS.Models.User.FLAG_PLUS)b = "plus";
            return b
        },getAccountDuration:function() {
            var b = {};
            if (this.TSAdded) {
                var c = this.TSAdded.split(" ");
                if (c) {
                    c = c[0].split("-");
                    var g = new Date;
                    b = parseInt(g.getFullYear() - parseInt(c[0]));
                    c = parseInt(g.getMonth() - parseInt(c[1]) + 1);
                    if (c < 0) {
                        b--;
                        c = 12 + parseInt(c)
                    }
                    b = {months:c,years:b};
                    b.key = b.years > 0 ? b.years == 1 ? "USER_MEMBER_FOR_YEAR" : "USER_MEMBER_FOR_YEARS" : b.months < 1 ? "USER_MEMBER_LESS_THAN_MONTH" : b.months == 1 ? "USER_MEMBER_FOR_MONTH" : "USER_MEMBER_FOR_MONTHS"
                }
            }
            return b
        },toUrl:function(b) {
            return this.PathName ?
                    _.makeUrlFromPathName(this.PathName, b) : _.cleanUrl(this.UserID ? this.Name : "New User", this.UserID, "user", null, b)
        },getPathName:function(b) {
            if (this.PathName || this.PathNameEmpty)a.isFunction(b) && b(this.PathName); else this.UserID > 0 && GS.service.getPageNameByIDType(this.UserID, "user", this.callback(this._onPathNameSuccess, b), this.callback(this._onPathNameFailed, b))
        },_onPathNameSuccess:function(b, c) {
            if (c.name)this.PathName = c.name; else {
                this.PathName = "";
                this.PathNameEmpty = true
            }
            a.isFunction(b) && b(this.PathName)
        },
        _onPathNameFailed:function(b) {
            this.PathName = "";
            this.PathNameEmpty = true;
            a.isFunction(b) && b(this.PathName)
        },getImageURL:function(b) {
            b = _.orEqual(b, 70);
            var c = GS.Models.User.artPath + b + "_user.png";
            if (this.Picture)c = GS.Models.User.artPath + b + "_" + this.Picture;
            return c
        },getDetailsForFeeds:function() {
            return{userID:this.UserID,userName:this.Name,isPremium:this.IsPremium,location:this.location,picture:this.Picture}
        },getTitle:function() {
            return this.Name
        },toString:function(b) {
            return(b = _.orEqual(b, false)) ? ["User. uid: ",
                this.UserID,", uname:",this.Name].join("") : _.cleanText(this.Name)
        }})
})(jQuery);
(function(a) {
    GS.Models.Base.extend("GS.Models.Library", {}, {currentPage:0,userID:null,lastModified:0,songsLoaded:false,init:function(b) {
        this._super(b);
        this.songsLoaded = false
    },getSongs:function(b, c, g) {
        g = _.orEqual(g, true);
        if (this.songsLoaded) {
            this.songs = this.wrapSongCollection(this.songs, {TSAdded:"",TSFavorited:""});
            b(this.songs)
        } else {
            g && this.currentPage === 0 && a.publish("gs.page.loading.grid");
            GS.service.userGetSongsInLibrary(this.userID, this.currentPage, !(GS.user && GS.user.UserID === this.userID), this.callback(["saveLastModified",
                "loadSongs",b]), c)
        }
    },reloadLibrary:function(b, c, g) {
        this.songsLoaded = false;
        this.lastModified = this.currentPage = 0;
        this.songs = {};
        this.getSongs(b, c, g)
    },loadSongs:function(b) {
        return this.wrapSongCollection(b, {TSAdded:"",TSFavorited:"",fromLibrary:GS.user.UserID == this.userID ? 1 : 0})
    },saveLastModified:function(b) {
        this.lastModified = b.TSModified;
        return b
    },refreshLibrary:function(b) {
        b.TSModified > this.lastModified && this.reloadLibrary(null, null, false)
    }})
})(jQuery);
(function(a) {
    GS.Models.Base.extend("GS.Models.Station", {id:"StationID",TAG_STATIONS:[
        {StationID:136,StationTitle:"STATION_INDIE",TagID:136},
        {StationID:67,StationTitle:"STATION_ELECTRONICA",TagID:67},
        {StationID:750,StationTitle:"STATION_CLASSICAL",TagID:750},
        {StationID:56,StationTitle:"STATION_POP",TagID:56},
        {StationID:3,StationTitle:"STATION_RAP",TagID:3},
        {StationID:80,StationTitle:"STATION_COUNTRY",TagID:80},
        {StationID:13,StationTitle:"STATION_ALTERNATIVE",TagID:13},
        {StationID:29,StationTitle:"STATION_HIP_HOP",
            TagID:29},
        {StationID:3529,StationTitle:"STATION_CLASSIC_ROCK",TagID:3529},
        {StationID:75,StationTitle:"STATION_AMBIENT",TagID:75},
        {StationID:111,StationTitle:"STATION_PUNK",TagID:111},
        {StationID:9,StationTitle:"STATION_90S_ALT_ROCK",TagID:9},
        {StationID:230,StationTitle:"STATION_BLUES",TagID:230},
        {StationID:12,StationTitle:"STATION_ROCK",TagID:12},
        {StationID:43,StationTitle:"STATION_JAZZ",TagID:43},
        {StationID:4,StationTitle:"STATION_RNB",TagID:4},
        {StationID:122,StationTitle:"STATION_FOLK",TagID:122},
        {StationID:2563,StationTitle:"STATION_DUBSTEP",TagID:2563},
        {StationID:55,StationTitle:"STATION_80s",TagID:55},
        {StationID:69,StationTitle:"STATION_TRANCE",TagID:69},
        {StationID:96,StationTitle:"STATION_BLUEGRASS",TagID:96},
        {StationID:160,StationTitle:"STATION_REGGAE",TagID:160},
        {StationID:17,StationTitle:"STATION_METAL",TagID:17},
        {StationID:102,StationTitle:"STATION_OLDIES",TagID:102},
        {StationID:191,StationTitle:"STATION_EXPERIMENTAL",TagID:191},
        {StationID:528,StationTitle:"STATION_LATIN",TagID:528}
    ],
        tagStations:[],extraStations:{},stationsByName:{},getStationsStartMenu:function() {
            for (var b = [],c,g = function(k) {
                return function() {
                    GS.player.setAutoplay(true, k)
                }
            },h = 0; h < GS.Models.Station.tagStations.length; h++) {
                c = GS.Models.Station.tagStations[h];
                b.push({title:a.localize.getString(c.StationTitle),customClass:"jj_menu_item_hasIcon jj_menu_item_station",action:{type:"fn",callback:g(c.TagID)}})
            }
            b.sort(function(k, m) {
                var n = k.title.toLowerCase(),o = m.title.toLowerCase();
                return n == o ? 0 : n > o ? 1 : -1
            });
            return b
        },getStationsStartMenuForPinboard:function() {
            for (var b =
                    [],c,g = function(k) {
                return function() {
                    GS.user.addToShortcuts("station", k, true)
                }
            },h = 0; h < GS.Models.Station.tagStations.length; h++) {
                c = GS.Models.Station.tagStations[h];
                GS.user.isShortcut("station", c.TagID) || b.push({title:a.localize.getString(c.StationTitle),customClass:"jj_menu_item_hasIcon jj_menu_item_station",action:{type:"fn",callback:g(c.TagID)}})
            }
            b.sort(function(k, m) {
                var n = k.title.toLowerCase(),o = m.title.toLowerCase();
                return n == o ? 0 : n > o ? 1 : -1
            });
            return b
        },getStationByName:function(b) {
            if (a.localize.ready &&
                    GS.getLocale && GS.Models.Station.stationsByName.locale != GS.getLocale().locale) {
                GS.Models.Station.stationsByName = {};
                _.forEach(GS.Models.Station.TAG_STATIONS, function(c) {
                    var g = a.localize.getString(c.StationTitle).toLowerCase();
                    GS.Models.Station.stationsByName[g] = c
                }, this);
                GS.Models.Station.stationsByName.locale = GS.getLocale().locale
            }
            if (GS.Models.Station.stationsByName[b])return GS.Models.Station.stationsByName[b];
            return false
        },FeedStation:null,lastHeardFeedEvent:0,init:function() {
            a.subscribe("gs.player.nowplaying",
                    this.callback("onSongPlay"));
            a.subscribe("gs.app.ready", this.callback(function() {
                _.forEach(GS.Models.Station.TAG_STATIONS, function(b) {
                    GS.Models.Station.tagStations.push(GS.Models.Station.wrap(b))
                }, this)
            }))
        },setFeedStation:function(b) {
            if (b && this.Station !== b) {
                this.lastHeardFeedEvent = 0;
                b.playSongs(-1, true)
            }
            GS.Models.Station.FeedStation = b
        },onSongPlay:function() {
            if (this.Station) {
                GS.Models.Feed.Station.play(-1, false, GS.Models.Feed.lastHeardFeedEvent);
                GS.Models.Feed.lastHeardFeedEvent = GS.Models.Feed.Station.newestTime
            }
        },
        itemRenderer:function(b, c) {
            return c = ['<a class="name ellipsis" href="#/station/-/',b,'">',c,"</a>"].join("")
        }}, {StationID:0,TagID:0,StationTitle:"",StationName:"",Artists:[],init:function(b) {
        this._super(b);
        this.StationName = a.localize.getString(b.StationTitle);
        if (!this.StationName)this.StationName = this.StationTitle
    },toProxyLabel:function() {
        return _.cleanText(a.localize.getString(this.StationTitle))
    },getContextMenu:function() {
        var b = [];
        b.push({title:a.localize.getString("CONTEXT_START_STATION"),customClass:"jj_menu_item_hasIcon jj_menu_item_station",
            action:{type:"fn",callback:this.callback(function() {
                GS.player.setAutoplay(true, this.TagID)
            })}});
        b.push({title:a.localize.getString("CONTEXT_ADD_TO_PINBOARD"),customClass:"jj_menu_item_hasIcon jj_menu_item_pinboard",action:{type:"fn",callback:this.callback(function() {
            GS.user.addToShortcuts("station", this.StationID, true)
        })}});
        return b
    }})
})(jQuery);
(function(a) {
    a.Model.extend("GS.Models.PlayContext", {}, {type:null,data:null,init:function(b, c) {
        this.type = _.orEqual(b, "unknown");
        this.data = _.orEqual(c, {});
        var g;
        if (this.type === "album" && this.data.hasOwnProperty("CoverArtFilename"))g = this.data.CoverArtFilename;
        if (a.isFunction(this.data.getDetailsForFeeds))this.data = this.data.getDetailsForFeeds();
        if (g)this.data.CoverArtFilename = g
    }})
})(jQuery);
(function(a) {
    a.fn.dataString = function() {
        if (arguments.length === 0)return _.orEqual(this.data("DataString"), null);
        var b = new GS.Models.DataString(arguments[0], arguments[1]);
        b.hookup(this);
        return b
    };
    a.fn.localeDataString = function(b, c, g) {
        b = _.orEqual(b, "");
        c = _.orEqual(c, {});
        g = _.orEqual(g, false);
        var h = a(this).dataString();
        if (!h) {
            h = new GS.Models.DataString;
            h.hookup(this)
        }
        h.string = a.localize.getString(b);
        h.data = c;
        g ? a(this).attr("data-translate-title", b).attr("title", h.render()) : a(this).attr("data-translate-text",
                b).html(h.render());
        return h
    };
    a.Model.extend("GS.Models.DataString", {}, {string:null,data:null,element:null,init:function(b, c) {
        this.string = _.orEqual(b, "");
        this.data = _.orEqual(c, {})
    },setString:function(b) {
        if (this.string !== b) {
            this.string = b;
            this.render()
        }
    },setData:function(b, c) {
        if (this.data[b] !== c) {
            this.data[b] = c;
            this.render()
        }
    },hookup:function(b) {
        this.element = a(b);
        this.element.data("DataString", this)
    },render:function() {
        for (var b = this.string,c = [],g,h = /^[^\{]+/,k = /^\{(.*?)\}/,m = this.data; b;) {
            if (g = h.exec(b))c.push(g[0]);
            else if (g = k.exec(b)) {
                var n = g[1];
                m[n] ? c.push(m[n]) : c.push(g[0])
            } else throw"Error rendering data object";
            b = b.substring(g[0].length)
        }
        b = c.join("");
        if (this.element && this.element.length)this.element[0].tagName == "INPUT" ? this.element.val(b) : this.element.html(b);
        return b
    }})
})(jQuery);
(function(a) {
    GS.Models.User.extend("GS.Models.AuthUser", {id:"AuthUserID",cache:{},loggedOutPlaylistCount:0,wrap:function(b) {
        return this._super(b, false)
    },wrapFromService:function(b) {
        return this.wrap(a.extend({}, b, {Email:b.Email || b.email,Sex:b.Sex || b.sex,UserID:b.UserID || b.userID,IsPremium:b.IsPremium || b.isPremium,FName:b.FName || b.fName,LName:b.LName || b.lName,TSDOB:b.TSDOB || b.tsDOB,Flags:b.Flags || b.flags,Username:b.Username || b.username,Privacy:_.orEqualEx(b.Privacy, b.privacy, 0)}))
    },getPricing:function() {
        var b =
                Math.floor((new Date).getTime() / 1E3),c = {vip:{month:3,year:30},plus:{month:6,year:60},anywhere:{month:9,year:90}};
        if (b >= 1322697600 && b < 1325376E3) {
            c.plus = {month:3,year:30};
            c.anywhere = {month:5,year:50}
        }
        return c
    }}, {authRealm:1,authToken:"",autoAutoplay:false,badAuthToken:false,favoritesLimit:500,librarySizeLimit:5E3,themeID:"",uploadsEnabled:0,UserID:-1,Username:"",Email:"",City:"",Country:"",State:"",TSDOB:"",Privacy:0,Flags:0,Points:0,settings:null,isLoggedIn:false,isAuth:true,artistsPlayed:[],defaultStations:["750",
        "12","136","3","56","67"],defaultFromService:null,searchVersion:"",promotions:{},userFavoritesLoaded:false,userTrackingID:0,init:function(b) {
        this._super(b);
        this.defaultFromService = {};
        this.refreshLibraryStatic = this.callback(this.refreshLibrary);
        this.library.songs = {};
        this.playlists = {};
        this.favorites = {songs:{},albums:{},artists:{},playlists:{},users:{}};
        this.sidebarLoaded = false;
        this.sidebar = {playlists:[],stations:[],subscribedPlaylists:[],songs:[],artists:[],albums:[],meta:{playlists:{},stations:{},
            subscribedPlaylists:{},songs:{},artists:{},albums:{}}};
        this.settings = GS.Models.UserSettings.wrap({UserID:this.UserID});
        this._pointsDirty = true;
        this.Points = 0;
        if (this.UserID > 0) {
            this.isLoggedIn = true;
            this.getPlaylists();
            this.getFavorites();
            this.getSidebar();
            this.getLibrary()
        } else {
            this.isDirty = this.isLoggedIn = false;
            this.sidebarLoaded = true;
            this.sidebar.stations = this.defaultStations.concat()
        }
        this.artistsPlayed = GS.store.get("artistsPlayed" + this.UserID) || [];
        a.subscribe("gs.player.nowplaying", this.callback(this.onSongPlay));
        setTimeout(function() {
            a.publish("gs.auth.stations.update")
        }, 10);
        this.checkVipExpiring();
        this.searchVersion = ""
    },uploadComplete:function() {
        var b = this.toUrl("music").substring(1);
        this.library.reloadLibrary(function() {
            location.hash = b
        })
    },onSongPlay:function(b) {
        if (this === GS.user)if (b && b.ArtistID) {
            var c = this.artistsPlayed.indexOf(b.ArtistID);
            c != -1 && this.artistsPlayed.splice(c, 1);
            this.artistsPlayed.unshift(b.ArtistID);
            this.artistsPlayed.splice(999, 1)
        }
    },storeData:function() {
        var b;
        if (_.isEmpty(this.library.songs))b =
                null; else {
            b = {currentPage:this.library.currentPage,songsLoaded:this.library.songsLoaded,userID:this.library.userID,lastModified:this.library.lastModified,songs:{}};
            for (var c in this.library.songs)if (this.library.songs.hasOwnProperty(c))b.songs[c] = GS.Models.Song.archive(this.library.songs[c])
        }
        this.settings.changeLocalSettings({});
        GS.store.set("artistsPlayed" + this.UserID, this.artistsPlayed);
        GS.store.set("library" + this.UserID, b)
    },clearData:function() {
        GS.store.remove("library" + this.UserID)
    },createPlaylist:function(b, c, g, h, k, m) {
        m = _.orEqual(m, true);
        c = _.orEqual(c, []);
        if (this.isLoggedIn)GS.service.createPlaylist(b, c, g, this.callback(["createPlaylistSuccess"], {callback:h,name:b,songIDs:c,description:g,notify:m}), k); else {
            GS.Models.AuthUser.loggedOutPlaylistCount++;
            g = GS.Models.Playlist.wrap({PlaylistID:-GS.Models.AuthUser.loggedOutPlaylistCount,PlaylistName:b,UserName:this.Name,UserID:this.UserID,songsLoaded:true,TSAdded:(new Date).format("Y-m-d G:i:s"),Description:g});
            g.addSongs(c, 0, true);
            this.playlists[g.PlaylistID] =
                    g;
            this.isDirty = true;
            a.publish("gs.auth.playlists.update");
            a.publish("gs.auth.playlists.add", g);
            m && a.publish("gs.notification.playlist.create", g);
            h(g)
        }
        GS.getGuts().logEvent("playlistCreated", {playlistName:b});
        GS.getGuts().gaTrackEvent("user", "newPlaylist")
    },createPlaylistSuccess:function(b, c) {
        var g = GS.Models.Playlist.wrap({PlaylistID:c,PlaylistName:b.name,Description:b.description,UserID:this.UserID,UserName:this.Name,FName:this.Name,TSAdded:(new Date).format("Y-m-d G:i:s"),NumSongs:b.songIDs.length});
        this.playlists[g.PlaylistID] = g;
        a.publish("gs.auth.playlists.update");
        b.notify && a.publish("gs.notification.playlist.create", g);
        b.callback(g)
    },deletePlaylist:function(b, c) {
        var g = GS.Models.Playlist.getOneFromCache(b);
        if (g && g.UserID === this.UserID) {
            c = _.orEqual(c, true);
            if (this.isLoggedIn)GS.service.deletePlaylist(g.PlaylistID, g.PlaylistName, this.callback(function() {
                g.isDeleted = true;
                this.removeFromShortcuts("playlist", g.PlaylistID, false);
                delete this.playlists[g.PlaylistID];
                a.publish("gs.playlist.view.update",
                        g);
                a.publish("gs.auth.playlists.update");
                a.publish("gs.user.playlist.remove");
                if (c) {
                    var h = (new GS.Models.DataString(a.localize.getString("POPUP_DELETE_PLAYLIST_MSG"), {playlist:g.PlaylistName})).render();
                    a.publish("gs.notification", {type:"notice",message:h})
                }
            }), this.callback(function() {
                g.isDeleted = false;
                if (c) {
                    var h = (new GS.Models.DataString(a.localize.getString("POPUP_FAIL_DELETE_PLAYLIST_MSG"), {playlist:g.PlaylistName})).render();
                    a.publish("gs.notification", {type:"error",message:h})
                }
            })); else {
                g.isDeleted =
                        true;
                this.removeFromShortcuts("playlist", g.PlaylistID, false);
                delete this.playlists[g.PlaylistID];
                a.publish("gs.playlist.view.update", g);
                a.publish("gs.auth.playlists.update");
                a.publish("gs.user.playlist.remove");
                c && a.publish("gs.notification", {type:"notice",message:a.localize.getString("NOTIFICATION_PLAYLIST_DELETED")})
            }
        }
        GS.getGuts().gaTrackEvent("user", "deletePlaylist")
    },restorePlaylist:function(b, c) {
        var g = GS.Models.Playlist.getOneFromCache(b);
        if (g && g.UserID === this.UserID) {
            c = _.orEqual(c, true);
            if (this.isLoggedIn)GS.service.playlistUndelete(g.PlaylistID,
                    this.callback(function() {
                        g.isDeleted = false;
                        this.playlists[g.PlaylistID] = g;
                        a.publish("gs.playlist.view.update", g);
                        c && a.publish("gs.notification", {type:"notice",message:a.localize.getString("NOTIFICATION_PLAYLIST_RESTORED")})
                    }), function() {
                        c && a.publish("gs.notification", {type:"error",message:a.localize.getString("NOTIFICATION_PLAYLIST_RESTORE_FAIL")})
                    }); else {
                g.isDeleted = false;
                this.playlists[g.PlaylistID] = g;
                a.publish("gs.playlist.view.update", g);
                c && a.publish("gs.notification", {type:"notice",message:a.localize.getString("NOTIFICATION_PLAYLIST_RESTORED")})
            }
        }
        GS.getGuts().gaTrackEvent("user",
                "restorePlaylist")
    },getSidebar:function() {
        GS.service.getUserSidebar(this.callback("loadSidebar"))
    },loadSidebar:function(b) {
        this.sidebarLoaded = true;
        if (a.isArray(b.meta))b.meta = {};
        this.sidebar = a.extend(true, this.sidebar, b);
        a.publish("gs.auth.sidebar.loaded");
        if (this.sidebar.stations.length === 0) {
            var c = this;
            _.forEach(this.defaultStations, function(g) {
                c.addToShortcuts("station", g, "", false)
            })
        }
    },getFavorites:function() {
        var b = this;
        _.forEach(["Albums","Artists","Playlists","Songs","Users"], function(c) {
            GS.service.getFavorites(b.UserID,
                    c, false, b.callback("load" + c + "Favorites"))
        })
    },loadAlbumsFavorites:function(b) {
        _.forEach(this.favorites.albums, function(c) {
            b.push(c)
        });
        this._super(b);
        a.publish("gs.auth.favorites.albums.update")
    },loadArtistsFavorites:function(b) {
        _.forEach(this.favorites.artists, function(c) {
            b.push(c)
        });
        this._super(b);
        a.publish("gs.auth.favorites.artists.update")
    },loadPlaylistsFavorites:function(b) {
        _.forEach(this.favorites.playlists, function(c) {
            b.push(c)
        });
        this._super(b);
        a.publish("gs.auth.favorites.playlists.update")
    },
        loadSongsFavorites:function(b) {
            _.forEach(this.favorites.songs, function(c) {
                b.push(c)
            });
            this._super(b);
            a.publish("gs.auth.favorites.songs.update")
        },loadUsersFavorites:function(b) {
            _.forEach(this.favorites.users, function(c) {
                b.push(c)
            });
            this._super(b);
            this.userFavoritesLoaded = true;
            a.publish("gs.auth.favorites.users.update")
        },getLibrary:function() {
            var b = GS.store.get("library" + this.UserID);
            if (b) {
                var c = b.songs;
                delete b.songs;
                this.library = GS.Models.Library.wrap(b);
                for (var g in c)if (c.hasOwnProperty(g)) {
                    c[g] =
                            GS.Models.Song.unarchive(c[g]);
                    c[g].fromLibrary = 1
                }
                b = this.library.songs;
                this.library.songs = GS.Models.Song.wrapCollectionInObject(c, {TSAdded:"",TSFavorited:""});
                _.forEach(b, function(h) {
                    _.defined(this.library.songs[h.SongID]) || (this.library.songs[h.SongID] = h)
                }, this);
                GS.service.userGetLibraryTSModified(this.UserID, this.callback("refreshLibrary"))
            } else {
                this.library = GS.Models.Library.wrap({userID:this.UserID});
                this.library.getSongs(this.callback("loadLibrary"), false, false)
            }
        },refreshLibrary:function(b) {
            if (b.TSModified >
                    this.library.lastModified) {
                this.library.currentPage = 0;
                this.library.songsLoaded = false;
                this.library.getSongs(this.callback("loadLibrary"), false, false)
            } else a.publish("gs.auth.library.update")
        },loadLibrary:function(b) {
            for (var c = 0; c < b.length; c++)this.library.songs[b[c].SongID] = b[c];
            a.publish("gs.auth.library.update");
            this.library.songsLoaded || this.library.getSongs(this.callback("loadLibrary"), false, false)
        },addToSongFavorites:function(b, c) {
            c = _.orEqual(c, true);
            if (!this.favorites.songs[b]) {
                var g = GS.Models.Song.getOneFromCache(b);
                if (!g)throw"AUTH.ADDTOSONGFAVES. SONGID NOT IN CACHE: " + b;
                g = g.dupe();
                g.isFavorite = 1;
                g.fromLibrary = 1;
                g.TSFavorited = (new Date).format("Y-m-d G:i:s");
                if (!_.defined(g.TSAdded) || g.TSAdded === "")g.TSAdded = g.TSFavorited;
                if (this.library.songs[b])this.library.songs[b] = g; else {
                    this.library.songs[b] = g;
                    a.publish("gs.auth.library.add", g)
                }
                this.favorites.songs[b] = g.dupe();
                GS.getGuts().logEvent("objectFavorited", {type:"song",id:b});
                a.publish("gs.auth.song.update", g);
                a.publish("gs.auth.favorites.songs.add", g);
                c && a.publish("gs.notification.favorite.song",
                        g);
                if (this.isLoggedIn)GS.service.favorite("Song", g.SongID, g.getDetailsForFeeds(), null, this.callback(this._favoriteFail, "Song", g)); else this.isDirty = true;
                GS.getGuts().gaTrackEvent("user", "favoriteSong")
            }
        },addToPlaylistFavorites:function(b, c) {
            c = _.orEqual(c, true);
            if (!this.favorites.playlists[b]) {
                var g = GS.Models.Playlist.getOneFromCache(b);
                if (!g)throw"AUTH.ADDTOPLAYLISTFAVES. PLAYLISTID NOT IN CACHE: " + b;
                g.isFavorite = 1;
                g.TSFavorited = (new Date).format("Y-m-d G:i:s");
                this.favorites.playlists[b] = g;
                GS.getGuts().logEvent("objectFavorited",
                        {type:"playlist",id:b});
                this.addToShortcuts("playlist", b, g.PlaylistName, false);
                a.publish("gs.auth.favorites.playlists.update");
                a.publish("gs.auth.playlist.update", g);
                a.publish("gs.auth.favorite.playlist", g);
                a.publish("gs.playlist.view.update", this);
                c && a.publish("gs.notification.favorite.playlist", g);
                if (this.isLoggedIn)GS.service.favorite("Playlist", g.PlaylistID, g.getDetailsForFeeds(), null, this.callback(this._favoriteFail, "Playlist", g)); else this.isDirty = true;
                GS.getGuts().gaTrackEvent("user", "favoritePlaylist")
            }
        },
        removeFromPlaylistFavorites:function(b, c) {
            c = _.orEqual(c, true);
            var g = GS.Models.Playlist.getOneFromCache(b);
            if (g) {
                this.removeFromShortcuts("playlist", g.PlaylistID, false);
                g.isFavorite = 0;
                GS.Models.Playlist.cache[b] = g;
                delete this.favorites.playlists[b];
                GS.getGuts().logEvent("objectUnfavorited", {type:"playlist",id:b});
                a.publish("gs.auth.favorites.playlists.update");
                a.publish("gs.auth.playlist.update", g);
                a.publish("gs.playlist.view.update", this);
                this.isLoggedIn && GS.service.unfavorite("Playlist", b);
                c && a.publish("gs.notification",
                        {type:"notify",message:a.localize.getString("NOTIFICATION_PLAYLIST_UNSUBSCRIBED")});
                GS.getGuts().gaTrackEvent("user", "unfavoritePlaylist")
            }
        },addToArtistFavorites:function(b, c) {
            c = _.orEqual(c, true);
            if (!this.favorites.artists[b]) {
                var g = GS.Models.Artist.getOneFromCache(b);
                if (!g)throw"AUTH.ADDTOARTSTTFAVES. ARTISTID NOT IN CACHE: " + b;
                g.isFavorite = 1;
                g.TSFavorited = (new Date).format("Y-m-d G:i:s");
                this.favorites.artists[b] = g;
                GS.getGuts().logEvent("objectFavorited", {type:"artist",id:b});
                a.publish("gs.auth.favorites.artists.update");
                c && a.publish("gs.notification.favorite.artist", g);
                if (this.isLoggedIn)GS.service.favorite("Artist", g.ArtistID, g.getDetailsForFeeds(), null, this.callback(this._favoriteFail, "Artist", g)); else this.isDirty = true;
                GS.getGuts().gaTrackEvent("user", "favoriteArtist")
            }
        },removeFromArtistFavorites:function(b, c) {
            c = _.orEqual(c, true);
            var g = GS.Models.Artist.getOneFromCache(b);
            if (g) {
                g.isFavorite = 0;
                GS.Models.Artist.cache[b] = g;
                delete this.favorites.artists[b];
                GS.getGuts().logEvent("objectUnfavorited", {type:"artist",id:b});
                a.publish("gs.auth.favorites.artists.update");
                this.isLoggedIn && GS.service.unfavorite("Artist", b);
                c && a.publish("gs.notification", {type:"notify",message:a.localize.getString("NOTIFICATION_ARTIST_UNSUBSCRIBED")});
                GS.getGuts().gaTrackEvent("user", "unfavoriteArtist")
            }
        },removeFromSongFavorites:function(b, c) {
            c = _.orEqual(c, true);
            var g = this.favorites.songs[b];
            if (g) {
                g.isFavorite = 0;
                delete this.favorites.songs[b];
                GS.getGuts().logEvent("objectUnfavorited", {type:"song",id:b});
                this.library.songs[b] = g.dupe();
                a.publish("gs.auth.song.update",
                        g);
                a.publish("gs.auth.favorites.songs.remove", g);
                this.isLoggedIn && GS.service.unfavorite("Song", g.SongID);
                if (c) {
                    g = {songLink:"<a class='songLink' rel='" + g.SongID + "'>" + g.SongName + "</a>",artistLink:"<a href='" + _.cleanUrl(g.ArtistName, g.ArtistID, "artist", null, null) + "'>" + g.ArtistName + "</a>"};
                    a.publish("gs.notification", {type:"notify",message:(new GS.Models.DataString(a.localize.getString("NOTIF_UNFAVORITED_SONG"), g)).render()})
                }
                GS.getGuts().gaTrackEvent("user", "unfavoriteSong")
            }
        },addToUserFavorites:function(b, c) {
            c = _.orEqual(c, true);
            if (!(!b || this.favorites.users[b])) {
                var g = GS.Models.User.getOneFromCache(b);
                if (!g || this.UserID === g.UserID)this._favoriteFail("User", null); else {
                    g.isFavorite = 1;
                    this.favorites.users[b] = g;
                    GS.getGuts().logEvent("objectFavorited", {type:"user",id:b});
                    a.publish("gs.auth.favorites.users.update");
                    a.publish("gs.auth.user.update", g);
                    a.publish("gs.auth.favorite.user", g);
                    c && a.publish("gs.notification.favorite.user", g);
                    if (this.isLoggedIn)GS.service.favorite("User", g.UserID, g.getDetailsForFeeds(),
                            null, this.callback(this._favoriteFail, "User", g)); else this.isDirty = true;
                    this.communityFeed.isDirty = true;
                    GS.getGuts().gaTrackEvent("user", "followUser")
                }
            }
        },removeFromUserFavorites:function(b) {
            var c = GS.Models.User.getOneFromCache(b);
            if (!(!c || this.UserID === c.UserID)) {
                c.isFavorite = 0;
                GS.Models.User.cache[b] = c;
                delete this.favorites.users[b];
                GS.getGuts().logEvent("objectUnfavorited", {type:"user",id:b});
                a.publish("gs.auth.favorites.users.update");
                a.publish("gs.auth.user.update", c);
                this.communityFeed.isDirty =
                        true;
                this.isLoggedIn && GS.service.unfavorite("User", c.UserID);
                GS.getGuts().gaTrackEvent("user", "unfollowUser")
            }
        },changeFollowFlags:function(b) {
            this.isLoggedIn ? GS.service.changeFollowFlags(b, this.callback("changeFollowFlagsSuccess", b), this.callback("changeFollowFlagsFail")) : this.changeFollowFlagsFail()
        },changeFollowFlagsSuccess:function(b, c) {
            if (c.success) {
                for (var g in b)if (b.hasOwnProperty(g))if (this.favorites.users[b[g].userID])this.favorites.users[b[g].userID].FollowingFlags = b[g].flags;
                this.communityFeed.isDirty =
                        true;
                a.publish("gs.auth.favorites.users.update")
            } else this.changeFollowFlagsFail()
        },changeFollowFlagsFail:function() {
            a.publish("gs.notification", {message:a.localize.getString("SETTINGS_USER_HIDE_FAIL")})
        },addToLibrary:function(b, c) {
            c = _.orEqual(c, true);
            var g = [];
            b = a.makeArray(b);
            for (var h = 0; h < b.length; h++) {
                var k = b[h];
                if (!this.library.songs[k]) {
                    var m = GS.Models.Song.getOneFromCache(k);
                    if (m) {
                        m = m.dupe();
                        m.fromLibrary = 1;
                        if (this.favorites.songs[k])m.isFavorite = 1;
                        if (!_.defined(m.TSAdded) || m.TSAdded === "")m.TSAdded =
                                (new Date).format("Y-m-d G:i:s");
                        this.library.songs[k] = m;
                        GS.getGuts().logEvent("songAddedToLibrary", {id:k});
                        a.publish("gs.auth.library.add", m);
                        a.publish("gs.auth.song.update", m);
                        g.push(m.getDetailsForFeeds())
                    }
                }
            }
            if (!_.isEmpty(g)) {
                if (this.isLoggedIn)GS.service.userAddSongsToLibrary(g, this.callback("addToLibrarySuccess", c, g), this.callback("addtoLibraryFailed")); else {
                    this.isDirty = true;
                    this.addToLibrarySuccess(c, g)
                }
                GS.getGuts().gaTrackEvent("user", "addLibrarySong")
            }
        },addToLibrarySuccess:function(b, c, g) {
            b &&
            a.publish("gs.auth.library.songsAdded", {songs:c});
            if (g) {
                tsAdded = parseInt(g.Timestamps.newTSModified, 10);
                parseInt(g.Timestamps.oldTSModified, 10) > this.library.lastModified && this.library.getSongs(this.callback("loadLibrary"), false, false)
            } else tsAdded = _.unixTime();
            this.library.lastModified = tsAdded;
            b = (new Date(tsAdded * 1E3)).format("Y-m-d G:i:s");
            for (g = 0; g < c.length; g++)this.library.songs[c[g].songID].TSAdded = b
        },_favoriteFail:function(b, c) {
            var g = "NOTIFICATION_LIBRARY_ADD_FAIL",h = {};
            if (c)switch (b) {
                case "Song":
                    g +=
                            "_SONG";
                    h.name = c.SongName;
                    break;
                case "Playlist":
                    g += "_PLAYLIST";
                    h.name = c.PlaylistName;
                    break;
                case "User":
                    g += "_USER";
                    h.name = c.Name;
                    break
            }
            a.publish("gs.notification", {type:"error",message:(new GS.Models.DataString(a.localize.getString(g), h)).render()})
        },addToLibraryFailed:function() {
            var b = {numSongs:songIDsToAdd.length};
            a.publish("gs.notification", {type:"error",message:(new GS.Models.DataString(a.localize.getString(songIDsToAdd.length > 1 ? "NOTIFICATION_LIBRARY_ADD_SONGS_FAIL" : "NOTIFICATION_LIBRARY_ADD_SONG_FAIL"),
                    b)).render()})
        },removeFromLibrary:function(b) {
            var c = this.library.songs[b];
            if (c) {
                delete this.library.songs[b];
                GS.getGuts().logEvent("songRemovedFromLibrary", {id:b});
                delete this.favorites.songs[b];
                c.fromLibrary = 0;
                c.isFavorite = 0;
                GS.Models.Song.cache[c.SongID] = c;
                a.publish("gs.auth.library.remove", c);
                a.publish("gs.auth.song.update", c);
                if (this.isLoggedIn) {
                    GS.service.userRemoveSongFromLibrary(this.UserID, c.SongID, c.AlbumID, c.ArtistID, this.callback("removeFromLibrarySuccess", c), this.callback("removeFromLibraryFailed",
                            c));
                    GS.service.unfavorite("Song", c.SongID)
                } else a.publish("gs.notification", {message:_.printf("NOTIFICATION_LIBRARY_REMOVE_SONG", {song:c.SongName})});
                GS.getGuts().gaTrackEvent("user", "removeLibrarySong");
                return c
            } else console.warn("removing song not in library!", b)
        },removeFromLibrarySuccess:function(b, c) {
            if (parseInt(c.Timestamps.oldTSModified, 10) > this.library.lastModified)this.library.getSongs(this.callback("loadLibrary"), false, false); else this.library.lastModified = parseInt(c.Timestamps.newTSModified,
                    10);
            a.publish("gs.notification", {message:_.printf("NOTIFICATION_LIBRARY_REMOVE_SONG", {song:b.SongName})})
        },removeFromLibraryFailed:function() {
            a.publish("gs.notification", {type:"error",message:a.localize.getString("NOTIFICATION_LIBRARY_REMOVE_FAIL")})
        },isShortcut:function(b, c) {
            if (!c || !b)return false;
            b = b.toLowerCase();
            c = c.toString();
            switch (b) {
                case "playlist":
                    return this.sidebar.playlists.indexOf(c) > -1 || this.sidebar.subscribedPlaylists.indexOf(c) > -1;
                case "station":
                    return this.sidebar.stations.indexOf(c) >
                            -1;
                case "song":
                    return this.sidebar.songs.indexOf(c) > -1;
                case "artist":
                    return this.sidebar.artists.indexOf(c) > -1;
                case "album":
                    return this.sidebar.albums.indexOf(c) > -1
            }
            return false
        },addToShortcuts:function(b, c, g, h) {
            h = _.orEqual(h, true);
            b = b.toLowerCase();
            var k = c.toString();
            switch (b) {
                case "playlist":
                    b = GS.Models.Playlist.getOneFromCache(c);
                    if (!b)return;
                    b = b.UserID === this.UserID ? "playlists" : "subscribedPlaylists";
                    break;
                case "station":
                case "song":
                case "artist":
                case "album":
                    b = b + "s";
                    break;
                default:
                    return
            }
            if (this.sidebar[b].indexOf(k) ===
                    -1) {
                this.sidebar[b].unshift(k);
                this.sidebar.meta[b][c] = g;
                a.publish("gs.auth.pinboard.update", {type:b});
                if (this.isLoggedIn)GS.service.addShortcutToUserSidebar(b, c, g, this.callback(this._addShortcutSuccess, b, c, h), this.callback(this._addShortcutFailed, b, c, h)); else {
                    this.isDirty = true;
                    this._addShortcutSuccess(b, c, h, {})
                }
                GS.getGuts().gaTrackEvent("user", "addShortcut")
            }
        },_addShortcutSuccess:function(b, c, g) {
            var h,k = {};
            switch (b) {
                case "playlists":
                case "subscribedPlaylists":
                    if (b = GS.Models.Playlist.getOneFromCache(c)) {
                        h =
                                "NOTIFICATION_PLAYLIST_PINBOARD_ADD_SUCCESS";
                        k.playlist = b.PlaylistName;
                        a.publish("gs.playlist.view.update", b)
                    }
                    break;
                case "stations":
                    b = GS.Models.Station.getOneFromCache(c);
                    h = "NOTIFICATION_STATION_PINBOARD_ADD_SUCCESS";
                    k.station = a.localize.getString(b.StationTitle);
                    break;
                case "songs":
                    if (b = GS.Models.Song.getOneFromCache(c)) {
                        h = "NOTIFICATION_SONG_PINBOARD_ADD_SUCCESS";
                        k.song = b.SongName
                    }
                    break;
                case "artists":
                    if (b = GS.Models.Artist.getOneFromCache(c)) {
                        h = "NOTIFICATION_ARTIST_PINBOARD_ADD_SUCCESS";
                        k.artist =
                                b.ArtistName
                    }
                    break;
                case "albums":
                    if (b = GS.Models.Album.getOneFromCache(c)) {
                        h = "NOTIFICATION_ALBUM_PINBOARD_ADD_SUCCESS";
                        k.album = b.AlbumName
                    }
                    break
            }
            if (g && h) {
                g = new GS.Models.DataString(a.localize.getString(h), k);
                a.publish("gs.notification", {type:"notice",message:g.render()})
            }
        },_addShortcutFailed:function(b, c, g) {
            var h,k = {},m = this.sidebar[b].indexOf(c.toString());
            if (m != -1) {
                this.sidebar[b].splice(m, 1);
                a.publish("gs.auth.pinboard.update", {type:b})
            }
            switch (b) {
                case "playlists":
                case "subscribedPlaylists":
                    if (b =
                            GS.Models.Playlist.getOneFromCache(c)) {
                        h = "NOTIFICATION_PLAYLIST_PINBOARD_ADD_FAILED";
                        k.playlist = b.PlaylistName;
                        a.publish("gs.playlist.view.update", b)
                    }
                    break;
                case "stations":
                    b = GS.Models.Station.getOneFromCache(c);
                    h = "NOTIFICATION_STATION_PINBOARD_ADD_FAILED";
                    k.station = a.localize.getString(b.StationTitle);
                    break;
                case "songs":
                    if (b = GS.Models.Song.getOneFromCache(c)) {
                        h = "NOTIFICATION_SONG_PINBOARD_ADD_FAILED";
                        k.song = b.SongName
                    }
                    break;
                case "artists":
                    if (b = GS.Models.Artist.getOneFromCache(c)) {
                        h = "NOTIFICATION_ARTIST_PINBOARD_ADD_FAILED";
                        k.artist = b.ArtistName
                    }
                    break;
                case "albums":
                    if (b = GS.Models.Album.getOneFromCache(c)) {
                        h = "NOTIFICATION_ALBUM_PINBOARD_ADD_FAILED";
                        k.album = b.AlbumName
                    }
                    break
            }
            if (g && h) {
                g = new GS.Models.DataString(a.localize.getString(h), k);
                a.publish("gs.notification", {type:"error",message:g.render()})
            }
        },removeFromShortcuts:function(b, c, g) {
            g = _.orEqual(g, true);
            switch (b) {
                case "playlist":
                    b = GS.Models.Playlist.getOneFromCache(c);
                    if (!b)return;
                    b = b.UserID === this.UserID ? "playlists" : "subscribedPlaylists";
                    break;
                case "station":
                case "song":
                case "artist":
                case "album":
                    b =
                            b + "s";
                    break;
                default:
                    return
            }
            var h = this.sidebar[b].indexOf(c.toString());
            if (h != -1) {
                this.sidebar[b].splice(h, 1);
                a.publish("gs.auth.pinboard.update", {type:b});
                if (this.isLoggedIn)GS.service.removeShortcutFromUserSidebar(b, c, this.callback(this._removeShortcutSuccess, b, c, g), this.callback(this._removeShortcutFailed, b, c, h, g)); else {
                    this.isDirty = true;
                    this._removeShortcutSuccess(b, c, g, {})
                }
                GS.getGuts().gaTrackEvent("user", "removeShortcut")
            }
        },_removeShortcutSuccess:function(b, c, g) {
            var h,k = {};
            switch (b) {
                case "playlists":
                case "subscribedPlaylists":
                    if (b =
                            GS.Models.Playlist.getOneFromCache(c)) {
                        h = "NOTIFICATION_PLAYLIST_PINBOARD_REMOVE_SUCCESS";
                        k.playlist = b.PlaylistName;
                        a.publish("gs.playlist.view.update", b)
                    }
                    break;
                case "stations":
                    b = GS.Models.Station.getOneFromCache(c);
                    h = "NOTIFICATION_STATION_PINBOARD_REMOVE_SUCCESS";
                    k.station = a.localize.getString(b.StationTitle);
                    break;
                case "songs":
                    if (b = GS.Models.Song.getOneFromCache(c)) {
                        h = "NOTIFICATION_SONG_PINBOARD_REMOVE_SUCCESS";
                        k.song = b.SongName
                    }
                    break;
                case "artists":
                    if (b = GS.Models.Artist.getOneFromCache(c)) {
                        h = "NOTIFICATION_ARTIST_PINBOARD_REMOVE_SUCCESS";
                        k.artist = b.ArtistName
                    }
                    break;
                case "albums":
                    if (b = GS.Models.Album.getOneFromCache(c)) {
                        h = "NOTIFICATION_ALBUM_PINBOARD_REMOVE_SUCCESS";
                        k.album = b.AlbumName
                    }
                    break
            }
            if (g && h) {
                g = new GS.Models.DataString(a.localize.getString(h), k);
                a.publish("gs.notification", {type:"notice",message:g.render()})
            }
        },_removeShortcutFailed:function(b, c, g, h) {
            var k,m,n = {};
            if (g < 0)g = 0;
            switch (b) {
                case "playlists":
                case "subscribedPlaylists":
                    if (k = GS.Models.Playlist.getOneFromCache(c)) {
                        m = "NOTIFICATION_PLAYLIST_PINBOARD_REMOVE_FAILED";
                        n.playlist =
                                k.PlaylistName;
                        a.publish("gs.playlist.view.update", k)
                    }
                    break;
                case "stations":
                    k = GS.Models.Station.getOneFromCache(c);
                    m = "NOTIFICATION_STATION_PINBOARD_REMOVE_FAILED";
                    n.station = a.localize.getString(k.StationTitle);
                    break;
                case "songs":
                    if (k = GS.Models.Song.getOneFromCache(c)) {
                        m = "NOTIFICATION_SONG_PINBOARD_REMOVE_FAILED";
                        n.song = k.SongName
                    }
                    break;
                case "artists":
                    if (k = GS.Models.Artist.getOneFromCache(c)) {
                        m = "NOTIFICATION_ARTIST_PINBOARD_REMOVE_FAILED";
                        n.artist = k.ArtistName
                    }
                    break;
                case "albums":
                    if (k = GS.Models.Album.getOneFromCache(c)) {
                        m =
                                "NOTIFICATION_ALBUM_PINBOARD_REMOVE_FAILED";
                        n.album = k.AlbumName
                    }
                    break
            }
            if (g != -1) {
                this.sidebar[b].splice(g, 0, c.toString());
                a.publish("gs.auth.pinboard.update", {type:b})
            }
            if (h && m) {
                b = new GS.Models.DataString(a.localize.getString(m), n);
                a.publish("gs.notification", {type:"error",message:b.render()})
            }
        },changePassword:function(b, c, g, h) {
            this.isLoggedIn ? GS.service.changePassword(b, c, this.callback(this._passwordSuccess, g, h), this.callback(this._passwordFailed, h)) : this._passwordFailed(h);
            GS.getGuts().gaTrackEvent("user",
                    "changePassword")
        },_passwordSuccess:function(b, c, g) {
            if (g && g.statusCode === 1)a.isFunction(b) && b(g); else this._passwordFailed(c, g)
        },_passwordFailed:function(b, c) {
            a.isFunction(b) && b(c)
        },updateAccountType:function(b) {
            b = b.toLowerCase();
            switch (b) {
                case "plus":
                    this.IsPremium = 1;
                    this.Flags |= 1;
                    break;
                case "anywhere":
                    this.IsPremium = 1;
                    this.Flags |= 128;
                    break;
                default:
                    this.IsPremium = 0;
                    this.Flags &= -2;
                    this.Flags &= -129;
                    break
            }
            a.publish("gs.auth.update");
            this.checkVipExpiring();
            GS.getGuts().gaTrackEvent("user", "updateAccount",
                    b)
        },checkVipExpiring:function() {
            this.IsPremium && GS.service.getSubscriptionDetails(this.callback("checkVipExpiringCallback"), this.callback("checkVipExpiringCallback"))
        },checkVipExpiringCallback:function(b) {
            var c,g,h = new Date;
            c = false;
            if (!(b === false || b.fault || b.code)) {
                b.bVip = b.bVip ? parseInt(b.bVip, 10) : false;
                b.bActive = b.bActive ? parseInt(b.bActive, 10) : false;
                if (!b.bRecurring) {
                    g = b.period === "MONTH" ? true : false;
                    if (c = _.orEqual(b.dateSubcriptionEnd, b.dateEnd)) {
                        c = c.split("-");
                        c = g ? new Date(c[0], parseInt(c[1], 10) -
                                1, c[2]) : new Date(parseInt(c[0], 10) + 1, c[1], c[2])
                    } else if (b.dateStart) {
                        c = b.dateStart.split("-");
                        c = g ? new Date(c[0], parseInt(c[1], 10), c[2]) : new Date(parseInt(c[0], 10) + 1, c[1], c[2])
                    }
                    if (c && !b.bRecurring) {
                        g = _.orEqual(GS.store.get("gs.vipExpire.hasSeen" + this.UserID), 0);
                        g = h.getTime() - g;
                        h = c.getTime() - h.getTime();
                        c = Math.max(0, Math.ceil(h / 864E5));
                        c += c == 1 ? " day" : " days";
                        c = h <= 0 ? (new GS.Models.DataString(a.localize.getString("POPUP_VIP_EXPIRES_NO_DAYS"), {vipPackage:b.subscriptionType})).render() : (new GS.Models.DataString(a.localize.getString("POPUP_VIP_EXPIRES_DAYS_LEFT"),
                                {daysLeft:c,vipPackage:b.subscriptionType})).render();
                        b.daysLeft = c;
                        if (g >= 1728E5)if (h < 864E5) {
                            b.timeframe = "oneDay";
                            GS.getLightbox().open("vipExpires", b)
                        } else if (h < 1728E5) {
                            b.timeframe = "twoDays";
                            GS.getLightbox().open("vipExpires", b)
                        } else if (h < 12096E5) {
                            b.timeframe = "twoWeeks";
                            GS.getLightbox().open("vipExpires", b)
                        } else if (h <= 0 && Math.abs(h) <= 6048E5) {
                            b.timeframe = "expired";
                            GS.getLightbox().open("vipExpires", b)
                        }
                        setTimeout(this.callback("checkVipExpiring"), 1728E5)
                    }
                }
            }
        },getAutoNewPlaylistName:function() {
            var b,
                    c,g,h = [];
            g = this.Name && this.Name.length ? this.Name + "'s Playlist " : "Playlist ";
            _.forEach(this.playlists, function(k) {
                b = k.PlaylistName.indexOf(g);
                if (b != -1)(c = parseInt(k.PlaylistName.substring(b + g.length), 10)) && h.push(c)
            });
            if (h.length) {
                h.sort(_.numSortA);
                c = h[h.length - 1] + 1
            } else c = 1;
            return g + c
        },isPlaylistNameAvailable:function(b) {
            var c;
            for (c in this.playlists)if (this.playlists.hasOwnProperty(c))if (b === this.playlists[c].PlaylistName)return false;
            return true
        },getPoints:function(b, c) {
            if (this._pointsDirty)if (this._pointsPending)this._pointsPending.then(b,
                    c); else {
                this._pointsPending = a.Deferred();
                this._pointsPending.then(b, c);
                GS.service.userGetPoints(this.callback("_pointsSuccess"), this.callback("_pointsFail"))
            } else b(this.Points)
        },_pointsSuccess:function(b) {
            var c = parseInt(b, 10);
            if (isNaN(c)) {
                this._pointsPending.reject(b);
                this._pointsPending = false
            } else {
                var g = this.Points;
                this._pointsDirty = false;
                this.Points = c;
                this._pointsPending.resolve(c);
                this._pointsPending = false;
                g !== c && a.publish("gs.auth.pointsUpdated");
                return b
            }
        },_pointsFail:function(b) {
            this._pointsPending.reject(b);
            this._pointsPending = false;
            return b
        },invalidatePoints:function() {
            this._pointsDirty = true;
            a.publish("gs.auth.pointsUpdated")
        },addPoints:function(b, c) {
            c = _.orEqual(c, false);
            b = parseInt(b, 10);
            if (!isNaN(b)) {
                this._pointsDirty = true;
                this.Points += b;
                a.publish("gs.auth.pointsUpdated");
                c || GS.getNotice().displaySurveyPoints(b)
            }
        }})
})(jQuery);
(function(a) {
    GS.Models.Base.extend("GS.Models.Fanbase", {}, {currentPage:0,objectID:null,objectType:"",userIDs:[],fansLoaded:false,init:function(b) {
        this._super(b);
        this.userIDs = _.orEqual(b.userIDs, []);
        this.fansLoaded = _.orEqual(b.fansLoaded, false)
    },getFans:function(b, c, g) {
        g = _.orEqual(g, false);
        if (this.fansLoaded) {
            c = GS.Models.User.getManyFromCache(this.userIDs);
            a.isFunction(b) && b(c)
        } else {
            g && this.currentPage === 0 && a.publish("gs.page.loading.grid");
            this.objectType === "playlist" ? GS.service[this.objectType + "GetFans"](this.objectID,
                    this.callback(["cacheAndReturnUsers",b]), c) : GS.service[this.objectType + "GetFans"](this.objectID, this.currentPage, this.callback(["cacheAndReturnUsers",b]), c)
        }
    },cacheAndReturnUsers:function(b) {
        for (var c = GS.Models.User.wrapCollection(b.Users || b.Return.fans || b.Return),g = 0; g < c.length; g++) {
            var h = c[g];
            this.userIDs.indexOf(h.UserID) == -1 && this.userIDs.push(h.UserID)
        }
        if (_.defined(b.hasMore) && b.hasMore)this.currentPage++; else this.fansLoaded = true;
        return c
    }})
})(jQuery);
(function(a) {
    GS.Models.Base.extend("GS.Models.Feed", {QUEUE_ADD_LIMIT:50}, {user:null,type:null,lastDocumentID:null,lastEventID:null,events:[],pages:[],currentPage:0,hasMore:false,isLoaded:false,isComplete:false,isDirty:false,isErrored:false,lastRequest:0,cache:{},RATE_LIMIT:6E4,PAGE_LIMIT:5,getFeed:function(b, c) {
        this.reset();
        this.isComplete ? b(this.events) : this.fetch({callback:b,errback:c})
    },next:function(b, c) {
        this.fetch({callback:b,errback:c})
    },reset:function() {
        var b = new Date;
        if (!this.isLoaded || b.getTime() >
                this.lastRequest + this.RATE_LIMIT || this.isDirty) {
            this.events = [];
            this.lastDocumentID = this.lastEventID = 0;
            this.isLoaded = this.hasMore = this.isComplete = this.isDirty = this.isErrored = false;
            this.lastRequest = b.getTime();
            this.cache = {};
            this.pages = [];
            this.currentPage = 0
        }
    },fetch:function() {
        return[]
    },onError:function(b) {
        this.isLoaded = this.isErrored = true;
        b && b.errback && b.errback([])
    },filterFollows:function(b) {
        return b.type == GS.Models.FeedEvent.USER_FOLLOWED_TYPE || b.type == GS.Models.FeedEvent.USERS_FOLLOWED_TYPE || b.type ==
                GS.Models.FeedEvent.FAVORITE_USERS_TYPE ? false : true
    },parseEvent:function(b) {
        var c = null;
        try {
            c = GS.Models.FeedEvent.wrap(b)
        } catch(g) {
            gsConfig.runMode == "dev" && console.warn("Feed Parse Error: ", b.activityName, b, g)
        }
        return c
    },parseUser:function(b, c) {
        var g = [],h;
        for (var k in b)if (b.hasOwnProperty(k))if (h = parseEvent(k)) {
            h.user = c;
            g.push(h)
        }
        return g
    },getEvents:function(b) {
        b = _.orEqual(b, 0);
        var c = this.events.concat();
        if (b) {
            c = [];
            for (var g = 0; g < this.events.length; g++)if (this.events[g].time > b)c.push(this.events[g]);
            else break
        }
        return c
    },getSongGroups:function(b, c) {
        var g = [],h,k,m,n,o,q = 0,v = {};
        b = _.orEqual(b, 0);
        c = _.orEqual(c, GS.Models.Feed.QUEUE_ADD_LIMIT);
        var x = this.getEvents(b);
        for (m = 0; m < x.length; m++) {
            o = x[m];
            h = o.getSongs();
            if (q <= c && h.length && GS.Models.FeedEvent.ListenTypes[o.activityName]) {
                k = [];
                for (n = 0; n < h.length; n++)if (!v[h[n].SongID]) {
                    k.push(h[n].SongID);
                    v[h[n].SongID] = true;
                    q++
                }
                g.push({songIDs:k,context:o.getDetailsForFeeds()});
                if (q > c)break
            }
        }
        return g
    },play:function(b, c, g, h, k) {
        this.isComplete ? this.playSongs(b,
                c, g, h, k) : this.getFeed(this.callback(function() {
            this.isComplete && this.playSongs(b, c, g, h, k)
        }))
    },playSongs:function(b, c, g, h, k) {
        if (this.isComplete) {
            b = _.orEqual(b, -1);
            c = _.orEqual(c, false);
            g = _.orEqual(g, 0);
            h = _.orEqual(h, GS.Models.Feed.QUEUE_ADD_LIMIT);
            k = _.orEqual(k, false);
            for (var m = this.getSongGroups(g, h),n = this.getDetailsForFeeds(),o = m.length - 1; o >= 0; o--) {
                g = m[o];
                h = g.songIDs.reverse();
                GS.player.addSongsToQueueAt(h, b, c, a.extend({event:g.context}, n), k && o === 0);
                if (h.length)c = false
            }
        }
    },getDetailsForFeeds:function() {
        return{user:this.user ?
                this.user.getDetailsForFeeds() : null,type:GS.player.PLAY_CONTEXT_FEED,feedType:this.type}
    }})
})(jQuery);
(function(a) {
    GS.Models.Base.extend("GS.Models.FeedEvent", {ListenTypes:{},PlaylistTypes:{},SongTypes:{},AlbumTypes:{},ArtistTypes:{},init:function() {
        GS.Models.FeedEvent.setTypes();
        a.subscribe("gs.locale.ready", this.callback(this.updateDaysOfWeek));
        a.subscribe("gs.locale.update", this.callback(this.updateDaysOfWeek));
        this.updateDaysOfWeek()
    },setTypes:function() {
        var b = {};
        b.songPlayed = true;
        b.obsession = true;
        b.playlistPlayed = true;
        b.artistPlayed = true;
        b.albumPlayed = true;
        var c = {};
        c.songPlayed = true;
        c.obsession =
                true;
        c.playlistPlayed = true;
        c.artistPlayed = true;
        c.albumPlayed = true;
        var g = {};
        g.playlistPlayed = true;
        var h = {};
        h.albumPlayed = true;
        var k = {};
        k.artistPlayed = true;
        GS.Models.FeedEvent.ListenTypes = b;
        GS.Models.FeedEvent.SongTypes = c;
        GS.Models.FeedEvent.PlaylistTypes = g;
        GS.Models.FeedEvent.AlbumTypes = h;
        GS.Models.FeedEvent.ArtistTypes = k
    },songPlayed:function(b) {
        var c = {};
        c.user = GS.Models.FeedEvent.getUserLink(b.user);
        c.song = ['<a class="songLink">',_.cleanText(b.data.songs[0].songName),"</a>"].join("");
        c.artist = ['<a href="',
            _.cleanUrl(b.data.songs[0].artistName, b.data.songs[0].artistID, "artist"),'">',_.cleanText(b.data.songs[0].artistName),"</a>"].join("");
        c.album = ['<a href="',_.cleanUrl(b.data.songs[0].albumName, b.data.songs[0].albumID, "album"),'">',_.cleanText(b.data.songs[0].albumName),"</a>"].join("");
        c.numSongs = b.data.songs.length;
        if (c.numSongs > 2) {
            b.dataKey = "FEED_LISTEN_SONGS_MANY";
            c.numSongs--
        } else if (c.numSongs == 2) {
            c.song2 = ['<a class="songLink" data-song-index="1">',_.cleanText(b.data.songs[1].songName),"</a>"].join("");
            b.dataKey = "FEED_LISTEN_SONGS_TWO"
        } else b.dataKey = "FEED_LISTEN_SONG";
        return new GS.Models.DataString(a.localize.getString(b.dataKey), c)
    },favoriteSong:function(b) {
        var c = {};
        c.user = GS.Models.FeedEvent.getUserLink(b.user);
        c.song = ['<a class="songLink">',_.cleanText(b.data.songs[0].songName),"</a>"].join("");
        c.artist = ['<a href="',_.cleanUrl(b.data.songs[0].artistName, b.data.songs[0].artistID, "artist"),'">',_.cleanText(b.data.songs[0].artistName),"</a>"].join("");
        c.album = ['<a href="',_.cleanUrl(b.data.songs[0].albumName,
                b.data.songs[0].albumID, "album"),'">',_.cleanText(b.data.songs[0].albumName),"</a>"].join("");
        c.numSongs = b.data.songs.length;
        if (c.numSongs > 2) {
            b.dataKey = "FEED_FAVORITE_SONGS_MANY";
            c.numSongs--
        } else if (c.numSongs == 2) {
            c.song2 = ['<a class="songLink" data-song-index="1">',_.cleanText(b.data.songs[1].songName),"</a>"].join("");
            b.dataKey = "FEED_FAVORITE_SONGS_TWO"
        } else b.dataKey = "FEED_FAVORITE_SONG";
        return new GS.Models.DataString(a.localize.getString(b.dataKey), c)
    },obsession:function(b) {
        var c = {};
        c.user = GS.Models.FeedEvent.getUserLink(b.user);
        c.song = ['<a class="songLink">',_.cleanText(b.data.songs[0].songName),"</a>"].join("");
        c.artist = ['<a href="',_.cleanUrl(b.data.songs[0].artistName, b.data.songs[0].artistID, "artist"),'">',_.cleanText(b.data.songs[0].artistName),"</a>"].join("");
        c.album = ['<a href="',_.cleanUrl(b.data.songs[0].albumName, b.data.songs[0].albumID, "album"),'">',_.cleanText(b.data.songs[0].albumName),"</a>"].join("");
        c.numSongs = b.data.songs.length;
        if (c.numSongs > 2) {
            b.dataKey = "FEED_SONG_OBSESSION_MANY";
            c.numSongs--
        } else if (c.numSongs ==
                2) {
            c.song2 = ['<a class="songLink" data-song-index="1">',_.cleanText(b.data.songs[1].songName),"</a>"].join("");
            b.dataKey = "FEED_SONG_OBSESSION_TWO"
        } else b.dataKey = b.data.songs[0].timestamp.length >= 11 ? "FEED_SONG_OBSESSION_COWBELL" : b.data.songs[0].timestamp.length >= 7 ? "FEED_SONG_OBSESSION_BLEEDING" : b.data.songs[0].timestamp.length >= 5 ? "FEED_SONG_OBSESSION_ADDICT" : "FEED_SONG_OBSESSION";
        return new GS.Models.DataString(a.localize.getString(b.dataKey), c)
    },addSongsToLibrary:function(b) {
        var c = {};
        c.user = GS.Models.FeedEvent.getUserLink(b.user);
        c.song = ['<a class="songLink">',_.cleanText(b.data.songs[0].songName),"</a>"].join("");
        c.artist = ['<a href="',_.cleanUrl(b.data.songs[0].artistName, b.data.songs[0].artistID, "artist"),'">',_.cleanText(b.data.songs[0].artistName),"</a>"].join("");
        c.album = ['<a href="',_.cleanUrl(b.data.songs[0].albumName, b.data.songs[0].albumID, "album"),'">',_.cleanText(b.data.songs[0].albumName),"</a>"].join("");
        c.numSongs = b.data.songs.length;
        if (c.numSongs > 2) {
            b.dataKey = "FEED_ADD_LIBRARY_SONGS_MANY";
            c.numSongs--
        } else if (c.numSongs ==
                2) {
            c.song2 = ['<a class="songLink" data-song-index="1">',_.cleanText(b.data.songs[1].songName),"</a>"].join("");
            b.dataKey = b.user.Sex == "M" ? "FEED_ADD_LIBRARY_SONGS_TWO_MALE" : b.user.Sex == "F" ? "FEED_ADD_LIBRARY_SONGS_TWO_FEMALE" : "FEED_ADD_LIBRARY_SONGS_TWO_ALIEN"
        } else b.dataKey = b.user.Sex == "M" ? "FEED_ADD_LIBRARY_SONG_MALE" : b.user.Sex == "F" ? "FEED_ADD_LIBRARY_SONG_FEMALE" : "FEED_ADD_LIBRARY_SONG_ALIEN";
        return new GS.Models.DataString(a.localize.getString(b.dataKey), c)
    },createPlaylist:function(b) {
        var c = {};
        b.data.playlists[0].owningName =
                b.user.Name;
        b.data.playlists[0].owningID = b.user.UserID;
        c.user = GS.Models.FeedEvent.getUserLink(b.user);
        c.playlist = ['<a href="',_.cleanUrl(b.data.playlists[0].playlistName, b.data.playlists[0].playlistID, "playlist"),'">',_.cleanText(b.data.playlists[0].playlistName),"</a>"].join("");
        c.numSongs = _.isArray(b.data.songIDs) ? b.data.songIDs.length : 0;
        b.dataKey = c.numSongs && c.numSongs > 1 ? "FEED_PLAYLIST_CREATED" : "FEED_PLAYLIST_CREATED_NO_SONGS";
        return new GS.Models.DataString(a.localize.getString(b.dataKey), c)
    },
        overwritePlaylist:function(b) {
            var c = {};
            b.data.playlists[0].owningName = b.user.Name;
            b.data.playlists[0].owningID = b.user.UserID;
            c.user = GS.Models.FeedEvent.getUserLink(b.user);
            c.playlist = ['<a href="',_.cleanUrl(b.data.playlists[0].playlistName, b.data.playlists[0].playlistID, "playlist"),'">',_.cleanText(b.data.playlists[0].playlistName),"</a>"].join("");
            c.numSongs = _.isArray(b.data.songIDs) ? b.data.songIDs.length : 0;
            b.dataKey = c.numSongs && c.numSongs > 1 ? "FEED_PLAYLIST_EDITED" : "FEED_PLAYLIST_EDITED_NO_SONGS";
            return new GS.Models.DataString(a.localize.getString(b.dataKey), c)
        },subscribePlaylist:function(b) {
            var c = {},g = b.data.playlists[0].owningName,h = b.data.playlists[0].subscribingName;
            c.user = GS.Models.FeedEvent.getUserLink(b.user);
            c.playlist = ['<a href="',_.cleanUrl(b.data.playlists[0].playlistName, b.data.playlists[0].playlistID, "playlist"),'">',_.cleanText(b.data.playlists[0].playlistName),"</a>"].join("");
            c.author = ['<a href="',_.cleanUrl(g, b.data.playlists[0].owningUserID, "user"),'">',g,"</a>"].join("");
            c.fan = ['<a href="',_.cleanUrl(h, b.userID, "user"),'">',h,"</a>"].join("");
            b.dataKey = "FEED_PLAYLIST_FOLLOWED";
            return new GS.Models.DataString(a.localize.getString(b.dataKey), c)
        },playlistPlayed:function(b) {
            var c = {};
            c.user = GS.Models.FeedEvent.getUserLink(b.user);
            c.playlist = ['<a href="',_.cleanUrl(b.data.playlists[0].playlistName, b.data.playlists[0].playlistID, "playlist"),'">',_.cleanText(b.data.playlists[0].playlistName),"</a>"].join("");
            b.dataKey = "FEED_LISTEN_PLAYLIST";
            return new GS.Models.DataString(a.localize.getString(b.dataKey),
                    c)
        },favoriteArtist:function(b) {
            var c = {};
            c.user = GS.Models.FeedEvent.getUserLink(b.user);
            c.artist = ['<a href="',_.cleanUrl(b.data.artists[0].artistName, b.data.artists[0].artistID, "artist"),'">',_.cleanText(b.data.artists[0].artistName),"</a>"].join("");
            c.numArtists = b.data.artists.length;
            if (c.numArtists > 2) {
                b.dataKey = "FEED_FAVORITE_ARTIST_MANY";
                c.artist2 = ['<a href="',_.cleanUrl(b.data.artists[1].artistName, b.data.artists[1].artistID, "artist"),'">',_.cleanText(b.data.artists[1].artistName),"</a>"].join("");
                c.numArtists -= 2
            } else if (c.numArtists == 2) {
                b.dataKey = "FEED_FAVORITE_ARTIST_TWO";
                c.artist2 = ['<a href="',_.cleanUrl(b.data.artists[1].artistName, b.data.artists[1].artistID, "artist"),'">',_.cleanText(b.data.artists[1].artistName),"</a>"].join("")
            } else b.dataKey = "FEED_FAVORITE_ARTIST_ONE";
            return null
        },addArtistToLibrary:function(b) {
            var c = {};
            c.user = GS.Models.FeedEvent.getUserLink(b.user);
            c.numSongs = b.data.songs.length - 1;
            c.song = ['<a class="songLink">',_.cleanText(b.data.songs[0].songName),"</a>"].join("");
            c.artist = ['<a href="',_.cleanUrl(b.data.songs[0].artistName, b.data.songs[0].artistID, "artist"),'">',_.cleanText(b.data.songs[0].artistName),"</a>"].join("");
            b.dataKey = "FEED_ADD_LIBRARY_ARTIST";
            return new GS.Models.DataString(a.localize.getString(b.dataKey), c)
        },artistPlayed:function(b) {
            var c = {};
            c.user = GS.Models.FeedEvent.getUserLink(b.user);
            c.numSongs = b.data.songs.length;
            c.song = ['<a class="songLink">',_.cleanText(b.data.songs[0].songName),"</a>"].join("");
            c.artist = ['<a href="',_.cleanUrl(b.data.songs[0].artistName,
                    b.data.songs[0].artistID, "artist"),'">',_.cleanText(b.data.songs[0].artistName),"</a>"].join("");
            b.dataKey = "FEED_LISTEN_ARTIST";
            return new GS.Models.DataString(a.localize.getString(b.dataKey), c)
        },albumPlayed:function(b) {
            var c = {};
            c.user = GS.Models.FeedEvent.getUserLink(b.user);
            c.numSongs = b.data.songs.length;
            c.artist = ['<a href="',_.cleanUrl(b.data.songs[0].artistName, b.data.songs[0].artistID, "artist"),'">',_.cleanText(b.data.songs[0].artistName),"</a>"].join("");
            c.album = ['<a href="',_.cleanUrl(b.data.songs[0].albumName,
                    b.data.songs[0].albumID, "album"),'">',_.cleanText(b.data.songs[0].albumName),"</a>"].join("");
            b.dataKey = "FEED_LISTEN_ALBUM";
            return new GS.Models.DataString(a.localize.getString(b.dataKey), c)
        },addAlbumToLibrary:function(b) {
            var c = {};
            c.user = GS.Models.FeedEvent.getUserLink(b.user);
            c.artist = ['<a href="',_.cleanUrl(b.data.songs[0].artistName, b.data.songs[0].artistID, "artist"),'">',_.cleanText(b.data.songs[0].artistName),"</a>"].join("");
            c.album = ['<a href="',_.cleanUrl(b.data.songs[0].albumName, b.data.songs[0].albumID,
                    "album"),'">',_.cleanText(b.data.songs[0].albumName),"</a>"].join("");
            c.numSongs = b.data.songs.length;
            b.dataKey = "FEED_ADD_LIBRARY_ALBUM";
            return new GS.Models.DataString(a.localize.getString(b.dataKey), c)
        },favoriteUser:function(b) {
            var c = {};
            c.user = GS.Models.FeedEvent.getUserLink(b.user);
            c.followed = ['<a href="',b.getUrlByType("user", 0),'">',b.getMetaByType("user", 0),"</a>"].join("");
            c.numUsers = b.data.users.length;
            if (c.numUsers > 2) {
                b.dataKey = "FEED_FAVORITE_USER_MANY";
                c.numUsers--
            } else if (c.numUsers == 2) {
                b.dataKey =
                        "FEED_FAVORITE_USER_TWO";
                c.followed2 = ['<a href="',b.getUrlByType("user", 1),'">',b.getMetaByType("user", 1),"</a>"].join("")
            } else b.dataKey = "FEED_FAVORITE_USER_ONE";
            console.warn(b.dataKey, c);
            return new GS.Models.DataString(a.localize.getString(b.dataKey), c)
        },share:function(b) {
            var c = {};
            if (b.data.playlists) {
                var g = b.data.playlists[0].owningName,h = b.data.playlists[0].subscribingName;
                c.user = GS.Models.FeedEvent.getUserLink(b.user);
                c.playlist = ['<a href="',_.cleanUrl(b.data.playlists[0].playlistName, b.data.playlists[0].playlistID,
                        "playlist"),'">',_.cleanText(b.data.playlists[0].playlistName),"</a>"].join("");
                c.author = ['<a href="',_.cleanUrl(g, b.data.playlists[0].userID, "user"),'">',g,"</a>"].join("");
                c.fan = ['<a href="',_.cleanUrl(h, b.userID, "user"),'">',h,"</a>"].join("");
                b.dataKey = "FEED_SHARE_PLAYLIST"
            } else {
                c.user = GS.Models.FeedEvent.getUserLink(b.user);
                c.song = ['<a class="songLink">',_.cleanText(b.data.songs[0].songName),"</a>"].join("");
                c.artist = ['<a href="',_.cleanUrl(b.data.songs[0].artistName, b.data.songs[0].artistID,
                        "artist"),'">',_.cleanText(b.data.songs[0].artistName),"</a>"].join("");
                c.album = ['<a href="',_.cleanUrl(b.data.songs[0].albumName, b.data.songs[0].albumID, "album"),'">',_.cleanText(b.data.songs[0].albumName),"</a>"].join("");
                c.numSongs = b.data.songs.length;
                if (c.numSongs > 2) {
                    b.dataKey = "FEED_SHARE_SONGS_MANY";
                    c.numSongs--
                } else if (c.numSongs == 2) {
                    c.song2 = ['<a class="songLink" data-song-index="1">',_.cleanText(b.data.songs[1].songName),"</a>"].join("");
                    b.dataKey = "FEED_SHARE_SONGS_TWO"
                } else b.dataKey = "FEED_SHARE_SONG"
            }
            return new GS.Models.DataString(a.localize.getString(b.dataKey),
                    c)
        },broadcast:function(b) {
            var c = {},g,h = false,k = b.people ? b.people.length : 0;
            c.user = GS.Models.FeedEvent.getUserLink(b.user);
            for (g = 0; g < k; g++)if (b.people[g].userID == GS.user.UserID) {
                h = true;
                break
            }
            if (b.data.playlists) {
                c.playlist = ['<a href="',_.cleanUrl(b.data.playlists[0].playlistName, b.data.playlists[0].playlistID, "playlist"),'">',_.cleanText(b.data.playlists[0].playlistName),"</a>"].join("");
                if (b.people && b.people.length)if (b.people.length > 2) {
                    c.person = ['<a href="',b.getUrlByType("taggedUser", 0),'">',b.getMetaByType("taggedUser",
                            0),"</a>"].join("");
                    c.numUsers = b.people.length - 1;
                    b.dataKey = h ? "FEED_BROADCAST_PLAYLIST_MANY_USERS_AND_YOU" : "FEED_BROADCAST_PLAYLIST_MANY_USERS"
                } else if (b.people.length == 2) {
                    c.person = ['<a href="',b.getUrlByType("taggedUser", 0),'">',b.getMetaByType("taggedUser", 0),"</a>"].join("");
                    c.person2 = ['<a href="',b.getUrlByType("taggedUser", 1),'">',b.getMetaByType("taggedUser", 1),"</a>"].join("");
                    b.dataKey = "FEED_BROADCAST_PLAYLIST_TWO_USERS"
                } else {
                    c.person = ['<a href="',b.getUrlByType("taggedUser", 0),'">',b.getMetaByType("taggedUser",
                            0),"</a>"].join("");
                    b.dataKey = "FEED_BROADCAST_PLAYLIST_ONE_USER"
                } else b.dataKey = "FEED_BROADCAST_PLAYLIST_NO_USERS"
            } else if (b.data.songs) {
                c.song = ['<a class="songLink">',_.cleanText(b.data.songs[0].songName),"</a>"].join("");
                c.artist = ['<a href="',_.cleanUrl(b.data.songs[0].artistName, b.data.songs[0].artistID, "artist"),'">',_.cleanText(b.data.songs[0].artistName),"</a>"].join("");
                c.album = ['<a href="',_.cleanUrl(b.data.songs[0].albumName, b.data.songs[0].albumID, "album"),'">',_.cleanText(b.data.songs[0].albumName),
                    "</a>"].join("");
                if (b.people && b.people.length)if (b.people.length > 2) {
                    c.person = ['<a href="',b.getUrlByType("taggedUser", 0),'">',b.getMetaByType("taggedUser", 0),"</a>"].join("");
                    c.numUsers = b.people.length - 1;
                    b.dataKey = h ? "FEED_BROADCAST_SONG_MANY_USERS_AND_YOU" : "FEED_BROADCAST_SONG_MANY_USERS"
                } else if (b.people.length == 2) {
                    c.person = ['<a href="',b.getUrlByType("taggedUser", 0),'">',b.getMetaByType("taggedUser", 0),"</a>"].join("");
                    c.person2 = ['<a href="',b.getUrlByType("taggedUser", 1),'">',b.getMetaByType("taggedUser",
                            1),"</a>"].join("");
                    b.dataKey = "FEED_BROADCAST_SONG_TWO_USERS"
                } else {
                    c.person = ['<a href="',b.getUrlByType("taggedUser", 0),'">',b.getMetaByType("taggedUser", 0),"</a>"].join("");
                    b.dataKey = "FEED_BROADCAST_SONG_ONE_USER"
                } else b.dataKey = "FEED_BROADCAST_SONG_NO_USERS"
            } else if (b.data.artists) {
                c.artist = ['<a href="',_.cleanUrl(b.data.artists[0].artistName, b.data.artists[0].artistID, "artist"),'">',_.cleanText(b.data.artists[0].artistName),"</a>"].join("");
                if (b.people && b.people.length)if (b.people.length > 2) {
                    c.person =
                            ['<a href="',b.getUrlByType("taggedUser", 0),'">',b.getMetaByType("taggedUser", 0),"</a>"].join("");
                    c.numUsers = b.people.length - 1;
                    b.dataKey = h ? "FEED_BROADCAST_ARTIST_MANY_USERS_AND_YOU" : "FEED_BROADCAST_ARTIST_MANY_USERS"
                } else if (b.people.length == 2) {
                    c.person = ['<a href="',b.getUrlByType("taggedUser", 0),'">',b.getMetaByType("taggedUser", 0),"</a>"].join("");
                    c.person2 = ['<a href="',b.getUrlByType("taggedUser", 1),'">',b.getMetaByType("taggedUser", 1),"</a>"].join("");
                    b.dataKey = "FEED_BROADCAST_ARTIST_TWO_USERS"
                } else {
                    c.person =
                            ['<a href="',b.getUrlByType("taggedUser", 0),'">',b.getMetaByType("taggedUser", 0),"</a>"].join("");
                    b.dataKey = "FEED_BROADCAST_ARTIST_ONE_USER"
                } else b.dataKey = "FEED_BROADCAST_ARTIST_NO_USERS"
            } else if (b.data.albums) {
                c.artist = ['<a href="',_.cleanUrl(b.data.albums[0].artistName, b.data.albums[0].artistID, "artist"),'">',_.cleanText(b.data.albums[0].artistName),"</a>"].join("");
                c.album = ['<a href="',_.cleanUrl(b.data.albums[0].albumName, b.data.albums[0].albumID, "album"),'">',_.cleanText(b.data.albums[0].albumName),
                    "</a>"].join("");
                if (b.people && b.people.length)if (b.people.length > 2) {
                    c.person = ['<a href="',b.getUrlByType("taggedUser", 0),'">',b.getMetaByType("taggedUser", 0),"</a>"].join("");
                    c.numUsers = b.people.length - 1;
                    b.dataKey = h ? "FEED_BROADCAST_ALBUM_MANY_USERS_AND_YOU" : "FEED_BROADCAST_ALBUM_MANY_USERS"
                } else if (b.people.length == 2) {
                    c.person = ['<a href="',b.getUrlByType("taggedUser", 0),'">',b.getMetaByType("taggedUser", 0),"</a>"].join("");
                    c.person2 = ['<a href="',b.getUrlByType("taggedUser", 1),'">',b.getMetaByType("taggedUser",
                            1),"</a>"].join("");
                    b.dataKey = "FEED_BROADCAST_ALBUM_TWO_USERS"
                } else {
                    c.person = ['<a href="',b.getUrlByType("taggedUser", 0),'">',b.getMetaByType("taggedUser", 0),"</a>"].join("");
                    b.dataKey = "FEED_BROADCAST_ALBUM_ONE_USER"
                } else b.dataKey = "FEED_BROADCAST_ALBUM_NO_USERS"
            }
            return new GS.Models.DataString(a.localize.getString(b.dataKey), c)
        },usersAddArtistToLibrary:function(b) {
            var c = {};
            c.user = GS.Models.FeedEvent.getUserLink(b.user);
            c.artist = ['<a href="',_.cleanUrl(b.data.songs[0].artistName, b.data.songs[0].artistID,
                    "artist"),'">',_.cleanText(b.data.songs[0].artistName),"</a>"].join("");
            b.dataKey = b.user.Sex == "M" ? "FEED_USERS_ADD_LIBRARY_ARTIST_MALE" : b.user.Sex == "F" ? "FEED_USERS_ADD_LIBRARY_ARTIST_FEMALE" : "FEED_USERS_ADD_LIBRARY_ARTIST_ALIEN";
            return new GS.Models.DataString(a.localize.getString(b.dataKey), c)
        },usersAddAlbumToLibrary:function(b) {
            var c = {};
            c.user = GS.Models.FeedEvent.getUserLink(b.user);
            c.artist = ['<a href="',_.cleanUrl(b.data.albums[0].artistName, b.data.albums[0].artistID, "artist"),'">',_.cleanText(b.data.albums[0].artistName),
                "</a>"].join("");
            c.album = ['<a href="',_.cleanUrl(b.data.albums[0].albumName, b.data.albums[0].albumID, "album"),'">',_.cleanText(b.data.albums[0].albumName),"</a>"].join("");
            c.numAlbums = b.data.albums.length;
            b.dataKey = b.user.Sex == "M" ? "FEED_USERS_ADD_LIBRARY_ALBUM_MALE" : b.user.Sex == "F" ? "FEED_USERS_ADD_LIBRARY_ALBUM_FEMALE" : "FEED_USERS_ADD_LIBRARY_ALBUM_ALIEN";
            return new GS.Models.DataString(a.localize.getString(b.dataKey), c)
        },getUserLink:function(b) {
            return['<a href="',b.toUrl(),'">',b.Name.length ? b.Name :
                    b.FName,"</a>"].join("")
        },wrapUsers:function(b) {
            for (var c = [],g,h = 0; h < b.length; h++) {
                g = b[h];
                c.push(GS.Models.User.wrap({UserID:g.userID,displayName:g.displayName,Picture:g.userPicture}))
            }
            return c
        },updateDaysOfWeek:function() {
            var b = a.localize.getString("WEEK_DAYS");
            if (b && b.length)this.daysOfWeek = b.split(",")
        },daysOfWeek:[],dateText:function(b) {
            var c,g = {};
            c = new Date;
            var h = c.getTime() - b.getTime();
            if (h < 6E4)c = a.localize.getString("SECONDS_AGO"); else if (h < 36E5) {
                c = a.localize.getString("MINUTES_AGO");
                g = {minutes:Math.ceil(h /
                        6E4)}
            } else if (h < 432E5 || c.getDate() == b.getDate() && h < 6048E5) {
                c = a.localize.getString("HOURS_AGO");
                g = {hours:Math.ceil(h / 36E5)}
            } else if (c.getDate() - 1 == b.getDate() && h < 6048E5) {
                c = a.localize.getString("YESTERDAY_AGO");
                g = {time:b.format("g:i a")}
            } else if (h < 6048E5) {
                c = a.localize.getString("DAY_AGO");
                g = {day:this.daysOfWeek[b.getDay()],time:b.format("g:i a")}
            } else {
                c = a.localize.getString("OVER_A_WEEK_AGO");
                g = {day:this.daysOfWeek[b.getDay()],date:b.format("F jS")}
            }
            return new GS.Models.DataString(c, g)
        }}, {eventID:null,
        activityName:null,activity:0,data:null,timestamp:null,userID:0,user:null,time:null,date:null,data:null,dataString:null,dataKey:null,users:null,validate:function() {
            return event.userID && event.data
        },init:function(b) {
            this._super(b);
            this.user = b.userIDFrom ? GS.Models.User.getOneFromCache(b.userIDFrom) : GS.Models.User.getOneFromCache(b.userID);
            if (!this.user && b.userID && b.userID == GS.user.UserID)this.user = GS.user; else if (!this.user && b.data.users && b.data.users.length) {
                this.users = GS.Models.FeedEvent.wrapUsers(b.data.users);
                this.user = this.users[0]
            } else if (!this.user && b.displayName)this.user = GS.Models.User.wrap({UserID:b.userID,displayName:b.displayName,Picture:b.userPicture}, false);
            this.date = new Date(b.timestamp * 1E3);
            this.dataString = GS.Models.FeedEvent[b.activityName] ? GS.Models.FeedEvent[b.activityName](this) : null;
            if (!this.dataString || !this.user)throw"no_dataString";
        },toHTML:function() {
            return this.dataString ? this.dataString.render() : ""
        },playSongs:function(b, c) {
            c = _.orEqual(c, false);
            if (this.data.songs && this.data.songs.length) {
                var g =
                        [],h = new GS.Models.PlayContext(GS.player.PLAY_CONTEXT_FEED, this);
                GS.Models.Song.wrapCollection(this.data.songs);
                for (var k in this.data.songs)this.data.songs.hasOwnProperty(k) && g.push(this.data.songs[k].songID);
                GS.player.addSongsToQueueAt(g, b, c, h)
            } else this.data.playlists && this.data.playlists.playlistID && GS.Models.Playlist.getPlaylist(this.data.playlists.playlistID, this.callback("playPlaylist", {index:b,playOnAdd:c}), null, false)
        },getSongs:function(b) {
            var c = this.data.songs && this.data.songs.length ? GS.Models.Song.wrapCollection(this.data.songs) :
                    [];
            return b ? c.reverse() : c
        },getSongsWithArt:function(b) {
            b = _.orEqual(b, 7);
            var c = [],g = {};
            if (this.data.songs && this.data.songs.length)for (var h = 0; h < this.data.songs.length; h++) {
                if (this.data.songs[h].artFilename && !g[this.data.songs[h].artFilename]) {
                    c.push(h);
                    g[this.data.songs[h].artFilename] = true
                }
                if (c.length == b)break
            }
            return c
        },getUrlByType:function(b, c) {
            c = _.orEqual(c, 0);
            try {
                switch (b) {
                    case "album":
                        if (this.data && this.data.songs)return _.cleanUrl(this.data.songs[c].albumName, this.data.songs[c].albumID, "album");
                        else if (this.data && this.data.albums)return _.cleanUrl(this.data.albums[c].albumName, this.data.albums[c].albumID, "album");
                        break;
                    case "artist":
                        if (this.data && this.data.songs)return _.cleanUrl(this.data.songs[c].artistName, this.data.songs[c].artistID, "artist"); else if (this.data && this.data.artists)return _.cleanUrl(this.data.artists[c].artistName, this.data.artists[c].artistID, "artist"); else if (this.data && this.data.albums)return _.cleanUrl(this.data.albums[c].artistName, this.data.albums[c].artistID, "artist");
                        break;
                    case "playlist":
                        if (this.data && this.data.playlists)return _.cleanUrl(this.data.playlists[c].playlistName, this.data.playlists[c].playlistID, "playlist");
                        break;
                    case "playlistAuthor":
                        if (this.data && this.data.playlists)return _.cleanUrl(this.data.playlists[c].owningName, this.data.playlists[c].owningUserID, "user");
                        break;
                    case "user":
                        if (this.data && this.data.users)if (this.data.users[c].userName)return _.cleanUrl(this.data.users[c].userName, this.data.users[c].userID, "user"); else if (this.data.users[c].displayName)return _.cleanUrl(this.data.users[c].displayName,
                                this.data.users[c].userID, "user");
                        break;
                    case "taggedUser":
                        if (this.data && this.people)return _.cleanUrl(this.people[c].userName, this.people[c].userID, "user");
                        break;
                    default:
                        return null
                }
            } catch(g) {
                return null
            }
        },getMetaByType:function(b, c) {
            c = _.orEqual(c, 0);
            try {
                switch (b) {
                    case "song":
                        return _.cleanText(this.data.songs[c].songName);
                    case "album":
                        if (this.data.songs && this.data.songs[c])return _.cleanText(this.data.songs[c].albumName); else if (this.data.albums && this.data.albums[c])return _.cleanText(this.data.albums[c].albumName);
                        break;
                    case "artist":
                        if (this.data.songs)return _.cleanText(this.data.songs[c].artistName); else if (this.data.artists)return _.cleanText(this.data.artists[c].artistName); else if (this.data.albums)return _.cleanText(this.data.albums[c].artistName);
                        break;
                    case "playlist":
                        return _.cleanText(this.data.playlists[c].playlistName);
                    case "playlistAuthor":
                        return _.cleanText(this.data.playlists[c].owningName);
                    case "user":
                        if (this.data.users[c].userName)return _.cleanText(this.data.users[c].userName); else if (this.data.users[c].displayName)return _.cleanText(this.data.users[c].displayName);
                        break;
                    case "taggedUser":
                        return _.cleanText(this.people[c].userName)
                }
            } catch(g) {
                return null
            }
            return null
        },getImageURL:function(b, c, g) {
            var h = "",k = "";
            c = _.orEqual(c, 0);
            g = _.orEqual(g, 70);
            switch (b) {
                case "song":
                case "album":
                    k = this.data.songs && this.data.songs[c] && this.data.songs[c].artFilename ? _.cleanText(this.data.songs[c].artFilename) : this.data.albums && this.data.albums[c] && this.data.albums[c].artFilename ? _.cleanText(this.data.albums[c].artFilename) : "album.png";
                    h = GS.Models.Album.artPath + g + "_" + k;
                    break;
                case "artist":
                    k =
                            this.data.songs && this.data.songs[c] && this.data.songs[c].artFilename ? _.cleanText(this.data.songs[c].artFilename) : this.data.artists && this.data.artists[c] && this.data.artists[c].artFilename ? _.cleanText(this.data.artists[c].artFilename) : "artist.png";
                    h = GS.Models.Artist.artPath + g + "_" + k;
                    break;
                case "playlist":
                    if (this.data.playlists && this.data.playlists[c] && this.data.playlists[c].artFilename) {
                        k = _.cleanText(this.data.playlists[c].artFilename);
                        h = GS.Models.Playlist.artPath + g + "_" + k
                    } else {
                        k = "album.png";
                        h = GS.Models.Album.artPath +
                                g + "_" + k
                    }
                    break;
                case "user":
                    k = this.data.users && this.data.users[c] && this.data.users[c].picture ? _.cleanText(this.data.users[c].picture) : "user.png";
                    h = GS.Models.User.artPath + g + "_" + k;
                    break;
                case "taggedUser":
                    k = this.people && this.people[c] && this.people[c].picture ? _.cleanText(this.people[c].picture) : "user.png";
                    h = GS.Models.User.artPath + g + "_" + k;
                    break
            }
            return h
        },playPlaylist:function(b, c) {
            c && c.PlaylistID && GS.player.playPlaylist(b, c)
        },remove:function(b, c) {
            this.user.UserID == GS.user.UserID ? GS.service.hideUserEvent(this.eventID,
                    b, c) : GS.service.removeItemFromCommunityFeed(this.eventID, this.date.format("Ymd"), b, c)
        },getDetailsForFeeds:function() {
            return{user:this.user.getDetailsForFeeds(),eventID:this.eventID,activityName:this.activityName}
        },canComment:function() {
            if (!GS.user.fanbase)GS.user.fanbase = GS.Models.Fanbase.wrap({objectID:GS.user.UserID,objectType:"user"});
            if (GS.user.UserID > 0 && (GS.user.UserID == this.user.UserID || GS.user.fanbase.userIDs.indexOf(this.user.UserID) != -1))return true;
            return false
        },addComment:function(b, c, g) {
            GS.service.addEventComment(this.eventID, b, this.callback([this.addCommentSuccess,c]), g)
        },addCommentSuccess:function(b) {
            if (!b || !b._id)return false;
            this.hasComments = true;
            if (!this.comments)this.comments = [];
            this.comments.push(b);
            return b
        },removeComment:function(b) {
            for (var c = 0; c < this.comments.length; c++) {
                var g = this.comments[c];
                if (b == g._id && (GS.user.UserID == g.userID || GS.user.UserID == this.user.UserID)) {
                    GS.service.hideEventComment(b, this.eventID);
                    this.comments.splice(c, 1);
                    return
                }
            }
        },toString:function() {
            return["Feed. type:",
                this.activityName,", usname: ",this.user.UserName].join("")
        }})
})(jQuery);
(function() {
    GS.Models.Feed.extend("GS.Models.ProfileFeed", {}, {type:"profile",fetch:function(a) {
        this.user.UserID > 0 && GS.user.UserID == this.user.UserID ? GS.service.getProfileFeed(this.lastDocumentID, this.lastEventID, this.callback("parseFeed", {lastDocumentID:this.lastDocumentID,lastEventID:this.lastEventID,currentPage:this.currentPage,callback:a.callback,errback:a.errback}), this.callback("onError", a)) : GS.service.getUserProfileFeed(this.user.UserID, this.lastDocumentID, this.lastEventID, this.callback("parseFeed",
                {lastDocumentID:this.lastDocumentID,lastEventID:this.lastEventID,currentPage:this.currentPage,callback:a.callback,errback:a.errback}), this.callback("onError", a))
    },parseFeed:function(a, b) {
        var c,g = [];
        if (_.isEmpty(b) || !b.events)return this.onError(a);
        if (!this.pages[a.currentPage]) {
            for (var h = 0; h < b.events.length; h++)if (b.events[h])if (c = this.parseEvent(b.events[h])) {
                g.push(c);
                this.cache[c.eventID] = c
            }
            this.events = this.events.concat(g);
            this.pages.push(g);
            this.currentPage++;
            this.lastDocumentID = b.lastDocumentID;
            this.lastEventID = b.lastEventID;
            this.isComplete = this.isLoaded = true;
            this.hasMore = b.count && this.currentPage < 10
        }
        a.callback && a.callback(this.pages[a.currentPage]);
        this.isComplete || this.fetch(a)
    }})
})(jQuery);
(function() {
    GS.Models.Feed.extend("GS.Models.CommunityFeed", {}, {type:"community",userIDs:[],fetch:function(a) {
        GS.user.UserID > 0 && GS.user.UserID == this.user.UserID ? GS.service.getCombinedFeed(this.userIDs, this.lastEventID, this.callback("parseFeed", {currentPage:this.currentPage,lastEventID:this.lastEventID,callback:a.callback,errback:a.errback}), this.callback("onError", a)) : GS.service.getUserCombinedFeed(this.user.UserID, this.userIDs, this.lastEventID, this.callback("parseFeed", {currentPage:this.currentPage,
            lastEventID:this.lastEventID,callback:a.callback,errback:a.errback}), this.callback("onError", a))
    },parseFeed:function(a, b) {
        var c,g = [];
        a = _.orEqual(a, {});
        if (_.isEmpty(b) || !b.events)return this.onError(a);
        if (!this.pages[a.currentPage]) {
            for (var h = 0; h < b.events.length; h++)if (b.events[h])if (c = this.parseEvent(b.events[h])) {
                g.push(c);
                this.cache[c.eventID] = c
            }
            this.events = this.events.concat(g);
            this.pages.push(g);
            this.currentPage++;
            this.lastEventID = b.lastEventID;
            this.isLoaded = Boolean(this.events.length);
            this.isComplete =
                    true;
            if (this.events.length < 75 && b.count >= 25 && this.pages.length < GS.Models.Feed.PAGE_LIMIT)this.isComplete = false;
            this.hasMore = b.count && this.currentPage < 10
        }
        a.callback && a.callback(this.pages[a.currentPage]);
        this.isComplete || this.fetch(a)
    }})
})(jQuery);
(function() {
    GS.Models.Feed.extend("GS.Models.MentionsFeed", {}, {type:"mentions",fetch:function(a) {
        GS.user.UserID > 0 && GS.user.UserID == this.user.UserID && GS.service.getUserNotifications(this.callback("parseFeed", {currentPage:this.currentPage,callback:a.callback,errback:a.errback}), a.errback)
    },parseFeed:function(a, b) {
        var c,g = [];
        a = _.orEqual(a, {});
        if (!this.pages[a.currentPage]) {
            for (var h = 0; h < b.length; h++)if (b[h])if (c = this.parseEvent(b[h])) {
                g.push(c);
                this.cache[c.eventID] = c
            }
            this.events = this.events.concat(g);
            this.pages.push(g);
            this.currentPage++;
            this.lastEventID = b.lastEventID;
            this.hasMore = Boolean(b.hasMore);
            this.isLoaded = !Boolean(b.hasMore) || this.events.length;
            this.isComplete = true
        }
        a.callback && a.callback(this.pages[a.currentPage]);
        this.isComplete || this.fetch(a)
    }})
})(jQuery);
(function() {
    GS.Models.Feed.extend("GS.Models.ArtistFeed", {}, {type:"artist",artist:null,fetch:function(a) {
        GS.service.getArtistProfileFeed(this.artist.ArtistID, this.lastDocumentID, this.lastEventID, this.callback("parseFeed", {artistID:this.artist.ArtistID,lastDocumentID:this.lastDocumentID,lastEventID:this.lastEventID,currentPage:this.currentPage,callback:a.callback,errback:a.errback}), a.errback)
    },parseFeed:function(a, b) {
        var c,g = [];
        a = _.orEqual(a, {});
        if (!this.pages[a.currentPage]) {
            for (var h = 0; h < b.events.length; h++)if (b.events[h])if (c =
                    this.parseEvent(b.events[h])) {
                g.push(c);
                this.cache[c.eventID] = c
            }
            this.events = this.events.concat(g);
            this.pages.push(g);
            this.currentPage++;
            this.lastDocumentID = b.lastDocumentID;
            this.lastEventID = b.lastEventID;
            this.hasMore = Boolean(b.hasMore);
            this.isLoaded = !Boolean(b.hasMore) || this.events.length;
            this.isComplete = true;
            this.events.length < 25 && b.count >= 25 && ++this.pages.length
        }
        a.callback && a.callback(this.pages[a.currentPage]);
        this.isComplete || this.fetch(a)
    }})
})(jQuery);
(function() {
    GS.Models.Feed.extend("GS.Models.RecentFeed", {interestingFeed:null,init:function() {
        this.interestingFeed = new GS.Models.RecentFeed({})
    }}, {type:"recent",fetch:function(a) {
        a = _.orEqual(a, {});
        a.limit = _.orEqual(a.limit, 50);
        GS.service.getInterestingEvents(a.limit, this.callback("parseFeed", {limit:a.limit,callback:a.callback,errback:a.errback,currentPage:this.currentPage}), a.errback)
    },parseFeed:function(a, b) {
        var c = [],g;
        if (!this.pages[a.currentPage]) {
            for (var h = 0; h < b.length; h++)if (g = this.parseEvent(b[h])) {
                c.push(g);
                this.cache[g.eventID] = g
            }
            this.events = this.events.concat(c);
            this.pages.push(c);
            this.currentPage++;
            this.isComplete = this.isLoaded = true
        }
        a.callback && a.callback(this.pages[a.currentPage]);
        this.isComplete || this.fetch(a)
    }})
})(jQuery);
(function(a) {
    var b;
    GS.Models.Base.extend("GS.Models.Theme", {}, {themeID:null,version:"1.0",title:"Unknown",author:"Grooveshark",location:"default",premium:false,sponsored:false,sections:null,assetLocation:"",clickIDs:null,tracking:null,pageTracking:null,expandableTracking:null,artistNotifTracking:null,videoLBTracking:null,adSync:false,misc:null,videos:null,artistIDs:null,isFirstLoad:true,isFirstLoadPageheader:true,screensaver:false,ready:null,removeReady:null,CSS:"css",TOP:"top",BOTTOM:"bottom",CENTER:"center",
        LEFT:"left",RIGHT:"right",AUTO:"auto",SCALEX:"scalex",SCALEY:"scaley",init:function(c) {
            b = this;
            c && this._super(c);
            this.assetLocation = "/themes/" + c.location + "/assets/"
        },bindAssets:function(c) {
            var g,h,k,m,n,o,q = 0,v;
            c = a(c);
            var x = c.attr("id");
            c.children().each(function() {
                var A = a(this);
                A.hasClass("flash") || A.click(b.callback(b.handleClick));
                if (A.hasClass("flash")) {
                    g = _.orEqual(A.attr("data-flash-wmode"), "opaque");
                    h = _.orEqual(A.attr("data-flash-width"), "100%");
                    k = _.orEqual(A.attr("data-flash-height"), "100%");
                    m = _.orEqual(A.attr("data-flash-src"), null);
                    flashParams = _.orEqual(A.attr("data-flash-params"), "");
                    flashVisualizer = _.orEqual(A.attr("data-flash-visualizer"), null);
                    if (m && A.attr("id")) {
                        v = flashVisualizer ? "visualizerTheme" : x + "-flash-" + q++;
                        A.append('<div id="' + v + '"></div>');
                        swfobject.embedSWF(b.assetLocation + m + "?ver=" + b.version + "&themeID=" + b.themeID + "&currentTarget=#" + A.attr("id") + flashParams, v, h, k, "9.0.0", null, null, {wmode:g})
                    }
                } else if (A.hasClass("img"))if (o = _.orEqual(A.attr("data-img-src"), null)) {
                    n = a(new Image);
                    n.css({visibility:"hidden"}).bind("load", {section:c}, b.onImageLoad).attr("src", gsConfig.assetHost + b.assetLocation + o + "?ver=" + b.version).appendTo(A)
                }
            })
        },onImageLoad:function(c) {
            var g = a(this);
            c = c.data.section;
            var h = g.is("[display=none]") || c.is("[display=none]");
            g.parent().andSelf().show();
            var k = !c.is(":visible");
            c.show();
            var m = g[0].width,n = g[0].height;
            h && g.parent().andSelf().hide();
            g.css({visibility:"visible"}).attr({"data-img-width":m,"data-img-height":n});
            k && c.hide();
            b.position(c)
        },position:function(c) {
            if (GS.page.activePage instanceof
                    GS.Controllers.Page.HomeController) {
                c = a(c);
                var g,h,k,m,n,o,q,v,x,A,u,C,F,H,G,D,w,y,I = a(c).height(),p = a(c).width();
                c.children(".img").each(function() {
                    g = a(this);
                    h = g.find("img");
                    k = _.orEqual(parseInt(h.attr("data-img-width")), 0);
                    m = _.orEqual(parseInt(h.attr("data-img-height")), 0);
                    if (k && m) {
                        w = _.orEqual(g.attr("data-img-top"), 0);
                        y = _.orEqual(g.attr("data-img-bottom"), 0);
                        G = _.orEqual(g.attr("data-img-left"), 0);
                        D = _.orEqual(g.attr("data-img-right"), 0);
                        o = p - G - D;
                        n = I - w - y;
                        x = parseInt(_.orEqual(g.attr("data-img-min-width"),
                                0));
                        q = parseInt(_.orEqual(g.attr("data-img-min-height"), 0));
                        v = parseInt(_.orEqual(g.attr("data-img-max-height"), n));
                        maxWidth = parseInt(_.orEqual(g.attr("data-img-max-width"), o));
                        A = g.attr("data-img-proportional") === "false" ? false : true;
                        switch (g.attr("data-img-scale")) {
                            case "scalex":
                                h.width(Math.min(Math.max(x, o), maxWidth));
                                A ? h.height(Math.round(h.width() / k * m)) : h.height(Math.min(Math.max(q, Math.round(n), v)));
                                break;
                            case "scaley":
                                h.height(Math.min(Math.max(q, n), v));
                                A ? h.width(Math.round(h.height() / m * k)) : h.width(Math.min(Math.max(x,
                                        Math.round(o), maxWidth)));
                                break;
                            case "fit":
                                u = Math.min(o / k, n / m);
                                h.width(Math.round(u * k));
                                h.height(Math.round(u * m));
                                break;
                            case "auto":
                            default:
                                if (A) {
                                    u = Math.max(o / k, n / m);
                                    h.width(Math.round(u * k));
                                    h.height(Math.round(u * m))
                                } else {
                                    h.width(Math.round(o / k * k));
                                    h.height(Math.round(n / m * m))
                                }
                                break
                        }
                        C = _.orEqual(g.attr("data-pos-x"), b.CENTER);
                        F = _.orEqual(g.attr("data-pos-y"), b.CENTER);
                        switch (C) {
                            case b.LEFT:
                                H = isNaN(G) ? G : G + "px";
                                h.css(b.LEFT, H);
                                break;
                            case b.RIGHT:
                                H = isNaN(D) ? D : D + "px";
                                h.css(b.RIGHT, H);
                                break;
                            case b.CENTER:
                                h.css(b.LEFT,
                                        Math.round((o - h.width()) / 2) + "px");
                                break
                        }
                        switch (F) {
                            case b.TOP:
                                H = isNaN(w) ? w : w + "px";
                                h.css(b.TOP, H);
                                break;
                            case b.BOTTOM:
                                H = isNaN(y) ? y : y + "px";
                                h.css(b.BOTTOM, H);
                                break;
                            case b.CENTER:
                                h.css(b.TOP, Math.round((n - h.height()) / 2) + "px");
                                break
                        }
                    }
                })
            }
        },handleClick:function(c) {
            var g = a(c.currentTarget),h;
            GS.theme.setLastDFPAction();
            switch (g.attr("data-click-action")) {
                case "playSong":
                    (c = g.attr("data-song-id")) && a.publish("gs.song.play", {songID:c,playOnAdd:true,getFeedback:true});
                    break;
                case "playAlbum":
                    c = g.attr("data-album-id");
                    h = g.attr("data-album-shuffle") == "true";
                    c && a.publish("gs.album.play", {albumID:c,playOnAdd:true,getFeedback:true,shuffle:h});
                    break;
                case "playPlaylist":
                    c = g.attr("data-playlist-id");
                    h = g.attr("data-playlist-shuffle") == "true";
                    var k = g.attr("data-radio-enabled") == "true";
                    c && a.publish("gs.playlist.play", {playlistID:c,playOnAdd:true,getFeedback:true,shuffle:h});
                    k && setTimeout(function() {
                        GS.player.setAutoplay(true)
                    }, 5E3);
                    break;
                case "playStation":
                    c = g.attr("data-station-id");
                    h = g.attr("data-station-name");
                    if (c &&
                            h) {
                        GS.Models.Station.extraStations[c] = h;
                        a.publish("gs.station.play", {tagID:c,stationName:h})
                    }
                    break;
                case "playVideo":
                    c = new GS.Models.Video({src:g.attr("data-video-src"),swf:g.attr("data-video-swf"),title:_.orEqual(g.attr("data-video-title"), null),author:_.orEqual(g.attr("data-video-author"), null),tracking:_.orEqual(g.attr("data-video-tracking"), null),originalWidth:_.orEqual(g.attr("data-video-originalWidth"), null),originalHeight:_.orEqual(g.attr("data-video-originalHeight"), null)});
                    c.swf.length && GS.getLightbox().open("video",
                            {video:c});
                    break;
                case "playVideos":
                    if (b.videos && b.videos.length) {
                        c = _.defined(c.index) ? c.index % b.videos.length : 0;
                        GS.getLightbox().open("video", {video:b.videos[c],videos:b.videos,index:c})
                    }
                    break;
                case "promotion":
                    GS.getLightbox().open("promotion", {theme:b});
                    break;
                case "openLightbox":
                    (c = g.attr("data-lightbox-name")) && GS.getLightbox().open(c);
                    break;
                case "expandable":
                    c = g.attr("data-expandable-id");
                    h = g.attr("data-expandable-height");
                    a(c).animate({height:h});
                    if (a.isArray(b.expandableTracking)) {
                        var m = (new Date).valueOf(),
                                n = a("body"),o;
                        _.forEach(b.expandableTracking, function(q) {
                            q += q.indexOf("?") != -1 ? "&" + m : "?" + m;
                            o = new Image;
                            n.append(a(o).load(
                                    function(v) {
                                        a(v.target).remove()
                                    }).css("visibility", "hidden").attr("src", q))
                        })
                    }
                    break;
                case "collapse":
                    c = g.attr("data-expandable-id");
                    a(c).height(0);
                    break;
                default:
                    break
            }
            g.attr("data-click-id") && GS.service.logThemeOutboundLinkClick(b.themeID, g.attr("data-click-id"))
        }})
})(jQuery);
(function() {
    GS.Models.Base.extend("GS.Models.Event", {defaults:{EventID:0,City:"",EventName:"",StartTime:"",TicketsURL:"",VenueName:"",ArtistName:"",searchText:""}}, {EventID:0,City:"",EventName:"",StartTime:"",TicketsURL:"",VenueName:"",ArtistName:"",searchText:"",init:function(a) {
        this._super(a);
        this.TicketsURL.match("utm_source") || (this.TicketsURL += "?utm_source=1&utm_medium=partner");
        this.searchText = [a.ArtistName,a.EventName,a.City,a.VenueName].join(" ").toLowerCase()
    }})
})(jQuery);
(function(a) {
    GS.Models.Base.extend("GS.Models.UserSettings", {NOTIF_EMAIL_USER_FOLLOW:1,NOTIF_EMAIL_INVITE_SIGNUP:2,NOTIF_EMAIL_PLAYLIST_SUBSCRIBE:16,NOTIF_EMAIL_NEW_FEATURE:4096,RSS_LISTENS:2,RSS_FAVORITES:1}, {UserID:0,local:{restoreQueue:0,lowerQuality:0,noPrefetch:0,playPauseFade:0,crossfadeAmount:5E3,crossfadeEnabled:0,tooltips:0,persistShuffle:1,lastShuffle:0,persistPinboard:0},FName:"",Email:"",Country:"",Zip:"",Sex:"",TSDOB:"",FeedsDisabled:0,NotificationEmailPrefs:0,emailNotifications:{userFollow:true,
        inviteSignup:true,playlistSubscribe:true,newFeature:true},rssFeeds:{listens:true,favorites:true},_hasLoadedSettings:false,init:function(b) {
        this._super(b);
        b = GS.store.get("player.restoreQueue");
        if (!_.defined(b)) {
            b = GS.store.get("player.restoreQueue" + this.UserID);
            if (_.defined(b))try {
                GS.store.set("player.restoreQueue", b)
            } catch(c) {
            }
        }
        this.local.restoreQueue = _.orEqual(b, 0);
        this.local.lowerQuality = _.orEqual(GS.store.get("player.lowerQuality" + this.UserID), 0);
        this.local.noPrefetch = _.orEqual(GS.store.get("player.noPrefetch" +
                this.UserID), 0);
        this.local.playPauseFade = _.orEqual(GS.store.get("player.playPauseFade" + this.UserID), 0);
        this.local.crossfadeAmount = _.orEqual(GS.store.get("player.crossfadeAmount" + this.UserID), 5E3);
        this.local.crossfadeEnabled = _.orEqual(GS.store.get("player.crossfadeEnabled" + this.UserID), 0);
        this.local.lastShuffle = _.orEqual(GS.store.get("player.lastShuffle" + this.UserID), 0);
        this.local.persistShuffle = _.orEqual(GS.store.get("player.persistShuffle" + this.UserID), 1);
        this.local.tooltips = _.orEqual(GS.store.get("user.tooltips" +
                this.UserID), 0);
        this.local.themeFlags = _.orEqual(GS.store.get("user.themeFlags" + this.UserID), 0);
        this.local.persistPinboard = _.orEqual(GS.store.get("user.persistPinboard" + this.UserID), 0);
        if (this.UserID <= 0)this._hasLoadedSettings = true
    },getUserSettings:function(b, c) {
        if (this.UserID)if (this._hasLoadedSettings)a.isFunction(b) && b(this); else GS.service.getUserSettings(this.callback(this._onSettingsSuccess, b), this.callback(this._onSettingsFailed, c))
    },_onSettingsSuccess:function(b, c) {
        if (c.hasOwnProperty("userInfo")) {
            a.extend(this,
                    c.userInfo);
            if (this.hasOwnProperty("LName") && this.hasOwnProperty("FName")) {
                var g = this.LName,h = this.FName;
                this.LName = a.trim(this.LName);
                this.FName = a.trim(this.FName);
                if (this.LName) {
                    this.FName += " " + this.LName;
                    this.FName = a.trim(this.FName)
                }
                delete this.LName;
                var k = {};
                if (this.FName !== h)k.FName = this.FName;
                if (g)k.LName = "";
                _.isEmpty(k) || GS.service.changeUserInfoEx(k)
            }
            this.NotificationEmailPrefs = parseInt(this.NotificationEmailPrefs, 10);
            this.FeedsDisabled = parseInt(this.FeedsDisabled, 10);
            this._updateBitmaskProps()
        }
        this._hasLoadedSettings =
                true;
        a.isFunction(b) && b(this)
    },_onSettingsFailed:function(b) {
        a.isFunction(b) && b(this)
    },_updateBitmaskProps:function() {
        this.emailNotifications = {userFollow:!(this.NotificationEmailPrefs & GS.Models.UserSettings.NOTIF_EMAIL_USER_FOLLOW),inviteSignup:!(this.NotificationEmailPrefs & GS.Models.UserSettings.NOTIF_EMAIL_INVITE_SIGNUP),playlistSubscribe:!(this.NotificationEmailPrefs & GS.Models.UserSettings.NOTIF_EMAIL_PLAYLIST_SUBSCRIBE),newFeature:!(this.NotificationEmailPrefs & GS.Models.UserSettings.NOTIF_EMAIL_NEW_FEATURE)};
        this.rssFeeds = {listens:!(this.FeedsDisabled & GS.Models.UserSettings.RSS_LISTENS),favorites:!(this.FeedsDisabled & GS.Models.UserSettings.RSS_FAVORITES)}
    },updateProfile:function(b, c, g) {
        b = a.extend({}, {FName:this.FName,Email:this.Email,Country:this.Country,Zip:this.Zip,Sex:this.Sex,TSDOB:this.TSDOB,PageName:GS.user.PathName}, b);
        if (this.UserID < 1)this._saveProfileFailed({statusCode:-1}); else {
            b.PageName === GS.user.PathName && delete b.PageName;
            var h;
            for (h in b)b.hasOwnProperty(h) && b[h] == this[h] && delete b[h];
            if (_.isEmpty(b))this._saveProfileSuccess({statusCode:1}); else if ((b.hasOwnProperty("Email") || b.hasOwnProperty("PageName")) && !_.defined(b.password))GS.getLightbox().open("confirmPasswordProfile", {params:b,callback:c,errback:g}); else {
                h = b.password;
                delete b.password;
                GS.service.changeUserInfoEx(b, h, this.callback(this._saveProfileSuccess, b, c, g), this.callback(this._saveProfileFailed, g))
            }
        }
    },_saveProfileSuccess:function(b, c, g, h) {
        if (h && h.statusCode === 1) {
            a.extend(this, b);
            if (b.hasOwnProperty("PageName"))GS.user.PathName =
                    b.PageName;
            a.isFunction(c) && c(h)
        } else this._saveProfileFailed(g, h)
    },_saveProfileFailed:function(b, c) {
        a.isFunction(b) && b(c)
    },changeNotificationSettings:function(b, c, g) {
        b = a.extend({}, this.emailNotifications, b);
        b = (b.userFollow ? 0 : GS.Models.UserSettings.NOTIF_EMAIL_USER_FOLLOW) | (b.inviteSignup ? 0 : GS.Models.UserSettings.NOTIF_EMAIL_INVITE_SIGNUP) | (b.playlistSubscribe ? 0 : GS.Models.UserSettings.NOTIF_EMAIL_PLAYLIST_SUBSCRIBE) | (b.newFeature ? 0 : GS.Models.UserSettings.NOTIF_EMAIL_NEW_FEATURE);
        if (this.UserID < 1)a.isFunction(g) &&
        g("Not logged in"); else GS.service.changeNotificationSettings(b, this.callback(this._notificationsSuccess, b, c, g), this.callback(this._notificationsFailed, g))
    },_notificationsSuccess:function(b, c, g, h) {
        if (h && h.statusCode === 1) {
            this.NotificationEmailPrefs = b;
            this._updateBitmaskProps();
            a.isFunction(c) && c(h)
        } else this._notificationsFailed(g, h)
    },_notificationsFailed:function(b, c) {
        a.isFunction(b) && b(c)
    },changeRSSSettings:function(b, c, g) {
        b = a.extend({}, this.rssFeeds, b);
        b = (b.listens ? 0 : GS.Models.UserSettings.RSS_LISTENS) |
                (b.favorites ? 0 : GS.Models.UserSettings.RSS_FAVORITES);
        if (this.UserID < 1)a.isFunction(g) && g("Not logged in"); else GS.service.changeFeedSettings(b, this.callback(this._notificationsSuccess, b, c, g), this.callback(this._notificationsFailed, g))
    },_rssSuccess:function(b, c, g, h) {
        if (h && h.statusCode === 1) {
            this.FeedsDisabled = b;
            this._updateBitmaskProps();
            a.isFunction(c) && c(h)
        } else this._rssFailed(g, h)
    },_rssFailed:function(b, c) {
        a.isFunction(b) && b(c)
    },changeLocalSettings:function(b, c) {
        a.extend(this.local, b);
        GS.store.set("player.restoreQueue",
                this.local.restoreQueue);
        GS.store.set("player.lowerQuality" + this.UserID, this.local.lowerQuality);
        GS.store.set("player.noPrefetch" + this.UserID, this.local.noPrefetch);
        GS.store.set("player.playPauseFade" + this.UserID, this.local.playPauseFade);
        GS.store.set("player.crossfadeAmount" + this.UserID, this.local.crossfadeAmount);
        GS.store.set("player.crossfadeEnabled" + this.UserID, this.local.crossfadeEnabled);
        GS.store.set("player.lastShuffle" + this.UserID, this.local.lastShuffle);
        GS.store.set("player.persistShuffle" +
                this.UserID, this.local.persistShuffle);
        GS.store.set("user.tooltips" + this.UserID, this.local.tooltips);
        GS.store.set("user.themeFlags" + this.UserID, this.local.themeFlags);
        GS.store.set("user.persistPinboard" + this.UserID, this.local.persistPinboard);
        a.publish("gs.settings.local.update", this.local);
        a.isFunction(c) && c(this)
    }})
})(jQuery);
(function(a) {
    var b;
    GS.Models.Base.extend("GS.Models.Video", {wrapYoutube:function(c, g) {
        if (!c.thumbnail)var h = c.Thumbnails && c.Thumbnails.length && c.Thumbnails[0] ? c.Thumbnails[0].url : "";
        g = g || c.Title || c.title || c.Video;
        return this.wrap(a.extend(true, {}, c, {title:g,duration:_.millisToMinutesSeconds((c.duration || c.Duration) * 1E3),type:"youtube",thumbnail:h,width:_.orEqual(c.Width, 480),height:_.orEqual(c.Height, 385),author:_.orEqual(c.Author, "")}))
    },sliderRenderer:function(c, g, h) {
        var k = '<li class="subcontent-item videos page_content_slide"><a class="subcontent-item-content video image insetBorder height90" rel="' +
                g + '"><img src="' + c.thumbnail + '" width="120" height="90" /></a><div class="meta">';
        k += c.Title.length > 56 ? '<a class="subcontent-item-content video" title="' + c.Title.replace(/["]/g, "&quot;") + '" rel="' + g + '">' + c.Title.substr(0, 40) + "&hellip;</a>" : '<a class="subcontent-item-content video" rel="' + g + '">' + h[g].Title + "</a>";
        k += '<span class="author"><span data-translate-text="SONG_BY">' + a.localize.getString("SONG_BY") + "</span>: " + c.Author + '</span><span class="duration"><span data-translate-text="SONG_DURATION">' +
                a.localize.getString("SONG_DURATION") + "</span>: " + c.duration + '</span><span class="source"><span data-translate-text="SONG_SOURCE">' + a.localize.getString("SONG_SOURCE") + "</span>: Youtube</span></div></li>";
        return k
    }}, {title:"",author:"",type:"flash",swf:"/webincludes/flash/videoplayer.swf",src:"",thumb:null,thumbnail:null,thumbTracking:null,originalWidth:null,originalHeight:null,id:"",width:480,height:385,flashvars:{version:gsConfig.coreVersion},params:{allowscriptaccess:"always",allowfullscreen:true},
        attributes:{name:"videoPlayer"},object:null,init:function(c) {
            b = this;
            c && this._super(c)
        },embed:function(c, g) {
            if (this.type == "flash") {
                g = _.orEqual(g, b.refreshWindow);
                object = swfobject.embedSWF(this.swf, c, this.width, this.height, "9.0.0", null, this.flashvars, this.params, this.attributes, g)
            } else if (this.type == "iframe")return GS.getVimeo().attachPlayer(this.VimeoID, this.width, this.height, c, g); else this.type == "youtube" && GS.getYoutube().attachPlayer(this.VideoID, this.width, this.height, c, g)
        },refreshWindow:function() {
            setTimeout(function() {
                        a(window).resize()
                    },
                    500)
        }})
})(jQuery);
(function(a) {
    function b(m, n) {
        var o = true,q = "http://rest.clearvoicesurveys.com/CVSRestfulService.svc/Json/";
        n = _.orEqual(n, 0);
        if (n >= 3)console.warn("service.sendRequest. numRetries maxed out. ", m); else {
            if (n > 0)o = false;
            if (m.url)q = m.url;
            q += m.method + "?orgGUID=BDE3B99E-44DD-4806-9278-89543B177460";
            if (m.memberGuid && !m.nomemberGuid)q += "&memberGUID=" + m.memberGuid;
            a.ajax(a.extend({}, m.options, {contentType:"application/json",cache:o,url:q,success:function(v, x, A) {
                if (v) {
                    if (v.HasError)if (a.isFunction(m.errback)) {
                        m.errback(v, A,
                                x);
                        return
                    }
                    a.isFunction(m.callback) && m.callback(v, x, A)
                } else {
                    n++;
                    console.warn("service.success NO DATA.  retry request again", m);
                    setTimeout(function() {
                        b(m, n)
                    }, 100 + n * 100)
                }
            },error:function(v, x, A) {
                a.isFunction(m.errback) && m.errback(false, v, x, A)
            }}))
        }
    }

    var c = [19,49,50,63,94,97,103,104,117,139,153,159,160,173,182,191,200],g = {create:"Member/CreateMember/",member:"Member/GetMember/",profile:"Demographics/GetProfilesForMember/",demographic:"Demographics/GetDemographicQuestions/",save:"Demographics/SaveDemographicAnswers/",
        reward:"Rewards/GetAvailableRewards/",redeem:"Rewards/RedeemReward/"},h = {method:false,options:{contentType:"application/json",dataType:"jsonp",data:{},cache:false}},k = null;
    GS.Models.Base.extend("GS.Models.Clearvoice", {createMember:function(m, n, o, q, v, x, A, u) {
        var C = a.extend(true, {}, h);
        m = {emailAddress:_.orEqual(m, ""),firstName:_.orEqual(n, ""),lastName:_.orEqual(o, ""),gender:_.orEqual(q, ""),zipCode:_.orEqual(v, ""),dateOfBirth:_.orEqual(x, "")};
        A = a.extend(true, {}, m, {callback:A,errback:u});
        C.method = g.create;
        C.nomemberGuid = true;
        C.options.data = a.extend(true, {}, m, C.options.data);
        C.callback = this.callback("createSuccess", A);
        C.errback = this.callback("createFailed", A);
        b(C)
    },createSuccess:function(m, n) {
        if ((m.member = n) && n.MemberGuid)GS.service.saveClearvoiceMemberInfo(n.MemberGuid, m.firstName, m.lastName, m.emailAddress, this.callback("saveSuccess", m), this.callback("saveFail", m)); else a.isFunction(m.errback) && m.errback(m.member)
    },createFailed:function(m, n) {
        m.member = n;
        if (n.ExceptionMessage && n.ExceptionMessage.match(/email/i) &&
                n.ExceptionMessage.match(/exists/i)) {
            var o = n.MemberGuid;
            GS.user.clearvoice && GS.user.clearvoice.MemberGuid == o ? GS.service.saveClearvoiceMemberInfo(o, m.firstName, m.lastName, m.emailAddress, this.callback("saveSuccess", m), this.callback("saveFail", m)) : GS.service.getClearvoiceMemberInfo(o, this.callback("_createMemberGSCheckSuccess", m), this.callback("_createMemberGSCheckFailed", m))
        } else a.isFunction(m.errback) && m.errback(m.member)
    },_createMemberGSCheckSuccess:function(m, n) {
        if (_.isArray(n) && n.length === 0 || !n.hasOwnProperty("userID")) {
            m.member =
                    a.extend(true, m.member, n);
            GS.service.getUserIDByClearvoiceEmail(m.emailAddress, this.callback("_createMemberEmailCheckSuccess", m), this.callback("_createMemberEmailCheckFailed", m))
        } else if (n.hasOwnProperty("userID") && n.userID == GS.user.UserID)this.memberSuccess(m, n); else if (a.isFunction(m.errback)) {
            try {
                delete m.member.ExceptionMessage
            } catch(o) {
            }
            m.errback(m.member)
        }
    },_createMemberGSCheckFailed:function(m) {
        a.isFunction(m.errback) && m.errback(m.member)
    },_createMemberEmailCheckSuccess:function(m, n) {
        if ((n =
                parseInt(n, 10)) && n === GS.user.UserID)this.memberSuccess(m, m.member); else if (a.isFunction(m.errback))if (n === 0)GS.service.saveClearvoiceMemberInfo(m.member.MemberGuid, m.firstName, m.lastName, m.emailAddress, this.callback("saveSuccess", m), this.callback("saveFail", m)); else {
            if (n)try {
                delete m.member.ExceptionMessage
            } catch(o) {
            }
            m.errback(m.member)
        }
    },_createMemberEmailCheckFailed:function(m) {
        a.isFunction(m.errback) && m.errback(m.member)
    },saveSuccess:function(m) {
        a.isFunction(m.callback) && GS.Models.Clearvoice.getMember(m.callback)
    },
        saveFail:function(m, n) {
            a.isFunction(m.errback) && m.errback(n, m.member)
        },getMember:function(m, n) {
            GS.service.getClearvoiceMemberInfo(null, this.callback("getAvailablePollsForUser", {callback:m,errback:n}), n)
        },getAvailablePollsForUser:function(m, n) {
            GS.user.isLoggedIn ? GS.service.getUserSurveys(GS.user.userID, this.callback("memberSuccess", m, n)) : this.memberSuccess(m, null, {available:[],completed:[]})
        },memberSuccess:function(m, n, o) {
            n = _.isArray(n) && n.length === 0 ? GS.Models.Clearvoice.wrap(n) : GS.Models.Clearvoice.wrap({});
            n.profileProgressTotal = 25;
            n = this.loadInPolls(n, o);
            GS.user.clearvoice = n;
            m.callback(n)
        },loadInPolls:function(m, n) {
            var o = n.available,q = n.completed;
            o.sort(function(x, A) {
                return A.TSModified - x.TSModified
            });
            q.sort(function(x, A) {
                return A.endDate - x.endDate
            });
            m.polls = {};
            m.polls.available = o;
            m.polls.completed = q;
            o = [];
            if (m.polls.completed.length != 0) {
                for (q = 0; q < m.polls.available.length; q++)for (var v = 0; v < m.polls.completed.length; v++)if (m.polls.available[q].SurveyID == m.polls.completed[v].SurveyID) {
                    m.polls.completed[v] =
                            m.polls.available[q];
                    break
                } else v == m.polls.completed.length - 1 && o.push(m.polls.available[q]);
                m.polls.available = o.concat()
            }
            return m
        },clearvoiceMemberSuccess:function(m, n) {
            n = a.extend(true, m.member, n);
            n = GS.Models.Clearvoice.wrap(n);
            GS.user.clearvoice = this.member;
            m.callback(n);
            GS.header.update()
        },getMemberClearvoice:function(m, n, o) {
            request = a.extend(true, {}, h);
            request.memberGuid = m;
            request.method = g.member;
            request.callback = n;
            request.errback = o;
            b(request)
        },defaultPointsPerProfiler:6,defaultPointsPerSurvey:150,
        numPointsForPlus:600,numPointsForAnywhere:900,CLEARVOICE_TO_GROOVESHARK_CONVERSION:100}, {MemberGuid:false,EmailAddress:"",FirstName:"",LastName:"",AvailableSurveys:[],CompletedSurveys:[],DynamicSurveys:[],RewardHistory:[],Profilers:[],profileProgress:0,profileProgressTotal:0,baseRequest:{},answers:null,surveyLookup:{},totalSurveys:0,init:function(m) {
        this._super(m);
        (this.enabled = GS.service.country && c.indexOf(parseInt(GS.service.country.ID, 10)) === -1) || (GS.service.country ? console.log("clearvoice disabled, banned country",
                GS.service.country.ID) : console.warn("clearvoice init, service has no country. disabled"));
        this.Profilers = _.orEqual(this.Profilers, []);
        this.baseRequest = a.extend(true, {memberGuid:this.MemberGuid}, h);
        this.getQuestions(this.callback("initFinish"))
    },initFinish:function() {
        this.profileProgressTotal = this.questions.length;
        this.surveyLookup = {};
        this.AvailableSurveys = _.orEqual(this.AvailableSurveys, []);
        this.CompletedSurveys = _.orEqual(this.CompletedSurveys, []);
        this.totalSurveys = this.AvailableSurveys.length;
        for (var m =
                0; m < this.AvailableSurveys.length; m++)this.surveyLookup[this.AvailableSurveys[m].SurveyId] = this.AvailableSurveys[m];
        for (m = 0; m < this.CompletedSurveys.length; m++)this.surveyLookup[this.CompletedSurveys[m].ProjectId] = this.CompletedSurveys[m];
        window.displaySurveyResult = this.callback(function(n) {
            if ((this.lastSurveyResult = n) && n.SurveyLength) {
                n.gsResult > 0 && GS.user.addPoints(n.gsResult, true);
                if (n.ResultCode == "S" && a("#page").is(".gs_page_surveys")) {
                    var o = n.hasOwnProperty(SurveyID) ? n.SurveyID : n.ProjectQuotaID;
                    a("#survey" + o + " a.startSurvey").replaceWith('<span class="surveyCompleted"><span data-translate-text="SURVEY_SURVEY_COMPLETED">' + a.localize.getString("SURVEY_SURVEY_COMPLETED") + "</span></span>");
                    a("div.surveys.completed", "#page.gs_page_surveys").append(a("#survey" + o));
                    a("div.surveys.available div.survey", "#page.gs_page_surveys").removeClass("last").filter(":last").addClass("last");
                    a("div.surveys.completed div.survey", "#page.gs_page_surveys").removeClass("last").filter(":last").addClass("last");
                    a("div.surveys.completed,h3.completed",
                            "#page.gs_page_surveys").show()
                }
                GS.getLightbox().open("surveyResult", n)
            } else GS.getLightbox().open("surveyResult", {ResultCode:"R",gsResult:-1})
        })
    },questions:false,getQuestions:function(m) {
        if (this.questions)if (a.isFunction(m))m(this.questions); else return this.questions;
        var n = [];
        if (k) {
            this.formatDemographics(k, n);
            this.questions = n
        } else a.ajax({url:"/webincludes/json/clearvoiceTop25Questions.json",async:false,success:this.callback(function(o) {
            try {
                k = JSON.parse(o)
            } catch(q) {
                return
            }
            this.formatDemographics(k,
                    n);
            this.questions = n;
            a.isFunction(m) && m(this.questions)
        }),error:function() {
        }})
    },getDemographics:function(m, n, o) {
        request = a.extend(true, {}, this.baseRequest);
        request.method = g.demographic;
        request.options.data = a.extend(true, {profileId:m}, request.options.data);
        request.callback = this.callback("demographicSuccess", n, m);
        request.errback = this.callback("handleError", o);
        b(request)
    },demographicSuccess:function(m, n, o) {
        n = [];
        this.formatDemographics(o.Demographics, n);
        a.isFunction(m) && m(n)
    },answers:{},formatDemographics:function(m, n) {
        var o = {};
        _.forEach(m, this.callback(function(q) {
            if (!o[q.DemographicId]) {
                var v = q.Conditions;
                this.cacheAnswers(q.PossibleAnswers);
                n.push(q);
                o[q.DemographicId] = true;
                q.MemberAnswers && this.saveLocalAnswers(q.MemberAnswers);
                v && v.length && _.forEach(v, this.callback(function(x) {
                    var A = x.ConditionalDemographics;
                    if (A && A.length == 1)if (!o[x.DemographicId]) {
                        n.push(a.extend(true, {}, x, A[0]));
                        o[x.DemographicId] = true;
                        this.cacheAnswers(A[0].PossibleAnswers);
                        A[0].MemberAnswers && this.saveLocalAnswers(A[0].MemberAnswers)
                    }
                }))
            }
        }))
    },
        answerLookup:{},cacheAnswers:function(m) {
            _.forEach(m, this.callback(function(n) {
                this.answerLookup[n.AnswerId] = n
            }))
        },saveLocalAnswers:function(m) {
            m = _.isArray(m) ? m : [m];
            if (!this.answers)this.answers = {};
            for (var n = 0; n < m.length; n++) {
                this.answers[m[n].DemographicId] || (this.answers[m[n].DemographicId] = {});
                this.answers[m[n].DemographicId][m[n].AnswerId] = m[n]
            }
        },saveAnswers:function(m, n, o) {
            m = _.isArray(m) ? m : [m];
            this.saveLocalAnswers(m);
            request = a.extend(true, {}, this.baseRequest);
            request.method = g.save;
            request.options.data =
                    a.extend(true, {memberAnswers:JSON.stringify(m)}, request.options.data);
            b(request);
            var q,v = {};
            for (q = 0; q < m.length; q++) {
                v[m[q].DemographicId] || (v[m[q].DemographicId] = []);
                v[m[q].DemographicId].push(m[q].AnswerId)
            }
            GS.service.addClearvoiceAnswers(v, n, o);
            GS.user.addPoints(GS.Models.Clearvoice.defaultPointsPerProfiler, true)
        },answerSuccess:function(m, n) {
            a.isFunction(m) && m(n)
        },savePollAnswers:function(m, n, o, q, v) {
            GS.service.saveUserAnswers(m, n, o, true, v, this.callback("savePollAnswersError"))
        },savePollAnswersError:function() {
            a.publish("gs.notification",
                    {type:"error",message:a.localize.getString("GROOVESHARK_SURVEYS_SAVE_ERROR_MSG")});
            location.hash = "/surveys"
        },resetProgress:function() {
            this.getQuestions(this.callback(function() {
                this.profileProgress = _.toArrayID(this.answers).length;
                this.profileProgressTotal = this.questions.length
            }))
        },getRewards:function(m, n) {
            request = a.extend(true, {}, baseRequest);
            request.method = g.reward;
            request.callback = this.callback("rewardsSuccess", m);
            request.errback = this.callback("handleError", n);
            b(request)
        },rewardsSuccess:function(m, n) {
            a.isFunction(m) && m(n)
        },payByPoints:function() {
            var m = hex_md5((new Date).getTime()),n = gsConfig.runMode == "production" ? "https://vip.grooveshark.com/" : "https://stagingvip.grooveshark.com/",o = {callbackMethod:m,callbackUrl:location.protocol + "//" + location.host + "/vipCallback.php",bExtend:GS.user.IsPremium ? 1 : 0};
            window[m] = this.callback(function(q) {
                if (q.bSuccess && q.token) {
                    var v = hex_md5((new Date).getTime()),x = q.description.match(/anywhere/i) ? "anywhere" : "plus",A = gsConfig.runMode == "production" ? "https://vip.grooveshark.com/" :
                            "https://stagingvip.grooveshark.com/";
                    q = {callbackMethod:v,callbackUrl:location.protocol + "//" + location.host + "/vipCallback.php",token:q.token};
                    window[v] = this.callback(function(u) {
                        if (u.bSuccess) {
                            GS.user.updateAccountType(x);
                            location.hash += " "
                        }
                    });
                    GS.service.httpsFormSubmit(A + "payByPointsConfirm.php", q, v)
                }
            });
            GS.service.httpsFormSubmit(n + "payByPoints.php", o, m)
        },redeemRewards:function(m, n, o) {
            request = a.extend(true, {}, baseRequest);
            request.method = g.redeem;
            request.callback = this.callback("redeemSuccess", n);
            request.errback =
                    this.callback("handleError", o);
            b(request)
        },redeemSuccess:function(m, n) {
            a.isFunction(m) && m(n)
        },handleError:function(m, n, o, q, v) {
            a.isFunction(m) && m(n, o, q, v)
        },askSurveyQuestionNotification:function() {
            if (!a("#page_content").is(".surveys"))if (this.enabled)for (var m,n = 0,o = {6:true,7:true}; m = this.questions[n];)if (this.answers && this.answers[m.DemographicId])n++; else if (this.answers && m.AnswerId && this.answers[m.ParentDemographicId] && !this.answers[m.ParentDemographicId][m.AnswerId])n++; else if (o[m.DemographicTypeId])n++;
            else if (n < this.questions.length) {
                GS.getNotice().displaySurveyQuestion({question:m,questionIndex:n,callback:this.callback("questionNotificationAnswered")});
                return
            }
        },questionNotificationAnswered:function(m, n, o) {
            if (this.answerLookup[n]) {
                this.saveAnswers([this.answerLookup[n]], function(q) {
                    GS.user.clearvoice.determineValidAnswer(q)
                });
                o == this.questions.length - 1 ? GS.getNotice().displaySurveyProfilersComplete() : setTimeout(this.callback("askSurveyQuestionNotification"), 750)
            }
        },determineValidAnswer:function(m) {
            var n =
                    false,o = [];
            if (m && m.questionResults) {
                _.forEach(m.questionResults, function(q, v) {
                    if (q < 1) {
                        o.push(v + "=" + q);
                        n = true
                    }
                });
                n && GS.getNotice().displaySurveyAnswerError(o.join(", "))
            }
        },showInvitationNotification:function() {
            this.enabled && !GS.user.IsPremium && GS.getNotice().displaySurveyInvitation()
        },showSurveysAvailableNotification:function() {
            this.enabled && this.AvailableSurveys.length > 0 && GS.getNotice().displaySurveysAvailable(GS.user.clearvoice.AvailableSurveys[0])
        }})
})(jQuery);
(function() {
    GS.Models.Base.extend("GS.Models.Visualizer", {}, {title:"",author:"",swf:"/webincludes/flash/visualizerplayer.swf",src:"",thumb:null,width:480,height:270,flashvars:{version:gsConfig.coreVersion},params:{allowscriptaccess:"always",allowfullscreen:true,wmode:"window"},attributes:{name:"visualizerPlayer"},object:null,init:function(a) {
        a && this._super(a)
    },embed:function(a) {
        object = swfobject.embedSWF(this.swf, a, this.width, this.height, "9.0.0", null, this.flashvars, this.params, this.attributes)
    }})
})(jQuery);
(function() {
    GS.Models.Base.extend("GS.Models.Promotion", {promotions:{1:{title:"Can't Wait to Get It On Playlists"}},submitPlaylistForCampaign:function(a, b, c, g) {
        GS.service.submitPlaylistForCampaign(a, b, c, g)
    },submitSongVoteForCampaign:function(a, b, c, g) {
        GS.service.submitSongVoteForCampaign(a, b, c, g)
    }}, {campaignID:0,title:null,playlists:null,init:function(a) {
        this.campaignID = a;
        this.title = GS.Models.Promotion.promotions[this.campaignID].title
    },getPlaylistsForCampaign:function(a, b) {
        GS.service.getPlaylistsForCampaign(this.campaignID,
                this.callback(["savePlaylists",a]), b)
    },savePlaylists:function(a) {
        return this.playlists = GS.Models.Playlist.wrapCollection(a)
    }})
})(jQuery);
(function(a) {
    a.Model.extend("GS.Models.Feature", {TYPE_ACTIVATE:"ACTIVATE",TYPE_PASSIVE:"PASSIVE",TYPE_PLUGIN:"PLUGIN",Features:{},Activated:{},Plugins:{},init:function() {
        GS.Models.Feature.Plugins.sharkZapper = new GS.Models.Feature({})
    },register:function(b, c) {
        GS.Models.Feature.Features[b] = new GS.Models.Feature(c)
    }}, {FeatureID:"",TextKey:"",Author:"Grooveshark",URL:"",IsPremium:true,Type:"PASSIVE",IsLoaded:false,LoadOnActivate:false,ActivateCallback:null,IsActiveCallback:null,init:function(b) {
        this._super(b)
    },
        activate:function(b) {
            if ((GS.user.IsPremium || !this.IsPremium) && this.ActivateCallback) {
                this.ActivateCallback();
                b && b()
            } else this.ActivateCallback && GS.getLightbox().open("vipOnlyFeature", {callback:this.callback(this.activate, b)})
        },isActive:function() {
            return this.IsActiveCallback ? this.IsActiveCallback() : false
        },getImageURL:function(b) {
            b = _.orEqual(b, "s");
            return gsConfig.assetHost + "/features/" + this.FeatureID + "/icon_" + b + ".png"
        },getButtonKey:function() {
            return this.Type + (this.isActive() ? "_BUTTON_OFF" : "_BUTTON_ON")
        }})
})(jQuery);
$.extend($.View.EJS.Helpers.prototype, {localeTag:function(a, b, c, g) {
    c = c || {};
    c["data-translate-text"] = b;
    b = $.localize.getString(b);
    if (g)b = $("<span></span>").dataString(b, g).render();
    return[this.tag(a, c),b,this.tagEnd(a)].join("")
},tag:function(a, b, c) {
    var g = ["<" + a];
    _.forEach(b, function(h, k) {
        g.push(" " + k + '="' + h + '"')
    });
    g.push(c || ">");
    return g.join("")
},tagEnd:function(a) {
    return["</",a,">"].join("")
}});
jQuery.Controller.extend("GS.Controllers.BaseController", {setup:function() {
    this._super.apply(this, arguments);
    this.preSetup && this.preSetup()
},init:function() {
    this._super();
    if (this.onWindow && !this.isGSSingleton)new this($(window)); else this.onElement && !this.isGSSingleton && new this($(this.onElement))
},instance:function() {
    if (this.isGSSingleton)return new this(this.onElement && $(this.onElement) || this.onWindow && window || document.documentElement);
    if (this.onDocument)return $(document.documentElement).controller(this._shortName);
    if (this.onWindow)return $(window).controller(this._shortName);
    if (this.onElement)return $(this.onElement).controller(this._shortName);
    if (this.hasActiveElement)return $(this.hasActiveElement).controller(this._shortName);
    throw"BaseController. controller, " + this._shortName + ", is improperly embedded on page";
},singletonCallback:function(a, b) {
    a = "get" + _.ucwords(a);
    var c = arguments;
    return function() {
        var g = GS[a](),h = jQuery.makeArray(c).slice(2);
        h.push.apply(h, arguments);
        return g[b].apply(g, h)
    }
},viewBundles:{},
    bundleVersions:{}}, {init:function() {
    this.subscribe("gs.app.ready", this.callback(this.appReady))
},appReady:function() {
},destroy:function() {
    if ($.isArray(this.subscriptions))for (; this.subscriptions.length;)$.unsubscribe(this.subscriptions.pop());
    this._super()
},subscribe:function(a, b, c) {
    c = _.orEqual(c, true);
    if (!_.defined(this.subscriptions))this.subscriptions = [];
    c ? this.subscriptions.push($.subscribe(a, b)) : $.subscribe(a, b)
},view:function(a, b, c, g) {
    var h = ["gs","views"];
    if (a.match(/^themes/))h = [a]; else if (a.match(/^\//))h.push(a.replace(/^\//,
            "")); else {
        h.push(this.Class._shortName);
        h.push(a)
    }
    h = "/" + h.join("/");
    h += $.View.ext;
    var k = h.replace(/[\/\.]/g, "_").replace(/_+/g, "_").replace(/^_/, ""),m = GS.Controllers.BaseController.viewBundles[k],n = GS.Controllers.BaseController.bundleVersions[m] || "",o = "",q = true;
    b = _.orEqual(b, this);
    c = this.calculateHelpers.call(this, c);
    if ($.View.preCached[k] || !m)return $.View(h, b, c);
    g = _.orEqual(g, 0);
    if (!(g >= 3)) {
        if (g > 0)q = false;
        k = {contentType:"application/json",dataType:"json",type:"GET",url:"/gs/views/" + m + ".json?" + n,
            async:false,cache:q,success:this.callback(function(v) {
                if (v) {
                    _.forEach(v, function(x, A) {
                        $.View.preCached[A] = x
                    });
                    o = $.View(h, b, c)
                } else {
                    g++;
                    setTimeout(this.callback(function() {
                        this.view(a, b, c, g)
                    }), g * 100)
                }
            }),error:this.callback(function() {
                g++;
                setTimeout(this.callback(function() {
                    this.view(a, b, c, g)
                }), g * 100)
            })};
        if (window.gsConfig && window.gsConfig.viewsJSONP) {
            k.url = gsConfig.assetHost + "/gs/views/" + m + ".json?" + n;
            k.dataType = "jsonp";
            k.jsonp = false;
            k.jsonpCallback = window.gsConfig.viewsJSONP + m
        }
        $.ajax(k);
        return o
    }
}});
GS.Controllers.BaseController.extend("GS.Controllers.AirbridgeController", {onDocument:true}, {isDesktop:false,_bridge:null,oldWindowOpen:null,init:function() {
    if (window.parentSandboxBridge) {
        this.isDesktop = true;
        this._bridge = window.parentSandboxBridge;
        window.childSandboxBridge = this;
        window.console.error = this._bridge.consoleError;
        GS.store.set = this._bridge.storeSet;
        GS.store.get = this._bridge.storeGet;
        GS.store.remove = this._bridge.storeRemove;
        GS.store.clear = this._bridge.storeClear;
        gsConfig.assetHost = "http://" +
                window.location.host;
        this.subscribe("gs.player.playstatus", this.callback(this._onPlayStatus));
        this.subscribe("gs.player.song.change", this.callback(this._onSongChange));
        this.subscribe("gs.player.queue.change", this.callback(this._onQueueChange));
        this.subscribe("gs.auth.favorites.songs.add", this.callback(this._onFavLibChanged));
        this.subscribe("gs.auth.favorites.songs.remove", this.callback(this._onFavLibChanged));
        this.subscribe("gs.auth.library.add", this.callback(this._onFavLibChanged));
        this.subscribe("gs.auth.library.remove",
                this.callback(this._onFavLibChanged));
        var a = this;
        $("body").delegate('a[target="_blank"]', "click", function(b) {
            if (!$(b.target).closest("a").hasClass("airNoFollow")) {
                b.preventDefault();
                b = $(b.target).closest("a").attr("href");
                a._bridge.consoleWarn(b);
                b && a._bridge.navigateToUrl(b, "_blank");
                return false
            }
        });
        this.oldWindowOpen = window.open;
        window.open = function(b, c, g) {
            g = _.orEqual(g, "width=800,height=600");
            return c == "_blank" ? a._bridge.navigateToUrl(b, c) : a.oldWindowOpen.call(window, b, c, g)
        }
    }
    this._super()
},_lastStatus:null,
    _onPlayStatus:function(a) {
        if (a && this._lastStatus)if (a.status === this._lastStatus.status)if (!a.activeSong && !this._lastStatus.activeSong) {
            this._lastStatus = a;
            return
        } else if (a.activeSong && this._lastStatus.activeSong)if (a.activeSong.SongID == this._lastStatus.activeSong.SongID && a.activeSong.autoplayVote == this._lastStatus.activeSong.autoplayVote) {
            this._lastStatus = a;
            return
        }
        this._lastStatus = a;
        this._bridge && this._bridge.playerChange()
    },_onQueueChange:function() {
        this._bridge && this._bridge.playerChange()
    },_onSongChange:function(a) {
        if (!this._lastStatus ||
                this._lastStatus.activeSong && this._lastStatus.activeSong.SongID === a.SongID && this._lastStatus.activeSong.autoplayVote !== a.autoplayVote) {
            if (this._lastStatus)this._lastStatus.activeSong.autoplayVote = a.autoplayVote;
            this._bridge && this._bridge.playerChange()
        }
    },_onFavLibChanged:function(a) {
        if (a && GS.player.queue && GS.player.queue.activeSong && parseInt(a.SongID, 10) == parseInt(GS.player.queue.activeSong.SongID, 10)) {
            GS.player.queue.activeSong.isFavorite = a.isFavorite;
            GS.player.queue.activeSong.fromLibrary = a.fromLibrary;
            this._bridge && this._bridge.playerChange()
        }
    },appReady:function() {
        this._bridge && this._bridge.ready()
    },getDesktopPreferences:function() {
        return this._bridge ? this._bridge.getDesktopPreferences() : null
    },setDesktopPreferences:function(a) {
        this._bridge && this._bridge.setDesktopPreferences(a)
    },displayNotification:function(a, b) {
        $.publish("gs.notification", {type:a,message:$.localize.getString(b)})
    },getQueueStatus:function() {
        var a = GS.player.getCurrentQueue(true);
        a || (a = {});
        if (a.activeSong) {
            a.activeSong.url = "http://grooveshark.com/" +
                    a.activeSong.toUrl().replace("#/", "");
            a.activeSong.imageUrl = a.activeSong.getImageURL()
        }
        a.playStatus = GS.player.lastStatus;
        return a
    },setHash:function(a) {
        window.location.hash = a
    },safeToClose:function() {
        return window.onbeforeunload()
    },addSongsToQueueAt:function() {
        return GS.player.addSongsToQueueAt.apply(GS.player, arguments)
    },playSong:function() {
        return GS.player.playSong.apply(GS.player, arguments)
    },pauseSong:function() {
        return GS.player.pauseSong.apply(GS.player, arguments)
    },resumeSong:function() {
        return GS.player.resumeSong.apply(GS.player,
                arguments)
    },stopSong:function() {
        return GS.player.stopSong.apply(GS.player, arguments)
    },previousSong:function() {
        return GS.player.previousSong.apply(GS.player, arguments)
    },nextSong:function() {
        return GS.player.nextSong.apply(GS.player, arguments)
    },flagSong:function() {
        return GS.player.flagSong.apply(GS.player, arguments)
    },voteSong:function() {
        return GS.player.voteSong.apply(GS.player, arguments)
    },getIsMuted:function() {
        return GS.player.getIsMuted.apply(GS.player, arguments)
    },setIsMuted:function() {
        return GS.player.setIsMuted.apply(GS.player,
                arguments)
    },getVolume:function() {
        return GS.player.getVolume.apply(GS.player, arguments)
    },setVolume:function() {
        return GS.player.setVolume.apply(GS.player, arguments)
    },getShuffle:function() {
        return GS.player.getShuffle.apply(GS.player, arguments)
    },setShuffle:function() {
        return GS.player.setShuffle.apply(GS.player, arguments)
    },setAutoplay:function() {
        return GS.player.setAutoplay.apply(GS.player, arguments)
    },clearQueue:function() {
        return GS.player.clearQueue.apply(GS.player, arguments)
    },getRepeat:function() {
        return GS.player.getRepeat.apply(GS.player,
                arguments)
    },setRepeat:function() {
        return GS.player.setRepeat.apply(GS.player, arguments)
    },addPlaylist:function(a, b, c) {
        GS.Models.Playlist.getPlaylist(a, function(g) {
            g.play(b, c)
        }, null, false)
    },addSongFromToken:function(a, b, c) {
        GS.Models.Song.getSongFromToken(a, function(g) {
            GS.player.addSongsToQueueAt([g.SongID], b, c)
        }, null, false)
    },favoriteSong:function(a) {
        GS.user.addToSongFavorites(a)
    },unfavoriteSong:function(a) {
        GS.user.removeFromSongFavorites(a)
    },addSongToLibrary:function(a) {
        GS.user.addToLibrary([a])
    },removeSongFromLibrary:function(a) {
        GS.user.removeFromLibrary(a)
    },
    executeProtocol:function(a) {
        GS.Controllers.ApiController.instance().executeProtocol(a)
    }});
(function() {
    function a() {
        this.requests = [];
        this.pendingRequest = null
    }

    function b(p) {
        var r = [].slice.call(arguments, 1),s = (new Date).valueOf(),t = new this;
        this.apply(t, r);
        r = 6E5;
        if (p) {
            if (typeof p == "number")r = p;
            var B = t.getCacheKey(),E = t.pendingCallCache[B];
            if (_.defined(E) && (!E.isResolved() || s - E.lastResolution < r))t = E; else t.pendingCallCache[B] = t
        }
        return t
    }

    function c(p, r, s, t, B) {
        function E() {
            J.isPending = false;
            J.lastResolution = (new Date).valueOf()
        }

        this.method = _.orEqual(p, "");
        this.parameters = _.orEqual(r, {});
        this.options =
                _.orEqual(s, {});
        this.useHTTPS = _.orEqual(t, false);
        this.useSWF = _.orEqual(B, false);
        this.overrideHeaders = {};
        this.type = "normal";
        this.isPending = this.failedAuth = false;
        this.numRetries = 0;
        this.lastFault = null;
        this.lastResolution = 0;
        this.successFilters = [];
        this.faultFilters = [];
        this._dfd = $.Deferred();
        var J = this;
        this.promise().then(E, E)
    }

    function g(p, r, s) {
        c.call(this, p, r);
        this.httpMethod = _.orEqual(s, "POST");
        this.type = "facebook"
    }

    function h(p) {
        c.call(this, null, p);
        this.type = "lastfm"
    }

    function k() {
        var p = String(Math.floor(Math.random() *
                1E4));
        return!GS.service.outgoingSWFCalls[p] ? p : k()
    }

    function m(p, r) {
        var s;
        if ($.isFunction(GS.service.swfProxy)) {
            s = k();
            GS.service.outgoingSWFCalls[s] = p;
            GS.service.swfProxy(p.getSWFable(), r, s)
        } else {
            p.isPending = false;
            GS.service.callsPendingSWF.push(p)
        }
    }

    function n() {
        for (var p = "",r = 0; r < 6; r++)p += Math.floor(Math.random() * 16).toString(16);
        return p != GS.service.lastRandomizer ? p : n()
    }

    function o(p) {
        p = _.orEqual(p, {});
        var r = {client:GS.service.client,clientRevision:GS.service.clientRevision,privacy:GS.service.privacy,
            country:GS.service.country,uuid:GS.service.uuID};
        if (GS.service.sessionID)r.session = GS.service.sessionID;
        return $.extend(r, p)
    }

    function q(p, r) {
        _.defined(p) || (p = {fault:{message:"Empty Result",code:GS.service.faultCodes.EMPTY_RESULT}});
        if (p.header) {
            var s = p.header,t = s.session;
            if (t && t != GS.service.sessionID) {
                GS.service.sessionID = t;
                GS.service.tokenPending = false;
                A()
            }
            if (s.expiredClient) {
                GS.service.clientExpired = true;
                GS.player && GS.player.expireSWFService();
                v()
            }
            s = s.secondsUntilDowntime;
            if (s < 0)_.wait(5E3).then(F);
            else if (s > 0) {
                s = Math.floor(s / 60);
                t = (new Date).valueOf();
                if (s <= 60)if (GS.service.lastDowntimeNotification == 0 || s > 30 && t - GS.service.lastDowntimeNotification > 36E5 || s <= 30 && s > 15 && t - GS.service.lastDowntimeNotification > 18E5 || s <= 15 && s > 10 && t - GS.service.lastDowntimeNotification > 9E5 || s <= 10 && s > 5 && t - GS.service.lastDowntimeNotification > 6E5 || s <= 5 && t - GS.service.lastDowntimeNotification > 3E5) {
                    GS.service.lastDowntimeNotification = t;
                    s = new GS.Models.DataString($.localize.getString("NOTIFICATION_MAINTENANCE_WARNING"), {min:s});
                    $.publish("gs.notification", {type:"info",message:s})
                }
            }
        }
        p.fault ? x(p.fault, r) : r.resolve(_.orEqual(p.result, p))
    }

    function v() {
        GS.getLightbox().open({type:"invalidClient",notCloseable:true,view:{header:"POPUP_INVALID_CLIENT_TITLE",message:"POPUP_INVALID_CLIENT_MSG",buttonsRight:[
            {label:"POPUP_INVALID_CLIENT_SUBMIT",className:"submit"}
        ]},callbacks:{".submit":function(p) {
            p.stopImmediatePropagation();
            window.location.reload(true)
        }}})
    }

    function x(p, r) {
        if (p && _.defined(p.code)) {
            console.log("HANDLE FAULT CODE",
                    p.code, r.method);
            if (p.code == GS.service.faultCodes.INVALID_TOKEN) {
                var s = (new Date).valueOf();
                if ((!GS.service.lastTokenFailed || s - GS.service.lastTokenFailed >= 3E5) && r.numRetries === 0) {
                    GS.service.lastTokenFailed = false;
                    r.isPending = false;
                    r.numRetries++;
                    GS.service.callsPendingToken.push(r);
                    A();
                    return
                } else $.publish("gs.notification", {type:"error",message:$.localize.getString("SERVICE_ERROR_COMMUNICATING"),uniqueInstance:"errorCommunicating"})
            } else if (p.code == GS.service.faultCodes.HTTP_TIMEOUT || p.code == GS.service.faultCodes.EMPTY_RESULT) {
                r.lastFault =
                        p;
                r.retry(100 + r.numRetries * 100);
                return
            } else if (p.code == GS.service.faultCodes.MAINTENANCE)_.wait(5E3).then(F); else if (p.code == GS.service.faultCodes.INVALID_CLIENT)v(); else if (p.code == GS.service.faultCodes.INVALID_SESSION)GS.getLightbox().open({type:"sessionBad",notCloseable:true,view:{header:"POPUP_SESSION_BAD_TITLE",message:"POPUP_SESSION_BAD_MSG",buttonsLeft:[
                {label:"POPUP_REFRESH_GROOVESHARK",className:"submit"}
            ]},callbacks:{".submit":function(t) {
                t.stopImmediatePropagation();
                window.location.reload(true)
            }}});
            else if (gsConfig.runMode == "dev" && p.code == GS.service.faultCodes.HTTP_ERROR && r.method == "getCommunicationToken") {
                window.location.hash && GS.store.set("httpsHash", window.location.hash);
                window.location = "https://" + window.location.host
            }
        }
        r.reject(p)
    }

    function A() {
        if (!GS.service.tokenPending) {
            GS.service.currentToken = null;
            GS.service.tokenExpires = 0;
            GS.service.tokenPending = true;
            if (GS.service.sessionID) {
                var p = hex_md5(GS.service.sessionID);
                p = y(false, "getCommunicationToken", {secretKey:p}, {}, true);
                p.promise().then(u,
                        function() {
                            var r = new Date;
                            GS.service.tokenPending = false;
                            for (GS.service.lastTokenFailed = r.valueOf(); GS.service.callsPendingToken.length;) {
                                r = GS.service.callsPendingToken.shift();
                                r.reject({message:$.localize.getString("SERVICE_CREATE_TOKEN_FAIL"),code:GS.service.faultCodes.INVALID_TOKEN})
                            }
                        })
            } else p = y(false, "initiateSession");
            p.send();
            if (gsConfig.runMode == "dev" && GS.store.get("httpsHash")) {
                window.location.hash = GS.store.get("httpsHash");
                GS.store.remove("httpsHash")
            }
        }
    }

    function u(p) {
        var r = new Date;
        GS.service.lastTokenFailed =
                false;
        GS.service.currentToken = p;
        GS.service.tokenPending = false;
        for (GS.service.tokenExpires = 15E5 + r.valueOf(); GS.service.callsPendingToken.length;) {
            p = GS.service.callsPendingToken.shift();
            p.send()
        }
        $.publish("gs.cowbell.ready")
    }

    function C(p) {
        for (this.country = p ? p : {CC1:0,ID:223,CC4:1073741824,CC3:0,CC2:0}; this.callsPendingCountry.length;) {
            p = this.callsPendingCountry.shift();
            p.parameters.country = this.country;
            p.send()
        }
    }

    function F() {
        if (!GS.service.downForMaintenance) {
            GS.service.downForMaintenance = true;
            GS.getLightbox().open({type:"maintenance",
                notCloseable:true,view:{header:"POPUP_MAINT_TITLE",message:"POPUP_MAINT_MESSAGE",buttonsLeft:[
                    {label:"POPUP_MAINT_TWITTER",href:"http://twitter.com/sharkjanitor"}
                ]}});
            H()
        }
    }

    function H() {
        var p = y(false, "getServiceStatus");
        p.promise().then(G, D);
        p.send()
    }

    function G(p) {
        if (p.status == 1) {
            GS.service.downForMaintenance = false;
            GS.getLightbox().close()
        } else _.wait(2E4).then(H)
    }

    function D() {
        _.wait(2E4).then(H)
    }

    a.prototype.queue = function(p) {
        function r() {
            if (this.requests.length) {
                this.pendingRequest = this.requests.shift();
                var s = this,t = function() {
                    s.pendingRequest = null;
                    r.call(s)
                };
                this.pendingRequest.promise().then(t, t);
                this.pendingRequest.send()
            }
        }

        this.requests.push(p);
        this.pendingRequest || r.call(this)
    };
    var w = function(p, r) {
        return p[p.length - 1] === r ? {} : p[p.length - 1]
    };
    c.createRequest = function() {
        return b.apply(this, arguments)
    };
    var y = function() {
        return b.apply(c, arguments)
    };
    c.prototype.promise = function() {
        return this._dfd.promise()
    };
    c.prototype.isResolved = function() {
        return this._dfd.isResolved()
    };
    c.prototype.isRejected = function() {
        return this._dfd.isRejected()
    };
    c.prototype.resolve = function(p) {
        for (var r = 0; r < this.successFilters.length; r++)if ($.isFunction(this.successFilters[r]))p = this.successFilters[r](p);
        this.lastResolution = (new Date).valueOf();
        this._dfd.resolve(p)
    };
    c.prototype.resolveWith = function(p, r) {
        for (var s = 0; s < this.successFilters.length; s++)if ($.isFunction(this.successFilters[s]))r = this.successFilters[s](r);
        this.lastResolution = (new Date).valueOf();
        this._dfd.resolveWith(p, r)
    };
    c.prototype.reject = function(p) {
        for (var r = 0; r < this.faultFilters.length; r++)if ($.isFunction(this.faultFilters[r]))p =
                this.faultFilters[r](p);
        this._dfd.reject(p)
    };
    c.prototype.rejectWith = function(p, r) {
        for (var s = 0; s < this.faultFilters.length; s++)if ($.isFunction(this.faultFilters[s]))r = this.faultFilters[s](r);
        this._dfd.rejectWith(p, r)
    };
    c.prototype.getSWFable = function() {
        return{type:this.type,method:this.method,parameters:this.parameters,useHTTPS:this.useHTTPS,overrideHeaders:this.overrideHeaders,overrideKey:GS.service ? GS.service.revToken : GS.Controllers.ServiceController.instance().revToken}
    };
    c.prototype.pendingCallCache =
            [];
    c.prototype.cacheKeyProps = ["method","parameters","type"];
    c.prototype.getCacheKey = function() {
        var p,r,s = "";
        for (p in this.cacheKeyProps)if (this.cacheKeyProps.hasOwnProperty(p)) {
            r = this[this.cacheKeyProps[p]];
            s += r instanceof String ? r : JSON.stringify(r)
        }
        return hex_md5(s)
    };
    c.prototype.send = function(p) {
        p && p.length == 2 && this.promise().then(p[0], p[1]);
        GS.service = GS.service || GS.Controllers.ServiceController.instance();
        var r = this;
        p = true;
        var s = (new Date).valueOf();
        if (!(this.isPending || this.isResolved()))if (GS.service.clientExpired)this.reject({message:$.localize.getString("POPUP_INVALID_CLIENT_MSG"),
            code:GS.service.faultCodes.INVALID_CLIENT}); else {
            this.isPending = true;
            if (this.numRetries >= 3)this.reject(this.lastFault); else {
                if (this.numRetries > 0)p = false;
                if (this.type == "facebook" || this.type == "lastfm")m(this, {}); else if (GS.service.tokenExpires > s || ["getCommunicationToken","initiateSession","getServiceStatus"].indexOf(this.method) != -1)if (GS.service.downForMaintenance && this.method != "getServiceStatus")this.reject({message:$.localize.getString("SERVICE_DOWN_MAINTENANCE"),code:GS.service.faultCodes.MAINTENANCE});
                else {
                    s = "http://" + GS.service.hostname + "/" + GS.service.defaultEndpoint + "?" + this.method;
                    var t = {header:o(this.overrideHeaders),method:this.method,parameters:this.parameters};
                    if (GS.service.currentToken) {
                        GS.service.lastRandomizer = n();
                        var B = hex_sha1(this.method + ":" + GS.service.currentToken + ":" + GS.service.revToken + ":" + GS.service.lastRandomizer);
                        t.header.token = GS.service.lastRandomizer + B
                    }
                    this.useSWF || this.useHTTPS ? m(this, t.header) : $.ajax($.extend({}, this.options, {contentType:"application/json",dataType:"json",
                        type:"POST",data:JSON.stringify(t),cache:p,url:s,success:function(E) {
                            q(E, r)
                        },error:function(E, J, K) {
                            console.warn("ajax error: status: " + J + ", error: " + K, E, this);
                            E = {};
                            switch (J) {
                                case "parsererror":
                                    E.code = GS.service.faultCodes.PARSE_ERROR;
                                    E.message = $.localize.getString("SERVICE_PARSE_JSON");
                                    break;
                                case "timeout":
                                    E.code = GS.service.faultCodes.HTTP_TIMEOUT;
                                    E.message = $.localize.getString("SERVICE_REQUEST_TIMEOUT");
                                    break;
                                case "error":
                                case "notmodified":
                                default:
                                    E.code = GS.service.faultCodes.HTTP_ERROR;
                                    E.message =
                                            $.localize.getString("SERVICE_HTTP_ERROR");
                                    break
                            }
                            x(E, r)
                        }}))
                } else {
                    this.isPending = false;
                    GS.service.callsPendingToken.push(this);
                    A()
                }
            }
        }
    };
    c.prototype.retry = function(p) {
        var r = this;
        this.isPending = false;
        this.numRetries++;
        _.wait(p).then(function() {
            r.send()
        })
    };
    c.prototype.queue = function(p) {
        if (!_.defined(c.prototype.queues))c.prototype.queues = {};
        var r = c.prototype.queues[p];
        _.defined(r) || (r = c.prototype.queues[p] = new a);
        r.queue(this)
    };
    g.createRequest = function() {
        return b.apply(this, arguments)
    };
    g.prototype = $.extend(g.prototype,
            c.prototype);
    g.prototype.getSWFable = function() {
        return{type:this.type,method:this.method,parameters:this.parameters,httpMethod:this.httpMethod}
    };
    h.createRequest = function() {
        return b.apply(this, arguments)
    };
    h.prototype = $.extend(h.prototype, c.prototype);
    h.prototype.getSWFable = function() {
        return{type:this.type,parameters:this.parameters}
    };
    var I;
    $.Class.extend("GS.Controllers.ServiceController", {configDefaults:{hostname:window.location.host,sessionID:null,client:"htmlshark",clientRevision:"20110906",revToken:"imOnAHorse",
        country:null,privacy:0,uuID:"",defaultEndpoint:"more.php"},instance:function() {
        I || (I = new GS.Controllers.ServiceController({hostname:window.location.host,sessionID:gsConfig.sessionID,country:gsConfig.country,privacy:gsConfig.user.Privacy,uuID:gsConfig.uuid,defaultEndpoint:gsConfig.endpoint}));
        return I
    }}, {faultCodes:{INVALID_CLIENT:1024,RATE_LIMITED:512,INVALID_TOKEN:256,INVALID_SESSION:16,MAINTENANCE:10,MUST_BE_LOGGED_IN:8,HTTP_TIMEOUT:6,PARSE_ERROR:4,HTTP_ERROR:2,EMPTY_RESULT:-256},init:function(p) {
        $.extend(this,
                GS.Controllers.ServiceController.configDefaults, p);
        this.currentToken = null;
        this.tokenExpires = 0;
        this.lastTokenFailed = this.tokenPending = false;
        this.lastRandomizer = null;
        this.downForMaintenance = false;
        this.lastDowntimeNotification = 0;
        this.clientExpired = false;
        this.callsPendingToken = [];
        this.callsPendingCountry = [];
        this.callsPendingSWF = [];
        this.outgoingSWFCalls = {};
        this.swfProxy = null;
        this.sessionID || y(false, "initiateSession", {}, {async:false}).send();
        var r = c.createRequest(false, "getCountry");
        r.faultFilters.push(function() {
            return false
        });
        r.promise().then(this.callback(C), this.callback(C));
        this.country ? r.resolve(this.country) : _.wait(1).then(function() {
            r.send()
        })
    },serviceExists:function() {
        return true
    },swfReady:function() {
        for (var p; this.callsPendingSWF.length;) {
            p = this.callsPendingSWF.shift();
            p.send()
        }
        return true
    },swfBadHost:function() {
        GS.getLightbox().open({type:"badHost",notCloseable:true,view:{header:"POPUP_BAD_HOST_TITLE",message:"POPUP_BAD_HOST_MSG",buttonsLeft:[
            {href:"http://www.grooveshark.com",labelHTML:"http://www.grooveshark.com"}
        ]}})
    },
        swfSuccess:function(p, r) {
            var s = this.outgoingSWFCalls[r];
            s && q(p, s);
            delete this.outgoingSWFCalls[r]
        },swfFault:function(p, r) {
            var s = this.outgoingSWFCalls[r];
            s && x(p, s);
            delete this.outgoingSWFCalls[r]
        },swfNeedsToken:function() {
            A()
        },onChatData:function(p) {
            if (p = p.data.data || p.data || p)switch (p.messageType) {
                case "userPointsAwarded":
                    p.awardedPoints && GS.user && GS.user.addPoints(p.awardedPoints);
                    break;
                case "apiMethodCall":
                    if (p.method && window.Grooveshark) {
                        if (!$.isArray(p.parameters))p.parameters = [];
                        var r = Grooveshark[p.method];
                        $.isFunction(r) && r.apply(Grooveshark, p.parameters)
                    }
                    break;
                default:
                    console.log("unhandled chat data:", p)
            }
        },onChatError:function(p) {
            console.log("Got chat error, event:", p)
        },httpsFormSubmit:function(p, r, s) {
            var t = $("#httpsForm");
            $("#httpsIframe");
            var B = [];
            t.html("");
            t.attr("action", p);
            t.attr("method", "post");
            t.attr("target", "httpsIframe");
            t.attr("enctype", "multipart/form-data");
            _.forEach(r, function(E, J) {
                B.push('<input type="hidden" name="' + J + '" value="' + E + '" />')
            });
            t.append(B.join(""));
            window.setupBridge =
                    GS.airbridge && GS.airbridge.isDesktop ? function() {
                        var E = {};
                        E[s] = window[s];
                        document.getElementById("httpsIframe").contentWindow.parentSandboxBridge = E
                    } : function() {
                    };
            t.submit()
        },isFirstVisit:function(p) {
            y(false, "isFirstVisit", {}, {}, false, true).send([p,null])
        },makeFacebookRequest:function(p, r, s, t, B) {
            g.createRequest(false, p, r, s).send([t,B])
        },makeLastfmRequest:function(p, r, s) {
            p = h.createRequest(false, p);
            p.promise().then(r, s);
            p.send()
        },rapleafPersonalize:function(p, r, s) {
            var t = w(arguments, s);
            t = y(false, "personalize",
                    {redirectURL:p}, t, false, true);
            t.type = "rapleaf";
            t.send([r,s])
        },rapleafDirect:function(p, r, s) {
            var t = w(arguments, s);
            t = y(false, "direct", {email:p}, t, false, true);
            t.type = "rapleaf";
            t.send([r,s])
        },getAlbumByID:function(p, r, s) {
            var t = w(arguments, s);
            y(true, "getAlbumByID", {albumID:p}, t).send([r,s])
        },getArtistByID:function(p, r, s) {
            var t = w(arguments, s);
            y(true, "getArtistByID", {artistID:p}, t).send([r,s])
        },getPlaylistByID:function(p, r, s) {
            var t = w(arguments, s);
            y(true, "getPlaylistByID", {playlistID:p}, t).send([r,s])
        },getQueueSongListFromSongIDs:function(p, r, s) {
            var t = w(arguments, s);
            y(true, "getQueueSongListFromSongIDs", {songIDs:p}, t).send([r,s])
        },getSongFromToken:function(p, r, s) {
            var t = w(arguments, s);
            t = y(true, "getSongFromToken", {token:p,country:this.country}, t);
            t.promise().then(r, s);
            this.country ? t.send() : this.callsPendingCountry.push(t)
        },getTokenForSong:function(p, r, s) {
            var t = w(arguments, s);
            t = y(true, "getTokenForSong", {songID:p,country:this.country}, t);
            t.promise().then(r, s);
            this.country ? t.send() : this.callsPendingCountry.push(t)
        },getUserByID:function(p, r, s) {
            var t = w(arguments, s);
            y(true, "getUserByID", {userID:p}, t).send([r,s])
        },albumGetSongs:function(p, r, s, t, B) {
            r = _.orEqual(r, true);
            s = _.orEqual(s, 0);
            var E = w(arguments, B);
            y(true, "albumGetSongs", {albumID:p,isVerified:r,offset:s}, E).send([t,B])
        },artistGetAlbums:function(p, r, s, t, B) {
            var E = w(arguments, B);
            y(true, "artistGetAlbums", {artistID:p,isVerified:r,offset:s}, E).send([t,B])
        },artistGetAllSongs:function(p, r, s) {
            var t = w(arguments, s);
            y(true, "artistGetAllSongs", {artistID:p}, t).send([r,s])
        },artistGetArtAttribution:function(p, r, s) {
            var t = w(arguments, s);
            y(true, "artistGetArtAttribution", {artistID:p}, t).send([r,s])
        },playlistGetSongs:function(p, r, s) {
            var t = w(arguments, s);
            y(true, "playlistGetSongs", {playlistID:p}, t).send([r,s])
        },getArtistRecentListeners:function(p, r, s) {
            req = c.createRequest(true, "getArtistRecentListeners", {artistID:p}, arguments[arguments.length - 1] === s ? {} : arguments[arguments.length - 1]);
            req.promise().then(r, s);
            req.send()
        },getAlbumRecentListeners:function(p, r, s) {
            req = c.createRequest(true, "getAlbumRecentListeners", {albumID:p},
                    arguments[arguments.length - 1] === s ? {} : arguments[arguments.length - 1]);
            req.promise().then(r, s);
            req.send()
        },getSongRecentListeners:function(p, r, s) {
            req = c.createRequest(true, "getSongRecentListeners", {songID:p}, arguments[arguments.length - 1] === s ? {} : arguments[arguments.length - 1]);
            req.promise().then(r, s);
            req.send()
        },popularGetSongs:function(p, r, s) {
            var t = w(arguments, s);
            ({daily:true,weekly:true,monthly:true})[p] || (p = "daily");
            y(true, "popularGetSongs", {type:p}, t).send([r,s])
        },featuredGetCurrentFeatured:function(p, r, s) {
            var t = w(arguments, s);
            y(true, "featuredGetCurrentFeatured", {date:p}, t).send([r,s])
        },getArtistsForTagRadio:function(p, r, s) {
            var t = w(arguments, s);
            t = y(true, "getArtistsForTagRadio", {tagID:p}, t);
            t.promise().then(r, s);
            t.send()
        },albumGetFans:function(p, r, s, t) {
            var B = w(arguments, t);
            y(true, "albumGetFans", {albumID:p,offset:r}, B).send([s,t])
        },artistGetFans:function(p, r, s, t) {
            var B = w(arguments, t);
            y(true, "artistGetFans", {artistID:p,offset:r}, B).send([s,t])
        },playlistGetFans:function(p, r, s) {
            var t = w(arguments, s);
            y(true, "playlistGetFans", {playlistID:p}, t).send([r,s])
        },songGetFans:function(p, r, s, t) {
            var B = w(arguments, t);
            y(true, "songGetFans", {songID:p,offset:r}, B).send([s,t])
        },userGetFans:function(p, r, s, t) {
            var B = w(arguments, t);
            y(true, "userGetFans", {userID:p,offset:r}, B).send([s,t])
        },authenticateUser:function(p, r, s, t, B) {
            var E = w(arguments, B);
            y(false, "authenticateUser", {username:p,password:r,savePassword:s}, E, true, true).send([t,B])
        },authenticateFacebookUser:function(p, r, s, t, B, E, J) {
            var K = w(arguments, J);
            y(false, "authenticateFacebookUser",
                    {facebookUserID:p,sessionKey:r,accessToken1:s,accessToken3:t,accessTokenEx:B}, K, true, true).send([E,J])
        },authenticateGoogleUser:function(p, r) {
            var s = w(arguments, r);
            y(false, "authenticateGoogleUser", {}, s, true, true).send([p,r])
        },reportUserChange:function(p, r, s, t) {
            var B = w(arguments, t),E = {userID:p.UserID,email:p.Email,username:p.FName,userTrackingID:p.userTrackingID,picture:p.Picture,privacy:_.defined(r) ? r : p.Privacy};
            y(false, "reportUserChange", E, B, false, true).send([s,t])
        },logoutUser:function(p, r) {
            var s =
                    w(arguments, r);
            y(false, "logoutUser", {}, s).send([p,r])
        },userForgotPassword:function(p, r, s) {
            var t = w(arguments, s);
            y(false, "userForgotPassword", {usernameOrEmail:p}, t, true).send([r,s])
        },resetPassword:function(p, r, s, t, B) {
            var E = w(arguments, B);
            y(false, "resetPassword", {usernameOrEmail:p,secretResetCode:r,newPassword:s}, E, true).send([t,B])
        },changePassword:function(p, r, s, t) {
            var B = w(arguments, t);
            y(false, "changePassword", {oldPassword:p,newPassword:r}, B, true, true).send([s,t])
        },registerUser:function(p, r, s, t, B, E, J, K, L, M, O, N) {
            var P = w(arguments, N);
            y(false, "registerUser", {username:p,password:r,firstName:s,lastName:t,emailAddress:B,sex:E,birthDate:J,flags:K,inviteID:L,savePassword:M}, P, true, true).send([O,N])
        },userDisableAccount:function(p, r, s, t, B, E) {
            var J = w(arguments, E);
            y(false, "userDisableAccount", {password:p,reason:r,details:s,contact:t}, J, true, true).send([B,E])
        },getIsUsernameEmailAvailable:function(p, r, s, t) {
            var B = w(arguments, t);
            y(false, "getIsUsernameEmailAvailable", {username:p,emailAddress:r}, B).send([s,t])
        },
        getUserByInviteID:function(p, r, s) {
            var t = w(arguments, s);
            y(true, "getUserByInviteID", {inviteID:p}, t, true).send([r,s])
        },sendInvites:function(p, r, s) {
            var t = w(arguments, s);
            y(false, "sendInvites", {emailAddresses:p}, t).send([r,s])
        },getUserSettings:function(p, r) {
            var s = w(arguments, r);
            y(false, "getUserSettings", {}, s).send([p,r])
        },getUserTopArtists:function(p, r, s) {
            var t = w(arguments, s);
            y(true, "getUserTopArtists", {userID:p}, t).send([r,s])
        },changeUserInfoEx:function(p, r, s, t) {
            var B = w(arguments, t);
            y(false, "changeUserInfoEx",
                    {shitToChange:p,password:r}, B, true).send([s,t])
        },changeNotificationSettings:function(p, r, s) {
            var t = w(arguments, s);
            y(false, "changeNotificationSettings", {newValue:p}, t).send([r,s])
        },changePrivacySettings:function(p, r, s) {
            var t = w(arguments, s);
            y(false, "changePrivacySettings", {newValue:p}, t).send([r,s])
        },changeFeedSettings:function(p, r, s) {
            var t = w(arguments, s);
            y(false, "changeFeedSettings", {newValue:p}, t).send([r,s])
        },getSubscriptionDetails:function(p, r) {
            var s = w(arguments, r);
            y(false, "getSubscriptionDetails",
                    {}, s, true, true).send([p,r])
        },userGetSongsInLibrary:function(p, r, s, t, B) {
            r = _.orEqual(r, 0);
            var E = w(arguments, B);
            y(s, "userGetSongsInLibrary", {userID:p,page:r}, E).send([t,B])
        },userGetLibraryTSModified:function(p, r, s) {
            var t = w(arguments, s);
            y(false, "userGetLibraryTSModified", {userID:p}, t).send([r,s])
        },userAddSongsToLibrary:function(p, r, s) {
            var t = w(arguments, s);
            t = y(false, "userAddSongsToLibrary", {songs:p}, t);
            t.promise().then(r, s);
            t.queue("library")
        },userRemoveSongFromLibrary:function(p, r, s, t, B, E) {
            var J = w(arguments,
                    E);
            J = y(false, "userRemoveSongFromLibrary", {userID:p,songID:r,albumID:s,artistID:t}, J);
            J.promise().then(B, E);
            J.queue("library")
        },getFavorites:function(p, r, s, t, B) {
            r = r || "Songs";
            var E = w(arguments, B);
            y(s, "getFavorites", {userID:p,ofWhat:r}, E).send([t,B])
        },favorite:function(p, r, s, t, B) {
            var E = w(arguments, B);
            E = y(false, "favorite", {what:p,ID:r,details:s}, E);
            E.promise().then(t, B);
            E.queue("library")
        },unfavorite:function(p, r, s, t) {
            var B = w(arguments, t);
            B = y(false, "unfavorite", {what:p,ID:r}, B);
            B.promise().then(s, t);
            B.queue("library")
        },getUserSidebar:function(p, r) {
            var s = w(arguments, r);
            y(false, "getUserSidebar", {}, s).send([p,r])
        },addShortcutToUserSidebar:function(p, r, s, t, B) {
            var E = w(arguments, B);
            E = y(false, "addShortcutToUserSidebar", {what:p,id:r,name:s}, E);
            E.promise().then(t, B);
            E.queue("library")
        },removeShortcutFromUserSidebar:function(p, r, s, t) {
            var B = w(arguments, t);
            B = y(false, "removeShortcutFromUserSidebar", {what:p,id:r}, B);
            B.promise().then(s, t);
            B.queue("library")
        },userGetPlaylists:function(p, r, s, t) {
            var B = w(arguments,
                    t);
            y(r, "userGetPlaylists", {userID:p}, B).send([s,t])
        },createPlaylist:function(p, r, s, t, B) {
            var E = w(arguments, B);
            y(false, "createPlaylist", {playlistName:p,songIDs:r,playlistAbout:s}, E).send([t,B])
        },deletePlaylist:function(p, r, s, t) {
            var B = w(arguments, t);
            B = y(false, "deletePlaylist", {playlistID:p,name:r}, B);
            B.promise().then(s, t);
            B.queue("playlist")
        },playlistUndelete:function(p, r, s) {
            var t = w(arguments, s);
            t = y(false, "playlistUndelete", {playlistID:p}, t);
            t.promise().then(r, s);
            t.queue("playlist")
        },overwritePlaylist:function(p, r, s, t, B) {
            var E = w(arguments, B);
            E = y(false, "overwritePlaylist", {playlistID:p,playlistName:r,songIDs:s}, E);
            E.promise().then(t, B);
            E.queue("playlist")
        },playlistAddSongToExisting:function(p, r, s, t) {
            var B = w(arguments, t);
            B = y(false, "playlistAddSongToExisting", {playlistID:p,songID:r}, B);
            B.promise().then(s, t);
            B.queue("playlist")
        },renamePlaylist:function(p, r, s, t) {
            var B = w(arguments, t);
            B = y(false, "renamePlaylist", {playlistID:p,playlistName:r}, B);
            B.promise().then(s, t);
            B.queue("playlist")
        },setPlaylistAbout:function(p, r, s, t) {
            var B = w(arguments, t);
            B = y(false, "setPlaylistAbout", {playlistID:p,about:r}, B);
            B.promise().then(s, t);
            B.queue("playlist")
        },getResultsFromSearch:function(p, r, s, t, B) {
            var E = w(arguments, B);
            E = y(true, "getResultsFromSearch", {query:p,type:r,guts:GS.guts ? GS.getGuts().shouldLog : 0,ppOverride:s}, E);
            r === "Artists" && E.successFilters.push(function(J) {
                if ($.isArray(J.result))J.result = _.map(J.result, function(K) {
                    K.hasOwnProperty("AlbumID") && delete K.AlbumID;
                    K.hasOwnProperty("AlbumName") && delete K.AlbumName;
                    K.hasOwnProperty("SongName") &&
                    delete K.SongName;
                    return K
                });
                return J
            });
            E.send([t,B])
        },getSearchSuggestion:function(p, r, s) {
            var t = w(arguments, s);
            y(true, "getSearchSuggestion", {query:p}, t).send([r,s])
        },getArtistAutocomplete:function(p, r, s) {
            var t = w(arguments, s);
            y(true, "getArtistAutocomplete", {query:p}, t).send([r,s])
        },getAutocomplete:function(p, r, s, t) {
            var B = w(arguments, t);
            y(true, "getAutocomplete", {query:p,type:r}, B).send([s,t])
        },getProfileFeed:function(p, r, s, t) {
            var B = w(arguments, t);
            y(false, "getProfileFeed", {lastDocumentID:p,lastEventID:r},
                    B).send([s,t])
        },getUserProfileFeed:function(p, r, s, t, B) {
            var E = w(arguments, B);
            y(false, "getUserProfileFeed", {userID:p,lastDocumentID:r,lastEventID:s}, E).send([t,B])
        },getCombinedFeed:function(p, r, s, t) {
            var B = w(arguments, t);
            y(false, "getCombinedFeed", {excludeUsers:p,lastEventID:r}, B).send([s,t])
        },getUserCombinedFeed:function(p, r, s, t, B) {
            var E = w(arguments, B);
            y(3E4, "getUserCombinedFeed", {userID:p,excludeUsers:r,lastEventID:s}, E).send([t,B])
        },getInterestingEvents:function(p, r, s) {
            var t = w(arguments, s);
            y(3E4, "getInterestingEvents",
                    {limit:p}, t).send([r,s])
        },getArtistProfileFeed:function(p, r, s, t, B) {
            var E = w(arguments, B);
            y(false, "getArtistProfileFeed", {artistID:p,lastDocumentID:r,lastEventID:s}, E).send([t,B])
        },hideUserEvent:function(p, r, s) {
            var t = w(arguments, s);
            y(true, "hideUserEvent", {eventID:p}, t).send([r,s])
        },changeFollowFlags:function(p, r, s) {
            var t = w(arguments, s);
            y(false, "changeFollowFlags", {userIDsFlags:p}, t).send([r,s])
        },sendFeedBroadcast:function(p, r, s, t, B, E) {
            var J = w(arguments, E);
            y(false, "sendFeedBroadcast", {what:p,ID:r,people:s,
                message:t}, J).send([B,E])
        },addEventComment:function(p, r, s, t) {
            var B = w(arguments, t);
            y(false, "addEventComment", {eventID:p,comment:r}, B).send([s,t])
        },hideEventComment:function(p, r, s, t) {
            var B = w(arguments, t);
            y(false, "hideEventComment", {eventID:r,commentID:p}, B).send([s,t])
        },getUserNotifications:function(p, r) {
            var s = w(arguments, r);
            y(6E4, "getUserNotifications", {}, s).send([p,r])
        },feedsBanArtist:function(p, r, s) {
            var t = w(arguments, s);
            y(false, "feedsBanArtist", {artistID:p}, t).send([r,s])
        },feedsUnbanArtist:function(p, r, s) {
            var t = w(arguments, s);
            y(false, "feedsUnbanArtist", {artistID:p}, t).send([r,s])
        },feedsGetBannedArtists:function(p, r) {
            var s = w(arguments, r);
            y(false, "feedsGetBannedArtists", {}, s).send([p,r])
        },feedsRemoveEventFromProfile:function(p, r, s, t) {
            var B = w(arguments, t);
            y(false, "feedsRemoveEventFromProfile", {type:p,time:r}, B).send([s,t])
        },removeItemFromCommunityFeed:function(p, r, s, t) {
            var B = w(arguments, t);
            y(false, "removeItemFromCommunityFeed", {key:p,day:r}, B).send([s,t])
        },getIsTargetingActive:function(p, r, s) {
            var t =
                    w(arguments, s);
            y(false, "getIsTargetingActive", {themeID:p}, t).send([r,s])
        },logTargetedThemeImpression:function(p, r, s) {
            var t = w(arguments, s);
            y(false, "logTargetedThemeImpression", {themeID:p}, t).send([r,s])
        },logThemeOutboundLinkClick:function(p, r, s, t) {
            var B = w(arguments, t);
            y(false, "logThemeOutboundLinkClick", {themeID:p,linkID:r}, B).send([s,t])
        },provideSongFeedbackMessage:function(p, r, s, t) {
            var B = w(arguments, t);
            y(false, "provideSongFeedbackMessage", {songID:p,message:r}, B).send([s,t])
        },provideSongFeedbackVote:function(p, r, s, t, B) {
            var E = w(arguments, B);
            y(false, "provideSongFeedbackVote", {songID:p,vote:r,artistID:s}, E).send([t,B])
        },sendShare:function(p, r, s, t, B, E, J, K) {
            var L = w(arguments, K);
            L = y(false, "sendShare", {what:p,ID:r,people:s,country:this.country,override:t,message:B}, L);
            L.promise().then(J, K);
            if (E)L.overrideHeaders.privacy = 1;
            this.country ? L.send() : this.callsPendingCountry.push(L);
            GS.getGuts().logEvent("itemSharePerformed", {type:p,id:r})
        },getContactInfoForFollowers:function(p, r) {
            var s = w(arguments, r);
            y(false, "getContactInfoForFollowers",
                    {}, s).send([p,r])
        },artistGetSongkickEvents:function(p, r, s, t) {
            var B = w(arguments, t);
            y(true, "artistGetSongkickEvents", {artistID:p,name:r}, B).send([s,t])
        },getGoogleAuthToken:function(p, r, s, t) {
            var B = "EscapeMG-Grooveshark-" + this.clientRevision,E = w(arguments, t);
            y(false, "getGoogleAuthToken", {Email:p,Passwd:r,source:B}, E, true).send([s,t])
        },getGoogleContacts:function(p, r, s) {
            var t = w(arguments, s);
            req = y(false, "getGoogleContacts", {authToken:p}, t, false, true);
            req.send([r,s])
        },getDetailsForBroadcast:function(p, r, s) {
            var t = w(arguments, s);
            y(true, "getDetailsForBroadcast", {songID:p}, t).send([r,s])
        },broadcastSong:function(p, r, s, t, B, E, J, K, L) {
            var M = w(arguments, L);
            y(false, "broadcastSong", {songID:p,message:r,username:s,password:t,saveCredentials:B,service:E,song:J}, M, true).send([K,L])
        },logBroadcast:function(p, r, s, t, B) {
            var E = w(arguments, B);
            y(false, "logBroadcast", {type:p,item:r,service:s}, E).send([t,B])
        },getUserFacebookData:function(p, r) {
            var s = w(arguments, r);
            y(false, "getUserFacebookDataEx", {}, s, true).send([p,r])
        },saveUserFacebookData:function(p, r, s, t, B, E, J, K) {
            var L = w(arguments, K);
            y(false, "saveUserFacebookDataEx", {facebookUserID:p,sessionKey:r,accessToken1:s,accessToken3:t,flags:B,accessTokenEx:E}, L, true, true).send([J,K])
        },updateUserFacebookData:function(p, r, s, t, B, E, J, K) {
            var L = w(arguments, K);
            y(false, "updateUserFacebookData", {facebookUserID:p,sessionKey:r,accessToken1:s,accessToken3:t,flags:B,accessTokenEx:E}, L, true, true).send([J,K])
        },removeUserFacebookData:function(p, r, s) {
            var t = w(arguments, s);
            y(false, "removeUserFacebookData", {facebookUserID:p},
                    t).send([r,s])
        },getUserGoogleData:function(p, r) {
            var s = w(arguments, r);
            y(false, "getUserGoogleData", {}, s, true, true).send([p,r])
        },saveUserGoogleData:function(p, r) {
            var s = w(arguments, r);
            y(false, "saveUserGoogleData", {}, s).send([p,r])
        },updateUserGoogleData:function(p, r) {
            req = c.createRequest(false, "updateUserGoogleData", {}, arguments[arguments.length - 1] === r ? {} : arguments[arguments.length - 1]);
            req.promise().then(p, r);
            req.send()
        },updateUserGoogleData:function(p, r) {
            var s = w(arguments, r);
            y(false, "updateUserGoogleData",
                    {}, s).send([p,r])
        },removeUserGoogleData:function(p, r, s) {
            var t = w(arguments, s);
            y(false, "removeUserGoogleData", {googleID:p}, t).send([r,s])
        },getUsernameSuggestions:function(p, r, s, t, B) {
            var E = w(arguments, B);
            y(true, "getUsernameSuggestions", {baseUsername:p,fullName:r,idOrRand:s}, E).send([t,B])
        },registerFacebookUser:function(p, r, s, t, B, E, J, K, L, M, O, N, P, R, Q) {
            var S = w(arguments, Q);
            y(false, "registerFacebookUser", {username:p,firstName:r,emailAddress:s,sex:t,birthDate:B,flags:E,inviteID:J,facebookUserID:K,sessionKey:L,
                accessToken1:M,accessToken3:O,accessTokenEx:N,facebookFlags:P}, S, true, true).send([R,Q])
        },getGroovesharkUsersFromFacebookUserIDs:function(p, r, s) {
            var t = w(arguments, s);
            y(false, "getGroovesharkUsersFromFacebookUserIDs", {facebookUserIDs:p}, t).send([r,s])
        },registerGoogleUser:function(p, r, s, t, B, E, J, K, L) {
            var M = w(arguments, L);
            y(false, "registerGoogleUser", {username:p,firstName:r,emailAddress:s,sex:t,birthDate:B,flags:E,inviteID:J}, M, true, true).send([K,L])
        },updateLastfmService:function(p, r, s, t, B, E, J) {
            var K = w(arguments,
                    J);
            y(false, "updateLastfmService", {session:p,token:r,username:s,flagsAdd:t,flagsRemove:B}, K).send([E,J])
        },saveLastfmService:function(p, r, s, t, B, E) {
            var J = w(arguments, E);
            y(false, "saveLastfmService", {session:p,token:r,username:s,flags:t}, J).send([B,E])
        },getLastfmService:function(p, r) {
            var s = w(arguments, r);
            y(false, "getLastfmService", {}, s).send([p,r])
        },removeLastfmService:function(p, r, s) {
            var t = w(arguments, s);
            y(false, "removeLastfmService", {lastfmUsername:p}, t).send([r,s])
        },getAffiliateDownloadURLs:function(p, r, s, t) {
            var B = w(arguments, t);
            y(false, "getAffiliateDownloadURLs", {songName:p,artistName:r}, B).send([s,t])
        },getServiceStatus:function(p, r) {
            var s = w(arguments, r);
            y(false, "getServiceStatus", {}, s).send([p,r])
        },provideVIPFeedback:function(p, r, s, t) {
            var B = w(arguments, t);
            y(false, "provideVIPFeedback", {fromAddress:p,message:r}, B).send([s,t])
        },getEmailAddress:function(p, r) {
            var s = w(arguments, r);
            y(false, "getEmailAddress", {}, s).send([p,r])
        },getCountryFromRequestIP:function(p, r) {
            var s = w(arguments, r);
            y(true, "getCountryFromRequestIP",
                    {}, s).send([p,r])
        },artistGetSimilarArtists:function(p, r, s) {
            var t = w(arguments, s);
            t = y(true, "artistGetSimilarArtists", {artistID:p}, t);
            t.promise().then(r, s);
            t.send()
        },getThemeFromDFP:function(p, r, s) {
            var t = w(arguments, s);
            t = y(false, "getThemeFromDFP", {paramString:p}, t, false, true);
            t.type = "dfp";
            t.send([r,s])
        },getNotificationFromDFP:function(p, r, s) {
            var t = w(arguments, s);
            t = y(false, "getNotificationFromDFP", {paramString:p}, t, false, true);
            t.type = "dfp";
            t.send([r,s])
        },getItemByPageName:function(p, r, s) {
            var t = w(arguments,
                    s);
            y(true, "getItemByPageName", {name:p}, t).send([r,s])
        },getPageNameByIDType:function(p, r, s, t) {
            var B = w(arguments, t);
            B = y(true, "getPageNameByIDType", {id:p,type:r}, B);
            B.promise().then(s, t);
            B.promise().then(function(E) {
                E.name && window.GS && GS.router && GS.router.cachePageName(E.name, r, p)
            });
            B.send()
        },userGetPoints:function(p, r) {
            var s = w(arguments, r);
            y(false, "userGetPoints", {}, s).send([p,r])
        },getClearvoiceMemberInfo:function(p, r, s) {
            var t = w(arguments, s),B = {};
            if (p)B.guid = p;
            y(false, "getClearvoiceMemberInfo", B, t,
                    true).send([r,s])
        },getUserIDByClearvoiceEmail:function(p, r, s) {
            var t = w(arguments, s);
            y(false, "getUserIDByClearvoiceEmail", {email:p}, t, true).send([r,s])
        },saveClearvoiceMemberInfo:function(p, r, s, t, B, E) {
            var J = w(arguments, E);
            y(false, "saveClearvoiceMemberInfo", {guid:p,fName:r,lName:s,email:t}, J, true).send([B,E])
        },addClearvoiceAnswers:function(p, r, s) {
            var t = w(arguments, s);
            y(false, "addClearvoiceAnswers", {questionsAndAnswers:p}, t, true).send([r,s])
        },getUserSurveys:function(p, r, s) {
            var t = w(arguments, s);
            y(false,
                    "getUserSurveys", {userID:p}, t).send([r,s])
        },getAvailableSurveys:function(p, r) {
            var s = w(arguments, r);
            y(false, "getAvailableSurveys", {}, s).send([p,r])
        },saveUserAnswers:function(p, r, s, t, B, E) {
            var J = w(arguments, E);
            y(false, "saveUserAnswers", {surveyID:p,userID:r,questionsAndAnswers:s,finalize:t}, J, true, true).send([B,E])
        },finalizeUserSurvey:function(p, r, s, t) {
            var B = w(arguments, t);
            y(false, "finalizeUserSurvey", {surveyID:p,userID:r}, B, true, true).send([s,t])
        },submitPlaylistForCampaign:function(p, r, s, t) {
            var B = w(arguments,
                    t);
            (new c("submitPlaylistForCampaign", {playlistID:p,campaignID:r}, B, false)).send([s,t])
        },submitSongVoteForCampaign:function(p, r, s, t) {
            var B = w(arguments, t);
            (new c("submitSongVoteForCampaign", {songID:p,campaignID:r}, B, false)).send([s,t])
        },getPlaylistsForCampaign:function(p, r, s) {
            var t = w(arguments, s);
            (new c("getPlaylistsForCampaign", {campaignID:p}, t, false)).send([r,s])
        },giveFreePlusForPinningIE9:function(p, r) {
            var s = w(arguments, r);
            (new c("giveFreePlusForPinningIE9", {}, s, false)).send([p,r])
        },getTunipopID:function(p, r, s, t) {
            var B = w(arguments, t),E = {};
            if (r)E.brand = p; else E.artist = p;
            B = y(true, "getTunipopID", E, B, null, true);
            B.type = "tunipop";
            B.send([s,t])
        },getSubscriptionHistory:function(p, r) {
            var s = w(arguments, r);
            y(true, "getSubscriptionHistory", {}, s, true, true).send([p,r])
        }})
})();
GS.Controllers.BaseController.extend("GS.Controllers.AuthController", {onWindow:true}, {init:function() {
    GS.service = GS.service || GS.Controllers.ServiceController.instance();
    if (!gsConfig.user.UserID)gsConfig.user.UserID = -1;
    this._handleLoginChange(GS.Models.AuthUser.wrap(gsConfig.user));
    this._super();
    this.subscribe("gs.auth.update", this.callback(this._onAuthUpdate))
},appReady:function() {
    if (GS.user.UserID > 0 && GS.user.TSDOB !== "" && GS.user.UserID != 42) {
        var a = new Date,b = GS.user.TSDOB.split("-"),c = parseInt(b[1],
                10) - 1;
        b = parseInt(b[2], 10);
        a.getMonth() == c && a.getDate() == b && GS.getNotice().displayPerAnum()
    }
},login:function(a, b, c, g, h) {
    GS.service.authenticateUser(a, b, c, this.callback(this._loginSuccess, "normal", g, h), this.callback(this._loginFailed, "normal", h))
},loginViaFacebook:function(a, b) {
    GS.getFacebook().login(this.callback(this._loginSuccess, "facebook", a, b), this.callback(this._loginFailed, "facebook", b))
},loginViaGoogle:function(a, b) {
    GS.getGoogle().login(this.callback(this._loginSuccess, "google", a, b), this.callback(this._loginFailed,
            "google", b))
},_loginSuccess:function(a, b, c, g) {
    if (g && g.userID === 0 || !g)return this._loginFailed(a, c, g);
    g.authType = a;
    if (window.GS && GS.Controllers.PageController.activePageName === "surveys")g.doNotReset = true;
    this._updateUser({}, {User:g});
    if (GS.airbridge && GS.airbridge.isDesktop && parseInt(g.isPremium, 10) !== 1 || gsConfig.isPreview && parseInt(g.isPremium, 10) !== 1 && parseInt(g.userID, 10) % 5 != 0) {
        if ($.isFunction(c)) {
            g.error = "POPUP_SIGNUP_LOGIN_FORM_PREMIUM_REQUIRED_ERROR";
            c(g)
        }
    } else $.isFunction(b) && b(g);
    return g
},
    _loginFailed:function(a, b, c) {
        c || (c = {});
        c.authType = a;
        $.isFunction(b) && b(c);
        return c
    },logout:function(a) {
        GS.service.logoutUser(this.callback(this._logoutSuccess, a), this.callback(this._logoutFailed))
    },_logoutSuccess:function(a) {
        GS.user.clearData();
        GS.getGuts().logEvent("logout", {});
        GS.getGuts().endContext("userID");
        location.hash = "/";
        this._handleLoginChange(GS.Models.AuthUser.wrap({userTrackingID:GS.user.userTrackingID}));
        $.isFunction(a) && a()
    },_logoutFailed:function() {
    },signup:function(a, b, c, g, h, k, m, n, o, q) {
        var v = this._getInviteCode();
        GS.service.registerUser(a, b, c, "", g, h, k, m, v, n, this.callback(this._signupSuccess, "normal", v, g, o, q), this.callback(this._signupFailed, "normal", q))
    },signupViaFacebook:function(a, b, c, g, h, k, m, n, o) {
        var q = this._getInviteCode();
        m.accessToken1 ? GS.service.registerFacebookUser(a, b, c, g, h, k, q, m.facebookUserID, m.sessionKey, m.accessToken1, m.accessToken3, null, m.flags, this.callback(this._signupSuccess, "facebook", q, c, n, o), this.callback(this._signupFailed, "facebook", o)) : GS.service.registerFacebookUser(a,
                b, c, g, h, k, q, m.facebookUserID, "", "", "", m.accessTokenEx, m.flags, this.callback(this._signupSuccess, "facebook", q, c, n, o), this.callback(this._signupFailed, "facebook", o))
    },signupViaGoogle:function(a, b, c, g, h, k, m, n) {
        var o = this._getInviteCode();
        GS.service.registerGoogleUser(a, b, c, g, h, k, o, this.callback(this._signupSuccess, "google", o, c, m, n), this.callback(this._signupFailed, "google", n))
    },_signupSuccess:function(a, b, c, g, h, k) {
        if (k && k.userID === 0 || !k)return this._signupFailed(a, h, k);
        k.authType = a;
        k.Email = c;
        if (b) {
            GS.store.set("lastInviteCode",
                    null);
            gsConfig.inviteCode = null;
            GS.service.getUserByInviteID(b, this.callback(this._getInviterSuccess))
        }
        k.doNotReset = true;
        GS.service.getUserByID(k.userID, this.callback(this._updateUser, k));
        $.isFunction(g) && g(k);
        return k
    },_signupFailed:function(a, b, c) {
        c || (c = {});
        c.authType = a;
        $.isFunction(b) && b(c);
        return c
    },_getInviteCode:function() {
        var a = "",b = new Date,c = GS.store.get("lastInviteCode");
        if (c)if (c.expires && c.expires > b.valueOf())a = c.inviteCode; else GS.store.remove("lastInviteCode"); else if (gsConfig.inviteCode)a =
                gsConfig.inviteCode;
        return a
    },_getInviterSuccess:function(a) {
        var b = GS.Models.User.wrap(a);
        GS.getLightbox().open({type:"followInviter",view:{header:"POPUP_FOLLOW_INVITER_TITLE",messageHTML:(new GS.Models.DataString($.localize.getString("POPUP_FOLLOW_INVITER_MESSAGE"), {user:b.Name})).render(),buttonsLeft:[
            {label:"POPUP_FOLLOW_INVITER_CANCEL",className:"close"}
        ],buttonsRight:[
            {label:"POPUP_FOLLOW_INVITER_FOLLOW",className:"submit"}
        ]},callbacks:{".submit":function() {
            GS.user.addToUserFavorites(b.UserID)
        }}})
    },
    _updateUser:function(a, b) {
        b.User.UserID = a.userID;
        if (!a.doNotReset)location.hash = "/";
        var c = $.extend({}, a, b.User);
        this._handleLoginChange(GS.Models.AuthUser.wrapFromService(c), a);
        $("#notifications li.survey").remove()
    },_handleLoginChange:function(a, b) {
        var c = GS.user;
        GS.user = a;
        GS.service.reportUserChange(GS.user);
        if (c && c.isDirty) {
            var g = {};
            _.forEach(c.playlists, function(k) {
                var m = [],n = k.PlaylistID;
                _.forEach(k.songs, function(o) {
                    m.push(o.SongID)
                });
                GS.user.createPlaylist(k.PlaylistName, m, k.Description, function() {
                    g[n] =
                            k.PlaylistID
                }, null, false)
            });
            var h = _.map(c.library.songs, function(k) {
                return k.SongID
            });
            GS.user.addToLibrary(h, false);
            _.forEach(c.favorites.artists, function(k) {
                GS.user.addToArtistFavorites(k.ArtistID, false)
            });
            _.forEach(c.favorites.playlists, function(k) {
                GS.user.addToPlaylistFavorites(k.PlaylistID, false)
            });
            _.forEach(c.favorites.songs, function(k) {
                GS.user.addToSongFavorites(k.SongID, false)
            });
            _.forEach(c.favorites.users, function(k) {
                GS.user.addToUserFavorites(k.UserID, false)
            });
            _.forEach(c.sidebar.stations,
                    function(k) {
                        c.defaultStations.indexOf(k) == -1 && GS.user.addToShortcuts("station", k, "", false)
                    });
            _.forEach(c.sidebar.playlists, function(k) {
                if (k < 0)k = g[k];
                (k = GS.Models.Playlist.getOneFromCache(k)) && GS.user.addToShortcuts("playlist", k.PlaylistID, k.PlaylistName, false)
            });
            _.forEach(c.sidebar.subscribedPlaylists, function(k) {
                (k = GS.Models.Playlist.getOneFromCache(k)) && GS.user.addToShortcuts("playlist", k.PlaylistID, k.PlaylistName, false)
            });
            _.forEach(c.sidebar.songs, function(k) {
                (k = GS.Models.Song.getOneFromCache(k)) &&
                GS.user.addToShortcuts("song", k.SongID, k.SongName, false)
            });
            _.forEach(c.sidebar.artists, function(k) {
                (k = GS.Models.Artist.getOneFromCache(k)) && GS.user.addToShortcuts("artist", k.ArtistID, k.ArtistName, false)
            });
            _.forEach(c.sidebar.albums, function(k) {
                (k = GS.Models.Album.getOneFromCache(k)) && GS.user.addToShortcuts("album", k.AlbumID, k.AlbumName, false)
            })
        }
        GS.service.reportUserChange(GS.user);
        $.publish("gs.auth.update", b);
        if (!GS.user.IsPremium && GS.Controllers.AirbridgeController.instance().isDesktop || gsConfig.isPreview &&
                !GS.user.IsPremium && GS.user.UserID % 5 != 0) {
            if (h = GS.Controllers.LightboxController ? GS.Controllers.LightboxController.instance() : null)$("#lightbox_wrapper .lbcontainer.gs_lightbox_login:visible").length || h.open("login", {premiumRequired:true,showPreview:true,notCloseable:true}); else gsConfig.lightboxOnInit = {type:"login",defaults:{premiumRequired:true,showPreview:true,notCloseable:true}};
            GS.player && GS.player.pauseNextSong()
        }
        GS.user.isLoggedIn || $.publish("gs.auth.library.update");
        if (GS.getGuts && GS.user &&
                GS.user.UserID > 0) {
            h = _.browserDetect();
            GS.getGuts().logEvent("login", {userID:GS.user.UserID,browser:h.browser,browserVersion:h.version,os:navigator.platform,ip:gsConfig.remoteAddr});
            GS.getGuts().beginContext({userID:GS.user.UserID})
        }
    },_onAuthUpdate:function() {
        $.isFunction(this.vipUpdateCallback) && GS.user.IsPremium && this.vipUpdateCallback();
        this.vipUpdateCallback = null;
        $.isFunction(this.authUpdateCallback) && this.authUpdateCallback();
        this.authUpdateCallback = null
    }});
jQuery.Controller.extend("GS.Controllers.ThemeController", {_instance:null,themes:themes,sortOrder:themesSortOrder,plusThemes:plusThemes,artistThemes:artistThemes,instance:function() {
    return this._instance ? this._instance : new this($(document))
},init:function() {
    this._super()
}}, {currentTheme:null,themes:null,sort:null,themesLocation:"themes",themePreferences:{},hasSeenSponsoredTheme:true,hasSeenRotationCount:true,promptOnLogin:false,themeVisualizerForcedOnce:false,themeIsReady:false,manualSelectThemeID:null,
    lastActivePage:null,lastThemeNotification:null,lastDFPChange:null,lastUserChange:null,PAGE_HOME:"home",DEFAULT_USER_THEMEID:377,DEFAULT_PREMIUM_THEMEID:377,THEME_URL_PATTERN:/^#\/(theme)\/(.*)\/?/,THEME_USER_LIMIT:6E5,THEME_RATE_LIMIT:6E4,THEME_NOTIF_RATE_LIMIT:864E5,THEME_FLAG_DEFAULT:0,THEME_FLAG_FAMILY_FRIENDLY:1,init:function() {
        this.themes = themes;
        this.sort = themesSortOrder;
        this.themePreferences = GS.store.get("themePreferences") || {};
        $.subscribe("gs.app.ready", this.callback(this.appReady));
        $.subscribe("gs.app.resize",
                this.callback(this.positionTheme));
        $.subscribe("gs.auth.update", this.callback(this.onAuthUpdate));
        $.subscribe("gs.page.home.update", this.callback(this.positionTheme));
        $.subscribe("gs.player.nowplaying", this.callback(this.onSongPlay));
        $.subscribe("gs.player.streamserver", this.callback(this.onStreamServer));
        $.subscribe("gs.page.view", this.callback(this.pageView));
        $.subscribe("gs.theme.click", this.callback(this.onThemeClick));
        $.subscribe("gs.theme.playVideo", this.callback(this.playVideo))
    },appReady:function() {
        if (!(location.hash &&
                location.hash.match(GS.theme.THEME_URL_PATTERN))) {
            if (GS.user.UserID > 0 || _.defined(GS.store.get("isFirstVisit")) || _.defined(gsConfig.isNoob) && !gsConfig.isNoob) {
                this.isFirstVisit = false;
                this.resetTheme();
                this.handlePreviewLightboxTrigger()
            } else GS.service.isFirstVisit(this.callback("onIsFirstVisit"));
            setTimeout(this.callback(function() {
                this.currentTheme || this.lastOrDefault()
            }), 5E3)
        }
    },onAuthUpdate:function(a) {
        if (!(a && a.hasOwnProperty("doNotReset") || location.hash.indexOf("#/signup") == 0)) {
            this.lastDFPChange =
                    this.lastUserChange = this.lastThemeNotification = null;
            this.hasSeenRotationCount = this.hasSeenSponsoredTheme = true;
            if (this.promptOnLogin && GS.user.UserID > 0) {
                this.promptOnLogin = false;
                this.lastDFPChange = (new Date).getTime();
                GS.getLightbox().open("promotion", {theme:this.currentTheme})
            } else!this.promptOnLogin && GS.getLightbox().curType !== "promotion" && this.resetTheme()
        }
    },resetTheme:function(a) {
        if (!(a && a.hasOwnProperty("doNotReset") || this.isFirstVisit)) {
            a = new Date;
            !gsConfig.isPreview && !GS.user.IsPremium && this.hasSeenSponsoredTheme &&
                    this.hasSeenRotationCount && (!this.lastUserChange || a.getTime() - this.lastUserChange > this.THEME_USER_LIMIT) ? this.loadFromDFP() : this.lastOrDefault()
        }
    },onIsFirstVisit:function(a) {
        this.isFirstVisit = a;
        GS.store.set("isFirstVisit", false);
        if (this.isFirstVisit) {
            this.setCurrentTheme(this.DEFAULT_USER_THEMEID);
            this.trackFirstVisit()
        } else this.resetTheme();
        this.handlePreviewLightboxTrigger()
    },lastOrDefault:function() {
        var a = this.getLastTheme();
        if (this.themes) {
            if (a && themes[a] && (GS.user.IsPremium && a || themes[a] && !themes[a].premium)) {
                themes[a].pageTracking =
                        [];
                this.setCurrentTheme(a)
            } else GS.user.IsPremium ? this.setCurrentTheme(this.DEFAULT_PREMIUM_THEMEID) : this.setCurrentTheme(this.DEFAULT_USER_THEMEID);
            this.themeNotification(GS.player.getCurrentSong())
        }
    },setCurrentTheme:function(a, b) {
        if (!this.themes[a] || this.currentTheme && this.currentTheme.themeID == a || !GS.user.IsPremium && this.themes[a].premium)return false;
        var c = !this.currentTheme;
        (this.lastTheme = this.currentTheme) && this.lastTheme.removeReady && this.lastTheme.removeReady();
        this.promptOnLogin = false;
        this.currentTheme =
                GS.Models.Theme.wrap(this.themes[a]);
        this.renderTheme();
        var g = new Date;
        if (GS.getAd)GS.getAd().rotationCountPerImpression = 0;
        if (b) {
            this.hasSeenRotationCount = this.hasSeenSponsoredTheme = true;
            this.setLastTheme(a);
            if (this.lastTheme)this.setLastSeen(this.lastTheme.themeID); else this.lastUserChange = g.getTime()
        } else {
            this.lastDFPChange = g.getTime();
            this.hasSeenRotationCount = this.hasSeenSponsoredTheme = false
        }
        if (c) {
            this.onReady();
            GS.getGuts().gaTrackEvent("themes", "firstTheme", a);
            this.firstTheme = "" + a
        } else this.adSync();
        GS.getGuts().gaTrackEvent("themes", "change", a);
        this.themeImpression();
        this.themePageImpression();
        this.setRecentSeen(this.currentTheme.themeID);
        this.currentTheme.ready && setTimeout(this.callback(function() {
            this.currentTheme.ready();
            GS.getFacebook();
            GS.getNotice()
        }, 0));
        $.publish("gs.theme.set")
    },setLastTheme:function(a) {
        if (this.themePreferences[GS.user.UserID])this.themePreferences[GS.user.UserID].lastTheme = a; else this.themePreferences[GS.user.UserID] = {lastTheme:a,lastSeen:{}}
    },setLastSeen:function(a) {
        var b =
                new Date;
        this.lastUserChange = b.getTime();
        if (this.themePreferences[GS.user.UserID])this.themePreferences[GS.user.UserID].lastSeen[a] = b.getTime()
    },setRecentSeen:function(a) {
        this.themePreferences[GS.user.UserID] || (this.themePreferences[GS.user.UserID] = {lastTheme:a,lastSeen:{},recentSeenThemes:[]});
        if (!this.themePreferences[GS.user.UserID].recentSeenThemes)this.themePreferences[GS.user.UserID].recentSeenThemes = [];
        if (this.themePreferences[GS.user.UserID].recentSeenThemes.indexOf(a) < 0)if (this.themePreferences[GS.user.UserID].recentSeenThemes.length >=
                10) {
            this.themePreferences[GS.user.UserID].recentSeenThemes.push(a);
            this.themePreferences[GS.user.UserID].recentSeenThemes.shift()
        } else this.themePreferences[GS.user.UserID].recentSeenThemes.push(a)
    },getRecentSeen:function() {
        return this.themePreferences[GS.user.UserID] ? this.themePreferences[GS.user.UserID].recentSeenThemes : null
    },setLastDFPAction:function() {
        this.lastDFPChange = (new Date).getTime()
    },getLastTheme:function() {
        return this.themePreferences[GS.user.UserID] && this.themePreferences[GS.user.UserID].lastTheme ?
                this.themePreferences[GS.user.UserID].lastTheme : null
    },getLastSeen:function(a) {
        return this.themePreferences[GS.user.UserID] && this.themePreferences[GS.user.UserID].lastSeen[a] ? this.themePreferences[GS.user.UserID].lastSeen[a] : null
    },canCallAdServer:function() {
        return!this.isFirstVisit && !gsConfig.isPreview && !GS.user.IsPremium && this.hasSeenSponsoredTheme && this.hasSeenRotationCount && (!this.lastUserChange || (new Date).getTime() - this.lastUserChange > this.THEME_USER_LIMIT)
    },adSync:function() {
        if (!GS.user.IsPremium &&
                (this.currentTheme.misc && this.currentTheme.misc.adSync || this.currentTheme.adSync))GS.getAd().startAdTimer()
    },adUnSync:function() {
        if (!GS.user.IsPremium && (this.currentTheme.misc && this.currentTheme.misc.adUnSync || this.currentTheme.adUnSync))GS.getAd().startAdTimer()
    },hasAdSyncUnSync:function() {
        return this.currentTheme.misc && this.currentTheme.misc.adSync && this.currentTheme.misc.adUnSync || this.currentTheme.adSync && this.currentTheme.adUnSync
    },loadFromDFPManual:function(a) {
        this.manualSelectThemeID = a;
        a = ";" +
                ["id=" + this.manualSelectThemeID,"m=1;dcmt=text/json;sz=777x777"].join(";");
        GS.service.getThemeFromDFP(a, this.callback("onGetThemeManual"), this.callback("onGetThemeErr"))
    },onGetThemeManual:function(a) {
        this.onGetTheme(a, true)
    },loadFromDFP:function() {
        var a = new Date;
        if (!gsConfig.isPreview && !GS.user.IsPremium && (!this.lastDFPChange || a.getTime() - this.lastDFPChange > this.THEME_RATE_LIMIT))GS.service.getThemeFromDFP(this.buildParams(), this.callback("onGetTheme"), this.callback("onGetThemeErr"))
    },onGetTheme:function(a, b) {
        var c = new Date;
        if (!b && c.getTime() - this.lastUserChange < this.THEME_USER_LIMIT)console.warn("[Stopped DFP Override]"); else {
            try {
                a = JSON.parse(a)
            } catch(g) {
                console.log("invalid json from DFP", g);
                this.lastOrDefault();
                return
            }
            if (a) {
                if (b) {
                    if (this.manualSelectThemeID && this.manualSelectThemeID.toString() != a.themeID.toString()) {
                        this.themes[this.manualSelectThemeID].pageTracking = [];
                        this.setCurrentTheme(this.manualSelectThemeID, true);
                        return
                    }
                } else {
                    if (a.themeID < 0) {
                        this.trackDefault(a.themeID);
                        this.lastOrDefault();
                        return
                    }
                    if (this.getLastSeen(a.themeID)) {
                        this.lastOrDefault();
                        return
                    }
                }
                if (this.themes[a.themeID])$.extend(this.themes[a.themeID], a); else this.themes[a.themeID] = a;
                this.themes[a.themeID].themeID = _.isString(a.themeID) ? parseInt(a.themeID) : a.themeID;
                this.themes[a.themeID].premium = _.isString(a.premium) ? a.premium === "true" : a.premium;
                this.themes[a.themeID].sponsored = _.isString(a.sponsored) ? a.sponsored === "true" : a.sponsored;
                this.themes[a.themeID].adSync = _.isString(a.adSync) ? a.adSync === "true" : a.adSync;
                this.themes[a.themeID].adUnSync =
                        _.isString(a.adUnSync) ? a.adUnSync === "true" : a.adUnSync;
                c = parseFloat(a.pageHeaderFrequency);
                if (!isNaN(c))if (c == 0 || Math.random() > c)this.themes[a.themeID].pageTracking = null;
                c = parseFloat(a.artistNotifFrequency);
                if (!isNaN(c))if (c == 0 || Math.random() > c)this.themes[a.themeID].artistNotifTracking = null;
                this.setCurrentTheme(a.themeID, b)
            } else this.lastOrDefault()
        }
    },onGetThemeErr:function() {
        if (this.manualSelectThemeID && (!this.currentTheme || this.manualSelectThemeID != this.currentTheme.themeID) && this.themes[this.manualSelectThemeID]) {
            themes[this.manualSelectThemeID].pageTracking =
                    [];
            this.setCurrentTheme(this.manualSelectThemeID, true);
            this.manualSelectThemeID = null
        } else this.lastOrDefault()
    },onReady:function() {
        if (!this.themeIsReady) {
            this.themeIsReady = true;
            GS.user.IsPremium || GS.getAd().startAdTimer()
        }
    },onSongPlay:function(a) {
        if (a && a.SongID)if (!this.currentSong || this.currentSong.SongID != a.SongID) {
            this.currentSong = a;
            this.canCallAdServer() ? this.loadFromDFP() : this.themeNotification(a)
        }
    },onStreamServer:function(a) {
        if (document.visualizerTheme && document.visualizerTheme.loadCrossdomain) {
            document.visualizerTheme.loadCrossdomain(a.streamServer);
            if (!this.themeVisualizerForcedOnce)if (document.visualizerTheme && document.visualizerTheme.visualizerForceStart) {
                document.visualizerTheme.visualizerForceStart();
                this.themeVisualizerForcedOnce = true
            }
        }
    },savePreferences:function() {
        GS.store.set("themePreferences", this.themePreferences)
    },pageView:function(a) {
        if (!(!this.currentTheme && !this.themeIsReady || !this.lastActivePage))switch (a) {
            case this.PAGE_HOME:
                this.positionTheme();
                this.hasAdSyncUnSync() && this.adSync();
                this.themeImpression();
                break;
            default:
                this.canCallAdServer() &&
                this.loadFromDFP();
                this.hasAdSyncUnSync() && this.lastActivePage == this.PAGE_HOME && this.adUnSync();
                this.themePageImpression();
                break
        }
        this.lastActivePage = a
    },themeImpression:function() {
        if (this.currentTheme && this.themeIsReady && this.currentTheme.sponsored)if (GS.Controllers.PageController.activePageName && GS.Controllers.PageController.activePageName.toLowerCase() == this.PAGE_HOME)if (this.currentTheme.tracking) {
            this.hasSeenSponsoredTheme = true;
            GS.service.logTargetedThemeImpression(this.currentTheme.themeID);
            this.loadTracking(this.currentTheme.tracking);
            if (GS.getAd)GS.getAd().rotationCountPerImpression = 0
        }
    },themePageImpression:function() {
        this.currentTheme && this.themeIsReady && this.currentTheme.sponsored && $("#theme_page_header").is(".active:visible") && this.loadTracking(this.currentTheme.pageTracking)
    },loadTracking:function(a) {
        if ($.isArray(a)) {
            var b = (new Date).valueOf(),c;
            _.forEach(a, function(g) {
                if (g) {
                    g += g.indexOf("?") != -1 ? "&" + b : "?" + b;
                    c = new Image;
                    $("body").append($(c).load(
                            function(h) {
                                $(h.target).remove()
                            }).css("visibility", "hidden").attr("src", g))
                }
            })
        }
    },
    trackDefault:function(a) {
        this.loadTracking(["http://ad.doubleclick.net/ad/grooveshark.wall/;id=" + a + ";d=1;sz=1x1;ord="]);
        GS.getGuts().logEvent("trackDefaultTheme", {id:a})
    },trackFirstVisit:function() {
        this.loadTracking(["http://ad.doubleclick.net/ad/grooveshark.wall/;id=-1;v=1;sz=1x1;ord="])
    },onThemeClick:function(a) {
        a && a.currentTarget && this.currentTheme && this.currentTheme.handleClick(a)
    },playVideo:function(a) {
        if (this.currentTheme) {
            index = _.orEqual(a.index, 0);
            GS.getLightbox().open("video", {video:this.currentTheme.videos[index],
                videos:this.currentTheme.videos,index:index})
        }
    },renderTheme:function() {
        var a = $("#theme_page_header.measure").height();
        if (this.currentTheme) {
            $("#themeStyleSheet").attr("href", [gsConfig.assetHost,this.themesLocation,this.currentTheme.location,"theme.css"].join("/") + "?ver=" + this.currentTheme.version);
            $(".theme_component").html("").removeClass("active");
            for (var b = 0; b < this.currentTheme.sections.length; b++)this.renderSection(this.currentTheme.sections[b]);
            this.positionTheme();
            if (window.location.hash !==
                    "#/" && window.location.hash !== "" && window.location.hash.toString().indexOf("#/theme") != 0 && window.location.hash.toString().indexOf("#/sessions") != 0) {
                $("#theme_home object").hide();
                window.location.hash.toString().indexOf("#/signup");
                this.currentTheme.artistIDs && this.themeNotification(GS.player.getCurrentSong())
            }
        }
        $("#theme_page_header.measure").height() !== a && GS.resize()
    },renderSection:function(a) {
        if (this.currentTheme && a.length && $(a).length) {
            var b = [this.themesLocation,this.currentTheme.location];
            b.push(a.substr(7,
                    a.length));
            b = b.join("/");
            $(a).html(this.view(b)).addClass("active");
            if (a === "#theme_page_header" || a === "#theme_page_header_expandable")$(a).prepend($("<div class='border'></div>"));
            this.currentTheme.bindAssets(a)
        }
    },positionTheme:function() {
        var a;
        if (this.currentTheme && this.currentTheme.sections)for (var b = 0; b < this.currentTheme.sections.length; b++) {
            a = this.currentTheme.sections[b];
            this.currentTheme.position(a)
        }
    },themeNotification:function(a) {
        a = _.orEqual(a, GS.player.getCurrentSong());
        var b = new Date;
        if (a &&
                this.currentTheme.artistIDs && window.location.hash !== "#/" && window.location.hash !== "")for (var c,g = 0; g < this.currentTheme.artistIDs.length; g++) {
            c = this.currentTheme.artistIDs[g];
            if (c == a.ArtistID && this.currentTheme.artistNotifTracking && (!this.lastThemeNotification || b.getTime() - this.lastThemeNotification > this.THEME_NOTIF_RATE_LIMIT)) {
                this.lastThemeNotification = b.getTime();
                GS.getNotice().displayThemeArtistNotification(a, this.currentTheme);
                break
            }
        }
    },view:function(a, b, c) {
        a = [a];
        b = _.orEqual(b, this);
        c = this.calculateHelpers.call(this,
                c);
        a = "/" + a.join("/");
        a += $.View.ext + "?ver=" + this.currentTheme.version.toString().replace(/[\/\.\?]/g, "_");
        a.replace(/[\/\.]/g, "_").replace(/_+/g, "_").replace(/^_/, "");
        return $.View(a, b, c)
    },buildParams:function() {
        return GS.getAd().buildParams(["dcmt=text/json","sz=777x777"], ";", ";")
    },themeCenter:function() {
        $(".theme-center").each(function() {
            var a = $(this);
            a.css({left:"50%",marginLeft:-(a.outerWidth() / 2)})
        })
    },downloadIE9:function() {
        function a(q) {
            return b.indexOf(q) >= 0
        }

        var b = navigator.userAgent.toLowerCase();
        parseFloat(window.navigator.appMinorVersion);
        a("windows nt");
        var c = a("windows nt 6.0"),g = a("windows nt 6.1"),h = a("windows nt 5.1"),k = a("msie");
        a("msie 7");
        a("msie 8");
        a("trident/5.0");
        a("trident/6.0");
        var m = a("firefox"),n = a("chrome"),o = false;
        if (n)Version = b.match(/chrome\/(\d{1,2})/)[1];
        if (m && /Firefox[\/\s](\d+\.\d+)/.test(navigator.userAgent))Version = Number(RegExp.$1);
        if (k || m && Version >= 4 || n && Version >= 11) {
            BitSniffed = true;
            o = a("win64") || a("wow64")
        }
        WinVersion = h ? "xp" : c ? "vista" : g ? "win7" : "";
        WinBits = o ? "64" :
                "32";
        c = {"win7-32":"/8/6/D/86DB5DC9-5706-4A5B-BD46-FFBA6FA67D44/IE9-Windows7-x86-enu.exe","win7-64":"/8/6/D/86DB5DC9-5706-4A5B-BD46-FFBA6FA67D44/IE9-Windows7-x64-enu.exe","vista-32":"/8/6/D/86DB5DC9-5706-4A5B-BD46-FFBA6FA67D44/IE9-WindowsVista-x86-enu.exe","vista-64":"/8/6/D/86DB5DC9-5706-4A5B-BD46-FFBA6FA67D44/IE9-WindowsVista-x64-enu.exe"};
        g = WinVersion ? WinVersion + "-" + WinBits : "";
        return c[g] ? "http://download.microsoft.com/download" + c[g] : false
    },handlePreviewLightboxTrigger:function() {
        var a = new Date,
                b = new Date(2011, 11, 1);
        if (!(a.valueOf() > b.valueOf()))if (this.isFirstVisit)GS.store.set("hasSeenUkuleleWelcome", true); else if (!GS.store.get("hasSeenUkuleleWelcome")) {
            GS.store.set("hasSeenUkuleleWelcome", true);
            GS.getLightbox().open("preview")
        }
    }});
$.Class.extend("GS.Notification", {defaults:{duration:5E3,view:"notification",viewParams:false,uniqueInstance:false,element:null,isOpen:false,isAdded:false,timeout:false,focusInText:false,mouseIsOut:false,listenersSet:false,useAnimation:true,onOpen:null}}, {controller:null,init:function(a) {
    a = $.extend({}, GS.Notification.defaults, a);
    for (var b in a)if (a.hasOwnProperty(b))this[b] = a[b];
    if (!this.notificationID)this.notificationID = this.controller.generateNotificationID();
    this.controller.notificationLookup[this.notificationID] =
            this;
    if (this.uniqueInstance)this.controller.uniquesLookup[this.uniqueInstance] = this;
    if (!this.viewParams)this.viewParams = {};
    this.viewParams.notificationID = this.notificationID;
    if (!this.element)this.element = $(this.controller.view(this.view, this.viewParams))
},open:function() {
    this.isAdded || this.add();
    this.useAnimation ? this.element.slideDown("fast") : this.element.show();
    this.isOpen = true;
    this.beginTimeout();
    this.controller.reportOpen(this);
    $.isFunction(this.onOpen) && this.onOpen()
},close:function() {
    this.remove();
    this.isOpen = false;
    this.endTimeout();
    this.controller.reportClose(this)
},beginTimeout:function(a) {
    a = _.orEqual(a, this.duration);
    this.timeout && this.endTimeout();
    if (a)this.timeout = setTimeout(this.callback(function() {
        this.close()
    }), a)
},endTimeout:function() {
    clearTimeout(this.timeout)
},setListeners:function() {
    this.element.mouseout(this.callback(function() {
        this.mouseOut = true;
        this.focusInText || this.beginTimeout(this.duration)
    }));
    this.element.mouseover(this.callback(function() {
        this.mouseOut = false;
        this.endTimeout()
    }));
    this.element.find("textarea").focus(this.callback(function() {
        this.focusInText = true;
        this.endTimeout()
    }));
    this.element.find("textarea").focusout(this.callback(function() {
        this.focusInText = false;
        this.mouseOut && this.beginTimeout(this.duration)
    }))
},add:function() {
    $("#notifications").append(this.element);
    this.element.hide();
    this.listenersSet || this.setListeners();
    this.isAdded = true
},remove:function() {
    if (this.useAnimation)this.element.stop().slideUp("fast", this.callback(function() {
        this.element.remove();
        this.isAdded =
                false
    })); else {
        this.element.remove();
        this.isAdded = false
    }
}});
GS.Controllers.BaseController.extend("GS.Controllers.NotificationsController", {isGSSingleton:true,preSetup:function() {
    var a = GS.Controllers.BaseController.singletonCallback,b = $.subscribe;
    b("gs.notification", a("notice", "displayMessage"));
    b("gs.player.nowplaying", a("notice", "onSongPlay"));
    b("gs.notification.restorequeue", a("notice", "displayRestoreQueue"));
    b("gs.facebook.notification.sent", a("notice", "displayFacebookSent"));
    b("gs.facebook.notification.removed", a("notice", "displayFacebookUndoPost"));
    b("gs.notification.favorite.song",
            a("notice", "displayFavoritedObject", "song"));
    b("gs.notification.favorite.playlist", a("notice", "displayFavoritedObject", "playlist"));
    b("gs.notification.favorite.artist", a("notice", "displayFavoritedObject", "artist"));
    b("gs.notification.favorite.user", a("notice", "displayFavoritedObject", "user"));
    b("gs.notification.playlist.create", a("notice", "displayFavoritedObject", "newPlaylist"));
    b("gs.auth.library.songsAdded", a("notice", "displayLibraryAddedObject"));
    b("gs.facebook.notification.connect", a("notice",
            "displayFacebookConnect"));
    b("gs.facebook.notification.songComment", a("notice", "displayFacebookSongComment"));
    b("gs.facebook.notification.findFriends", a("notice", "displayFacebookFindFriends"));
    b("gs.facebook.notification.cannotPost", a("notice", "displayFacebookCannotPost"));
    b("gs.facebook.notification.rateLimited", a("notice", "displayFacebookRateLimit"))
}}, {appIsReady:false,localeIsReady:false,queuedNotifications:[],openNotifications:[],maxOnScreen:3,uniquesLookup:{},notificationLookup:{},seenArtistNotifications:[],
    seenPromoNotifications:null,sawSignupNotification:false,sawRestoreQueueNotification:false,feedbackOnNextSong:false,currentPromotionIntervalID:null,lastPromoNotification:null,sawPreviewNotification:0,doNotShowPreviewNotification:false,sawPreviewNotificationThisSession:false,beenToPreview:false,PROMO_NOTIF_RATE_LIMIT:108E5,init:function() {
        this.seenPromoNotifications = GS.store.get("seenPromoNotifications") || {};
        this.sawPreviewNotification = parseInt(GS.store.get("sawPreviewNotification"), 10) || 0;
        this.doNotShowPreviewNotification =
                _.orEqual(GS.store.get("doNotShowPreviewNotification"), false);
        this.sawRestoreQueueNotification = parseInt(GS.store.get("sawRestoreQueueNotification"), 10) || 0;
        this.beenToPreview = _.orEqual(GS.store.get("beenToPreview"), false);
        this._super();
        if ($.localize.ready)this.localeIsReady = true; else this.subscribe("gs.locale.ready", this.callback("localeReady"));
        GS.Notification.prototype.controller = this;
        var a = _.browserDetect(),b = false;
        switch (a.browser) {
            case "chrome":
                b = true;
                break;
            case "firefox":
                b = a.version >= 6;
                break;
            case "msie":
                b = a.version >= 8;
                break
        }
        GS.Notification.defaults.useAnimation = b
    },appReady:function() {
        this.appIsReady = true;
        this.openNext();
        GS.IE.canPin && !GS.IE.isPinned && GS.IE.firstVisit ? this.getPromoNotifFromDFP({subid:2.2}) : this.getPromoNotifFromDFP()
    },showPreviewLightbox:function() {
        if (!this.beenToPreview && (GS.user.IsPremium || GS.user.UserID % 5 === 0)) {
            this.beenToPreview = true;
            GS.store.set("beenToPreview", true);
            GS.getLightbox().open("preview")
        }
    },localeReady:function() {
        this.localeIsReady = true;
        this.openNext()
    },
    generateNotificationID:function() {
        var a = (Math.floor(Math.random() * 1E4) + 1).toString();
        return this.notificationLookup.hasOwnProperty(a) ? this.generateNotificationID() : a
    },queueNotification:function(a) {
        this.queuedNotifications.indexOf(a) === -1 && this.queuedNotifications.push(a);
        this.openNext()
    },openNext:function() {
        this.appIsReady && this.localeIsReady && this.queuedNotifications.length && this.openNotifications.length < this.maxOnScreen && this.queuedNotifications.shift().open()
    },reportOpen:function(a) {
        this.openNotifications.indexOf(a) ===
                -1 && this.openNotifications.push(a)
    },reportClose:function(a) {
        var b = this.openNotifications.indexOf(a);
        b !== -1 && this.openNotifications.splice(b, 1);
        this.notificationLookup.hasOwnProperty(a.notificationID) && delete this.notificationLookup[a.notificationID];
        a.uniqueInstance && this.uniquesLookup.hasOwnProperty(a.uniqueInstance) && delete this.uniquesLookup[a.uniqueInstance];
        this.openNext()
    },displayMessage:function(a) {
        var b;
        if (a.uniqueInstance)if ((b = this.uniquesLookup[a.uniqueInstance]) && b.isOpen) {
            b.beginTimeout();
            return
        }
        b || (b = new GS.Notification({view:"notification",viewParams:{controller:this,notification:a},duration:a.manualClose ? 0 : a.displayDuration,uniqueInstance:_.orEqual(a.uniqueInstance, false)}));
        b.isOpen || this.queueNotification(b)
    },onSongPlay:function(a) {
        if (a && (this.feedbackOnNextSong || a.sponsoredAutoplayID)) {
            this.feedbackOnNextSong = false;
            if (this.seenArtistNotifications.indexOf(a.ArtistID) === -1) {
                this.seenArtistNotifications.push(a.ArtistID);
                this.displayArtistFeedback(a)
            }
        }
        this.uniquesLookup.promotion ||
        this.getPromoNotifFromDFP({song:a})
    },saveSeenPromoNotifications:function() {
        GS.store.set("seenPromoNotifications", this.seenPromoNotifications)
    },getPromoNotifFromDFP:function(a) {
        var b = new Date;
        if (a && _.isNumber(a.subid))GS.service.getNotificationFromDFP(this.buildParams(a), this.callback("displayPromotionManual"), this.callback("displayPromotionErr")); else if (!this.lastPromoNotification || b.getTime() - this.lastPromoNotification > this.PROMO_NOTIF_RATE_LIMIT) {
            this.lastPromoNotification = b.getTime();
            GS.service.getNotificationFromDFP(this.buildParams(a),
                    this.callback("displayPromotion"), this.callback("displayPromotionErr"))
        }
    },buildParams:function(a) {
        var b = [];
        b.push("notif=1");
        if (a && _.isNumber(a.subid)) {
            b.push("m=1");
            b.push("subid=" + a.subid)
        }
        if (GS.theme && GS.theme.currentTheme) {
            var c = parseInt(GS.theme.currentTheme.themeID, 10);
            c && b.push("11=" + c)
        }
        a && a.song && b.push("2=" + a.song.ArtistID);
        if (GS.user.isLoggedIn) {
            if (GS.user.Sex)b.push("1=" + (GS.user.Sex.toLowerCase() == "m" ? "0" : "1"));
            if (GS.user.TSDOB) {
                a = GS.user.TSDOB.split("-");
                if (a.length == 3) {
                    c = new Date;
                    var g =
                            c.getFullYear() - parseInt(a[0], 10);
                    if (parseInt(a[1], 10) > c.month)g -= 1; else if (parseInt(a[1], 10) == c.month && parseInt(a[2], 10) > c.date)g -= 1;
                    var h;
                    if (g >= 13 && g < 18)h = "1"; else if (g >= 18 && g < 25)h = "2"; else if (g >= 25 && g < 35)h = "3"; else if (g >= 35 && g < 50)h = "4"; else if (g >= 50)h = "5";
                    g >= 21 && b.push("a=1");
                    h && b.push("10=" + h)
                }
            }
        }
        GS.getAd && b.push("4=" + GS.getAd().rotationCount);
        if (GS.theme) {
            b.push("5=" + ((GS.user.settings.local.themeFlags & GS.theme.THEME_FLAG_FAMILY_FRIENDLY) == GS.theme.THEME_FLAG_FAMILY_FRIENDLY ? 1 : 0));
            GS.theme.currentTheme &&
                    GS.theme.currentTheme.sections.indexOf("#theme_page_header") >= 0 && b.push("6=1")
        }
        if (GS.Controllers.PageController)if (GS.Controllers.PageController.activePageName && GS.Controllers.PageController.activePageName.toLowerCase() == "home")b.push("9=1"); else GS.Controllers.PageController.activePageName && GS.Controllers.PageController.activePageName.toLowerCase() == "search" && (!GS.search.type || GS.search.type === "" || GS.search.type == "everything") ? b.push("9=2") : b.push("9=0");
        if (GS.IE)if (GS.IE.canPin)if (GS.IE.canPin &&
                !GS.IE.isPinned)b.push("ie=1"); else GS.IE.isPinned && b.push("ie=2"); else b.push("ie=0");
        b.push("dcmt=text/json");
        b.push("sz=468x60");
        if (!GS.user.IsPremium && !GS.user.isLoggedIn && GS.store.get("webvisit") && GS.store.get("webvisit").theme)b = b.concat(GS.store.get("webvisit").theme);
        return";" + b.join(";")
    },displayPromotionManual:function(a) {
        this.displayPromotion(a, true)
    },displayPromotion:function(a, b) {
        try {
            a = JSON.parse(a)
        } catch(c) {
            console.log("invalid json from DFP", c);
            return
        }
        if (a.id != "-1")if (!this.currentPromotionIntervalID &&
                !this.uniquesLookup.promotion && !this.getLastPromoNotifSeen(a.id) || b) {
            if (a.delay && _.isArray(a.delay) && a.delay.length) {
                var g = a.delay;
                g = g.shuffle();
                a.delay = g[0]
            }
            g = parseInt(a.delay, 10);
            if (isNaN(g))g = 0;
            var h = parseInt(a.duration, 10);
            if (isNaN(h))h = 15E3;
            var k = a.view ? a.view : "promotionalNotification";
            if (b) {
                g = 0;
                if (a.type == "ie9")g = 5E3
            }
            this.currentPromotionIntervalID = setTimeout(this.callback(function() {
                if (!b) {
                    if (a.type == "signup")if (GS.user.isLoggedIn || this.userActivityCheck()) {
                        this.setLastPromoNotifSeen(a.id);
                        this.currentPromotionIntervalID = null;
                        return
                    }
                    if (a.type == "ie9")if (GS.user.IsPremium || GS.IE.isPinned) {
                        this.setLastPromoNotifSeen(a.id);
                        this.currentPromotionIntervalID = null;
                        return
                    }
                }
                this.queueNotification(new GS.Notification({uniqueInstance:"promotion",view:k,viewParams:{controller:this,notifData:a},duration:h}));
                this.setLastPromoNotifSeen(a.id)
            }), g)
        }
    },displayPromotionErr:function() {
        console.warn("Promotional Notification Error")
    },userActivityCheck:function() {
        var a = false,b = 0;
        _.forEach(GS.theme.themePreferences,
                function(c, g) {
                    b++;
                    if (g != "-1" || b > 1)a = true
                });
        return a
    },setLastPromoNotifSeen:function(a) {
        var b = new Date;
        if (!this.seenPromoNotifications)this.seenPromoNotifications = {};
        if (!this.seenPromoNotifications[GS.user.UserID]) {
            this.seenPromoNotifications[GS.user.UserID] = {};
            this.seenPromoNotifications[GS.user.UserID].lastSeen = {}
        }
        this.seenPromoNotifications[GS.user.UserID].lastSeen[a] = b.getTime()
    },getLastPromoNotifSeen:function(a) {
        return this.seenPromoNotifications && this.seenPromoNotifications[GS.user.UserID] &&
                this.seenPromoNotifications[GS.user.UserID].lastSeen[a] ? this.seenPromoNotifications[GS.user.UserID].lastSeen[a] : null
    },loadTracking:function(a) {
        if ($.isArray(a)) {
            var b = (new Date).valueOf(),c;
            _.forEach(a, function(g) {
                g += g.indexOf("?") != -1 ? "&" + b : "?" + b;
                c = new Image;
                $("body").append($(c).load(
                        function(h) {
                            $(h.target).remove()
                        }).css("visibility", "hidden").attr("src", g))
            })
        }
    },"li.notification.promo .promoNotifClickTracking click":function(a) {
        if (a = this.notificationLookup[$(a).closest("li.notification").attr("data-notificationid")]) {
            this.loadTracking(a.viewParams.notifData.clickTracking);
            a.close()
        }
    },displayArtistFeedback:function(a) {
        this.uniquesLookup.artistFeedback || this.queueNotification(new GS.Notification({uniqueInstance:"artistFeedback",view:"artistNotification",viewParams:{controller:this,feedbackSong:a},duration:15E3}))
    },displaySurveyQuestion:function(a) {
        a = _.orEqual(a, {});
        var b = (new Date).getTime(),c = GS.store.get("gs.surveys.lastQuestionClosedTime" + GS.user.UserID);
        GS.store.get("gs.surveys.notificationAnswerClosed" + GS.user.UserID) >= 3 && b - c < 2592E6 || c && b - c < 36E5 || $("#page_content").is(".surveyPage") ||
                this.uniquesLookup.surveyQuestion || this.queueNotification(new GS.Notification({uniqueInstance:"surveyQuestion",view:"surveyQuestion",viewParams:{controller:this,question:a.question,questionIndex:a.questionIndex,callback:a.callback},duration:6E4,onOpen:function() {
            $("#selectbox_surveyNotificationAnswer span").html($("select.selection_survey option:selected").html())
        }}))
    },"li.notification form.survey submit":function(a, b) {
        b.preventDefault();
        var c = this.uniquesLookup.surveyQuestion;
        if (c) {
            var g = c.viewParams.question,
                    h = c.viewParams.questionIndex,k = c.viewParams.callback;
            if ($.isFunction(k)) {
                if ($("[name=" + g.DemographicTypeId + "]", a).val() !== "--") {
                    try {
                        k(g, $("[name=" + g.DemographicTypeId + "]", a).val(), h)
                    } catch(m) {
                        console.warn("error answering question", g);
                        console.warn(m)
                    }
                    c.close()
                }
            } else console.warn("bad survey callback", k)
        }
        return false
    },"li.notification.survey button.startNow click":function() {
        var a = this.uniquesLookup.surveyAvailable;
        if (a) {
            var b = a.viewParams.survey;
            b && GS.getLightbox().open("startSurvey", {survey:b});
            a.close()
        }
    },"li.notification.survey .close click":function(a) {
        var b = this.uniquesLookup.surveyQuestion;
        if (b)if (a.parents("li.notification").is(".invitation")) {
            var c = b.viewParams.question;
            b = b.viewParams.callback;
            $.isFunction(b) && b(c, 0)
        }
        if (a.parents("li.notification").is(".question")) {
            a = _.orEqual(GS.store.get("gs.surveys.notificationAnswerClosed" + GS.user.UserID), 0);
            a++;
            GS.store.set("gs.surveys.notificationAnswerClosed" + GS.user.UserID, a);
            GS.store.set("gs.surveys.lastQuestionClosedTime" + GS.user.UserID,
                    (new Date).getTime())
        } else if (a.parents("li.notification").is(".invitation")) {
            a = _.orEqual(GS.store.get("gs.surveys.notificationInvitationClosed" + GS.user.UserID), 0);
            a++;
            GS.store.set("gs.surveys.notificationInvitationClosed" + GS.user.UserID, a);
            GS.store.set("gs.surveys.lastInvitationClosedTime" + GS.user.UserID, (new Date).getTime())
        } else if (a.parents("li.notification").is(".available")) {
            a = _.orEqual(GS.store.get("gs.surveys.notificationAvailableClosed" + GS.user.UserID), 0);
            a++;
            GS.store.set("gs.surveys.notificationAvailableClosed" +
                    GS.user.UserID, a);
            GS.store.set("gs.surveys.lastAvailableClosedTime" + GS.user.UserID, (new Date).getTime())
        }
    },displaySurveyInvitation:function() {
        GS.store.set("gs.surveys.hasSeenInvitation" + GS.user.UserID, 1);
        var a = (new Date).getTime(),b = GS.store.get("gs.surveys.lastInvitationClosedTime" + GS.user.UserID);
        GS.store.get("gs.surveys.notificationInvitationClosed" + GS.user.UserID) >= 3 && a - b < 2592E6 || b && a - b < 36E5 || $("#page_content").is(".surveyPage") || this.uniquesLookup.surveyInvitation || this.queueNotification(new GS.Notification({uniqueInstance:"surveyInvitation",
            view:"surveyInvitation",viewParams:{controller:this},duration:6E4}))
    },"li.notification.survey button.surveyStart click":function() {
        var a = this.uniquesLookup.surveyInvitation;
        if (a) {
            location.hash = "/surveys";
            a.close()
        }
    },displaySurveysAvailable:function(a) {
        var b = (new Date).getTime(),c = GS.store.get("gs.surveys.lastAvailableClosedTime" + GS.user.UserID);
        GS.store.get("gs.surveys.notificationAvailableClosed" + GS.user.UserID) >= 3 && b - c < 2592E6 || c && b - c < 36E5 || this.uniquesLookup.surveyAvailable || this.queueNotification(new GS.Notification({uniqueInstance:"surveyAvailable",
            view:"surveyAvailable",viewParams:{controller:this,survey:a},duration:6E4}))
    },displaySurveyPoints:function(a) {
        this.queueNotification(new GS.Notification({view:"surveyPoints",viewParams:{controller:this,points:a},duration:15E3}))
    },displaySurveyAnswerError:function(a) {
        this.queueNotification(new GS.Notification({view:"surveyAnswerError",viewParams:{controller:this,errorCode:a}}))
    },displaySurveyProfilersComplete:function() {
        this.queueNotification(new GS.Notification({view:"surveyProfilersComplete",viewParams:{controller:this}}))
    },
    displayPerAnum:function() {
        this.queueNotification(new GS.Notification({view:"perAnum",viewParams:{controller:this}}))
    },displayThemeArtistNotification:function(a, b) {
        var c = this.uniquesLookup.artistFeedback;
        c && c.close();
        this.queueNotification(new GS.Notification({uniqueInstance:"artistFeedback",view:"themes/" + b.location + "/artist_notification",viewParams:{controller:this,feedbackSong:a},duration:15E3}));
        GS.theme.lastDFPChange = (new Date).getTime() + 15E3
    },displayIE9PromoNotification:function() {
        this.queueNotification(new GS.Notification({uniqueInstance:"promotion",
            view:"ie9PromoNotification",viewParams:{controller:this},duration:false}))
    },"li.notification a.theme_link click":function(a, b) {
        b.index = parseInt($(a).attr("data-video-index"), 10);
        GS.theme.currentTheme.handleClick(b);
        GS.theme.lastDFPChange = (new Date).getTime();
        if ($(a).attr("data-click-action")) {
            var c = this.notificationLookup[$(a).closest("li.notification").attr("data-notificationid")];
            c && c.close()
        }
    },"li.notification a.ie9_download click":function(a, b) {
        var c = $(a).closest("li.notification").attr("data-notificationid"),
                g = $(b.target).attr("data-notif-ctp"),h = $(b.target).attr("data-theme-id");
        GS.service.logThemeOutboundLinkClick(parseInt(h), 400);
        GS.theme.loadTracking(g.split(","));
        (c = this.notificationLookup[c]) && c.close()
    },"li.notification img.ie9_pin mousedown":function(a, b) {
        $(a).closest("li.notification").attr("data-notificationid");
        var c = $(b.target).attr("data-notif-ctp"),g = $(b.target).attr("data-pin-ctp"),h = $(b.target).attr("data-theme-id");
        GS.service.logThemeOutboundLinkClick(parseInt(h), 401);
        GS.theme.loadTracking(c.split(","));
        GS.theme.loadTracking(g.split(","))
    },"li.notification a.ie9_learnMore click":function(a, b) {
        GS.getLightbox().open("ie9Promotion", {state:"pin"});
        var c = $(a).closest("li.notification").attr("data-notificationid"),g = $(b.target).attr("data-notif-ctp"),h = $(b.target).attr("data-theme-id");
        GS.service.logThemeOutboundLinkClick(parseInt(h), 402);
        GS.theme.loadTracking(g.split(","));
        (c = this.notificationLookup[c]) && c.close()
    },displayLibraryAddedObject:function(a) {
        var b = {controller:this};
        if (a.songs) {
            if (a.songs.length ==
                    1) {
                b.msgKey = "NOTIF_LIBRARY_ADDED_SONG";
                b.msgData = a.songs[0];
                b.msgData.songLink = "<a class='songLink' rel='" + a.songs[0].songID + "'>" + a.songs[0].songName + "</a>";
                b.msgData.artistLink = "<a href='" + _.cleanUrl(a.songs[0].artistName, a.songs[0].artistID, "artist", null, null) + "'>" + a.songs[0].artistName + "</a>";
                b.object = a.songs[0].songID;
                b.type = "song"
            } else {
                b.msgKey = "NOTIFICATION_LIBRARY_ADD_SONGS";
                b.msgData = {numSongs:a.songs.length};
                b.type = "songs"
            }
            this.queueNotification(new GS.Notification({view:"libraryAddedNotification",
                viewParams:b}))
        }
    },displayFavoritedObject:function(a, b) {
        function c(k) {
            if (k.view == "libraryAddedNotification" && k.viewParams.type === "song" && k.viewParams.msgData)if (_.orEqual(k.viewParams.msgData.SongID, k.viewParams.msgData.songID) == _.orEqual(b.songID, b.SongID))return true;
            return false
        }

        var g,h;
        if (b) {
            if (a == "song") {
                for (g = 0; g < this.openNotifications.length; g++) {
                    h = this.openNotifications[g];
                    c(h) && h.close()
                }
                for (g = 0; g < this.queuedNotifications.length; g++) {
                    h = this.queuedNotifications[g];
                    if (c(h)) {
                        this.queuedNotifications.splice(g,
                                1);
                        g--
                    }
                }
            }
            g = {controller:this,type:a,object:b};
            switch (a) {
                case "playlist":
                    g.msgKey = "NOTIF_SUBSCRIBED_PLAYLIST";
                    g.msgData = {playlistName:b.PlaylistName,playlistLink:"<a href='" + _.cleanUrl(b.PlaylistName, b.PlaylistID, "playlist", null, null) + "'>" + b.PlaylistName + "</a>"};
                    break;
                case "song":
                    g.msgKey = "NOTIF_FAVORITED_SONG";
                    g.msgData = {songName:_.orEqual(b.SongName, b.songName),artistName:_.orEqual(b.ArtistName, b.artistName),songLink:"<a class='songLink' rel='" + b.SongID + "'>" + b.SongName + "</a>",artistLink:"<a href='" +
                            _.cleanUrl(b.ArtistName, b.ArtistID, "artist", null, null) + "'>" + b.ArtistName + "</a>"};
                    break;
                case "user":
                    if (b.Username) {
                        g.msgKey = "NOTIF_FOLLOWED_USER";
                        g.msgData = {userName:b.Name,userLink:"<a href='" + _.cleanUrl(b.Name, b.UserID, "user", null, null) + "'>" + b.Name + "</a>"}
                    } else {
                        g.msgKey = "NOTIF_FOLLOWED_USERS";
                        g.msgData = {}
                    }
                    break;
                case "newPlaylist":
                    g.msgKey = "NOTIF_CREATED_PLAYLIST";
                    g.msgData = {playlistName:b.PlaylistName,playlistLink:"<a href='" + _.cleanUrl(b.PlaylistName, b.PlaylistID, "playlist", null, null) + "'>" + b.PlaylistName +
                            "</a>"};
                    break;
                case "artist":
                    g.msgKey = "NOTIF_FOLLOWED_ARTIST";
                    g.msgData = {artistName:b.ArtistName,artistLink:"<a href='" + _.cleanUrl(b.ArtistName, b.ArtistID, "artist", null, null) + "'>" + b.ArtistName + "</a>"};
                    break
            }
            h = new GS.Notification({view:"favoriteNotification",viewParams:g});
            this.queueNotification(h)
        }
    },"li.notification .favorited button.loginWithFacebook click":function(a, b) {
        b.stopImmediatePropagation();
        var c = this.notificationLookup[$(a).closest("li.notification").attr("data-notificationid")];
        if (c) {
            console.log(c,
                    c.endTimeout);
            c.duration = false;
            c.endTimeout();
            $("button.loginWithFacebook", c.element).hide();
            $("button.closeNotif", c.element).show();
            GS.getFacebook().login(this.callback(function() {
                $("button.closeNotif", c.element).hide();
                c.duration = 5E3;
                this.shareWithFacebook(c)
            }))
        }
        return false
    },"li.notification .favorited button.shareWithFacebook click":function(a, b) {
        b.stopImmediatePropagation();
        this.shareWithFacebook(this.notificationLookup[$(a).closest("li.notification").attr("data-notificationid")]);
        return false
    },
    shareWithFacebook:function(a) {
        if (a) {
            a.element.removeClass("notification_success").addClass("notification_form");
            $("button.shareWithFacebook", a.element).hide();
            $("div.facebookShare", a.element).show();
            $("div.content", a.element).prepend('<img src="/webincludes/images/notifications/facebook.png" />');
            $("div.content p", a.element).addClass("hasIcon");
            var b = $("#fb_share_message", a.element);
            b.focus(this.callback(function() {
                b.val() == $.localize.getString("NOTIF_SHARE_PREFILL_MSG") && b.val("")
            }));
            b.focusout(this.callback(function() {
                b.val() ===
                        "" && b.val($.localize.getString("NOTIF_SHARE_PREFILL_MSG"))
            }))
        }
    },"li.notification .favorited button.shareWithFacebookSubmit click":function(a, b) {
        b.stopImmediatePropagation();
        var c = this.notificationLookup[$(a).closest("li.notification").attr("data-notificationid")];
        if (c) {
            var g = c.viewParams.object,h = c.viewParams.type,k = $("#fb_share_message", c.element).val();
            if (k == $.localize.getString("NOTIF_SHARE_PREFILL_MSG"))k = "";
            console.log("sharing to facebook: ", h, g, k);
            switch (h) {
                case "song":
                    GS.getFacebook().onFavoriteSong(g,
                            k, true);
                    break;
                case "playlist":
                    GS.getFacebook().onSubscribePlaylist(g, k);
                    break;
                case "newPlaylist":
                    GS.getFacebook().onPlaylistCreate(g, k, true);
                    break;
                case "user":
                    GS.getFacebook().onFollowUser(g, k);
                    break;
                case "artist":
                    GS.getFacebook().onFollowArtist(g, k);
                    break
            }
            c.close()
        }
        return false
    },displayFacebookSent:function(a) {
        if (a && a.params && a.data) {
            var b = this.uniquesLookup.facebook;
            b && b.close();
            b = new GS.Notification({uniqueInstance:"facebook",view:"facebookPostNotification",viewParams:{controller:this,type:a.params.type,
                hideUndo:a.params.hideUndo,ref:a.params.ref,data:a.data,object:a.params.object}});
            this.queueNotification(b)
        }
    },"li.notification .facebook button.undo click":function(a, b) {
        b.stopImmediatePropagation();
        var c = this.notificationLookup[$(a).closest("li.notification").attr("data-notificationid")];
        if (c) {
            var g = c.viewParams.data;
            g.object = c.viewParams.object;
            GS.getFacebook().removeEvent(g);
            c.close()
        }
        return false
    },"li.notification .facebook button.ok click":function(a, b) {
        b.stopImmediatePropagation();
        var c = this.notificationLookup[$(a).closest("li.notification").attr("data-notificationid")];
        c && c.close();
        return false
    },"li.notification .facebook button.settings click":function(a, b) {
        b.stopImmediatePropagation();
        var c = this.notificationLookup[$(a).closest("li.notification").attr("data-notificationid")];
        if (c) {
            c.close();
            location.hash = "#/settings/services"
        }
        return false
    },"li.notification .facebook a.resetPerms click":function(a, b) {
        b.stopImmediatePropagation();
        var c = this.notificationLookup[$(a).closest("li.notification").attr("data-notificationid")];
        c && c.close();
        GS.getFacebook().showReAuthLightbox();
        return false
    },"li.notification a.logoutFacebook click":function() {
        GS.auth.logout(function() {
            FB.logout(function() {
                location.hash = "#/signup";
                GS.auth.loginViaFacebook()
            })
        })
    },"li.notification a.logoutGoogle click":function() {
        GS.auth.logout(function() {
            location.hash = "#/signup";
            GS.getGoogle().serviceLogout()
        })
    },displayFacebookUndoPost:function(a) {
        if (a.data) {
            var b = "that one";
            if (a.params && a.params.object) {
                b = a.params.object;
                b = _.orEqualEx(b.SongName, b.PlaylistName, b.ArtistName, b.AlbumName)
            }
            (a = this.uniquesLookup.facebook) &&
            a.close();
            a = new GS.Notification({uniqueInstance:"facebook",view:"facebookUndoPostNotification",viewParams:{controller:this,msgData:{title:b},msgKey:"NOTIF_FACEBOOK_SHARE_UNDO"}});
            this.queueNotification(a)
        }
    },displayFacebookCannotPost:function() {
        var a = this.uniquesLookup.facebook;
        a && a.close();
        a = new GS.Notification({uniqueInstance:"facebook",view:"facebookCannotPostNotification",viewParams:{controller:this}});
        this.queueNotification(a)
    },"li.notification .facebook button.loginToFacebook click":function(a, b) {
        b.stopImmediatePropagation();
        var c = this.notificationLookup[$(a).closest("li.notification").attr("data-notificationid")];
        if (c) {
            console.log(c, c.endTimeout);
            c.duration = false;
            c.endTimeout();
            $("button.loginToFacebook", c.element).hide();
            $("button.closeNotif", c.element).show();
            GS.getFacebook().login(this.callback(function() {
                c.close()
            }))
        }
        return false
    },displayFacebookRateLimit:function(a) {
        if (a.callback) {
            var b = this.uniquesLookup.facebook;
            b && b.close();
            b = new GS.Notification({uniqueInstance:"facebook",view:"facebookRateLimitNotification",
                viewParams:{controller:this,callback:a.callback,type:a.type}});
            this.queueNotification(b)
        }
    },"li.notification .facebook button.doItAnyway click":function(a, b) {
        b.stopImmediatePropagation();
        var c = this.notificationLookup[$(a).closest("li.notification").attr("data-notificationid")];
        if (c) {
            var g = c.viewParams.callback;
            g();
            c.close()
        }
        return false
    },"li.notification form.artistFeedback button click":function(a, b) {
        b.stopImmediatePropagation();
        var c = this.uniquesLookup.artistFeedback;
        if (c) {
            var g = $(a).attr("data-vote"),
                    h = c.element.find("textarea").val();
            c = c.viewParams.feedbackSong;
            h && h.length && GS.service.provideSongFeedbackMessage(c.SongID, h);
            GS.service.provideSongFeedbackVote(c.SongID, g, c.ArtistID, this.callback("onArtistFeedback", g), this.callback("onArtistFeedbackFail"))
        }
        return false
    },displayFacebookConnect:function() {
        var a = this.uniquesLookup.facebook;
        a && a.close();
        a = new GS.Notification({uniqueInstance:"facebook",view:"facebookConnectNotification",viewParams:{controller:this},duration:1E4});
        this.queueNotification(a)
    },
    "#fbNotifConnect-btn click":function(a) {
        (a = this.notificationLookup[$(a).closest("li.notification").attr("data-notificationid")]) && a.close();
        GS.getFacebook().login(function() {
        }, this.callback("fbConnectErrback"))
    },fbConnectErrback:function(a) {
        if (typeof a == "object" && a.error)a = a.error;
        this.queueNotification(new GS.Notification({view:"notification",viewParams:{controller:this,notification:{type:"error",message:$.localize.getString(a)}},duration:5E3}))
    },displayFacebookFindFriends:function(a) {
        var b = this.uniquesLookup.facebook;
        b && b.close();
        a || (a = {message:false,inviteFriends:false});
        b = new GS.Notification({uniqueInstance:"facebook",view:"facebookFindFriendsNotification",viewParams:{controller:this,message:a.message,inviteFriends:a.inviteFriends},duration:1E4});
        this.queueNotification(b)
    },"a.findFacebookFriends click":function(a, b) {
        if (b.which) {
            var c = this.notificationLookup[$(a).closest("li.notification").attr("data-notificationid")];
            c && c.close();
            GS.getFacebook().getGroovesharkUsersFromFriends()
        }
    },"a.inviteFriends click":function(a, b) {
        if (b.which) {
            var c = this.notificationLookup[$(a).closest("li.notification").attr("data-notificationid")];
            c && c.close();
            GS.getLightbox().open("invite")
        }
    },displayFacebookSongComment:function() {
        var a = this.uniquesLookup.facebook;
        a && a.close();
        a = new GS.Notification({uniqueInstance:"facebook",view:"facebookSongCommentNotification",viewParams:{controller:this},duration:1E4});
        this.queueNotification(a)
    },"a.songLink click":function(a, b) {
        b.preventDefault();
        var c = parseInt($(a).attr("rel"), 10);
        c && GS.Models.Song.getSong(c,
                function(g) {
                    if (g)location.hash = g.toUrl()
                })
    },onArtistFeedback:function(a, b) {
        var c = this.uniquesLookup.artistFeedback;
        if (c) {
            var g = {controller:this,feedbackSong:c.viewParams.feedbackSong};
            if (b.success && a == 2) {
                g.urls = b.urls;
                c.element.find(".content").html(this.view("artistNotificationResult", g));
                _.isEmpty(b.urls) && c.beginTimeout(5E3)
            } else c.close()
        }
    },onArtistFeedbackFail:function() {
        var a = this.uniquesLookup.artistFeedback;
        a && a.close()
    },displayRestoreQueue:function() {
        if (this.sawRestoreQueueNotification < 3) {
            this.queueNotification(new GS.Notification({view:"restoreQueue",
                viewParams:{controller:this}}));
            this.sawRestoreQueueNotification++;
            GS.store.set("sawRestoreQueueNotification", this.sawRestoreQueueNotification)
        }
    },"li.notification a.close click":function(a) {
        (a = this.notificationLookup[$(a).closest("li.notification").attr("data-notificationid")]) && a.close()
    },"li.notification .cancel click":function(a) {
        (a = this.notificationLookup[$(a).closest("li.notification").attr("data-notificationid")]) && a.close()
    },"form.feedback submit":function() {
        console.log("submit song feedback");
        return false
    },"li.notification .loginCTA click":function(a) {
        (a = this.notificationLookup[$(a).closest("li.notification").attr("data-notificationid")]) && a.close();
        GS.getLightbox().open("login")
    },"li.notification .signupCTA click":function(a) {
        (a = this.notificationLookup[$(a).closest("li.notification").attr("data-notificationid")]) && a.close();
        location.hash = "#/signup"
    },"li.notification.restoreQueue .restore click":function(a) {
        (a = this.notificationLookup[$(a).closest("li.notification").attr("data-notificationid")]) &&
        a.close();
        GS.player.restoreQueue()
    },"li.notification.restoreQueue a.settings click":function(a) {
        (a = this.notificationLookup[$(a).closest("li.notification").attr("data-notificationid")]) && a.close();
        if (GS.user.isLoggedIn)location.hash = "/settings"; else GS.getLightbox().open("login")
    },"input focus":function(a) {
        $(a).parent().parent().addClass("active")
    },"textarea focus":function(a) {
        $(a).parent().parent().parent().addClass("active")
    },"input blur":function(a) {
        $(a).parent().parent().removeClass("active")
    },
    "textarea blur":function(a) {
        $(a).parent().parent().parent().removeClass("active")
    },"select focus":function(a) {
        a.parents(".input_wrapper").addClass("active");
        a.change()
    },"select blur":function(a) {
        a.parents(".input_wrapper").removeClass("active");
        a.change()
    },"select keydown":function(a) {
        a.change()
    },"select change":function(a) {
        a.siblings("span").html(a.find("option:selected").html())
    }});
(function() {
    function a(b) {
        console.log("re-rendering language", b);
        $("[data-translate-text]").localize("gs", {language:b});
        $("[data-translate-title]").localize("gs", {language:b,callback:"titleCallback"})
    }

    GS.Controllers.BaseController.extend("GS.Controllers.LocaleController", {onWindow:true,isGSSingleton:true}, {locale:"en",init:function() {
        var b = this,c = (GS.store.get("gs.locale") || gsConfig.lang || this.detectLangauge() || this.locale).substring(0, 2);
        a(c);
        this.subscribe("gs.locale.update", function(g) {
            b.locale =
                    g;
            a(g);
            GS.store.set("gs.locale", g)
        });
        this.locale = c;
        $.localize.ready ? console.log("locale is already ready") : this.subscribe("gs.locale.ready", this.callback(function() {
            console.log("localize controller got locale ready");
            a(this.locale)
        }))
    },detectLangauge:function() {
        var b = window.navigator;
        return b.language || b.browserLanguage || b.systemLanguage || b.userLanguage
    }})
})();
GS.Controllers.BaseController.extend("GS.Controllers.HeaderController", {onElement:"#header"}, {init:function() {
    this.subscribe("gs.auth.update", this.callback("update"));
    this.subscribe("gs.page.view", this.callback("updateSection"));
    this.subscribe("gs.router.history.change", this.callback("updateNavButtons"));
    this.subscribe("gs.locale.update", this.callback("update"));
    this._super()
},appReady:function() {
    this.update()
},update:function() {
    this.user = GS.user;
    this.isDesktop = GS.airbridge ? GS.airbridge.isDesktop :
            false;
    $("#header_userOptions").html(this.view(GS.user.isLoggedIn ? "loggedIn" : "loggedOut"));
    $("#header_mainNavigation").html(this.view("mainNavigation"));
    this.updateSection(GS.page.activePageName, GS.page.activePageIdentifier);
    this.updateNavButtons()
},updateSection:function(a) {
    switch (a) {
        case "home":
        case "search":
            a = $("#header_search_btn");
            a.hasClass("active") || a.addClass("active").siblings().removeClass("active");
            break;
        case "explore":
            $("#header_explore_btn").addClass("active").siblings().removeClass("active");
            break;
        case "music":
            GS.page.activePageIdentifier == GS.user.UserID ? $("#header_music_btn").addClass("active").siblings().removeClass("active") : $("#header_mainNavigation a").removeClass("active");
            break;
        case "user":
            GS.page.activePageIdentifier == GS.user.UserID && GS.page.activePageParams.section == "community" ? $("#header_community_btn").addClass("active").siblings().removeClass("active") : $("#header_mainNavigation a").removeClass("active");
            break;
        default:
            $("#header_mainNavigation a").removeClass("active")
    }
},updateFeedCount:function() {
    this.user =
            GS.user;
    this.isDesktop = GS.airbridge ? GS.airbridge.isDesktop : false;
    $("#header_mainNavigation").html(this.view("mainNavigation"));
    this.updateSection(GS.page.activePageName, GS.page.activePageIdentifier);
    this.updateNavButtons()
},updateNavButtons:function() {
    if (GS.router && GS.airbridge.isDesktop) {
        $("#header_back_btn").attr("disabled", !GS.router.hasBack);
        $("#header_forward_btn").attr("disabled", !GS.router.hasForward)
    }
},"#grooveshark click":function() {
    if ($("#page").is(".gs_page_home")) {
        $("input.search.autocomplete",
                "#page").blur();
        $("#searchBar_input input").val() == "" && $("#searchBar_input span").show()
    } else setTimeout(function() {
        $("input.search.autocomplete", "#page").blur()
    }, 0)
},"#header_search_btn mousedown":function() {
    if ($("#page").is(".gs_page_home")) {
        $("input.search.autocomplete", "#page").focus();
        $("#searchBar_input input").val() == "" && $("#searchBar_input span").show().addClass("faded");
        $("#searchBar_input input").addClass("focused")
    } else var a = $.subscribe("gs.page.home.view", function() {
        setTimeout(function() {
            $("input.search.autocomplete",
                    "#page").focus()
        }, 0);
        $("#searchBar_input span").show();
        $.unsubscribe(a)
    })
},"#header_forward_btn click":function() {
    GS.router.forward()
},"#header_back_btn click":function() {
    GS.router.back()
},"#header_login click":function(a) {
    $(a).toggleClass("active");
    $("#dropdown_loginForm_box").toggle();
    if ($("#dropdown_loginForm_box").is(":visible")) {
        $("#dropdown_loginForm_box").find("input:first").focus();
        this.element.find(".error").hide();
        $("div.capital iframe").hide().parent().hide()
    } else {
        $("#dropdown_loginForm_box").find("input").blur();
        $("div.capital iframe").show().parent().show()
    }
    var b = this;
    $("body").click(function(c) {
        if (!$(c.target).parents("#dropdown_loginForm_box").length && !$(c.target).parents("#header_loginOption").length) {
            b.closeLoginDropdown();
            $("div.capital iframe").show().parent().show()
        }
    })
},"#loginReplace click":function(a, b) {
    $("#header_login").trigger("click");
    b.preventDefault()
},closeLoginDropdown:function() {
    $("#dropdown_loginForm_box").hide();
    $("#dropdown_loginForm_box").find("input").blur();
    $("#header_login").removeClass("active")
},
    "a.account click":function() {
        function a(c) {
            if (c.target !== b.target) {
                $("#header_account_button").removeClass("active");
                $("#header_userSelectOptions").hide();
                $(document).unbind("click", a)
            }
        }

        var b;
        return function(c, g) {
            b = g;
            $(c).toggleClass("active");
            $("#header_userSelectOptions").toggle();
            $(document).unbind("click contextmenu", a).bind("click contextmenu", a)
        }
    }(),"ul.dropdownOptions li.option a click":function() {
        $("#header_account_button").removeClass("active");
        $("#header_userSelectOptions").hide()
    },"a.locale click":function() {
        GS.getLightbox().open("locale")
    },
    "a.invite click":function() {
        GS.user.UserID > 0 && GS.getLightbox().open("invite")
    },"a.feedback click":function() {
        GS.user.IsPremium && GS.getLightbox().open("feedback", {type:"preview"})
    },"a.logout click":function() {
        GS.auth.logout()
    },"input focus":function(a) {
        $(a).parent().parent().addClass("active")
    },"textarea focus":function(a) {
        $(a).parent().parent().parent().addClass("active")
    },"input blur":function(a) {
        $(a).parent().parent().removeClass("active")
    },"textarea blur":function(a) {
        $(a).parent().parent().parent().removeClass("active")
    },
    showError:function(a) {
        $("div.message", this.element).html($.localize.getString(a));
        this.element.find(".error").show()
    },showMessage:function(a) {
        $("div.message", this.element).html(a);
        this.element.find(".error").show()
    },"form#dropdown_loginForm submit":function(a, b) {
        b.preventDefault();
        this.element.find(".error").hide();
        var c = $("input[name=username]", a).val(),g = $("input[name=password]", a).val(),h = $("input[name=save]", a).val() ? 1 : 0;
        switch (c.toLowerCase()) {
            case "dbg:googlelogin":
                GS.getGoogle().lastError ?
                        this.showMessage("Last Google Login Error: " + JSON.stringify(GS.getGoogle().lastError)) : this.showMessage("There does not appear to be any errors with Google Login");
                break;
            case "dbg:facebooklogin":
                GS.getFacebook().lastError ? this.showMessage("Last Facebook Login Error: " + JSON.stringify(GS.getFacebook().lastError)) : this.showMessage("There does not appear to be any errors with Facebook Login");
                break;
            default:
                GS.auth.login(c, g, h, this.callback(this.loginSuccess), this.callback(this.loginFailed));
                break
        }
        return false
    },
    "button.facebookLogin click":function() {
        GS.auth.loginViaFacebook(null, this.callback(this.extLoginFailed));
        this.closeLoginDropdown()
    },"button.googleLogin click":function() {
        GS.auth.loginViaGoogle(null, this.callback(this.extLoginFailed));
        this.closeLoginDropdown()
    },loginSuccess:function() {
        this.closeLoginDropdown()
    },loginFailed:function(a) {
        if (a.error)this.showError(a.error); else a && a.userID == 0 ? this.showError("POPUP_SIGNUP_LOGIN_FORM_AUTH_ERROR") : this.showError("POPUP_SIGNUP_LOGIN_FORM_GENERAL_ERROR")
    },
    extLoginFailed:function(a) {
        var b = {error:"POPUP_SIGNUP_LOGIN_FORM_GENERAL_ERROR",premiumRequired:gsConfig.isPreview,notCloseable:gsConfig.isPreview};
        if (a.error)b.error = a.error; else if (a && a.authType == "facebook")b.error = "POPUP_SIGNUP_LOGIN_FORM_FACEBOOK_ERROR"; else if (a && a.authType == "google")b.error = "POPUP_SIGNUP_LOGIN_FORM_GOOGLE_ERROR";
        GS.getLightbox().open("login", b)
    },"a.loginLink click":function() {
        $("#dropdown_loginForm_box").hide();
        $("#dropdown_loginForm_box").find("input").blur();
        $("#header_login").removeClass("active")
    },
    "a.forget click":function() {
        GS.getLightbox().open("forget")
    }});
GS.Controllers.BaseController.extend("GS.Controllers.AdController", {isGSSingleton:true}, {rotateTimer:0,rotationTime:45E3,defaultRotationTime:45E3,maxRotationTime:36E4,lastActive:null,lastRotation:null,rotationCountPerImpression:0,useTestAds:false,rotationCount:0,sessionStart:null,lastAdChange:null,chooseAdLimit:4E3,clickAdCatchTimeout:null,lastActivePage:null,campaignArtists:{},campaignsByCampaignID:{},userCampaigns:[],locales:{en:"1",bg:"2",ca:"3",cs:"4",da:"5",de:"6",es:"7",eu:"8",fi:"9",fr:"10",
    it:"11",ja:"12",lt:"13",nb:"14",nl:"15",pl:"16",pt:"17",ro:"18",ru:"19",sk:"20",sl:"21",sv:"22",tr:"23",zh:"24"},adPlacements:["search_song_300x250","search_artist_300x250","search_album_300x250","search_playlist_300x250","search_user_300x250","search_event_300x250","explore_featured_300x250","explore_popular_300x250","explore_stations_300x250","explore_popular_728x90","mymusic_songs_160x600","mymusic_favorites_160x600","mymusic_playlists_overview_160x600","mymusic_playlists_subscribed_160x600","community_activity_300x250",
    "community_activity_728x90","playlist_music_300x250","playlist_albums_300x250","playlist_subscribers_300x250","playlist_music_728x90","artist_profile_300x250","artist_songs_300x250","artist_albums_300x250","artist_events_300x250","artist_profile_728x90","album_overview_300x250","song_overview_300x250","song_overview_728x90","myprofile_activity_300x250","myprofile_following_300x250","myprofile_fans_300x250","myprofile_activity_728x90","profile_activity_300x250","profile_music_300x250","profile_favorites_300x250",
    "profile_playlists_300x250","profile_community_300x250","profile_following_300x250","profile_fans_300x250","profile_activity_728x90"],init:function() {
    this.sessionStart = (new Date).getTime();
    this.lastActive = new Date;
    this.subscribe("gs.auth.update", this.callback(this.update));
    this.subscribe("gs.player.nowplaying", this.callback(this.onSongPlay));
    this.subscribe("gs.app.resize", this.callback(this.adSpecific));
    this.subscribe("gs.drag.start", function() {
        $("div.capital iframe").hide().parent().hide()
    });
    this.subscribe("gs.drag.end",
            function() {
                $("div.capital iframe").show().parent().show()
            });
    this.subscribe("gs.menu.show", function() {
        $("div.capital iframe").hide().parent().hide()
    });
    this.subscribe("gs.menu.hide", function() {
        setTimeout(function() {
            $("#lightbox:visible").length || $("div.capital iframe").show().parent().show()
        }, 10)
    });
    var a = this;
    $("body").bind("mousemove", function() {
        a.lastActive = new Date
    });
    this._super()
},appReady:function() {
    this.update()
},update:function() {
    this.user = GS.user;
    this.parseCampaignsForUser();
    GS.user.IsPremium &&
    this.startAdTimer();
    GS.resize()
},onSongPlay:function(a) {
    if (this.campaignArtists && this.campaignArtists[a.ArtistID]instanceof Array)for (var b = 0; b < this.campaignArtists[a.ArtistID].length; b++) {
        var c = this.campaignArtists[a.ArtistID][b];
        if (c) {
            var g = this.campaignsByCampaignID[c];
            if (!g) {
                g = {id:c,count:1};
                this.campaignsByCampaignID[c] = g;
                this.userCampaigns.push(g)
            }
        }
    }
},parseCampaignsForUser:function() {
    this.userCampaigns = [];
    this.campaignsByCampaignID = {};
    var a = GS.store.get("artistsPlayed" + (this.user ? this.user.UserID :
            -1));
    if (this.campaignArtists && a)for (var b = 0; b < a.length; b++) {
        var c = a[b];
        if (c && this.campaignArtists[c]instanceof Array)for (var g = 0; g < this.campaignArtists[c].length; g++) {
            var h = this.campaignArtists[c][g];
            if (h) {
                var k = this.campaignsByCampaignID[h];
                if (k)k.count++; else {
                    k = {id:h,count:1};
                    this.campaignsByCampaignID[h] = k;
                    this.userCampaigns.push(k)
                }
            }
        }
    }
},showAdBar:function() {
    $("#capitalSidebar").show();
    $("#application").css("margin-right", "180px");
    $("#sidebarCapital_160").children("iframe").attr("src", "");
    this.startAdTimer()
},
    startAdTimer:function() {
        if (GS.theme.themeIsReady) {
            clearInterval(this.rotateTimer);
            this.rotateTimer = setInterval(this.callback("onRotateTimer"), this.defaultRotationTime);
            this.chooseAd()
        }
    },resetAdTimer:function() {
        if (GS.theme.themeIsReady) {
            clearInterval(this.rotateTimer);
            this.rotateTimer = setInterval(this.callback("onRotateTimer"), this.defaultRotationTime)
        }
    },hideAdBar:function() {
        $("#capitalSidebar").hide();
        $("#application").css("margin-right", 0);
        $("#sidebarCapital_160").children("iframe").attr("src", "");
        GS.player && GS.player.updateQueueWidth();
        clearInterval(this.rotateTimer)
    },onRotateTimer:function() {
        if (this.lastActive && !GS.user.IsPremium) {
            var a = (new Date).valueOf(),b = a - (this.lastActive ? this.lastActive.valueOf() : 0);
            a = a - (this.lastRotation ? this.lastRotation.valueOf() : 0);
            if (b <= this.defaultRotationTime) {
                this.rotationTime = this.defaultRotationTime;
                this.chooseAd()
            } else if (a >= this.rotationTime && this.rotationTime <= this.maxRotationTime) {
                this.rotationTime += this.rotationTime;
                this.chooseAd()
            }
        }
    },adAction:function(a) {
        if (a)if ($(a.target).hasClass("stopAdAction"))return;
        a = (new Date).getTime();
        if (GS.theme.themeIsReady && !GS.user.IsPremium && !this.clickAdCatchTimeout && (!this.lastAdChange || a - this.lastAdChange > this.chooseAdLimit)) {
            this.chooseAd();
            this.clickAdCatchTimeout = setTimeout(this.callback(function() {
                this.chooseAd()
            }), 2E4)
        }
    },chooseAd:function() {
        $("div.capital iframe:visible").length !== 0 && setTimeout(this.callback(function() {
            this.lastRotation = new Date;
            this.updateAds();
            GS.getGuts().logEvent("adRotation", {})
        }), 100)
    },buildParams:function(a, b, c) {
        a = a instanceof Array ? a :
                [];
        b = _.orEqual(b, "?");
        c = _.orEqual(c, "&");
        GS.player && GS.player.getCurrentSong() && a.push("2=" + GS.player.getCurrentSong().ArtistID);
        if (GS.user.isLoggedIn) {
            if (GS.user.Sex)a.push("1=" + (GS.user.Sex.toLowerCase() == "m" ? "0" : "1"));
            if (GS.user.TSDOB) {
                var g = GS.user.TSDOB.split("-");
                if (g.length == 3) {
                    var h = new Date,k = h.getFullYear() - parseInt(g[0], 10);
                    if (parseInt(g[1], 10) > h.month)k -= 1; else if (parseInt(g[1], 10) == h.month && parseInt(g[2], 10) > h.date)k -= 1;
                    var m;
                    if (k >= 13 && k < 18)m = "1"; else if (k >= 18 && k < 25)m = "2"; else if (k >=
                            25 && k < 35)m = "3"; else if (k >= 35 && k < 50)m = "4"; else if (k >= 50)m = "5";
                    k >= 21 && a.push("a=1");
                    m && a.push("10=" + m);
                    a.push("14=" + this.encodeInteger(k))
                }
            }
        }
        a.push("3=" + Math.round(((new Date).getTime() - this.sessionStart) / 1E3));
        a.push("4=" + this.rotationCount);
        a.push("5=" + ((GS.user.settings.local.themeFlags & GS.theme.THEME_FLAG_FAMILY_FRIENDLY) == GS.theme.THEME_FLAG_FAMILY_FRIENDLY ? 1 : 0));
        GS.theme.currentTheme && GS.theme.currentTheme.sections.indexOf("#theme_page_header") >= 0 && a.push("6=1");
        if (GS.Controllers.PageController.activePageName &&
                GS.Controllers.PageController.activePageName.toLowerCase() == "home")a.push("9=1"); else GS.Controllers.PageController.activePageName && GS.Controllers.PageController.activePageName.toLowerCase() == "search" && (!GS.search.type || GS.search.type === "" || GS.search.type == "everything") ? a.push("9=2") : a.push("9=0");
        if (GS.theme && GS.theme.currentTheme)(g = parseInt(GS.theme.currentTheme.themeID, 10)) && a.push("11=" + g);
        if (GS.player && GS.player.queue && GS.player.queue.currentAutoplayTagID) {
            a.push("12=1");
            a.push("13=" + GS.player.queue.currentAutoplayTagID)
        }
        a.push("15=" +
                this.rotationCountPerImpression);
        gsConfig && gsConfig.isPreview && a.push("16=1");
        if (g = GS.theme.getRecentSeen())for (h = 0; h < g.length; h++)a.push("rec" + g[h] + "=1");
        if (GS.IE) {
            if (GS.IE.canPin)if (GS.IE.canPin && !GS.IE.isPinned)a.push("ie=1"); else GS.IE.isPinned && a.push("ie=2"); else a.push("ie=0");
            GS.IE.firstPin && !GS.theme.lastTheme && a.push("ie2=1")
        }
        this.useTestAds && a.push("testAds=1");
        if (!GS.user.IsPremium && !GS.user.isLoggedIn)if ((g = GS.store.get("webvisit")) && g.sidebar)a = a.concat(GS.store.get("webvisit").sidebar);
        else if ((g = GS.store.get("krux")) && g.params)a = a.concat(GS.store.get("krux").params);
        var n;
        try {
            n = "0=";
            n += this.locales[GS.getLocale().locale]
        } catch(o) {
            n = "0=1"
        }
        a = a.concat([n]);
        return b + a.join(c)
    },encodeInteger:function(a) {
        a = a.toString(2).split("");
        for (var b = 1,c = a.length,g = 0; b < c;) {
            a.splice(b + g, 0, 0);
            b += 3;
            g++
        }
        return(parseInt(a.join(""), 2) * 751).toString(16)
    },decodeInteger:function(a) {
        a = (parseInt(a, 16) / 751).toString(2).split("");
        for (var b = 1,c = 0; a[b + c] !== undefined;) {
            a[b + c] = null;
            b += 3;
            c++
        }
        return parseInt(a.join(""),
                2)
    },buildAd:function(a, b, c, g) {
        if (a && a.length) {
            g || (g = []);
            for (var h = 0; h < g.length; h++) {
                var k = g[h].split("=");
                if (k.length > 1 && k[0] == "p")g[h] = GS.getAd().adPlacements.indexOf(k[1] + "_" + b + "x" + c) >= 0 ? g[h] : "p=default"
            }
            a.data("data-iframe-width", b).data("data-iframe-height", c).data("data-iframe-params", g.concat()).data("data-iframe-born", (new Date).getTime());
            g = GS.getAd().buildParams(g.concat(["w=" + b,"h=" + c]));
            var m = a.children("iframe"),n;
            if (m.length > 1) {
                for (c = m.length - 1; c > 0; c--)m.eq(c).unbind("load").remove();
                m = m.eq(0);
                n = m.clone()
            } else n = $('<iframe height="' + c + '" width="' + b + '" class="capitalFrame_' + b + '" frameborder="0" allowTransparency="true"></iframe>');
            n.css("visibility", "hidden");
            n.bind("load", this.callback(function() {
                m.unbind("load").remove();
                n.css("visibility", "visible").width(0);
                a.parent().show();
                if (b == 728 || b == 160) {
                    a.parent().parent().show();
                    this.adSpecific()
                }
                _.wait(10).then(function() {
                    n.width(b)
                })
            }));
            this.lastAdChange = (new Date).getTime();
            if (this.clickAdCatchTimeout) {
                clearTimeout(this.clickAdCatchTimeout);
                this.clickAdCatchTimeout = null
            }
            this.resetAdTimer();
            n.attr("src", "/dfpAds.html" + g);
            a.append(n)
        }
    },updateAds:function() {
        setTimeout(this.callback(function() {
            if (!this.lastActivePage || this.lastActivePage != GS.Controllers.PageController.activePageName + (GS.Controllers.PageController.activePage ? GS.Controllers.PageController.activePage.subpage : ""))this.lastActivePage = GS.Controllers.PageController.activePageName + (GS.Controllers.PageController.activePage ? GS.Controllers.PageController.activePage.subpage : ""); else {
                this.lastActivePage =
                        GS.Controllers.PageController.activePageName + (GS.Controllers.PageController.activePage ? GS.Controllers.PageController.activePage.subpage : "");
                var a = (new Date).getTime();
                if ($(".capital").length) {
                    $(".capital").each(this.callback(function(b, c) {
                        c = $(c);
                        a - c.data("data-iframe-born") > this.chooseAdLimit && c.data("data-iframe-width") && c.data("data-iframe-height") && c.data("data-iframe-params") && this.buildAd(c, c.data("data-iframe-width"), c.data("data-iframe-height"), c.data("data-iframe-params"))
                    }));
                    this.updateRotationCount()
                }
            }
        }),
                500)
    },updateRotationCount:function() {
        this.rotationCount++;
        this.rotationCountPerImpression++;
        if (GS.theme && !GS.theme.hasSeenRotationCount)GS.theme.hasSeenRotationCount = this.rotationCountPerImpression >= 3
    },adSpecific:function() {
        if ($(".capital_728").length && $(".capital_728").is(":visible")) {
            var a = $(".capital_728"),b = $(".capitalWrapper_728"),c = $(".capitalSliderBtn"),g = $(".capitalView_728");
            g.scrollLeft(g.scrollLeft() / 0.5);
            if (b.width() < a.width() + 42) {
                if (!c.is(":visible")) {
                    c.show();
                    a.css({left:0,marginLeft:0});
                    g.css({left:"21px"})
                }
                g.css({width:b.width() - 42 + "px"})
            } else if (c.is(":visible")) {
                c.hide();
                a.css({left:"50%",marginLeft:"-364px"});
                g.css({width:"100%",left:0})
            }
        } else if ($(".capital_160").length && $(".capital_160").is(":visible")) {
            a = $("#page_wrapper .capital_160");
            b = $("#page_wrapper .capitalWrapper_160");
            c = $("#page_wrapper .capitalSliderBtnRev");
            g = $("#page_wrapper .capitalView_160");
            g.scrollTop(g.scrollTop() / 0.5);
            if (b.height() < a.height() + 42) {
                if (!c.is(":visible")) {
                    c.show();
                    a.css({top:0,marginTop:0});
                    g.css({top:"21px"})
                }
                g.css({height:b.height() -
                        42 + "px"})
            } else if (c.is(":visible")) {
                c.hide();
                a.css({top:"50%",marginTop:"-300px"});
                g.css({height:"100%",top:0})
            }
        }
    }});
GS.Controllers.BaseController.extend("GS.Controllers.SidebarController", {onElement:"#sidebar",isGSSingleton:true,preSetup:function() {
    var a = GS.Controllers.BaseController.singletonCallback,b = $.subscribe;
    b("gs.auth.update", a("sidebar", "update"));
    b("gs.auth.pinboard.update", a("sidebar", "populateByType"));
    b("gs.auth.playlists.update", a("sidebar", "populateByType", {type:"playlists"}));
    b("gs.auth.favorites.playlists.update", a("sidebar", "populateByType", {type:"subscribedPlaylists"}));
    b("gs.page.view", a("sidebar",
            "updateSection"));
    b("gs.app.ready", a("sidebar", "update"))
}}, {playlists:[],subscribedPlaylists:[],stations:[],sortBy:"sidebarSort",doingSubscribed:false,doResize:true,isOpen:false,init:function() {
    var a = GS.store.get("gs.sort.sidebar");
    if (["sidebarSort","PlaylistName"].indexOf(a) != -1)this.sortBy = a;
    this.subscribe("gs.auth.sidebar.loaded", this.callback(function() {
        this.populateByType({type:"all"})
    }));
    this.subscribe("gs.app.resize", this.callback("resize"));
    this._super()
},appReady:function() {
    this.update()
},
    updateSection:function(a) {
        if (a === "music")if (GS.user.UserID == GS.page.activePageIdentifier && !GS.page.activePageParams.subpage)$("#sidebar_music_collection_link").addClass("active").siblings().removeClass("active"); else if (GS.user.UserID == GS.page.activePageIdentifier && GS.page.activePageParams.subpage == "favorites")$("#sidebar_favorites_link").addClass("active").siblings().removeClass("active"); else GS.user.UserID == GS.page.activePageIdentifier && GS.page.activePageParams.subpage == "playlists" ? $("#sidebar_playlists_link").addClass("active").siblings().removeClass("active") :
                $("#sidebar_music_navigation a").removeClass("active"); else $("#sidebar_music_navigation a").removeClass("active")
    },show:function() {
        if (!this.isOpen) {
            this.isOpen = true;
            this.element.addClass("active").removeClass("hide").width(180);
            if (this.tinyScrollbar)this.tinyScrollbar.update(); else {
                this.tinyScrollbar = $("#sidebar_pinboard").tinyscrollbar();
                this.tinyScrollbar.find(".viewport").scroll(this.callback(function() {
                }))
            }
            GS.resize()
        }
    },hide:function() {
        if (this.isOpen) {
            this.isOpen = false;
            this.element.removeClass("active").addClass("hide").width(0);
            GS.resize()
        }
    },resize:function() {
        this.tinyScrollbar && !this.element.hasClass("hide") && this.tinyScrollbar.update()
    },update:function() {
        if (GS.user) {
            this.user = GS.user;
            this.element.html(this.view("index"));
            this.populateByType({type:"all"});
            this.beginDragDrop()
        }
    },changeSort:function(a) {
        this.sortBy = a;
        this.populateByType({type:"all"});
        GS.store.set("gs.sort.sidebar", a)
    },playlistSort:function(a, b) {
        var c,g;
        try {
            if (this.sortBy === "sidebarSort") {
                c = a[this.sortBy];
                g = b[this.sortBy]
            } else {
                c = a[this.sortBy].toString().toLowerCase();
                g = b[this.sortBy].toString().toLowerCase()
            }
        } catch(h) {
        }
        return c == g ? 0 : c > g ? 1 : -1
    },populateByType:function(a) {
        if (GS.user.sidebarLoaded)switch (a.type) {
            case "all":
                this.populateSidebarStations();
                this.populateSidebarSubscribedPlaylists();
                this.populateSidebarPlaylists();
                this.populateSidebarSongs();
                this.populateSidebarArtists();
                this.populateSidebarAlbums();
                break;
            case "playlists":
                this.populateSidebarPlaylists();
                break;
            case "subscribedPlaylists":
                this.populateSidebarSubscribedPlaylists();
                break;
            case "stations":
                this.populateSidebarStations();
                break;
            case "songs":
                this.populateSidebarSongs();
                break;
            case "artists":
                this.populateSidebarArtists();
                break;
            case "albums":
                this.populateSidebarAlbums();
                break
        }
    },populateSidebarPlaylists:function() {
        if (GS.user.sidebarLoaded) {
            this.playlists = [];
            for (var a = GS.user.sidebar.playlists,b = 0; b < a.length; b++) {
                var c = GS.user.playlists[a[b]];
                if (c) {
                    c.sidebarSort = b + 1;
                    this.playlists.push(c)
                }
            }
            this.playlists.sort(this.callback(this.playlistSort));
            this.showPlaylists()
        }
    },populateSidebarSubscribedPlaylists:function() {
        if (GS.user.sidebarLoaded) {
            this.subscribedPlaylists =
                    [];
            for (var a = GS.user.sidebar.subscribedPlaylists,b = 0; b < a.length; b++) {
                var c = a[b],g = GS.Models.Playlist.getOneFromCache(c),h = g ? g.PlaylistName : GS.user.sidebar.meta.subscribedPlaylists[c];
                if (g) {
                    if (g.UserID !== GS.user.UserID) {
                        g.sidebarSort = b + 1;
                        this.subscribedPlaylists.push(g)
                    }
                } else h ? this.subscribedPlaylists.push({PlaylistID:c,PlaylistName:h,sidebarSort:b + 1}) : console.log("subscribedPlaylist shortcut with no name!", c)
            }
            this.subscribedPlaylists.sort(this.callback(this.playlistSort));
            this.showSubscribedPlaylists()
        }
    },
    populateSidebarStations:function() {
        if (GS.user.sidebarLoaded) {
            this.stations = [];
            var a,b,c,g,h = GS.user.sidebar.stations;
            c = 0;
            for (g = h.length; c < g; c++) {
                a = h[c];
                b = GS.Models.Station.getOneFromCache(a);
                if (b = b.StationTitle) {
                    b = {StationID:a,Station:b,Name:b,PlaylistName:b,sidebarSort:c + 1};
                    this.stations.push(b)
                }
            }
            this.stations.sort(this.callback(this.playlistSort));
            this.showStations()
        }
    },populateSidebarSongs:function() {
        if (GS.user.sidebarLoaded) {
            this.songs = [];
            for (var a = GS.user.sidebar.songs,b = 0; b < a.length; b++) {
                var c =
                        a[b],g = GS.Models.Song.getOneFromCache(c);
                (g = g ? g.SongName : GS.user.sidebar.meta.songs[c]) ? this.songs.push({SongName:g,SongID:c,sidebarSort:b + 1}) : console.log("song shortcut with no name!", c)
            }
            this.songs.sort(this.callback(this.playlistSort));
            this.showSongs()
        }
    },populateSidebarArtists:function() {
        if (GS.user.sidebarLoaded) {
            this.artists = [];
            for (var a = GS.user.sidebar.artists,b = 0; b < a.length; b++) {
                var c = a[b],g = GS.Models.Artist.getOneFromCache(c);
                (g = g ? g.ArtistName : GS.user.sidebar.meta.artists[c]) ? this.artists.push({ArtistName:g,
                    ArtistID:c,sidebarSort:b + 1}) : console.log("artist shortcut with no name!", c)
            }
            this.artists.sort(this.callback(this.playlistSort));
            this.showArtists()
        }
    },populateSidebarAlbums:function() {
        if (GS.user.sidebarLoaded) {
            this.albums = [];
            for (var a = GS.user.sidebar.albums,b = 0; b < a.length; b++) {
                var c = a[b],g = GS.Models.Album.getOneFromCache(c);
                (g = g ? g.AlbumName : GS.user.sidebar.meta.albums[c]) ? this.albums.push({AlbumName:g,AlbumID:c,sidebarSort:b + 1}) : console.log("album shortcut with no name!", c)
            }
            this.albums.sort(this.callback(this.playlistSort));
            this.showAlbums()
        }
    },showPlaylists:function() {
        $("#sidebar_playlists").html(this.view("playlists", {playlists:this.playlists,doingSubscribed:false}));
        $("#sidebar_playlists_divider").show();
        $("#sidebar_playlist_new").toggle(!this.playlists.length)
    },showSubscribedPlaylists:function() {
        $("#sidebar_subscribed_playlists").html(this.view("playlists", {playlists:this.subscribedPlaylists,doingSubscribed:true}));
        $("#sidebar_playlists_divider").show()
    },showStations:function() {
        $("#sidebar_stations").html(this.view("stations"));
        $("#sidebar_stations_divider").show();
        $("#sidebar_station_new").toggle(!this.stations.length)
    },showSongs:function() {
        $("#sidebar_songs").html(this.view("songs"));
        var a = $("#sidebar_songs_divider"),b = a.toggle(!!this.songs.length).hasClass("sidebar_pin_collapsed");
        a.next(".sidebar_pin_group").toggle(!b && !!this.songs.length)
    },showArtists:function() {
        $("#sidebar_artists").html(this.view("artists"));
        var a = $("#sidebar_artists_divider"),b = a.toggle(!!this.artists.length).hasClass("sidebar_pin_collapsed");
        a.next(".sidebar_pin_group").toggle(!b &&
                !!this.artists.length)
    },showAlbums:function() {
        $("#sidebar_albums").html(this.view("albums"));
        var a = $("#sidebar_albums_divider"),b = a.toggle(!!this.albums.length).hasClass("sidebar_pin_collapsed");
        a.next(".sidebar_pin_group").toggle(!b && !!this.albums.length)
    },".sidebar_pin_divider click":function(a) {
        $(a).toggleClass("sidebar_pin_collapsed");
        $(a).next(".sidebar_pin_group").toggle()
    },"a.sidebar_playlist click":function(a, b) {
        b.preventDefault();
        var c = parseInt($(a).attr("rel"), 10);
        c && GS.Models.Playlist.getPlaylist(c,
                function(g) {
                    if (g)location.hash = g.toUrl()
                })
    },"a.sidebar_playlist_new click":function(a, b) {
        b.preventDefault();
        GS.getLightbox().open("newPlaylist")
    },".sidebar_playlist .remove click":function(a, b) {
        b.stopPropagation();
        b.preventDefault();
        var c = a.parent().attr("rel"),g = GS.Models.Playlist.getOneFromCache(c),h = g.isSubscribed(),k = $(a).closest(".link_group"),m = function() {
            if ($(".sidebar_link", k).length === 0)if (!h) {
                $("#sidebar_subscribed_divider").addClass("sidebar_pin_collapsed");
                $("#sidebar_subscribed_wrapper").css("display",
                        "none")
            }
        };
        GS.getLightbox().open({type:"removePlaylistSidebar",view:{header:"POPUP_DELETE_PLAYLIST_TITLE",messageHTML:(new GS.Models.DataString($.localize.getString("POPUP_DELETE_PLAYLIST_QUESTION"), {playlist:g.PlaylistName})).render(),buttonsLeft:[
            {className:"close",label:"CANCEL"}
        ],buttonsRight:[
            {className:"submit playlist",label:h ? "PLAYLIST_UNSUBSCRIBE" : "POPUP_DELETE_PLAYLIST_LABEL"},
            {className:"submit shortcut",label:"POPUP_REMOVE_PINBOARD_LABEL"}
        ]},callbacks:{"button.playlist":function() {
            h ? g.unsubscribe() :
                    g.remove();
            m()
        },"button.shortcut":function() {
            GS.user.removeFromShortcuts("playlist", g.PlaylistID, true);
            m()
        }}});
        return false
    },"a.playlist contextmenu":function(a, b) {
        var c = a.attr("rel");
        c = GS.Models.Playlist.getOneFromCache(c).getContextMenu();
        $(a).jjmenu(b, c, null, {xposition:"mouse",yposition:"mouse",show:"show",className:"playlistmenu"})
    },"a.station click":function(a, b) {
        b.stopPropagation();
        var c = a.attr("rel");
        GS.player.setAutoplay(true, c);
        return false
    },"a.station .remove click":function(a, b) {
        b.stopPropagation();
        var c = a.parent().attr("rel");
        this.removeStationID = c;
        var g = $(a).closest(".link_group");
        GS.user.removeFromShortcuts("station", c, true);
        if ($(".sidebar_link", g).length == 0) {
            $("#sidebar_stations_divider").addClass("sidebar_pin_collapsed");
            $("#sidebar_stations_wrapper").css("display", "none")
        }
        return false
    },"a.noProfile click":function() {
        GS.getLightbox().open("login")
    },"a.upload click":function() {
        window.open("http://" + location.host + "/upload", "_blank")
    },"a.sidebar_song click":function(a, b) {
        b.preventDefault();
        var c = parseInt($(a).attr("rel"), 10);
        c && GS.Models.Song.getSong(c, function(g) {
            if (g)location.hash = g.toUrl()
        })
    },".sidebar_song .remove click":function(a, b) {
        b.stopPropagation();
        b.preventDefault();
        var c = a.parent().attr("rel"),g = a.parent().attr("title");
        GS.getLightbox().open({type:"removeSongSidebar",view:{header:"POPUP_REMOVE_FROM_PINBOARD_TITLE",messageHTML:(new GS.Models.DataString($.localize.getString("POPUP_REMOVE_FROM_PINBOARD_MSG"), {name:g,type:$.localize.getString("SONG").toLowerCase()})).render(),
            buttonsLeft:[
                {className:"close",label:"CANCEL"}
            ],buttonsRight:[
                {className:"submit shortcut",label:"POPUP_REMOVE_PINBOARD_LABEL"}
            ]},callbacks:{"button.shortcut":function() {
            GS.user.removeFromShortcuts("song", c)
        }}});
        return false
    },"a.sidebar_song contextmenu":function(a, b) {
        var c = parseInt($(a).attr("rel"), 10);
        c && GS.Models.Song.getSong(c, function(g) {
            if (g) {
                g = g.getContextMenu();
                $(a).jjmenu(b, g, null, {xposition:"mouse",yposition:"mouse",show:"show",className:"songmenu"})
            }
        })
    },"a.sidebar_album click":function(a, b) {
        b.preventDefault();
        var c = parseInt($(a).attr("rel"), 10);
        c && GS.Models.Album.getAlbum(c, function(g) {
            if (g)location.hash = g.toUrl()
        })
    },".sidebar_album .remove click":function(a, b) {
        b.stopPropagation();
        b.preventDefault();
        var c = a.parent().attr("rel"),g = a.parent().attr("title");
        GS.getLightbox().open({type:"removeAlbumSidebar",view:{header:"POPUP_REMOVE_FROM_PINBOARD_TITLE",messageHTML:(new GS.Models.DataString($.localize.getString("POPUP_REMOVE_FROM_PINBOARD_MSG"), {name:g,type:$.localize.getString("ALBUM").toLowerCase()})).render(),
            buttonsLeft:[
                {className:"close",label:"CANCEL"}
            ],buttonsRight:[
                {className:"submit shortcut",label:"POPUP_REMOVE_PINBOARD_LABEL"}
            ]},callbacks:{"button.shortcut":function() {
            GS.user.removeFromShortcuts("album", c)
        }}});
        return false
    },"a.sidebar_album contextmenu":function(a, b) {
        var c = parseInt($(a).attr("rel"), 10);
        c && GS.Models.Album.getAlbum(c, function(g) {
            if (g) {
                g = g.getContextMenu();
                $(a).jjmenu(b, g, null, {xposition:"mouse",yposition:"mouse",show:"show",className:"albummenu"})
            }
        })
    },"a.sidebar_artist click":function(a, b) {
        b.preventDefault();
        var c = a.attr("rel");
        c && GS.Models.Artist.getArtist(c, function(g) {
            if (g)location.hash = g.toUrl()
        })
    },".sidebar_artist .remove click":function(a, b) {
        b.stopPropagation();
        b.preventDefault();
        var c = a.parent().attr("rel"),g = a.parent().attr("title");
        GS.getLightbox().open({type:"removeSongSidebar",view:{header:"POPUP_REMOVE_FROM_PINBOARD_TITLE",messageHTML:(new GS.Models.DataString($.localize.getString("POPUP_REMOVE_FROM_PINBOARD_MSG"), {name:g,type:$.localize.getString("ARTIST").toLowerCase()})).render(),
            buttonsLeft:[
                {className:"close",label:"CANCEL"}
            ],buttonsRight:[
                {className:"submit shortcut",label:"POPUP_REMOVE_PINBOARD_LABEL"}
            ]},callbacks:{"button.shortcut":function() {
            GS.user.removeFromShortcuts("artist", c)
        }}});
        return false
    },"a.sidebar_artist contextmenu":function(a, b) {
        var c = parseInt($(a).attr("rel"), 10);
        c && GS.Models.Artist.getArtist(c, function(g) {
            if (g) {
                g = g.getContextMenu();
                $(a).jjmenu(b, g, null, {xposition:"mouse",yposition:"mouse",show:"show",className:"artistmenu"})
            }
        })
    },"#pinboard_new click":function(a, b) {
        a.jjmenu(b, this.getPinboardMenu(), null, {xposition:"left",yposition:"auto",show:"default",className:"pinboardmenu"})
    },getPinboardMenu:function() {
        return[
            {title:$.localize.getString("SIDEBAR_CONTEXT_ADD_PLAYLIST"),action:{type:"fn",callback:function() {
                GS.getLightbox().open("newPlaylist", null);
                GS.getGuts().onContextMenuClick("contextNewPlaylist", "pinboard_new", null, null)
            }},customClass:"jj_menu_item_hasIcon jj_menu_item_add_playlist"},
            {title:$.localize.getString("SIDEBAR_CONTEXT_ADD_STATION"),type:"sub",
                src:GS.Models.Station.getStationsStartMenuForPinboard(),customClass:"stations jj_menu_item_hasIcon jj_menu_item_station"}
        ]
    },beginDragDrop:function() {
        function a(h, k, m) {
            _.orEqual(m, false);
            if (!($("#sidebar").within(h.clientX, h.clientY).length <= 0)) {
                h = $(".sidebar_link a", "#sidebar").within(h.clientX, h.clientY);
                $("#sidebar .sidebar_link a").removeClass("hover");
                h.length && k.draggedItemsType !== "playlist" && h.addClass("hover")
            }
        }

        function b(h, k) {
            var m = [],n,o;
            h.draggedItemsType = h.draggedItemsType || _.guessDragType(h.draggedItems);
            switch (h.draggedItemsType) {
                case "song":
                    for (n = 0; n < h.draggedItems.length; n++)m.push(h.draggedItems[n].SongID);
                    var q,v = [],x = [];
                    if ($("#grid").controller()) {
                        var A = $("#grid").controller().dataView.rows;
                        $('#grid .slick-row.selected[id!="showQueue"]').each(function(C, F) {
                            q = parseInt($(F).attr("row"), 10);
                            if (!isNaN(q)) {
                                v.push(q + 1);
                                var H = A[q].ppVersion;
                                H && x.push(H)
                            }
                        })
                    }
                    n = {ranks:v,songIDs:m};
                    if (x.length > 0)n.ppVersions = x.join();
                    GS.getGuts().logMultiSongDrag("OLSongsDraggedToSidebar", n);
                    break;
                case "album":
                    var u = function(C) {
                        C.sort(GS.Models.Album.defaultSongSort);
                        for (o = 0; o < C.length; o++)m.push(C[o].SongID)
                    };
                    for (n = 0; n < h.draggedItems.length; n++)h.draggedItems[n].getSongs(u, null, true, {async:false});
                    break;
                case "artist":
                    u = function(C) {
                        C.sort(GS.Models.Artist.defaultSongSort);
                        for (o = 0; o < C.length; o++)m.push(C[o].SongID)
                    };
                    for (n = 0; n < h.draggedItems.length; n++)h.draggedItems[n].getSongs(u, null, {async:false});
                    break;
                case "playlist":
                    u = function(C) {
                        for (o = 0; o < C.length; o++)m.push(C[o].SongID)
                    };
                    for (n = 0; n < h.draggedItems.length; n++)h.draggedItems[n].getSongs(u, null, false, {async:false});
                    break;
                case "user":
                    u = function(C) {
                        for (o = 0; o < C.length; o++)m.push(C[o].SongID)
                    };
                    for (n = 0; n < h.draggedItems.length; n++)h.draggedItems[n].getFavoritesByType("Song", u, null, false, {async:false});
                    break;
                default:
                    console.error("sidebar drop, invalid drag type", h, h.draggedItemsType);
                    return
            }
            if (k === "library")GS.user.addToLibrary(m, true); else if (k === "favorites")for (n = 0; n < m.length; n++)GS.user.addToSongFavorites(m[n]); else if (k === "newPlaylist")GS.getLightbox().open("newPlaylist", m); else if (k instanceof GS.Models.Playlist)k.addSongs(m,
                    null, true); else {
                console.error("sidebar drop, invalid thing", k);
                return
            }
            GS.getGuts().gaTrackEvent("sidebar", "dropSuccess")
        }

        var c = $("li.sidebar_myMusic"),g = $("li.sidebar_favorites");
        $("#sidebar_playlists,#sidebar_subscribed_playlists,#sidebar_songs,#sidebar_artists,#sidebar_albums,#sidebar_stations").bind("draginit",
                function(h, k) {
                    var m = $(h.target).closest(".sidebar_link");
                    if (m.length === 0)return false;
                    k.draggedSidebarItem = m;
                    k.proxyOffsetX = h.clientX - m.offset().left;
                    k.proxyOffsetY = h.clientY - m.offset().top
                }).bind("dragstart",
                function(h, k) {
                    var m = k.draggedSidebarItem.attr("rel"),n,o;
                    if (k.draggedSidebarItem.hasClass("sidebar_playlist")) {
                        n = "playlist";
                        o = GS.Models.Playlist.getOneSynchronous(m)
                    } else if (k.draggedSidebarItem.hasClass("sidebar_artist")) {
                        n = "artist";
                        o = GS.Models.Artist.getOneSynchronous(m)
                    } else if (k.draggedSidebarItem.hasClass("sidebar_album")) {
                        n = "album";
                        o = GS.Models.Album.getOneSynchronous(m)
                    } else if (k.draggedSidebarItem.hasClass("sidebar_song")) {
                        n = "song";
                        o = GS.Models.Song.getOneSynchronous(m)
                    } else if (k.draggedSidebarItem.hasClass("sidebar_station")) {
                        n =
                                "station";
                        o = GS.Models.Station.getOneFromCache(m)
                    } else return false;
                    if (!o)return false;
                    k.draggedItems = [o];
                    k.draggedIemsType = n;
                    k.draggedItemsSource = "sidebar";
                    k.deleteAction = {label:"CONTEXT_REMOVE_FROM_PINBOARD",method:function() {
                        GS.user.removeFromShortcuts(n, m, true)
                    }};
                    $.publish("gs.drag.start", k);
                    return $('<div class="dragProxy" style="position:absolute; z-index: 99999;"><div class="status"></div></div>').prepend($(k.draggedSidebarItem).clone()).appendTo("body").mousewheel(_.globalDragProxyMousewheel)
                }).bind("drag",
                function(h, k) {
                    k.clientX = h.clientX;
                    k.clientY = h.clientY;
                    $(k.proxy).css({top:h.clientY - k.proxyOffsetY,left:h.clientX - k.proxyOffsetX});
                    var m = false,n = false;
                    _.forEach(k.drop, function(o) {
                        $.isFunction(o.updateDropOnDrag) && o.updateDropOnDrag(h, k);
                        if (!m)if ($(o).within(h.clientX, h.clientY).length > 0)if ($(o).data("ignoreForOverDrop"))n = true; else {
                            n = false;
                            m = true
                        }
                    });
                    n || (m ? $(k.proxy).addClass("valid").removeClass("invalid") : $(k.proxy).addClass("invalid").removeClass("valid"))
                }).bind("dragend",
                function(h, k) {
                    $(k.proxy).remove();
                    GS.getGuts().gaTrackEvent("sidebar", "dragEnd");
                    $.publish("gs.drag.end", k)
                }).bind("dropinit",
                function() {
                    this.updateDropOnDrag = function(h, k) {
                        a(h, k, k.draggedItemsType === "playlist")
                    }
                }).bind("dropstart",
                function(h, k) {
                    if (!k.draggedItems) {
                        this.updateDropOnDrag = null;
                        return false
                    }
                    k.draggedItemsType = k.draggedItemsType || _.guessDragType(k.draggedItems);
                    if (k.draggedItemsSource == "sidebar") {
                        this.updateDropOnDrag = null;
                        return false
                    }
                    if (k.draggedItemsType !== "playlist" || $(this).attr("id") !== "sidebar_playlists") {
                        this.updateDropOnDrag =
                                null;
                        return false
                    }
                }).bind("dropend",
                function() {
                    $("#sidebar .sidebar_link a").removeClass("hover")
                }).bind("drop", function(h, k) {
                    if ($("#sidebar").width() !== 0) {
                        k.draggedItemsType = k.draggedItemsType || _.guessDragType(k.draggedItems);
                        var m,n;
                        if (k.draggedItemsType === "playlist")for (m = 0; m < k.draggedItems.length; m++) {
                            n = k.draggedItems[m];
                            n.UserID == GS.user.UserID || n.isSubscribed() ? GS.user.addToShortcuts("playlist", n.PlaylistID, n.PlaylistName, true) : GS.user.addToPlaylistFavorites(n.PlaylistID, true)
                        } else {
                            m = $(".playlist",
                                    "#sidebar_playlists").within(h.clientX, h.clientY).attr("rel");
                            n = GS.Models.Playlist.getOneFromCache(m);
                            if (n instanceof GS.Models.Playlist)b(k, n); else m == "new" && b(k, "newPlaylist")
                        }
                    }
                });
        c.bind("dropinit",
                function() {
                    this.updateDropOnDrag = function(h, k) {
                        a(h, k, true)
                    }
                }).bind("dropstart",
                function(h, k) {
                    if (!k.draggedItems) {
                        this.updateDropOnDrag = null;
                        return false
                    }
                }).bind("dropend",
                function() {
                    $("#sidebar .sidebar_link a").removeClass("hover")
                }).bind("drop", function(h, k) {
                    b(k, "library")
                });
        g.bind("dropinit",
                function() {
                    this.updateDropOnDrag =
                            function(h, k) {
                                a(h, k, true)
                            }
                }).bind("dropstart",
                function(h, k) {
                    if (!k.draggedItems) {
                        this.updateDropOnDrag = null;
                        return false
                    }
                }).bind("dropend",
                function() {
                    $("#sidebar .sidebar_link a").removeClass("hover")
                }).bind("drop", function(h, k) {
                    b(k, "favorites")
                })
    }});
(function() {
    function a(m) {
        if (!c) {
            var n = m.draggedItemsType = m.draggedItemsType || _.guessDragType(m.draggedItems);
            if (n != "user") {
                $("#shortcuts").show();
                if (n == "song" && m.draggedItems.length > 1)n = "manySongs";
                var o = _.orEqual(GS.Controllers.Lightbox.ShareController.allowed[n], []),q = $("#shortcuts_bar .share_option"),v = $("#shortcuts_share_wrapper"),x = GS.user.isLoggedIn && m.draggedItems.length === 1 && k.indexOf(n) !== -1;
                if (!GS.user.isLoggedIn) {
                    o = o.concat();
                    var A = o.indexOf("email");
                    A != -1 && o.splice(A, 1)
                }
                q.hide();
                if (o.length ||
                        x) {
                    v.show();
                    _.forEach(o, function(u) {
                        q.filter("." + u).show()
                    });
                    x && q.filter(".broadcast").show()
                } else v.hide();
                $("#shortcuts_add_pinboard").toggle(m.draggedItems.length === 1 && h.indexOf(n) !== -1 && m.draggedItemsSource != "sidebar");
                $("#shortcuts_add_favorites").toggle(n === "song");
                $("#shortcuts_add_library").add("#shortcuts_playlists_wrapper").toggle(n !== "station");
                $("#shortcuts_add_wrapper").toggle($("#shortcuts_add").children(":visible").length > 0);
                $("#shortcuts_scroll").height($("#shortcuts_bar").height());
                if (m.deleteAction) {
                    n = $("#shortcuts_trash_label");
                    $("#shortcuts_trash_wrapper").show();
                    n.removeClass("ellipsis");
                    n.localeDataString(m.deleteAction.label, m.deleteAction.labelParams);
                    n.addClass("ellipsis")
                } else $("#shortcuts_trash_wrapper").hide();
                m = $("#shortcuts_scroll .viewport").innerHeight() < $("#shortcuts_scroll .overview").outerHeight() ? 0 : -15;
                $("#shortcuts_bar").stop().animate({right:m}, "fast", function() {
                    if (g)g.update(); else {
                        g = $("#shortcuts_scroll").tinyscrollbar();
                        g.find(".viewport").scroll(function() {
                            g.update()
                        })
                    }
                });
                c = true
            }
        }
    }

    function b(m) {
        clearTimeout(m.shortcutsAutoScrollWaitTimeout);
        m.shortcutsAutoScrollWaitTimeout = false;
        m.shortcutsAutoScrollHasWaited = false;
        clearInterval(m.shortcutsAutoScrollInterval);
        m.shortcutsAutoScrollInterval = false
    }

    var c = false,g = false,h = ["song","playlist","album","artist","station"],k = ["song","playlist","album","artist"];
    GS.Controllers.BaseController.extend("GS.Controllers.ShortcutsController", {onElement:"#shortcuts"}, {playlists:[],playlistsDirty:true,init:function() {
        this.subscribe("gs.drag.start",
                this.callback("onGlobalDragStart"));
        this.subscribe("gs.drag.end", this.callback("onGlobalDragEnd"));
        this.subscribe("gs.auth.update", this.callback("dirtyPlaylists"));
        this.subscribe("gs.auth.playlists.update", this.callback("dirtyPlaylists"));
        this.subscribe("gs.locale.update", function() {
            fixTabSize()
        });
        this._super()
    },appReady:function() {
        this.update()
    },update:function() {
        this.element.html(this.view("index"));
        this.beginDragDrop()
    },dirtyPlaylists:function() {
        this.playlistsDirty = true;
        c && this.populatePlaylists()
    },
        populatePlaylists:function() {
            this.playlists = [];
            GS.user && _.forEach(GS.user.playlists, function(m) {
                this.playlists.push(m)
            }, this);
            this.playlists.sort(function(m, n) {
                var o = m.PlaylistName.toLowerCase(),q = n.PlaylistName.toLowerCase();
                return o == q ? m == n ? 0 : m < n ? -1 : 1 : o < q ? -1 : 1
            });
            $("#shortcuts_playlists").html(this.view("playlists", {playlists:this.playlists}));
            this.playlistsDirty = false
        },beginDragDrop:function() {
            function m(u) {
                return function() {
                    if (u.hasOwnProperty("clientX") && u.clientX < v.offset().left)b(u); else A =
                            setTimeout(m(u), 100)
                }
            }

            function n(u, C) {
                function F() {
                    var w = (new Date).valueOf();
                    if (C.shortcutsAutoScrollHasWaited && (!C.shortcutsAutoScrollLast || w - C.shortcutsAutoScrollLast >= D)) {
                        C.shortcutsAutoScrollLast = w;
                        $scrollable.scrollTop(Math.max(0, $scrollable.scrollTop() - 41))
                    }
                }

                function H() {
                    var w = (new Date).valueOf();
                    if (C.shortcutsAutoScrollHasWaited && (!C.shortcutsAutoScrollLast || w - C.shortcutsAutoScrollLast >= D)) {
                        C.shortcutsAutoScrollLast = w;
                        $scrollable.scrollTop(Math.min(scrollHeight, $scrollable.scrollTop() + 41))
                    }
                }

                $scrollable = $("#shortcuts_scroll .viewport");
                var G = Math.ceil($scrollable.height() * 0.2),D = 200;
                scrollHeight = $scrollable[0].scrollHeight;
                if (C.shortcutsAutoScrollWaitTimeout)if ($scrollable.offset().top + G > u.clientY) {
                    F();
                    clearInterval(C.shortcutsAutoScrollInterval);
                    C.shortcutsAutoScrollInterval = setInterval(F, D)
                } else if ($scrollable.offset().top + $scrollable.height() - G < u.clientY) {
                    H();
                    clearInterval(C.shortcutsAutoScrollInterval);
                    C.shortcutsAutoScrollInterval = setInterval(H, D)
                } else b(C); else C.shortcutsAutoScrollWaitTimeout =
                        setTimeout(function() {
                            C.shortcutsAutoScrollHasWaited = true;
                            C.shortcutsAutoScrollWaitTimeout = false
                        }, 500)
            }

            function o(u) {
                var C = [],F,H;
                u.draggedItemsType = u.draggedItemsType || _.guessDragType(u.draggedItems);
                switch (u.draggedItemsType) {
                    case "song":
                        for (F = 0; F < u.draggedItems.length; F++)C.push(u.draggedItems[F].SongID);
                        var G,D = [],w = [];
                        if ($("#grid").controller()) {
                            var y = $("#grid").controller().dataView.rows;
                            $('#grid .slick-row.selected[id!="showQueue"]').each(function(p, r) {
                                G = parseInt($(r).attr("row"), 10);
                                if (!isNaN(G)) {
                                    D.push(G +
                                            1);
                                    var s = y[G].ppVersion;
                                    s && w.push(s)
                                }
                            })
                        }
                        u = {ranks:D,songIDs:C};
                        if (w.length > 0)u.ppVersions = w.join();
                        GS.getGuts().logMultiSongDrag("OLSongsDraggedToShortcuts", u);
                        break;
                    case "album":
                        var I = function(p) {
                            p.sort(GS.Models.Album.defaultSongSort);
                            for (H = 0; H < p.length; H++)C.push(p[H].SongID)
                        };
                        for (F = 0; F < u.draggedItems.length; F++)u.draggedItems[F].getSongs(I, null, true, {async:false});
                        break;
                    case "artist":
                        I = function(p) {
                            p.sort(GS.Models.Artist.defaultSongSort);
                            for (H = 0; H < p.length; H++)C.push(p[H].SongID)
                        };
                        for (F = 0; F < u.draggedItems.length; F++)u.draggedItems[F].getSongs(I,
                                null, {async:false});
                        break;
                    case "playlist":
                        I = function(p) {
                            for (H = 0; H < p.length; H++)C.push(p[H].SongID)
                        };
                        for (F = 0; F < u.draggedItems.length; F++)u.draggedItems[F].getSongs(I, null, false, {async:false});
                        break;
                    case "user":
                        I = function(p) {
                            for (H = 0; H < p.length; H++)C.push(p[H].SongID)
                        };
                        for (F = 0; F < u.draggedItems.length; F++)u.draggedItems[F].getFavoritesByType("Song", I, null, false, {async:false});
                        break;
                    default:
                        console.error("shortcut drop, invalid drag type", u, u.draggedItemsType)
                }
                return C
            }

            function q(u, C) {
                if (C === "library")GS.user.addToLibrary(u,
                        true); else if (C === "favorites")for (i = 0; i < u.length; i++)GS.user.addToSongFavorites(u[i]); else if (C === "newPlaylist")GS.getLightbox().open("newPlaylist", u); else C instanceof GS.Models.Playlist ? C.addSongs(u, null, true) : console.error("shortcut drop, invalid thing", C)
            }

            var v = $("#shortcuts"),x = $("#shortcuts_bar"),A = false;
            v.data("ignoreForOverDrop", true).bind("dropinit",
                    function() {
                        this.updateDropOnDrag = function(u, C) {
                            if (!(x.within(u.clientX, u.clientY).length <= 0)) {
                                var F = x.find(".shortcuts_link a");
                                F.removeClass("hover");
                                F = F.within(u.clientX, u.clientY);
                                F.addClass("hover");
                                F.length ? $(C.proxy).addClass("valid").removeClass("invalid") : $(C.proxy).addClass("invalid").removeClass("valid")
                            }
                            n(u, C)
                        }
                    }).bind("dropend",
                    function(u, C) {
                        C.isOverShortcuts = false;
                        clearTimeout(A);
                        A = setTimeout(m(C), 100)
                    }).bind("dropstart",
                    function(u, C) {
                        C.isOverShortcuts = true;
                        clearTimeout(A);
                        if (!C.draggedItems) {
                            this.updateDropOnDrag = null;
                            return false
                        }
                        C.draggedItemsType = C.draggedItemsType || _.guessDragType(C.draggedItems)
                    }).bind("drop", function(u, C) {
                        C.draggedItemsType =
                                C.draggedItemsType || _.guessDragType(C.draggedItems);
                        var F = x.find(".shortcuts_link").within(u.clientX, u.clientY).last(),H = F.attr("rel");
                        if (F.is(".share_option"))a:{
                            C.draggedItemsType = C.draggedItemsType || _.guessDragType(C.draggedItems);
                            F = {service:H};
                            switch (C.draggedItemsType) {
                                case "song":
                                    F.id = o(C);
                                    if (F.id.length == 1) {
                                        F.id = F.id[0];
                                        F.type = "song"
                                    } else F.type = "manySongs";
                                    break;
                                case "playlist":
                                    F.id = C.draggedItems[0].PlaylistID;
                                    F.type = "playlist";
                                    break;
                                case "album":
                                    F.id = C.draggedItems[0].AlbumID;
                                    F.type = "album";
                                    break;
                                case "artist":
                                    F.id = C.draggedItems[0].ArtistID;
                                    F.type = "artist";
                                    break;
                                default:
                                    console.error("shortcut share drop, invalid type", C.draggedItemsType);
                                    break a
                            }
                            H == "broadcast" ? GS.getLightbox().open("broadcast", F) : GS.getLightbox().open("share", F)
                        } else if (F.is(".add_option"))if (F.is(".pinboard")) {
                            F = C.draggedItems[0];
                            switch (C.draggedItemsType) {
                                case "playlist":
                                    H = F.PlaylistID;
                                    F = F.PlaylistName;
                                    break;
                                case "song":
                                    H = F.SongID;
                                    F = F.SongName;
                                    break;
                                case "album":
                                    H = F.AlbumID;
                                    F = F.AlbumName;
                                    break;
                                case "artist":
                                    H = F.ArtistID;
                                    F = F.ArtistName;
                                    break;
                                case "station":
                                    H = F.StationID;
                                    F = "";
                                    break;
                                default:
                                    return
                            }
                            GS.user.addToShortcuts(C.draggedItemsType, H, F)
                        } else q(o(C), H); else if (F.is(".playlist_option")) {
                            F = GS.Models.Playlist.getOneFromCache(H);
                            if (F instanceof GS.Models.Playlist)q(o(C), F); else H == "new" && q(o(C), "newPlaylist")
                        } else if (F.is(".trash_option"))C.deleteAction && $.isFunction(C.deleteAction.method) && C.deleteAction.method.call(); else return;
                        GS.getGuts().gaTrackEvent("shortcuts", "dropSuccess")
                    })
        },onGlobalDragStart:function(m) {
            this.playlistsDirty &&
            this.populatePlaylists();
            a(m)
        },onGlobalDragEnd:function(m) {
            if (c) {
                $("#shortcuts_bar").stop().css({right:-215}).find(".shortcuts_link a").removeClass("hover");
                $("#shortcuts").hide();
                c = false
            }
            b(m)
        }})
})();
(function() {
    var a;
    GS.Controllers.BaseController.extend("GS.Controllers.PlayerController", {onElement:"#footer"}, {REPEAT_NONE:0,REPEAT_ALL:1,REPEAT_ONE:2,repeatStates:{none:0,all:1,one:2},INDEX_DEFAULT:-1,INDEX_NEXT:-2,INDEX_LAST:-3,INDEX_REPLACE:-4,PLAY_STATUS_NONE:0,PLAY_STATUS_INITIALIZING:1,PLAY_STATUS_LOADING:2,PLAY_STATUS_PLAYING:3,PLAY_STATUS_PAUSED:4,PLAY_STATUS_BUFFERING:5,PLAY_STATUS_FAILED:6,PLAY_STATUS_COMPLETED:7,PLAY_CONTEXT_UNKNOWN:"unknown",PLAY_CONTEXT_SONG:"song",PLAY_CONTEXT_ALBUM:"album",
        PLAY_CONTEXT_ARTIST:"artist",PLAY_CONTEXT_PLAYLIST:"playlist",PLAY_CONTEXT_RADIO:"radio",PLAY_CONTEXT_SEARCH:"search",PLAY_CONTEXT_POPULAR:"popular",PLAY_CONTEXT_FEED:"feed",PLAY_CONTEXT_SIDEBAR:"sidebar",PLAY_CONTEXT_EXPLORE:"explore",PLAY_CONTEXT_USER:"user",QUEUE_ADD_LIMIT:1E3,crossfadeAmount:5E3,crossfadeEnabled:false,playPauseFade:false,prefetchEnabled:true,lowerQuality:false,embedTimeout:0,playlistName:$.localize.getString("NOW_PLAYING"),currentSongString:new GS.Models.DataString,songCountString:new GS.Models.DataString,
        numSongs:0,player:null,isPlaying:false,isPaused:false,isLoading:false,repeatMode:null,autoplayEnabled:null,activeSong:null,currentSongs:null,nextSongToPlay:null,nullStatus:{activeSong:{},bytesLoaded:0,bytesTotal:0,duration:0,position:0,status:0},SCRUB_LOCK:false,QUEUE_SIZES:{s:{width:144,activeWidth:144},m:{width:86,activeWidth:86},l:{width:106,activeWidth:106}},queueSize:"m",songWidth:86,activeSongWidth:86,queueClosed:false,queueClosedByUser:false,gsQueue:null,allowRestore:true,lastZoomLevel:0,videoModeEnabled:false,
        powerModeEnabled:false,exists:false,init:function() {
            a = this;
            var b = location.hash.match(/^#\/s\/(.*)\/?/);
            if (b) {
                b = b[0].replace(/\?([^#]*)$/, "");
                this.allowRestore = false;
                this.songToPlayOnReadyToken = b.split("/")[3]
            }
            this.beginDragDrop();
            this.addQueueSeek();
            this.addShortcuts();
            this.addVolumeSlider();
            this.addQueueResize();
            this.queueSize = _.orEqual(GS.store.get("queueSize"), $(window).height() > 700 ? "m" : "s");
            this.songWidth = this.QUEUE_SIZES[this.queueSize].width;
            this.activeSongWidth = this.QUEUE_SIZES[this.queueSize].activeWidth;
            this.setQueue("off", false);
            this.subscribe("gs.auth.update", this.callback(this.userChange));
            this.subscribe("gs.auth.song.update", this.callback(this.songChange));
            this.subscribe("gs.auth.library.update", this.callback(this.libraryChange));
            this.subscribe("gs.auth.favorites.songs.update", this.callback(this.libraryChange));
            this.subscribe("gs.settings.local.update", this.callback(this.updateWithLocalSettings));
            this.subscribe("gs.song.play", this.callback(this.eventPlaySong));
            this.subscribe("gs.album.play",
                    this.callback(this.eventPlayAlbum));
            this.subscribe("gs.playlist.play", this.callback(this.eventPlayPlaylist));
            this.subscribe("gs.station.play", this.callback(this.eventPlayStation));
            this.subscribe("gs.app.resize", this.callback(this.resize));
            this.exists = true;
            GS.Models.Feature.register("videoMode", {FeatureID:"videoMode",TextKey:"VIDEO_MODE",ActivateCallback:this.callback("enableVideoMode"),Type:"ACTIVATED"});
            GS.Models.Feature.register("visualizers", {FeatureID:"visualizers",TextKey:"VISUALIZERS",ActivateCallback:this.callback(function() {
                GS.getLightbox().open("visualizer",
                        {showPlayerControls:true})
            }),Type:"ACTIVATED"});
            GS.Models.Feature.register("powerHour", {FeatureID:"powerHour",TextKey:"POWER_HOUR_MODE",ActivateCallback:this.callback("togglePowerMode"),IsActiveCallback:this.callback(function() {
                return this.powerModeEnabled
            })});
            this._super()
        },appReady:function() {
            if (swfobject.hasFlashPlayerVersion("9.0.0"))this.embedTimeout = setTimeout(this.callback(this.onEmbedTimeout), 1E4); else setTimeout(function() {
                GS.getLightbox().open({type:"noFlash",notCloseable:true,view:{header:"POPUP_NO_FLASH_TITLE",
                    message:"POPUP_NO_FLASH_MSG",buttonsRight:[
                        {label:"POPUP_REFRESH_GROOVESHARK",className:"submit"}
                    ],buttonsLeft:[
                        {label:"POPUP_INSTALL_FLASH",href:"http://get.adobe.com/flashplayer/",className:"install"}
                    ]},callbacks:{".submit":function(b) {
                    b.stopImmediatePropagation();
                    window.location.reload(true)
                },".install":function() {
                    $(this).attr("target", "_blank")
                }}})
            }, 500)
        },resize:function() {
            a.updateQueueWidth()
        },setQueue:function(b, c) {
            c = _.orEqual(c, true);
            var g = b === "s" ? a.smallQueueSongToHtml : a.queueSongToHtml(b),
                    h = a.getCurrentQueue(),k = _.defined(a.queue) && a.queue.songs ? a.queue.songs : [],m = 0,n = (b != a.queueSize || a.queueClosed) && b != "off",o = a.queueClosed,q = 0;
            $("#queue").height("auto");
            if (a.QUEUE_SIZES[b]) {
                a.queueSize = b;
                if (c) {
                    a.queueClosed = false;
                    a.queueClosedByUser = false
                }
                a.songWidth = a.QUEUE_SIZES[b].width;
                a.activeSongWidth = a.QUEUE_SIZES[b].activeWidth;
                GS.store.set("queueSize", b)
            } else if (b == "off") {
                a.queueClosed = true;
                a.queueClosedByUser = c
            }
            if (h && h.activeSong)m = h.activeSong.index;
            if (n) {
                q = a.gsQueue.calcIndex($("#queue .viewport").scrollLeft());
                $("#queue").attr("class", "size-" + a.queueSize);
                a.gsQueue.updateSettings({activeItemWidth:a.activeSongWidth,itemWidth:a.songWidth,itemRenderer:g,activeIndex:m})
            } else if (!a.gsQueue)a.gsQueue = $("#queue").attr("class", "size-" + a.queueSize).gsQueue({activeItemWidth:a.activeSongWidth,itemWidth:a.songWidth,itemRenderer:g,activeIndex:m}, k);
            if (a.queueClosed) {
                a.gsQueue.setDisabled(true);
                $("#queue").height(0)
            } else {
                a.gsQueue.setDisabled(false);
                n && setTimeout(function() {
                            a.gsQueue.moveTo(o ? m : q, true, o ? false : true)
                        },
                        50)
            }
            $(window).resize()
        },userChange:function() {
            this.updateWithLocalSettings()
        },libraryChange:function() {
            var b = {};
            b = a.player ? a.player.getCurrentQueue() : {activeSong:false,songs:[]};
            if (b.songs.length) {
                var c = GS.Models.Song.wrapQueue(b.songs);
                a.gsQueue.setItems(c, true);
                a.updateQueueDetails()
            }
            if (b.activeSong) {
                b = GS.Models.Song.wrapQueue([b.activeSong])[0];
                a.updateSongOnPlayer(b, true, true)
            }
        },playerExists:function() {
            return this.exists
        },playerReady:function() {
            a.player.setErrorCallback("GS.Controllers.PlayerController.instance().playerError");
            a.player.setPlaybackStatusCallback("GS.Controllers.PlayerController.instance().playerStatus");
            a.player.setPropertyChangeCallback("GS.Controllers.PlayerController.instance().propertyChange");
            a.player.setQueueChangeCallback("GS.Controllers.PlayerController.instance().queueChange");
            a.player.setSongPropertyChangeCallback("GS.Controllers.PlayerController.instance().songChange");
            a.player.setChatServers(gsConfig.chatServersWeighted ? gsConfig.chatServersWeighted : {});
            var b = a.player.setZoomChangeCallback("GS.Controllers.PlayerController.instance().onZoomChange");
            a.onZoomChange(b);
            $("#volumeSlider").slider("value", a.player.getVolume());
            a.updateWithLocalSettings();
            clearTimeout(a.embedTimeout);
            a.embedTimeout = null;
            GS.getLightbox && GS.getLightbox().isOpen && GS.getLightbox().curType == "swfTimeout" && GS.getLightbox().close();
            this.songToPlayOnReadyToken && GS.Models.Song.getSongFromToken(this.songToPlayOnReadyToken, function(c) {
                c && c.validate() && a.addSongAndPlay(c.SongID)
            }, null, false);
            return true
        },onEmbedTimeout:function() {
            a.player || GS.getLightbox().open("swfTimeout", {notCloseable:true})
        },
        queueIsRestorable:function() {
            this.getCurrentQueue(true);
            GS.user && GS.user.settings.local.restoreQueue && this.allowRestore ? this.restoreQueue() : $("#queue_clear_button").addClass("undo").attr("title", $.localize.getString("QUEUE_RESTORE_QUEUE")).attr("data-translate-title", "QUEUE_RESTORE_QUEUE").show().$.publish("gs.notification.restorequeue")
        },onZoomChange:function(b) {
            var c = window.GS && GS.airbridge ? GS.airbridge : GS.Controllers.AirbridgeController.instance();
            if (b && !c.isDesktop) {
                console.warn("ZOOM CHANGED, NOT ZERO",
                        b);
                alert($.localize.getString("ZOOM_ALERT"));
                window._gaq && window._gaq.push && window._gaq.push(["_trackPageview","#/lb/zoom"])
            } else b !== this.lastZoomLevel && $(window).resize();
            this.lastZoomLevel = b
        },expireSWFService:function() {
            a.player && a.player.expireService()
        },storeQueue:function() {
            a.player && a.player.storeQueue()
        },playerError:function(b) {
            console.log("player.playererror", b);
            switch (b.type) {
                case "errorAddingSongs":
                    console.log("player. failed to add songs: ", b.details.songs, b.details.reason);
                    b.details.reason ==
                            "tooManySongs" ? $.publish("gs.notification", {type:"notice",message:$.localize.getString("ERROR_TOO_MANY_SONGS")}) : $.publish("gs.notification", {type:"error",message:$.localize.getString("ERROR_ADDING_SONG") + ": " + b.details.reason});
                    break;
                case "playbackError":
                    console.log("player. error playing song", b.details.song, b.details.reason, b.details.errorDetail);
                    b.details.reason === "unknownHasNext" ? $.publish("gs.notification", {type:"error",message:$.localize.getString("ERROR_HASNEXT_MESSAGE")}) : $.publish("gs.notification",
                            {type:"error",message:$.localize.getString("ERROR_PLAYING_SONG")});
                    break;
                case "autoplayFailed":
                    console.log("player. error fetching autoplay song", b.details.reason);
                    if (b.details.reason === "unknownHasNext")$.publish("gs.notification", {type:"error",message:$.localize.getString("ERROR_HASNEXT_MESSAGE")}); else b.details.reason === "noRecommendations" ? this.showRadioStations() : $.publish("gs.notification", {type:"error",message:$.localize.getString("ERROR_FETCHING_RADIO")});
                    break;
                case "autoplayVoteError":
                    console.log("player. error voting song",
                            b.details.song);
                    $.publish("gs.notification", {type:"error",message:$.localize.getString("ERROR_VOTING_SONG")});
                    break;
                case "serviceError":
                    console.log("player. service error", b.details);
                    $.publish("gs.notification", {type:"error",message:$.localize.getString("ERROR_FETCHING_INFO")});
                    break
            }
            b.details.errorDetail ? GS.getGuts().gaTrackEvent("playerError", b.type, b.details.reason + ", " + b.details.errorDetail) : GS.getGuts().gaTrackEvent("playerError", b.type, b.details.reason)
        },$seekBar:$("#player_seeking_back"),$seekBuffer:$("#player_seeking_buffer"),
        $seekProgress:$("#player_seeking_progress"),$seekScrubber:$("#player_seeking_scrubber"),lastStatus:false,lastPlayedQueueSongID:false,playerStatus:function(b) {
            b = b || this.nullStatus;
            if (!this.currentSong || !b.activeSong || this.currentSong && b.activeSong && this.currentSong.queueSongID !== b.activeSong.queueSongID) {
                if (b.status == a.PLAY_STATUS_PLAYING)return;
                b.activeSong = GS.Models.Song.wrapQueue([b.activeSong ? b.activeSong : {}])[0];
                this.updateSongOnPlayer(b.activeSong, true)
            } else b.activeSong = this.currentSong;
            var c =
                    Math.min(1, b.bytesLoaded / b.bytesTotal),g = Math.min(1, b.position / b.duration),h = this.$seekBar.width();
            c = Math.min(h, c * 100);
            var k = Math.min(h, g * 100);
            g = Math.min(h, Math.max(0, h * g));
            c = isNaN(c) ? 0 : c;
            k = isNaN(k) ? 0 : k;
            g = isNaN(g) ? 0 : g;
            this.$seekBuffer.width(c + "%");
            this.$seekProgress.width(k + "%");
            this.SCRUB_LOCK || this.$seekScrubber.css("left", g);
            if (b.duration > 0) {
                b.position == 0 ? $("#player_elapsed").text("00:00") : $("#player_elapsed").text(_.millisToMinutesSeconds(b.position, true));
                b.duration == 0 ? $("#player_duration").text("00:00") :
                        $("#player_duration").text(_.millisToMinutesSeconds(b.duration, true))
            } else {
                $("#player_elapsed").text("00:00");
                $("#player_duration").text("00:00")
            }
            b.currentStreamServer && b.currentStreamServer !== this.lastStatus.currentStreamServer && $.publish("gs.player.streamserver", {streamServer:b.currentStreamServer});
            this.powerModeEnabled && b.position > 6E4 && this.nextSong();
            g = b.activeSong ? b.activeSong.SongID : false;
            switch (b.status) {
                case a.PLAY_STATUS_NONE:
                    this.lastStatus !== b.status && GS.getGuts().logEvent("playStatusUpdate",
                            {playStatus:"NONE",activeSong:g,streamServer:b.currentStreamServer});
                    a.isPlaying = false;
                    a.isPaused = false;
                    a.isLoading = false;
                    a.seek.slider("disable");
                    $("#player_play_pause").addClass("play").removeClass("pause").removeClass("buffering");
                    $("#queue_list li.queue-item.queue-item-active a.play").addClass("paused");
                    $.publish("gs.player.stopped", b.activeSong);
                    break;
                case a.PLAY_STATUS_INITIALIZING:
                    a.isPlaying = true;
                    a.isPaused = false;
                    a.isLoading = true;
                    if (this.lastStatus !== b.status) {
                        GS.getGuts().logEvent("playStatusUpdate",
                                {playStatus:"INITIALIZING",activeSong:g,streamServer:b.currentStreamServer});
                        this.lastStatus == a.PLAY_STATUS_COMPLETED && GS.getGuts().gaTrackEvent("player", "continueInterrupted", b.currentSongID)
                    }
                    if (GS.airbridge && GS.airbridge.isDesktop && !GS.user.IsPremium || gsConfig.isPreview && !GS.user.IsPremium && GS.user.UserID % 5 != 0) {
                        this.stopSong();
                        GS.getLightbox().open("login", {premiumRequired:true,notCloseable:gsConfig.isPreview || GS.airbridge && GS.airbridge.isDesktop})
                    }
                    break;
                case a.PLAY_STATUS_LOADING:
                    if (this.lastStatus !==
                            b.status) {
                        GS.getGuts().logEvent("playStatusUpdate", {playStatus:"LOADING",activeSong:g,streamServer:b.currentStreamServer});
                        a.isPlaying = true;
                        a.isPaused = false;
                        a.isLoading = true;
                        a.updateSongOnPlayer(b.activeSong);
                        $("#player_play_pause").is(".buffering") || $("#player_play_pause").removeClass("play").removeClass("pause").addClass("buffering");
                        GS.getGuts().gaTrackEvent("player", "loading", b.currentStreamServer);
                        a.lastLoadingQueueSongID = b.activeSong ? b.activeSong.queueSongID : false;
                        a.lastLoadingTime = (new Date).getTime()
                    }
                    if (this.pauseNextQueueSongID &&
                            b.activeSong && this.pauseNextQueueSongID === b.activeSong.queueSongID) {
                        this.pauseNextQueueSongID = false;
                        this.pauseSong()
                    }
                    $("#queue_list li.queue-item.queue-item-active a.play").removeClass("paused");
                    break;
                case a.PLAY_STATUS_PLAYING:
                    if (this.lastStatus !== b.status || this.lastPlayedQueueSongID !== b.activeSong.queueSongID) {
                        GS.getGuts().logEvent("playStatusUpdate", {playStatus:"PLAYING",activeSong:g,streamServer:b.currentStreamServer});
                        a.isPlaying = true;
                        a.isPaused = false;
                        a.isLoading = false;
                        a.seek.slider("enable");
                        $("#player_play_pause").is(".pause") || $("#player_play_pause").removeClass("play").addClass("pause").removeClass("buffering");
                        $.publish("gs.player.playing", b);
                        if (b.activeSong && (this.lastPlayedQueueSongID !== b.activeSong.queueSongID || this.repeatMode == a.REPEAT_ONE && this.lastStatus == a.PLAY_STATUS_LOADING)) {
                            this.lastStatus == a.PLAY_STATUS_COMPLETED && GS.getGuts().gaTrackEvent("player", "continueNextSong", g);
                            GS.getGuts().gaTrackEvent("player", "play", g);
                            this.trackAutoplayEvent("play");
                            this.updateSongOnPlayer(b.activeSong);
                            $.publish("gs.player.nowplaying", b.activeSong);
                            $("#queue_list .queueSong a.play[rel=" + this.lastPlayedQueueSongID + "]").addClass("paused");
                            this.lastPlayedQueueSongID = b.activeSong ? b.activeSong.queueSongID : false;
                            g = new Date;
                            !GS.user.IsPremium && g - GS.ad.lastActive > 36E5 && GS.getLightbox().open("interactionTime")
                        }
                        this.lastStatus == a.PLAY_STATUS_LOADING ? GS.getGuts().gaTrackEvent("player", "loadingTime", b.currentStreamServer, (new Date).getTime() - this.lastLoadingTime) : GS.getGuts().gaTrackEvent("player", "loadingTime",
                                b.currentStreamServer, 0)
                    }
                    if (this.pauseNextQueueSongID && b.activeSong && this.pauseNextQueueSongID === b.activeSong.queueSongID) {
                        this.pauseNextQueueSongID = false;
                        this.pauseSong()
                    }
                    $("#queue_list li.queue-item.queue-item-active a.play").removeClass("paused");
                    $.publish("gs.player.playing.continue", b);
                    break;
                case a.PLAY_STATUS_PAUSED:
                    if (this.lastStatus !== b.status) {
                        GS.getGuts().logEvent("playStatusUpdate", {playStatus:"PAUSED",activeSong:g,streamServer:b.currentStreamServer});
                        a.isPlaying = false;
                        a.isPaused = true;
                        a.isLoading = false;
                        $("#player_play_pause").is(".play") || $("#player_play_pause").addClass("play").removeClass("pause").removeClass("buffering");
                        $.publish("gs.player.paused", b.activeSong)
                    }
                    $("#queue_list li.queue-item.queue-item-active a.play").addClass("paused");
                    break;
                case a.PLAY_STATUS_BUFFERING:
                    this.lastStatus !== b.status && GS.getGuts().logEvent("playStatusUpdate", {playStatus:"BUFFERING",activeSong:g,streamServer:b.currentStreamServer});
                    a.isPlaying = true;
                    a.isPaused = false;
                    a.isLoading = true;
                    $("#player_play_pause").is(".buffering") ||
                    $("#player_play_pause").removeClass("play").removeClass("pause").addClass("buffering");
                    $("#queue_list li.queue-item.queue-item-active a.play").removeClass("paused");
                    break;
                case a.PLAY_STATUS_FAILED:
                    this.lastStatus !== b.status && GS.getGuts().logEvent("playStatusUpdate", {playStatus:"FAILED",activeSong:g,streamServer:b.currentStreamServer});
                    a.isPlaying = false;
                    a.isPaused = false;
                    a.isLoading = false;
                    a.seek.slider("disable");
                    $("#player_play_pause").addClass("play").removeClass("pause").removeClass("buffering");
                    $("#queue_list li.queue-item.queue-item-active a.play").addClass("paused");
                    break;
                case a.PLAY_STATUS_COMPLETED:
                    this.lastStatus !== b.status && GS.getGuts().logEvent("playStatusUpdate", {playStatus:"COMPLETED",activeSong:g,streamServer:b.currentStreamServer});
                    a.isPlaying = false;
                    a.isPaused = false;
                    a.isLoading = false;
                    a.seek.slider("disable");
                    $("#player_play_pause").addClass("play").removeClass("pause").removeClass("buffering");
                    $("#queue_list li.queue-item.queue-item-active a.play").addClass("paused");
                    a.$seekBuffer.width("0%");
                    a.$seekProgress.width("0%");
                    a.$seekScrubber.css("left", 0);
                    $.publish("gs.player.stopped", b.activeSong);
                    $.publish("gs.player.completed", b.activeSong);
                    break
            }
            this.lastStatus = b.status;
            $.publish("gs.player.playstatus", b)
        },pauseNextQueueSongID:false,pauseNextSong:function() {
            var b = this.getCurrentQueue(true);
            this.pauseNextQueueSongID = b && b.nextSong && b.nextSong.queueSongID ? b.nextSong.queueSongID : false
        },propertyChange:function(b) {
            if (b.isMuted) {
                $("#player_volume").addClass("muted");
                $("#volumeSlider").slider("value",
                        0)
            } else {
                $("#player_volume").removeClass("muted");
                $("#volumeSlider").slider("value", b.volume)
            }
            if (b.crossfadeEnabled) {
                $("#player_crossfade").addClass("active");
                this.crossfadeEnabled = true
            } else {
                $("#player_crossfade").removeClass("active");
                this.crossfadeEnabled = false
            }
        },queueChange:function(b) {
            var c = b.fullQueue;
            if (a.player)c.hasRestoreQueue = a.player.getQueueIsRestorable();
            a.queue = false;
            switch (b.type) {
                case "queueReset":
                    c.activeSong = c.activeSong ? GS.Models.Song.wrapQueue([c.activeSong])[0] : null;
                    c.activeSong &&
                    this.updateSongOnPlayer(c.activeSong, true);
                    c.songs = GS.Models.Song.wrapQueue(c.songs);
                    a.queue = c;
                    a.updateQueueDetails(c);
                    a.updateQueueSongs(c);
                    if (b.details.hasOwnProperty("autoplayEnabled"))if (b.details.autoplayEnabled == true) {
                        GS.player.getCurrentQueue();
                        GS.getGuts().logEvent("autoplayOn", {tagID:b.details.currentAutoplayTagID});
                        GS.getGuts().beginContext({autoplay:b.details.currentAutoplayTagID})
                    } else GS.getGuts().endContext("autoplay");
                    break;
                case "propertyChange":
                    if (b.details.hasOwnProperty("autoplayEnabled"))if (b.details.autoplayEnabled ==
                            true) {
                        c = a.getCurrentQueue().songs;
                        var g = {tagID:b.fullQueue.currentAutoplayTagID};
                        if (c) {
                            for (var h = "",k = 0; k < c.length; k++)h = k == 0 ? c[k].SongID : h + "," + c[k].SongID;
                            g.seedSongs = h
                        }
                        GS.getGuts().logEvent("autoplayOn", g);
                        GS.getGuts().beginContext({autoplay:b.fullQueue.currentAutoplayTagID,autoplaySeedSongs:h})
                    } else GS.getGuts().handleAutoplayOff();
                    a.updateQueueDetails();
                    break;
                case "contentChange":
                    a.gsQueue.setActive(a.getCurrentQueue().activeSong.index, false);
                    a.gsQueue.setItems(a.getCurrentQueue().songs);
                    a.updateQueueWidth();
                    a.updateQueueDetails();
                    break
            }
            $.publish("gs.player.queue.change")
        },songChange:function(b) {
            var c = ["parentQueueID","queueSongID","autoplayVote","source","sponsoredAutoplayID"],g = a.player ? a.player.getCurrentQueue() : {activeSong:false},h,k,m,n,o = true;
            b instanceof GS.Models.Song || (b = GS.Models.Song.wrapQueue([b])[0]);
            m = g.songs;
            for (h = 0; n = m[h]; h++)if (n.SongID == b.SongID)for (k in b)if (b.hasOwnProperty(k) && n[k] != b[k] && (n.queueSongID === b.queueSongID || c.indexOf(k) == -1)) {
                n[k] = b[k];
                o = false
            }
            if (!o) {
                c = GS.Models.Song.wrapQueue(m);
                a.gsQueue.setItems(c, true)
            }
            a.updateQueueDetails();
            g.activeSong && b.queueSongID === g.activeSong.queueSongID && a.updateSongOnPlayer(b, true, true);
            $.publish("gs.player.song.change", b)
        },updateWithLocalSettings:function(b) {
            if (this.player) {
                b = b || GS.user.settings.local;
                b.crossfadeEnabled != this.getCrossfadeEnabled() && this.setCrossfadeEnabled(b.crossfadeEnabled);
                b.crossfadeAmount != this.getCrossfadeAmount() && this.setCrossfadeAmount(b.crossfadeAmount);
                b.lowerQuality != this.getLowerQuality() && this.setLowerQuality(b.lowerQuality);
                !b.noPrefetch != this.getPrefetchEnabled() && this.setPrefetchEnabled(!b.noPrefetch);
                b.playPauseFade != this.getPlayPauseFade() && this.setPlayPauseFade(b.playPauseFade);
                this.setPersistShuffle(b.persistShuffle);
                b.persistShuffle && b.lastShuffle != this.getShuffle() && this.setShuffle(b.lastShuffle)
            }
        },getEverything:function() {
            if (a.player)return a.player.getEverything();
            return{}
        },getPlaybackStatus:function() {
            if (a.player)return a.player.getPlaybackStatus();
            return{}
        },getSongDetails:function(b, c) {
            var g;
            b = _.orEqual(b,
                    0);
            if (typeof c === "number" || typeof c === "string")c = [c];
            if (a.player) {
                g = a.player.getSongDetails(b, c);
                return GS.Models.Song.wrapQueue(g)
            }
            return GS.Models.Song.wrap({})
        },getCurrentSong:function() {
            if (a.player)return a.getCurrentQueue().activeSong
        },setActiveSong:function(b) {
            if (b && a.player)return a.player.setActiveSong(b);
            return false
        },addSongsToQueueAt:function(b, c, g, h, k) {
            c = _.orEqual(c, this.INDEX_DEFAULT);
            g = _.orEqual(g, false);
            h = _.orEqual(h, {type:this.PLAY_CONTEXT_UNKNOWN});
            k = _.orEqual(k, false);
            $.isArray(b) ||
            (b = isNaN(b) ? b.split(",") : [b]);
            var m,n = [];
            for (m = 0; m < b.length; m++)b[m] > 0 && GS.Models.Song.getSong(b[m], this.callback(function(o) {
                o = o.dupe();
                o.songs = {};
                o.albums = {};
                o.fanbase = {};
                n[m] = o
            }), false, false, {async:false});
            if (a.player) {
                if (c == -4) {
                    c = -1;
                    this.clearQueue()
                }
                a.player.addSongsToQueueAt(n, c, g, h, k);
                GS.getGuts().logEvent("songsQueued", {songIDs:b})
            }
        },playSong:function(b) {
            GS.isPlaying = true;
            a.player && a.player.playSong(b)
        },eventPlaySong:function(b) {
            if (b && b.songID) {
                GS.getNotice().feedbackOnNextSong = _.orEqual(b.getFeedback,
                        false);
                a.addSongAndPlay(b.songID)
            }
        },eventPlayAlbum:function(b) {
            if (b && b.albumID) {
                GS.getNotice().feedbackOnNextSong = _.orEqual(b.getFeedback, false);
                GS.Models.Album.getAlbum(b.albumID, this.callback("playAlbum", b), null, false)
            }
        },playAlbum:function(b, c) {
            console.log("player.playAlbum", b, c);
            var g = _.orEqual(b.index, -1),h = _.orEqual(b.playOnAdd, false),k = _.orEqual(b.shuffle, false);
            c.play(g, h, k)
        },eventPlayPlaylist:function(b) {
            if (b && b.playlistID) {
                GS.getNotice().feedbackOnNextSong = _.orEqual(b.getFeedback, false);
                GS.Models.Playlist.getPlaylist(b.playlistID, this.callback("playPlaylist", b), null, false)
            }
        },playPlaylist:function(b, c) {
            console.log("player.playPlaylist", b, c);
            var g = _.orEqual(b.index, -1),h = _.orEqual(b.playOnAdd, false),k = _.orEqual(b.shuffle, false);
            c.play(g, h, k)
        },eventPlayStation:function(b) {
            if (b && b.tagID) {
                console.log("play station", b.tagID);
                a.setAutoplay(true, b.tagID)
            }
        },addSongAndPlay:function(b, c) {
            a.player && a.addSongsToQueueAt([b], a.INDEX_DEFAULT, true, c)
        },pauseSong:function() {
            a.isPlaying = false;
            a.isPaused =
                    true;
            if (a.player) {
                a.player.pauseSong();
                $.publish("gs.player.paused")
            }
            GS.getGuts().gaTrackEvent("player", "pauseSong")
        },resumeSong:function() {
            a.isPlaying = true;
            a.isPaused = false;
            a.player && a.player.resumeSong();
            GS.getGuts().gaTrackEvent("player", "resumeSong")
        },stopSong:function() {
            a.isPlaying = false;
            a.isPaused = false;
            a.player && a.player.stopSong();
            GS.getGuts().gaTrackEvent("player", "stopSong")
        },previousSong:function(b) {
            b = b ? true : false;
            if (a.player && !this.videoModeEnabled)a.player.previousSong(b); else {
                b = a.getCurrentQueue();
                var c = b.activeSong.index;
                if (!b.songs[c - 1])return;
                b = b.songs[c - 1];
                a.setActiveSong(b.queueSongID);
                $.publish("gs.video.player.loadSong", b)
            }
            GS.getGuts().logEvent("prevSong", {});
            GS.getGuts().gaTrackEvent("player", "prevSong");
            a.trackAutoplayEvent("prev")
        },nextSong:function() {
            if (a.player && !this.videoModeEnabled)a.player.nextSong(); else {
                var b = a.getCurrentQueue(),c = b.activeSong.index;
                if (!b.songs[c + 1])return;
                b = b.songs[c + 1];
                a.setActiveSong(b.queueSongID);
                $.publish("gs.video.player.loadSong", b)
            }
            GS.getGuts().logEvent("nextSong",
                    {});
            GS.getGuts().gaTrackEvent("player", "nextSong");
            a.trackAutoplayEvent("next")
        },seekTo:function(b) {
            a.player && a.player.seekTo(b);
            GS.getGuts().gaTrackEvent("player", "seekTo")
        },clearQueue:function() {
            if (a.player) {
                a.queue && a.queue.autoplayEnabled && GS.getGuts().handleAutoplayOff();
                a.queue = null;
                a.player.stopSong();
                a.player.clearQueue();
                a.playerStatus(a.player.getPlaybackStatus());
                a.updateQueueWidth();
                a.gsQueue.setActive(0, false);
                a.gsQueue.setItems([], true);
                $("#playerDetails_nowPlaying").html("");
                $.publish("gs.player.currentSong",
                        null);
                GS.getGuts().logEvent("queueCleared", {})
            }
            GS.getGuts().gaTrackEvent("player", "clearQueue")
        },restoreQueue:function() {
            a.player && a.player.restoreQueue();
            GS.getGuts().gaTrackEvent("player", "restoreQueue")
        },saveQueue:function() {
            for (var b = a.getCurrentQueue().songs,c = [],g = 0; g < b.length; g++)c.push(b[g].SongID);
            GS.getLightbox().open("newPlaylist", c);
            GS.getGuts().logQueueSaveInitiated();
            GS.getGuts().gaTrackEvent("player", "saveQueue")
        },getCurrentQueue:function(b) {
            b = _.orEqual(b, false);
            if (!b && a.queue)return a.queue;
            if (a.player) {
                b = a.player.getCurrentQueue();
                if (b.activeSong) {
                    b.activeSong = GS.Models.Song.wrapQueue([b.activeSong])[0];
                    this.updateSongOnPlayer(b.activeSong, true, true)
                }
                if (b.songs && b.songs.length)b.songs = GS.Models.Song.wrapQueue(b.songs);
                b.hasRestoreQueue = a.player.getQueueIsRestorable();
                return a.queue = b
            }
        },getPreviousQueue:function() {
            a.player && a.player.getPreviousQueue();
            GS.getGuts().gaTrackEvent("player", "previousQueue")
        },moveSongsTo:function(b, c) {
            if (typeof b === "number" || typeof b === "string")b = [b];
            a.player &&
            a.player.moveSongsTo(b, c)
        },removeSongs:function(b) {
            if (typeof b === "number" || typeof b === "string")b = [b];
            if (a.player) {
                a.player.removeSongs(b);
                a.updateQueueWidth()
            }
            a.queue = false;
            a.queue = a.getCurrentQueue();
            $.publish("gs.player.queue.change");
            GS.getGuts().gaTrackEvent("player", "removeSongs");
            a.trackAutoplayEvent("removeSongs")
        },lastAutoplayInfo:false,setAutoplay:function(b, c, g) {
            var h = a.getCurrentQueue();
            b = b ? true : false;
            c = parseInt(c, 10);
            if (isNaN(c))c = 0;
            if (h.songs.length == 0 && !c && !g)this.showRadioStations();
            else if ((c > 0 || g) && h && h.songs.length > 0) {
                GS.getLightbox().close();
                GS.getLightbox().open({type:"radioClearQueue",view:{header:"POPUP_START_RADIO_TITLE",message:"POPUP_START_RADIO_MESSAGE",buttonsLeft:[
                    {label:"CANCEL",className:"close"}
                ],buttonsRight:[
                    {label:"POPUP_START_RADIO_TITLE",className:"submit"}
                ]},callbacks:{".submit":function() {
                    GS.player.clearQueue();
                    GS.player.setAutoplay(true, c, g)
                }}})
            } else {
                if (a.player) {
                    if (b) {
                        $("#player_radio_button").addClass("active");
                        $("#player_radio_switch").stop().css({left:25});
                        GS.getGuts().beginContext({autoplay:c})
                    } else {
                        $("#player_radio_button").removeClass("active");
                        $("#player_radio_switch").stop().css({left:0});
                        GS.getGuts().endContext("autoplay")
                    }
                    a.player.setAutoplay(b, c, g);
                    $.publish("gs.player.autoplay.update", b)
                }
                GS.getGuts().gaTrackEvent("player", b ? "enableRadio" : "disableRadio", c)
            }
        },trackLastAutoplayInfo:function(b, c) {
            if (a.lastAutoplayInfo && (!b || a.lastAutoplayInfo.tagID != c)) {
                var g = (new Date).getTime() - a.lastAutoplayInfo.time;
                GS.getGuts().gaTrackEvent("player", "autoplayDuration",
                        a.lastAutoplayInfo.tagID, g)
            }
            if (b) {
                if (!a.lastAutoplayInfo || a.lastAutoplayInfo && a.lastAutoplayInfo.tagID !== c)a.lastAutoplayInfo = {tagID:c,time:(new Date).getTime()}
            } else a.lastAutoplayInfo = false
        },trackAutoplayEvent:function(b) {
            b = "" + b;
            a.lastAutoplayInfo && b && GS.getGuts().gaTrackEvent("player", "autoplay" + _.ucwords(b), a.lastAutoplayInfo.tagID)
        },voteSong:function(b, c) {
            var g;
            if (a.player) {
                a.player.voteSong(b, c);
                g = this.getSongDetails(a.queue.queueID, [b])[0].SongID;
                switch (c) {
                    case -1:
                        GS.getGuts().logEvent("songDownVoted",
                                {songID:g});
                        GS.getGuts().gaTrackEvent("player", "voteSongDown");
                        break;
                    case 0:
                        GS.getGuts().logEvent("songVotedNeutral", {songID:g});
                        GS.getGuts().gaTrackEvent("player", "voteSongNeutral");
                        break;
                    case 1:
                        GS.getGuts().logEvent("songUpVoted", {songID:g});
                        GS.getGuts().gaTrackEvent("player", "voteSongUp");
                        break
                }
                $.publish("gs.player.voted", c)
            }
        },flagSong:function(b, c) {
            if (a.player) {
                a.player.flagSong(b, c);
                $.publish("gs.notification", {message:$.localize.getString("SUCCESS_FLAG_SONG")})
            }
            GS.getGuts().gaTrackEvent("player",
                    "flagSong", c)
        },getVolume:function() {
            if (a.player)return a.player.getVolume()
        },setVolume:function(b) {
            b = Math.max(0, Math.min(100, parseInt(b, 10)));
            a.player && a.player.setVolume(b);
            GS.getGuts().gaTrackEvent("player", "setVolume", b)
        },getCrossfadeAmount:function() {
            if (a.player)return a.player.getCrossfadeAmount()
        },getCrossfadeEnabled:function() {
            if (a.player)return a.player.getCrossfadeEnabled()
        },setCrossfadeAmount:function(b) {
            b = parseInt(b, 10);
            a.player && a.player.setCrossfadeAmount(b);
            GS.getGuts().gaTrackEvent("player",
                    "setCrossfade", b)
        },setCrossfadeEnabled:function(b) {
            b = b && GS.user.IsPremium ? true : false;
            a.player && a.player.setCrossfadeEnabled(b);
            GS.user.settings.changeLocalSettings({crossfadeEnabled:b ? 1 : 0});
            GS.getGuts().gaTrackEvent("player", b ? "enableCrossfade" : "disableCrossfade")
        },setPrefetchEnabled:function(b) {
            b = b ? true : false;
            a.player && a.player.setPrefetchEnabled(b);
            GS.getGuts().gaTrackEvent("player", b ? "enablePrefetch" : "disablePrefetch")
        },getPrefetchEnabled:function() {
            if (a.player)return a.player.getPrefetchEnabled()
        },
        setLowerQuality:function(b) {
            b = b ? true : false;
            a.player && a.player.setLowerQuality(b);
            GS.getGuts().gaTrackEvent("player", b ? "enableLowerQuality" : "disableLowerQuality")
        },getLowerQuality:function() {
            if (a.player)return a.player.getLowerQuality()
        },getIsMuted:function() {
            if (a.player)return a.player.getIsMuted()
        },setIsMuted:function(b) {
            b = b ? true : false;
            a.player && a.player.setIsMuted(b);
            GS.getGuts().gaTrackEvent("player", b ? "enableMuted" : "disableMuted")
        },getPlayPauseFade:function() {
            if (a.player)return a.player.getPlayPauseFade()
        },
        setPlayPauseFade:function(b) {
            b = b ? true : false;
            a.player && a.player.setPlayPauseFade(b);
            GS.user.settings.changeLocalSettings({playPauseFade:b ? 1 : 0});
            GS.getGuts().gaTrackEvent("player", b ? "enablePlayPauseFade" : "disablePlayPauseFade")
        },setRepeat:function(b) {
            a.repeat = b;
            a.player && a.player.setRepeat(b);
            GS.getGuts().gaTrackEvent("player", "setRepeat", b)
        },getRepeat:function() {
            if (a.player && a.player.getRepeat)return a.player.getRepeat();
            return a.repeat
        },setShuffle:function(b) {
            if (!(a.queue && a.queue.autoplayEnabled)) {
                b =
                        b ? true : false;
                a.player && a.player.setShuffle(b);
                GS.user.settings.changeLocalSettings({lastShuffle:b ? 1 : 0});
                GS.getGuts().gaTrackEvent("player", "shuffle", b ? "on" : "off")
            }
        },getShuffle:function() {
            if (a.player)return a.player.getShuffle();
            return false
        },setPersistShuffle:function(b) {
            b = b ? true : false;
            a.player && a.player.setPersistShuffle(b);
            GS.getGuts().gaTrackEvent("player", "persistShuffle", b ? "on" : "off")
        },prefetchStreamKeys:function(b) {
            if (a.player)return a.player.prefetchStreamKeys(b)
        },getAPIVersion:function() {
            if (a.player)return a.player.getAPIVersion()
        },
        getApplicationVersion:function() {
            if (a.player)return a.player.getApplicationVersion()
        },updateSongOnPlayer:function(b, c, g) {
            g = _.orEqual(g, false);
            c = _.orEqual(c, false);
            if (!(!c && a.currentSong && b && a.currentSong.queueSongID === b.queueSongID))if (b) {
                if (b instanceof GS.Models.Song)a.currentSong = b; else {
                    a.currentSong = GS.Models.Song.wrapQueue([b])[0];
                    if (!(a.currentSong instanceof GS.Models.Song))return
                }
                a.videoIndex = a.currentSong.index;
                $("#queue_list li.queue-item.queue-item-active").removeClass("active");
                $("#queue_list #" +
                        a.currentSong.queueSongID).addClass("active");
                $("#playerDetails_nowPlaying").html(a.view("currentSongDetails")).attr("rel", a.currentSong.SongID).attr("qsid", a.currentSong.queueSongID);
                a.currentSongString.hookup($("#playerDetails_current_song"));
                _.defined(a.currentSong.index && a.currentSong.index >= 0) && a.gsQueue.setActive(a.currentSong.index, !a.isMouseDown && !g);
                $.publish("gs.player.currentSong", b)
            }
        },updateQueueDetails:function(b) {
            b || (b = a.getCurrentQueue(true));
            if (b && b.hasOwnProperty("songs") && a.currentSongs !=
                    b.songs) {
                a.currentSongs = b.songs;
                b.songs.length && a.queueClosed && !a.queueClosedByUser && a.setQueue(a.queueSize);
                if (b.songs && b.songs.length > 0) {
                    $("#player_seeking_scrubber").show();
                    $("#player_previous").removeAttr("disabled").removeClass("disabled");
                    b.previousSong ? $("#player_previous").attr("data-tooltip", _.uncleanText(b.previousSong.SongName)) : $("#player_previous").removeAttr("data-tooltip")
                } else if (!GS.player.queue.autoplayEnabled) {
                    $("#player_seeking_scrubber").hide();
                    $("#player_previous").attr("disabled",
                            "disabled").addClass("disabled").removeAttr("data-tooltip");
                    $("#player_radio_button").removeClass("active");
                    $("#player_radio_switch").stop().css({left:0})
                }
            }
            if (b && b.hasOwnProperty("nextSong") && a.nextSongToPlay != b.nextSong)if (a.nextSongToPlay = b.nextSong) {
                $("#player_next").removeAttr("disabled").removeClass("disabled").attr("data-tooltip", _.uncleanText(b.nextSong.SongName));
                if (a.pauseNextQueueSongID && b.nextSong.hasOwnProperty("queueSongID"))a.pauseNextQueueSongID = b.nextSong.queueSongID
            } else $("#player_next",
                    a.element).attr("disabled", "disabled").addClass("disabled").removeAttr("data-tooltip");
            if (a.activeSong != b.activeSong) {
                a.activeSong = b.activeSong;
                if (b && b.hasOwnProperty("activeSong")) {
                    $("#player_play_pause").removeAttr("disabled").removeClass("disabled");
                    a.updateSongOnPlayer(b.activeSong, true)
                } else $("#player_play_pause").attr("disabled", "disabled").addClass("disabled")
            }
            $("#playerDetails_queue").html(a.view("queueDetails"));
            var c;
            c = b.songs.length === 0 ? "QUEUE_NO_SONGS" : b.songs.length == 1 ? "QUEUE_ONE_SONG" :
                    "QUEUE_NUM_SONGS";
            $("#queue_songCountLink").localeDataString(c, {numSongs:b.songs.length});
            if (b && b.hasOwnProperty("repeatMode") && a.repeatMode != b.repeatMode) {
                a.repeatMode = b.repeatMode;
                if (a.repeatMode === a.REPEAT_ALL)$("#player_loop").removeClass("none").addClass("all").addClass("active"); else if (a.repeatMode === a.REPEAT_ONE)$("#player_loop").removeClass("all").addClass("one").addClass("active"); else a.repeatMode === a.REPEAT_NONE && $("#player_loop").removeClass("one").addClass("none").removeClass("active")
            }
            if (b &&
                    b.hasOwnProperty("autoplayEnabled") && a.autoplayEnabled != b.autoplayEnabled) {
                if (a.autoplayEnabled = b.autoplayEnabled) {
                    $("#queue_list").addClass("autoplay");
                    $("#player_shuffle").removeClass("active");
                    $("#player_radio_switch").stop().animate({left:25}, {duration:100,complete:function() {
                        $("#player_radio_button").addClass("active")
                    }})
                } else {
                    $("#queue_list").removeClass("autoplay");
                    $("#player_radio_switch").stop().animate({left:0}, {duration:100,complete:function() {
                        $("#player_radio_button").removeClass("active")
                    }});
                    b.shuffleEnabled ? $("#player_shuffle").addClass("active") : $("#player_shuffle").removeClass("active")
                }
                $.publish("gs.player.autoplay.update", b.autoplayEnabled);
                a.trackLastAutoplayInfo(b.autoplayEnabled, b.currentAutoplayTagID)
            }
        },updateQueueSongs:function(b) {
            if (b.hasOwnProperty("songs"))if (b.songs.length) {
                a.currentSong = b.activeSong;
                a.songs = b.songs;
                a.gsQueue.setActive(b.activeSong.index, false);
                a.gsQueue.setItems(b.songs, true)
            } else {
                a.activeSong = b.activeSong;
                a.songs = b.songs;
                $("#playerDetails_nowPlaying").html("");
                a.gsQueue.setActive(0, false);
                a.gsQueue.setItems([], true)
            }
        },updateQueueWidth:function() {
            var b,c,g = a.getCurrentQueue();
            if (g) {
                parseInt($("#queue_list_window").css("padding-left"), 10);
                b = $("#queue").width();
                c = $("#queue").height();
                if (g && g.songs && g.songs.length > 0) {
                    b = a.songWidth * (g.songs.length - 1) + a.activeSongWidth;
                    $("#queue_list").removeClass("empty")
                } else {
                    b = b;
                    $("#queue_list").addClass("empty").width("")
                }
                c !== $("#queue").height() && a.lastQueueWidth !== b && $(window).resize();
                a.lastQueueWidth = b
            }
        },autoScrollWaitDuration:300,
        beginDragDrop:function() {
            function b(k, m) {
                var n = $("#queue_songGuide");
                if (c.within(k.clientX, k.clientY).length > 0) {
                    m.queueLength = _.orEqual(m.queueLength, a.getCurrentQueue().songs.length);
                    var o = c.parent(),q = a.activeSongWidth - a.songWidth,v = 0,x = c.offset().left,A = g.scrollLeft() - 10 - (k.clientX > parseInt($("#queue_list .queue-item-active").css("left"), 10) + a.activeSongWidth ? q : 0),u = parseInt(g.width(), 10) * 0.05;
                    c.children();
                    q = a.getCurrentQueue().activeSong ? _.orEqual(a.getCurrentQueue().activeSong.index, 0) : 0;
                    stopIndex =
                            Math.max(0, Math.min(m.queueLength, Math.round((k.clientX + A) / a.songWidth)));
                    guideLeft = stopIndex * a.songWidth + x - n.width() / 2;
                    x = function() {
                        var F = (new Date).valueOf();
                        if (!m.queueAutoScrollLast || F - m.queueAutoScrollLast >= a.autoScrollWaitDuration) {
                            m.queueAutoScrollLast = F;
                            v = Math.max(0, A - u);
                            g.scrollLeft(v);
                            a.gsQueue.updateScrollbar()
                        }
                    };
                    var C = function() {
                        var F = (new Date).valueOf();
                        if (!m.queueAutoScrollLast || F - m.queueAutoScrollLast >= a.autoScrollWaitDuration) {
                            m.queueAutoScrollLast = F;
                            v = Math.min(c.width(), A + u);
                            g.scrollLeft(v);
                            a.gsQueue.updateScrollbar()
                        }
                    };
                    if (o.offset().left + 200 > k.clientX) {
                        x();
                        clearInterval(m.queueAutoScrollInterval);
                        m.queueAutoScrollInterval = setInterval(x, a.autoScrollWaitDuration)
                    } else if (o.width() - 200 < k.clientX) {
                        C();
                        clearInterval(m.queueAutoScrollInterval);
                        m.queueAutoScrollInterval = setInterval(C, a.autoScrollWaitDuration)
                    } else {
                        clearInterval(m.queueAutoScrollInterval);
                        m.queueAutoScrollInterval = false
                    }
                    if (stopIndex > q)guideLeft += a.activeSongWidth - a.songWidth;
                    n.css("left", guideLeft);
                    n.show()
                } else {
                    clearInterval(m.queueAutoScrollInterval);
                    m.queueAutoScrollInterval = false;
                    n.hide()
                }
            }

            var c = $("#queue_list"),g = $("#queue_list_window"),h = $("#queue");
            $footer = $("#footer");
            c.bind("draginit",
                    function(k, m) {
                        var n = $(k.target).closest(".queue-item");
                        if (n.length === 0)return false;
                        m.draggedQueueItem = n;
                        m.proxyOffsetX = k.clientX - n.offset().left;
                        m.proxyOffsetY = k.clientY - n.offset().top
                    }).bind("dragstart",
                    function(k, m) {
                        m.draggedItems = [GS.Models.Song.getOneFromCache($(m.draggedQueueItem).find(".queueSong").attr("rel"))];
                        m.draggedItemsType = "song";
                        m.draggedItemSource =
                                "queue";
                        var n = parseInt(m.draggedQueueItem.attr("data-queuesongid"), 10);
                        if (n)m.deleteAction = {label:"SHORTCUTS_DELETE_NOW_PLAYING",method:function() {
                            GS.player.removeSongs(n)
                        }};
                        $.publish("gs.drag.start", m);
                        return $('<div class="queue-item-drag size-' + GS.player.queueSize + '" style="position:absolute; z-index: 99999;"><div class="status"></div></div>').append($(m.draggedQueueItem).clone()).appendTo("body").mousewheel(_.globalDragProxyMousewheel)
                    }).bind("drag",
                    function(k, m) {
                        m.clientX = k.clientX;
                        m.clientY =
                                k.clientY;
                        $(m.proxy).css("top", k.clientY - m.proxyOffsetY).css("left", k.clientX - m.proxyOffsetX);
                        var n = false,o = false;
                        _.forEach(m.drop, function(q) {
                            $.isFunction(q.updateDropOnDrag) && q.updateDropOnDrag(k, m);
                            if (!n)if ($(q).within(k.clientX, k.clientY).length > 0)if ($(q).data("ignoreForOverDrop"))o = true; else {
                                o = false;
                                n = true
                            }
                        });
                        o || (n ? $(m.proxy).addClass("valid").removeClass("invalid") : $(m.proxy).addClass("invalid").removeClass("valid"))
                    }).bind("dragend", function(k, m) {
                        $(m.proxy).remove();
                        GS.getGuts().gaTrackEvent("player",
                                "dragSuccess");
                        $.publish("gs.drag.end", m)
                    });
            $footer.bind("dropinit",
                    function() {
                        this.updateDropOnDrag = b
                    }).bind("dropstart",
                    function(k, m) {
                        if (!m.draggedItems) {
                            this.updateDropOnDrag = null;
                            return false
                        }
                        m.draggedItemsType = m.draggedItemsType || _.guessDragType(m.draggedItems);
                        $(".queue-item").length && m.draggedItemsType !== "station" && $("<div id='queue_songGuide'/>").addClass("size_" + GS.player.queueSize).css({position:"absolute",zIndex:"99998",height:$(".queue-item").outerHeight(true),width:10,top:$(".queue-item").offset().top +
                                5}).hide().appendTo("body")
                    }).bind("dropend",
                    function(k, m) {
                        $("#queue_songGuide").remove();
                        clearInterval(m.queueAutoScrollInterval)
                    }).bind("drop", function(k, m) {
                        $(this).offset();
                        var n = $footer.within(k.clientX, k.clientY).length > 0;
                        h.within(k.clientX, k.clientY);
                        var o = a.activeSongWidth - a.songWidth;
                        o = $("#queue_list_window").scrollLeft() - 10 - (k.clientX > parseInt($("#queue_list .queue-item-active").css("left"), 10) + a.activeSongWidth ? o : 0);
                        o = Math.max(0, Math.min(m.queueLength, Math.round((k.clientX + o) / a.songWidth)));
                        if (m.draggedItemSource == "queue") {
                            if (!($(".queue-item", c).length < 2)) {
                                queueSongID = m.draggedQueueItem.find(".queueSong").attr("id");
                                a.moveSongsTo([queueSongID], o)
                            }
                        } else {
                            var q = [],v,x,A,u;
                            if (n)if (!(k.clientX === 0 && k.layerX === 0 && k.offsetX === 0 && k.screenX === 0)) {
                                m.draggedItemsType = m.draggedItemsType || _.guessDragType(m.draggedItems);
                                switch (m.draggedItemsType) {
                                    case "song":
                                        v = [];
                                        for (A = 0; A < m.draggedItems.length; A++)v.push(m.draggedItems[A].SongID);
                                        q.push({songIDs:v,context:m.draggedItemsContext});
                                        var C,F = [],H = [];
                                        n = $("#grid");
                                        if (n.controller()) {
                                            var G = n.controller().dataView.rows;
                                            $('#grid .slick-row.selected[id!="showQueue"]').each(function(D, w) {
                                                C = parseInt($(w).attr("row"), 10);
                                                if (!isNaN(C)) {
                                                    F.push(C + 1);
                                                    var y = G[C].ppVersion;
                                                    y && H.push(y)
                                                }
                                            })
                                        }
                                        n = {ranks:F,songIDs:v};
                                        if (H.length > 0)n.ppVersions = H.join();
                                        GS.getGuts().logMultiSongDrag("OLSongsDraggedToQueue", n);
                                        break;
                                    case "album":
                                        for (A = 0; A < m.draggedItems.length; A++) {
                                            v = [];
                                            m.draggedItems[A].getSongs(function(D) {
                                                        D.sort(GS.Models.Album.defaultSongSort);
                                                        for (u = 0; u < D.length; u++)v.push(D[u].SongID)
                                                    },
                                                    null, true, {async:false});
                                            q.push({songIDs:v,context:new GS.Models.PlayContext(GS.player.PLAY_CONTEXT_ALBUM, m.draggedItems[A])})
                                        }
                                        break;
                                    case "artist":
                                        for (A = 0; A < m.draggedItems.length; A++) {
                                            v = [];
                                            m.draggedItems[A].getSongs(function(D) {
                                                D.sort(GS.Models.Artist.defaultSongSort);
                                                for (u = 0; u < D.length; u++)v.push(D[u].SongID)
                                            }, null, {async:false});
                                            q.push({songIDs:v,context:new GS.Models.PlayContext(GS.player.PLAY_CONTEXT_ARTIST, m.draggedItems[A])})
                                        }
                                        break;
                                    case "playlist":
                                        for (A = 0; A < m.draggedItems.length; A++) {
                                            v = [];
                                            m.draggedItems[A].getSongs(function(D) {
                                                for (u =
                                                             0; u < D.length; u++)v.push(D[u].SongID)
                                            }, null, false, {async:false});
                                            q.push({songIDs:v,context:new GS.Models.PlayContext(GS.player.PLAY_CONTEXT_PLAYLIST, m.draggedItems[A])})
                                        }
                                        break;
                                    case "user":
                                        for (A = 0; A < m.draggedItems.length; A++) {
                                            v = [];
                                            m.draggedItems[A].getFavoritesByType("Songs", function(D) {
                                                _.forEach(D, function(w) {
                                                    v.push(w.SongID)
                                                })
                                            }, null, {async:false});
                                            q.push({songIDs:v,context:new GS.Models.PlayContext(GS.player.PLAY_CONTEXT_USER, m.draggedItems[A])})
                                        }
                                        break;
                                    case "station":
                                        GS.player.setAutoplay(true, m.draggedItems[0].StationID);
                                        return;
                                    default:
                                        console.error("queue drop, invalid drag type", m.draggedItemsType);
                                        return
                                }
                                x = h.within(k.clientX, k.clientY).length > 0 || a.getCurrentQueue().songs.length > 0 ? false : true;
                                for (A = 0; A < q.length; A++) {
                                    v = q[A].songIDs;
                                    n = _.orEqual(q[A].context, new GS.Models.PlayContext);
                                    a.addSongsToQueueAt(v, o, x, n);
                                    o += v.length;
                                    x = false
                                }
                                GS.getGuts().gaTrackEvent("player", "dropSuccess")
                            }
                        }
                    })
        },addQueueSeek:function() {
            this.seek = $("#seeking_wrapper");
            this.scrubber = $("#seeking_wrapper .scrubber").addClass("ui-slider-handle").supersleight();
            this.seek.slider({disabled:true,max:1E3,start:function() {
                GS.player.SCRUB_LOCK = true
            },stop:function() {
                GS.player.SCRUB_LOCK = false
            },change:function(b, c) {
                var g = c.value / 1E3,h = a.player.getPlaybackStatus();
                a.seekTo(g * h.duration)
            }})
        },addShortcuts:function() {
            a.volumeSliderTimeout = null;
            a.volumeSliderDuration = 300;
            $(document).bind("keyup", "space",
                    function(b) {
                        $(b.target).is("button") && b.preventDefault()
                    }).bind("keydown", "space",
                    function(b) {
                        if (!($(b.target).is("input,textarea,select") && $(b.target).val().length >
                                0)) {
                            a.togglePlayPause();
                            GS.getGuts().gaTrackEvent("player", "playPauseShortcut");
                            return false
                        }
                    }).bind("keydown", "ctrl+right",
                    function(b) {
                        if (!($(b.target).is("input,textarea,select") && $(b.target).val().length > 0)) {
                            a.nextSong();
                            GS.getGuts().gaTrackEvent("player", "nextShortcut");
                            return false
                        }
                    }).bind("keydown", "meta+right",
                    function(b) {
                        if (!($(b.target).is("input,textarea,select") && $(b.target).val().length > 0)) {
                            a.nextSong();
                            GS.getGuts().gaTrackEvent("player", "nextShortcut");
                            return false
                        }
                    }).bind("keydown",
                    "ctrl+left",
                    function(b) {
                        if (!($(b.target).is("input,textarea,select") && $(b.target).val().length > 0)) {
                            a.previousSong();
                            GS.getGuts().gaTrackEvent("player", "prevShortcut");
                            return false
                        }
                    }).bind("keydown", "meta+left",
                    function(b) {
                        if (!($(b.target).is("input,textarea,select") && $(b.target).val().length > 0)) {
                            a.previousSong();
                            GS.getGuts().gaTrackEvent("player", "prevShortcut");
                            return false
                        }
                    }).bind("keydown", "ctrl+up",
                    function(b) {
                        if (!($(b.target).is("input,textarea,select") && $(b.target).val().length > 0)) {
                            a.setVolume(Math.min(100,
                                    a.getVolume() + 5));
                            $("#volumeSlider").slider("value", a.getVolume());
                            $("#volumeControl").show();
                            clearTimeout(a.volumeSliderTimeout);
                            a.volumeSliderTimeout = setTimeout(function() {
                                $("#volumeControl").hide()
                            }, a.volumeSliderDuration);
                            GS.getGuts().gaTrackEvent("player", "volumeUpShortcut", a.getVolume());
                            return false
                        }
                    }).bind("keydown", "meta+up",
                    function(b) {
                        if (!($(b.target).is("input,textarea,select") && $(b.target).val().length > 0)) {
                            a.setVolume(Math.min(100, a.getVolume() + 5));
                            $("#volumeSlider").slider("value", a.getVolume());
                            $("#volumeControl").show();
                            clearTimeout(a.volumeSliderTimeout);
                            a.volumeSliderTimeout = setTimeout(function() {
                                $("#volumeControl").hide()
                            }, a.volumeSliderDuration);
                            GS.getGuts().gaTrackEvent("player", "volumeUpShortcut", a.getVolume());
                            return false
                        }
                    }).bind("keydown", "ctrl+down",
                    function(b) {
                        if (!($(b.target).is("input,textarea,select") && $(b.target).val().length > 0)) {
                            a.setVolume(Math.max(0, a.getVolume() - 5));
                            $("#volumeSlider").slider("value", a.getVolume());
                            $("#volumeControl").show();
                            clearTimeout(a.volumeSliderTimeout);
                            a.volumeSliderTimeout = setTimeout(function() {
                                $("#volumeControl").hide()
                            }, a.volumeSliderDuration);
                            GS.getGuts().gaTrackEvent("player", "volumeDownShortcut", a.getVolume());
                            return false
                        }
                    }).bind("keydown", "meta+down", function(b) {
                        if (!($(b.target).is("input,textarea,select") && $(b.target).val().length > 0)) {
                            a.setVolume(Math.max(0, a.getVolume() - 5));
                            $("#volumeSlider").slider("value", a.getVolume());
                            $("#volumeControl").show();
                            clearTimeout(a.volumeSliderTimeout);
                            a.volumeSliderTimeout = setTimeout(function() {
                                        $("#volumeControl").hide()
                                    },
                                    a.volumeSliderDuration);
                            GS.getGuts().gaTrackEvent("player", "volumeDownShortcut", a.getVolume());
                            return false
                        }
                    })
        },addVolumeSlider:function() {
            var b = ["off","one","two","three","four","five"],c = function(g, h) {
                var k = _.orEqual(Math.ceil(h.value / 20), 5);
                k = b[k];
                $("#player_volume").attr("class", "player_control main_asset " + k);
                h.value == 0 && a.getIsMuted() ? $("#player_volume").addClass("muted") : a.setVolume(h.value)
            };
            $("#volumeSlider").slider({orientation:"vertical",range:"min",min:0,max:100,slide:c,change:c})
        },addQueueResize:function() {
            var b =
                    this;
            $("#player_queue").resizable({handles:{s:$("#player_queue_resize")},minHeight:0,maxHeight:185,animate:false,distance:10,iframeFix:true,resize:function() {
                $("#deselector").select();
                $("#queue_list_window").hide();
                b.gsQueue && b.gsQueue.setDisabled(true);
                GS.resize()
            },stop:function(c, g) {
                var h = g.size.height - 30;
                $("#queue_list_window").show();
                if (h > 145)b.setQueue("l"); else if (h > 100)b.setQueue("m"); else h > 15 ? b.setQueue("s") : b.setQueue("off");
                $("#player_queue").height("auto").width("auto");
                GS.resize()
            }})
        },
        ".queueSong a.play click":function(b, c) {
            c.stopImmediatePropagation();
            var g = a.getCurrentQueue(true);
            if (g && g.activeSong && b.attr("rel") == g.activeSong.queueSongID)if (a.isPlaying)a.pauseSong(); else a.isPaused ? a.resumeSong() : a.playSong(g.activeSong.queueSongID); else a.playSong(b.attr("rel"));
            return false
        },".queueSong a.remove click":function(b, c) {
            c.stopImmediatePropagation();
            var g = a.getCurrentQueue().activeSong,h = a.getSongDetails(a.getCurrentQueue().queueID, b.parents(".queueSong").attr("id"))[0];
            a.removeSongs([h.queueSongID]);
            a.queue = false;
            a.queue = a.getCurrentQueue();
            a.updateQueueWidth();
            a.gsQueue.setItems(a.queue.songs);
            if (a.queue.activeSong)a.gsQueue.setActive(a.queue.activeSong.index, false); else g && g.index && g.index > 0 && a.gsQueue.setActive(g.index - 1, false);
            GS.getGuts().gaTrackEvent("player", "removeSong", h.SongID);
            return false
        },".queueSong a.add click":function(b, c) {
            c.stopImmediatePropagation();
            var g = a.getCurrentQueue(),h = b.is(".inLibrary"),k = b.parents(".queueSong").attr("id");
            g = a.getSongDetails(g.queueID, [k])[0];
            if (a.currentSong &&
                    a.currentSong.queueSongID === g.queueSongID)g = a.currentSong;
            if (h) {
                b.removeClass("inLibrary").removeClass("isFavorite");
                GS.user.removeFromLibrary(g.SongID);
                GS.getGuts().logEvent("playerRemoveFromLibrary", {songID:g.SongID})
            } else {
                b.addClass("inLibrary");
                GS.user.addToLibrary(g.SongID);
                GS.getGuts().logEvent("playerAddToLibrary", {songID:g.SongID})
            }
            return false
        },".queueSong a.favorite click":function(b, c) {
            c.stopImmediatePropagation();
            var g = a.getCurrentQueue(),h = b.is(".isFavorite"),k = b.parents(".queueSong").attr("id");
            g = a.getSongDetails(g.queueID, [k])[0];
            if (a.currentSong && a.currentSong.queueSongID === g.queueSongID)g = a.currentSong;
            if (h) {
                b.removeClass("isFavorite");
                GS.user.removeFromSongFavorites(g.SongID);
                GS.getGuts().logEvent("playerRemoveFromSongFavorites", {songID:g.SongID})
            } else {
                b.addClass("isFavorite");
                GS.user.addToSongFavorites(g.SongID);
                GS.getGuts().logEvent("playerAddToSongFavorites", {songID:g.SongID})
            }
            return false
        },".queueSong a.options click":function(b, c) {
            var g = this.getCurrentQueue(),h = b.parents(".queueSong").attr("id");
            g = this.getSongDetails(g.queueID, [h])[0];
            var k = {isQueue:true,flagSongCallback:function(m) {
                GS.player.flagSong(h, m)
            },voteSongCallback:function(m) {
                GS.player.voteSong(h, m)
            }};
            if ($("div.qsid" + h).is(":visible")) {
                $("div.qsid" + h).hide();
                b.removeClass("active-context")
            } else {
                b.addClass("active-context").jjmenu(c, g.getContextMenu(k), null, {xposition:"auto",yposition:"top",orientation:"top",show:"show",className:"queuemenu qsid" + h,keepState:b});
                GS.getGuts().gaTrackEvent("player", "songMenu", g.SongID)
            }
        },".queueSong .smile click":function(b, c) {
            c.stopImmediatePropagation();
            console.log("player.smile click", b, c);
            var g = b.parents(".queueSong").attr("id");
            b.siblings(".frown").removeClass("active");
            if (b.is(".active")) {
                this.voteSong(g, 0);
                b.removeClass("active");
                GS.getGuts().gaTrackEvent("player", "unsmile", b.parents(".queueSong").attr("id"));
                this.trackAutoplayEvent("unsmile")
            } else {
                this.voteSong(g, 1);
                b.addClass("active");
                GS.getGuts().gaTrackEvent("player", "smile", b.parents(".queueSong").attr("id"));
                this.trackAutoplayEvent("smile")
            }
            return false
        },
        ".queueSong .frown click":function(b, c) {
            c.stopImmediatePropagation();
            console.log("player.frown click", b.get(), c);
            var g = b.parents(".queueSong").attr("id");
            b.siblings(".smile").removeClass("active");
            if (b.is(".active")) {
                this.voteSong(g, 0);
                b.removeClass("active");
                GS.getGuts().gaTrackEvent("player", "unfrown", b.parents(".queueSong").attr("id"));
                this.trackAutoplayEvent("unfrown")
            } else {
                this.voteSong(g, -1);
                b.addClass("active");
                GS.getGuts().gaTrackEvent("player", "frown", b.parents(".queueSong").attr("id"));
                this.trackAutoplayEvent("frown")
            }
            return false
        },".currentSongLink, a.queueSong_name click":function(b, c) {
            c.stopImmediatePropagation();
            if (!$(c.target).is("a[href]")) {
                var g = b.attr("rel"),h = GS.Models.Song.getOneFromCache(g);
                if (h = h && $.isFunction(h.toUrl) ? h.toUrl() : false) {
                    location.hash = h;
                    GS.getGuts().gaTrackEvent("player", "songItemLink", g)
                }
                return false
            }
        },".queueSong contextmenu":function(b, c) {
            var g = GS.Models.Song.getOneFromCache(b.attr("rel")),h = b.attr("id");
            b.jjmenu(c, g.getContextMenu({isQueue:true,flagSongCallback:function(k) {
                GS.player.flagSong(h,
                        k)
            },voteSongCallback:function(k) {
                GS.player.voteSong(h, k)
            }}), null, {xposition:"mouse",yposition:"mouse",show:"show",className:"queuemenu"});
            GS.getGuts().gaTrackEvent("player", "songMenu", g.SongID)
        },"#playerDetails_nowPlaying_options click":function(b, c) {
            var g = $("#playerDetails_nowPlaying").attr("rel"),h = this.getCurrentSong().queueSongID,k = GS.Models.Song.getOneFromCache(g),m = {isQueue:true,flagSongCallback:function(n) {
                GS.player.flagSong(h, n)
            },voteSongCallback:function(n) {
                GS.player.voteSong(h, n)
            }};
            if (b.hasClass("active-context")) {
                $(".jjplayerNowPlaying").hide();
                b.removeClass("active-context")
            } else {
                b.addClass("active-context").jjmenu(c, k.getContextMenu(m), null, {xposition:"left",yposition:"top",orientation:"top",show:"show",className:"queuemenu jjplayerNowPlaying",keepState:b});
                GS.getGuts().gaTrackEvent("player", "nowPlayingMenu", g)
            }
        },togglePlayPause:function() {
            var b = this.player.getPlaybackStatus();
            if (b) {
                switch (b.status) {
                    case this.PLAY_STATUS_NONE:
                    case this.PLAY_STATUS_FAILED:
                    case this.PLAY_STATUS_COMPLETED:
                    default:
                        b.activeSong && this.playSong(b.activeSong.queueSongID);
                        break;
                    case this.PLAY_STATUS_INITIALIZING:
                    case this.PLAY_STATUS_LOADING:
                        this.stopSong();
                        break;
                    case this.PLAY_STATUS_PLAYING:
                    case this.PLAY_STATUS_BUFFERING:
                        this.pauseSong();
                        break;
                    case this.PLAY_STATUS_PAUSED:
                        this.resumeSong();
                        break
                }
                $.publish("gs.player.queue.change")
            }
        },"#player_play_pause click":function() {
            this.togglePlayPause();
            return false
        },"#player_previous click":function() {
            this.previousSong();
            return false
        },"#player_next click":function() {
            this.nextSong();
            return false
        },"#player_shuffle click":function(b) {
            if (!a.queue.autoplayEnabled) {
                b.toggleClass("active");
                b = b.is(".active") ? true : false;
                a.setShuffle(b);
                return false
            }
        },"#player_loop click":function(b) {
            var c;
            if (b.is(".none")) {
                c = a.REPEAT_ALL;
                b.removeClass("none").addClass("all").addClass("active")
            } else if (b.is(".all")) {
                c = a.REPEAT_ONE;
                b.removeClass("all").addClass("one").addClass("active")
            } else {
                c = a.REPEAT_NONE;
                b.removeClass("one").addClass("none").removeClass("active")
            }
            a.setRepeat(c);
            return false
        },"#player_crossfade click":function(b) {
            if (GS.user.UserID > 0 && GS.user.IsPremium) {
                b.toggleClass("active");
                b = b.is(".active") ?
                        true : false;
                a.setCrossfadeEnabled(b)
            } else GS.getLightbox().open("vipOnlyFeature", {callback:this.callback(function() {
                this.setCrossfadeEnabled(true)
            })});
            return false
        },"#player_fullscreen click":function() {
            return false
        },"#player_volume click":function(b) {
            console.log("player_volume toggle", this.getIsMuted());
            if (this.getIsMuted()) {
                this.setIsMuted(false);
                $(b).removeClass("muted");
                $("#volumeSlider").slider("value", a.player.getVolume())
            } else {
                this.setIsMuted(true);
                $(b).addClass("muted");
                $("#volumeSlider").slider("value",
                        0)
            }
            return false
        },"#player_volume mouseenter":function() {
            clearTimeout(this.volumeSliderTimeout);
            $("#volumeControl").show();
            return false
        },"#player_volume mouseleave":function() {
            clearTimeout(this.volumeSliderTimeout);
            this.volumeSliderTimeout = setTimeout(this.callback(function() {
                $("#volumeControl").hide()
            }), this.volumeSliderDuration);
            return false
        },"#volumeControl mouseenter":function() {
            clearTimeout(this.volumeSliderTimeout);
            return false
        },"#volumeControl mouseleave":function() {
            clearTimeout(this.volumeSliderTimeout);
            if (this.isMouseDown) {
                var b = this,c = function() {
                    $("body").unbind("mouseup", c);
                    $("body").unbind("mouseleave", c);
                    b.isMouseDown = 0;
                    b.volumeSliderTimeout = setTimeout(b.callback(function() {
                        $("#volumeControl").hide()
                    }), b.volumeSliderDuration)
                };
                $("body").bind("mouseup", c);
                $("body").bind("mouseleave", c)
            } else this.volumeSliderTimeout = setTimeout(this.callback(function() {
                $("#volumeControl").hide()
            }), this.volumeSliderDuration);
            return false
        },isMouseDown:0,mousedown:function() {
            this.isMouseDown = 1
        },mouseup:function() {
            this.isMouseDown =
                    0
        },"#queue_load_button click":function(b, c) {
            this.getCurrentQueue(true);
            var g = this,h = [],k;
            if (GS.user.favorites.songs) {
                k = _.toArrayID(GS.user.favorites.songs);
                k.length && h.push({title:$.localize.getString("QUEUE_LOAD_FAVORITES"),customClass:"stations jj_menu_item_hasIcon jj_menu_item_favorites",action:{type:"fn",callback:function() {
                    GS.player.addSongsToQueueAt(k)
                }}})
            }
            var m = GS.Models.Playlist.getPlaylistsMenu([], function(n) {
                var o = function() {
                    var q = [],v = new GS.Models.PlayContext(GS.player.PLAY_CONTEXT_PLAYLIST,
                            n);
                    n.getSongs(function(x) {
                        for (j = 0; j < x.length; j++)q.push(x[j].SongID);
                        GS.player.addSongsToQueueAt(q, g.INDEX_REPLACE, true, v)
                    }, null, false, {async:false})
                };
                if (GS.player.queue && GS.player.queue.songs && GS.player.queue.songs.length > 0) {
                    GS.getLightbox().close();
                    GS.getLightbox().open({type:"playlistClearQueue",view:{header:"POPUP_LOAD_PLAYLIST_TITLE",message:"POPUP_LOAD_PLAYLIST_MESSAGE",buttonsLeft:[
                        {label:"CANCEL",className:"close"}
                    ],buttonsRight:[
                        {label:"POPUP_LOAD_PLAYLIST_BTN",className:"submit"}
                    ]},callbacks:{".submit":function() {
                        o();
                        GS.getGuts().logEvent("playlistOverwriteQueue", {overwrite:1})
                    }}});
                    GS.getGuts().logEvent("playlistOverwriteQueue", {overwrite:0})
                } else o()
            }, true, false);
            m.length > 0 && h.push({title:$.localize.getString("QUEUE_LOAD_PLAYLIST"),customClass:"playlist jj_menu_item_hasIcon jj_menu_item_playlist",type:"sub",src:m});
            h.push({title:$.localize.getString("QUEUE_LOAD_STATION"),customClass:"stations jj_menu_item_hasIcon jj_menu_item_station",type:"sub",src:GS.Models.Station.getStationsStartMenu()});
            if (b.hasClass("active-context")) {
                $(".jjQueueMenu").hide();
                b.removeClass("active-context")
            } else {
                b.addClass("active-context").jjmenu(c, h, null, {xposition:"right",yposition:"top",orientation:"top",spill:"left",show:"show",className:"radiomenu jjQueueMenu",keepState:b});
                GS.getGuts().gaTrackEvent("player", "queueLoadMenu")
            }
        },"#queue_save_button click":function(b, c) {
            var g = this.getCurrentQueue(true),h = [],k = [];
            if (g && g.songs && g.songs.length > 0)h = [
                {title:$.localize.getString("CONTEXT_ADD_TO_LIBRARY"),customClass:"addLibrary jj_menu_item_hasIcon jj_menu_item_music",action:{type:"fn",
                    callback:function() {
                        var o,q = [];
                        for (o = 0; o < g.songs.length; o++) {
                            q.push(g.songs[o].SongID);
                            GS.getGuts().logEvent("playerAddToLibrary", {songID:g.songs[o].SongID})
                        }
                        GS.user.addToLibrary(q)
                    }}},
                {customClass:"separator"}
            ];
            if (g && g.songs && g.songs.length > 0) {
                _.forEach(g.songs, function(o) {
                    k.push(o.SongID)
                });
                var m = GS.Models.Playlist.getPlaylistsMenu(k, function(o) {
                    GS.getLightbox().open({type:"confirm",view:{header:"POPUP_ARE_YOU_SURE",message:"POPUP_ARE_YOU_SURE_OVERWRITE_PLAYLIST",buttonsLeft:[
                        {label:"CANCEL",className:"close"}
                    ],
                        buttonsRight:[
                            {label:"OK",className:"submit"}
                        ]},callbacks:{".submit":function() {
                        o.overwriteWithSongs(k, true)
                    }}})
                }, false, true),n = GS.Models.Playlist.getPlaylistsMenu(k, function(o) {
                    o.addSongs(k, o.length, true)
                }, false, false);
                h.push({title:$.localize.getString("QUEUE_SAVE_PLAYLIST"),customClass:"jj_menu_item_hasIcon jj_menu_item_replace_playlist saveQueue",type:"sub",src:m});
                n.length && h.push({title:$.localize.getString("QUEUE_ADD_TO_PLAYLIST"),customClass:"saveQueue jj_menu_item_hasIcon jj_menu_item_add_playlist",
                    type:"sub",src:n});
                h.length && h.push({customClass:"separator"});
                h.push({title:$.localize.getString("QUEUE_EMBED_SONGS"),customClass:"jj_menu_item_hasIcon jj_menu_item_share_widget shareSongs",action:{type:"fn",callback:function() {
                    var o,q = [];
                    for (o = 0; o < g.songs.length; o++)q.push(g.songs[o].SongID);
                    GS.getLightbox().open("share", {service:"widget",type:"manySongs",id:q})
                }}})
            }
            if (b.hasClass("active-context")) {
                $(".jjQueueMenu").hide();
                b.removeClass("active-context")
            } else {
                b.addClass("active-context").jjmenu(c,
                        h, null, {xposition:"right",yposition:"top",orientation:"top",spill:"left",show:"show",className:"radiomenu jjQueueMenu",keepState:b});
                GS.getGuts().gaTrackEvent("player", "queueSaveMenu")
            }
        },"#player_options click":function(b, c) {
            var g = this.getCurrentQueue(),h = this,k = [],m = [
                {title:$.localize.getString("QUEUE_LARGE"),customClass:!GS.player.queueClosed && GS.player.queueSize == "l" ? "jj_menu_item_hasIcon jj_menu_item_tick" : "jj_menu_item_hasIcon jj_menu_item_blank",action:{type:"fn",callback:function() {
                    GS.player.setQueue("l")
                }}},
                {title:$.localize.getString("QUEUE_NORMAL"),customClass:!GS.player.queueClosed && GS.player.queueSize == "m" ? "jj_menu_item_hasIcon jj_menu_item_tick" : "jj_menu_item_hasIcon jj_menu_item_blank",action:{type:"fn",callback:function() {
                    GS.player.setQueue("m")
                }}},
                {title:$.localize.getString("QUEUE_SMALL"),customClass:!GS.player.queueClosed && GS.player.queueSize == "s" ? "jj_menu_item_hasIcon jj_menu_item_tick" : "jj_menu_item_hasIcon jj_menu_item_blank",action:{type:"fn",callback:function() {
                    GS.player.setQueue("s")
                }}},
                {title:$.localize.getString("QUEUE_HIDE"),customClass:GS.player.queueClosed ? "jj_menu_item_hasIcon jj_menu_item_tick" : "jj_menu_item_hasIcon jj_menu_item_blank",action:{type:"fn",callback:function() {
                    GS.player.setQueue("off")
                }}}
            ];
            k.push({title:$.localize.getString("QUEUE_SIZES"),type:"sub",customClass:"jj_menu_item_queue",src:m});
            if (g && g.songs && g.songs.length) {
                k.length && k.push({customClass:"separator"});
                k.push({title:$.localize.getString("PLAYER_SHOW_VISUALIZER"),customClass:"jj_menu_item_hasIcon jj_menu_item_visualizer",
                    action:{type:"fn",callback:function() {
                        if (GS.user.IsPremium)$("#lightbox .lbcontainer:visible").is(".gs_lightbox_visualizer") || GS.getLightbox().open("visualizer", {showPlayerControls:true}); else GS.getLightbox().open("vipOnlyFeature", {callback:h.callback(function() {
                            $("#lightbox .lbcontainer:visible").is(".gs_lightbox_visualizer") || GS.getLightbox().open("visualizer", {showPlayerControls:true})
                        })})
                    }}});
                h.videoModeEnabled ? k.push({title:$.localize.getString("PLAYER_DISABLE_VIDEO_MODE"),customClass:"jj_menu_item_hasIcon jj_menu_item_video",
                    action:{type:"fn",callback:function() {
                        h.disableVideoMode()
                    }}}) : k.push({title:$.localize.getString("PLAYER_ENABLE_VIDEO_MODE"),customClass:"jj_menu_item_hasIcon jj_menu_item_video",action:{type:"fn",callback:function() {
                    GS.user.IsPremium ? h.enableVideoMode() : GS.getLightbox().open("vipOnlyFeature", {callback:h.callback(function() {
                        this.enableVideoMode()
                    })})
                }}});
                h.powerModeEnabled ? k.push({title:$.localize.getString("PLAYER_DISABLE_POWER_MODE"),customClass:"jj_menu_item_hasIcon jj_menu_item_clock",action:{type:"fn",
                    callback:function() {
                        h.disablePowerMode()
                    }}}) : k.push({title:$.localize.getString("PLAYER_ENABLE_POWER_MODE"),customClass:"jj_menu_item_hasIcon jj_menu_item_clock",action:{type:"fn",callback:function() {
                    GS.user.IsPremium ? h.enablePowerMode() : GS.getLightbox().open("vipOnlyFeature", {callback:h.callback(function() {
                        this.enablePowerMode()
                    })})
                }}})
            }
            if (b.hasClass("active-context")) {
                $(".jjQueueMenu").remove();
                b.removeClass("active-context")
            } else {
                b.addClass("active-context").jjmenu(c, k, null, {xposition:"right",
                    yposition:"top",orientation:"top",spill:"left",show:"show",className:"radiomenu jjQueueMenu",keepState:b});
                GS.getGuts().gaTrackEvent("player", "queueSongMenu")
            }
        },showRadioStations:function() {
            GS.getLightbox().open({type:"radioStations",view:{header:"POPUP_START_RADIO_TITLE",messageHTML:'<p data-translate-text="POPUP_START_RADIO_NO_SONGS_MESSAGE">' + $.localize.getString("POPUP_START_RADIO_NO_SONGS_MESSAGE") + '</p><div id="grid" class="gs_grid radioStations"></div>',buttonsRight:[],buttonsLeft:[
                {label:"CLOSE",
                    className:"close"}
            ]},callbacks:{".close":function() {
                GS.getLightbox().close();
                return false
            }},loadCallback:function() {
                var b = GS.Models.Station.tagStations;
                $("#lightbox_content .radioStations").gs_grid(b, GS.Controllers.GridController.columns.station, {allowDragSort:false,allowDuplicates:false,disableMultiSelect:true,sortCol:"StationTitle",sortDir:true}, "station");
                GS.getLightbox().positionLightbox();
                $.subscribe("gs.player.autoplay.update", function(c) {
                    c && GS.getLightbox().close()
                })
            }})
        },"#player_radio_button, #player_radio_label click":function(b) {
            $(b);
            if (a.player && !a.player.getCurrentQueue().autoplayEnabled)if (a.player.getCurrentQueue().songs.length > 0) {
                a.player.setAutoplay(true);
                $("#player_radio_switch").stop().animate({left:25}, {duration:100,complete:function() {
                    $("#player_radio_button").addClass("active")
                }})
            } else this.showRadioStations(); else {
                a.player.setAutoplay(false);
                $("#player_radio_switch").stop().animate({left:0}, {duration:100,complete:function() {
                    $("#player_radio_button").removeClass("active")
                }})
            }
        },videoIndex:0,enableVideoMode:function() {
            this.videoModeEnabled =
                    true;
            this.showVideoLightbox();
            if (this.powerModeEnabled) {
                clearInterval(this.powerModeInterval);
                this.powerModeInterval = setInterval($(".lbcontainer.gs_lightbox_video").controller().callback("powerHourCheckVideoMode"), 1E3)
            }
            GS.getGuts().gaTrackEvent("player", "enableVideoMode")
        },disableVideoMode:function() {
            this.videoModeEnabled = false;
            this.hideVideoLightbox();
            this.playSong();
            this.powerModeEnabled && clearInterval(this.powerModeInterval);
            GS.getGuts().gaTrackEvent("player", "disableVideoMode")
        },showVideoLightbox:function() {
            var b =
                    this.currentSong;
            if (b) {
                GS.getLightbox().close();
                GS.getLightbox().open("video", {isLoading:true,isVideoMode:true,song:b,sidebarHeader:"POPUP_VIDEO_ALTERNATE"})
            } else {
                $.publish("gs.notification", {type:"error",message:$.localize.getString("NOTIF_FEATURE_REQUIREMENT_SONGS")});
                this.videoModeEnabled = false
            }
        },hideVideoLightbox:function() {
            $("div.lbcontainer.gs_lightbox_video").is(":visible") && GS.getLightbox().close()
        },togglePowerMode:function() {
            this.powerModeEnabled ? this.disablePowerMode() : this.enablePowerMode()
        },
        enablePowerMode:function() {
            this.powerModeEnabled = true;
            if (this.videoModeEnabled && $(".lbcontainer.video")) {
                clearInterval(this.powerModeInterval);
                this.powerModeInterval = setInterval($(".lbcontainer.gs_lightbox_video").controller().callback("powerHourCheckVideoMode"), 1E3)
            } else {
                var b = this.player.getPlaybackStatus();
                if (b)switch (b.status) {
                    case this.PLAY_STATUS_NONE:
                    case this.PLAY_STATUS_FAILED:
                    case this.PLAY_STATUS_COMPLETED:
                    case this.PLAY_STATUS_PAUSED:
                        if (b.activeSong) {
                            this.playSong(b.activeSong.queueSongID);
                            $.publish("gs.player.queue.change")
                        }
                        break
                }
            }
            $.publish("gs.player.feature.change");
            GS.getGuts().gaTrackEvent("player", "enablePowerMode")
        },disablePowerMode:function() {
            this.powerModeEnabled = false;
            this.videoModeEnabled && clearInterval(this.powerModeInterval);
            $.publish("gs.player.feature.change");
            GS.getGuts().gaTrackEvent("player", "disablePowerMode")
        },"#queue_clear_button click":function() {
            var b = this.getCurrentQueue();
            if (b.hasRestoreQueue)a.restoreQueue(); else if (b && b.songs && b.songs.length > 0) {
                a.clearQueue();
                a.setQueue("off", false)
            }
        },queueSongToHtml:function(b) {
            return function(c, g, h) {
                var k = "paused",m = [],n = a.getCurrentQueue(),o = "",q = c.fromLibrary ? "inLibrary" : "",v = c.isFavorite ? "isFavorite" : "",x = "",A = "";
                if (c.context.data && c.context.data.hasOwnProperty("CoverArtFilename"))c.CoverArtFilename = c.context.data.CoverArtFilename;
                if (n.activeSong && c.queueSongID === n.activeSong.queueSongID) {
                    o += " active";
                    if (a.isPlaying)k = ""
                }
                if (n.autoplayEnabled) {
                    if (c.autoplayVote === -1 || g === h - 1 && c.source !== "user")o += " suggestion";
                    if (c.autoplayVote ===
                            1 || c.autoplayVote === 0 && c.source === "user") {
                        x = "active";
                        A = ""
                    } else if (c.autoplayVote === -1) {
                        A = "active";
                        x = ""
                    }
                }
                m.push('<div id="', c.queueSongID, '" rel="', c.SongID, '" class="', o, ' queueSong">', '<a class="remove" title="', $.localize.getString("removeSong"), '"></a>', '<div class="albumart">', '<div class="radio_options ', n && n.autoplayEnabled ? "active" : "", '">', '<a class="smile ', x, '" title="', $.localize.getString("QUEUE_ITEM_SMILE"), '"></a>', '<a class="frown ', A, '" title="', $.localize.getString("QUEUE_ITEM_FROWN"),
                        '"></a>', "</div>", '<div class="song_options ', q, " ", v, '">', '<a class="collection ', v, ' textToggle" title="', $.localize.getString("QUEUE_ADD_SONG_FAVORITE_TITLE"), '"></a>', '<a class="options selectbox" title="', $.localize.getString("QUEUE_ITEM_OPTIONS"), '"></a>', "</div>", '<a class="play ', k, '" rel="', c.queueSongID, '"></a>', '<img src="', c.getImageURL(b == "l" ? 90 : 70), '" height="100%" width="100%" />', "</div>", '<a title="', _.cleanText(c.SongName), '" class="queueSong_name song ellipsis" rel="', c.SongID,
                        '">', _.cleanText(c.SongName), "</a>", '<a href="', _.cleanUrl(c.ArtistName, c.ArtistID, "artist"), '" title="', _.cleanText(c.ArtistName), '" class="queueSong_artist artist ellipsis">', _.cleanText(c.ArtistName), "</a>", "</div>");
                return m.join("")
            }
        },smallQueueSongToHtml:function(b, c, g) {
            var h = "paused",k = [],m = a.getCurrentQueue(),n = "",o = b.fromLibrary ? "inLibrary" : "",q = b.isFavorite ? "isFavorite" : "";
            if (b.context.data && b.context.data.hasOwnProperty("CoverArtFilename"))b.CoverArtFilename = b.context.data.CoverArtFilename;
            if (m.activeSong && b.queueSongID === m.activeSong.queueSongID) {
                n += " active";
                if (a.isPlaying)h = ""
            }
            if (m.autoplayEnabled)if (b.autoplayVote === -1 || c === g - 1 && b.source !== "user")n += " suggestion";
            k.push('<div id="', b.queueSongID, '" rel="', b.SongID, '" class="', n, ' queueSong small">', '<div class="albumart ', o, " ", q, '">', '<a class="play ', h, '" rel="', b.queueSongID, '"></a>', '<a class="collection ', q, ' textToggle" title="', $.localize.getString("QUEUE_ADD_SONG_FAVORITE_TITLE"), '"></a>', '<a class="options selectbox" title="',
                    $.localize.getString("QUEUE_ITEM_OPTIONS"), '"></a>', '<img src="', b.getImageURL(70), '" height="33" width="33" />', "</div>", '<a class="remove" title="', $.localize.getString("removeSong"), '"></a>', '<a title="', _.cleanText(b.SongName), '" class="queueSong_name song ellipsis" rel="', b.SongID, '">', _.cleanText(b.SongName), "</a>", '<a href="', _.cleanUrl(b.ArtistName, b.ArtistID, "artist"), '" title="', _.cleanText(b.ArtistName), '" class="queueSong_artist artist ellipsis">', _.cleanText(b.ArtistName), "</a>", "</div>");
            return k.join("")
        }})
})();
GS.Controllers.BaseController.extend("GS.Controllers.YoutubeController", {isGSSingleton:true}, {readyCallbacks:[],API_URL:"http://gdata.youtube.com/feeds/api/videos",DEV_KEY:"AI39si6SJVyxgw9MFbAdbXE-wbtZFdTl8qnY2UWX3dFA97c9PrcfAYDpqUh0iLeVEkurJsjUvDmObBWvLX-wmsy_kW8KHAgN-Q",APPLICATION_ID:"Grooveshark",lastError:null,init:function() {
    window.onYouTubePlayerReady = function(a) {
        var b = GS.getYoutube(),c = b.makeVideoObject($("#" + a)[0], a);
        c.play();
        if (b.readyCallbacks[a]) {
            b.readyCallbacks[a](c);
            delete b.readyCallbacks[a]
        }
    };
    this._super()
},attachPlayer:function(a, b, c, g, h) {
    var k = "videoVObj" + g,m = "http://www.youtube.com/v/" + a + "?version=3&enablejsapi=1&version=3&fs=1&playerapiid=" + k,n = {id:k,name:k,allowFullScreen:"true"};
    if (!a || _.notDefined(a))return false;
    b = b || 480;
    c = c || 385;
    if ($.isFunction(h))GS.getYoutube().readyCallbacks[k] = h;
    swfobject.embedSWF(m, g, b, c, "8", null, {}, {allowScriptAccess:"always",allowFullScreen:"true"}, n)
},makeVideoObject:function(a, b) {
    var c = {callbacks:[],addEvent:function(g, h) {
        if ($.isFunction(h)) {
            var k = "yt" +
                    g + b + Math.floor(Math.random() * 1001);
            window[k] = h;
            h = k;
            this.callbacks.push(k)
        }
        a.addEventListener(g, h)
    },play:function() {
        a.playVideo()
    },playVideoAt:function(g) {
        a.playVideoAt(g)
    },pause:function() {
        a.pauseVideo()
    },isPaused:function() {
        var g = this.getState();
        return g != 1 && g != 3
    },getState:function() {
        return a.getPlayerState()
    },stop:function() {
        a.stopVideo()
    },getCurrentTime:function() {
        return a.getCurrentTime()
    },getDuration:function() {
        return a.getDuration()
    },getVideoUrl:function() {
        return a.getVideoUrl()
    },getVolume:function() {
        return a.getVolume() /
                100
    },setVolume:function(g) {
        a.setVolume(g * 100)
    },loadVideoById:function(g) {
        a.loadVideoById(g);
        GS.getGuts().gaTrackEvent("youtube", "loadVideoById", g)
    },loadVideoByUrl:function(g) {
        a.loadVideoByUrl(g)
    }};
    $(a).parent().bind("remove", function() {
        try {
            c.callbacks && c.callbacks.length && _.forEach(c.callbacks, function(h) {
                window[h] = null
            })
        } catch(g) {
        }
    });
    return c
},searchCache:{},search:function(a, b, c, g, h) {
    a = $.trim(_.orEqual(a, ""));
    b = _.orEqual(b, 10);
    if ((!a || a == "") && h) {
        a = h.SongName.replace(/[\(\[][a-zA-Z0-9\s]+[\]\)]/g,
                "");
        a = h.ArtistName.toLowerCase() != "unknown" && h.ArtistName.toLowerCase() != "unknown artist" ? [h.ArtistName || "",a || ""].join(" - ") : a;
        a = $.trim(a)
    }
    if (!a) {
        $.isFunction(g) && g();
        return false
    }
    this.searchCache[a] && $.isFunction(c) && c(this.searchCache[a]);
    var k = "jQueryYoutube" + OAuth.nonce(10),m = {"max-results":b,orderBy:"relevance",safeSearch:"none",alt:"json-in-script",time:"all_time","start-index":1,q:a,callback:k,key:this.DEV_KEY,v:2};
    b = this.API_URL;
    OAuth.completeRequest({method:"GET",action:b,parameters:m},
            {consumerKey:this.APPLICATION_ID,consumerSecret:this.DEV_KEY});
    m = OAuth.getParameterMap(m);
    b = b + "?" + _.httpBuildQuery(m);
    $.ajax({url:b,success:this.callback("searchSuccess", c, g, a, h),error:this.callback("searchFailed", g),dataType:"jsonp",jsonp:false,jsonpCallback:k,cache:true});
    GS.getGuts().gaTrackEvent("youtube", "search", a)
},searchSuccess:function(a, b, c, g, h) {
    if (h.feed && h.feed.entry) {
        var k = [],m = {};
        _.forEach(h.feed.entry, function(n) {
            if (n.media$group && n.media$group.media$thumbnail) {
                m = {Author:"",Description:"",
                    Duration:0,Rating:0,LikeRatio:0,VideoID:"",Plays:0,URL:"",Title:"",Thumbnails:[]};
                if (n.author && n.author[0] && n.author[0].name && n.author[0].name.$t)m.Author = n.author[0].name.$t; else if (n.media$group.media$credit && n.media$group.media$credit.$t)m.Author = n.media$group.media$credit.$t;
                if (n.media$group.media$description && n.media$group.media$description.$t)m.Description = n.media$group.media$description.$t;
                if (n.media$group.yt$duration && n.media$group.yt$duration.seconds)m.Duration = parseInt(n.media$group.yt$duration.seconds);
                if (n.gd$rating && n.gd$rating.average)m.Rating = parseFloat(n.gd$rating.average);
                if (n.yt$rating && n.yt$rating.numLikes && n.yt$rating.numDislikes)m.LikeRatio = parseInt(n.yt$rating.numLikes) / parseInt(n.yt$rating.numDislikes);
                if (n.media$group.yt$videoid && n.media$group.yt$videoid.$t)m.VideoID = n.media$group.yt$videoid.$t; else if (n.id) {
                    var o = n.id.split(":");
                    m.VideoID = o[o.length - 1]
                }
                if (n.yt$statistics && n.yt$statistics.viewCount)m.Plays = parseInt(n.yt$statistics.viewCount);
                if (n.title && n.title.$t)m.Title = n.title.$t;
                if (n.link && n.link[0] && n.link.href)m.URL = n.link.href;
                _.forEach(n.media$group.media$thumbnail, function(q) {
                    if (q.yt$name)switch (q.yt$name) {
                        case "default":
                            m.Thumbnails.unshift(q);
                            return;
                        case "hqdefault":
                            m.Thumbnails.length && m.Thumbnails[0].yt$name == "default" ? m.Thumbnails.splice(1, 0, q) : m.Thumbnails.unshift(q);
                            return
                    }
                    m.Thumbnails.push(q)
                });
                m = GS.Models.Video.wrapYoutube(m);
                k.push(m)
            }
        });
        if (g)k = this.filterSearchResults(g, k);
        this.searchCache[c] = k;
        $.isFunction(a) && a(k)
    } else {
        this.lastError = h;
        $.isFunction(b) &&
        b(h)
    }
},filterSearchResults:function(a, b) {
    var c = [],g = "";
    if (a && a.ArtistName)g = a.ArtistName.match(/[a-z0-9]/gi).join("").toLowerCase();
    _.forEach(b, function(h, k) {
        if (h.VideoID && h.Author && h.Duration > 60) {
            h.weight = Math.floor(4.01 * (b.length - k));
            if (h.Author.toLowerCase().lastIndexOf("vevo") > -1)h.weight *= 9.7; else if (h.Author.toLowerCase().lastIndexOf("emimusic") > -1)h.weight *= 8.98;
            if (g)if (h.Author.toLowerCase().indexOf(g) > -1)h.weight *= 2.101;
            if (h.Author.toLowerCase().lastIndexOf("records") > -1)h.weight *= 2.209;
            var m = h.Title.toLowerCase();
            if (m.lastIndexOf("parody") > -1)h.weight *= 0.203; else if (m.lastIndexOf("official") > -1)h.weight *= 2.51;
            for (m = 0; m < c.length; m++)if (c[m].weight < h.weight) {
                c.splice(m, 0, h);
                return
            }
            c.push(h)
        }
    });
    return c
},searchFailed:function(a, b) {
    this.lastError = b;
    $.isFunction(a) && a(b)
},loadFloppyMusic:function() {
    var a = [];
    _.forEach([
        {Author:"sh4dowww90",Description:"Another useless device. Imperial march played by two floppy disk drives. Read the note about the next video: silent.org.pl Homepage: silent.org.pl Post in English: silent.org.pl Po polsku: silent.org.pl",
            VideoID:"yHJOz_y9rZE",Title:"Floppy music DUO - Imperial march",type:"youtube",duration:84,thumbnail:"http://i.ytimg.com/vi/yHJOz_y9rZE/default.jpg",width:480,height:385},
        {Author:"ToxicTripod0",Description:"Another attempt at playing midi on floppy drives",VideoID:"dmwLEf_2Tk8",Title:"Floppy Mario Theme",type:"youtube",duration:51,thumbnail:"http://i.ytimg.com/vi/dmwLEf_2Tk8/default.jpg",width:480,height:385},
        {Author:"Sammy1Am",Description:'My second multi-floppy song, as suggested by Neutrino. I\'m using an Arduino UNO hooked up to three drives (one 5.25" and two 3.5").',
            VideoID:"VJhvRQHNM1w",Title:"Floppy Kirby's Theme",type:"youtube",duration:82,thumbnail:"http://i.ytimg.com/vi/VJhvRQHNM1w/default.jpg",width:480,height:385},
        {Author:"CoolNapkins",Description:"Playing around with an old computer and the floppymidi driver for BeOS 1. Tetris 2. Super Mario 3. Zelda 4. Mr. Roboto 5. 1812 Overture",VideoID:"QkkrQ8xHJlM",Title:"The Floppy Music Machine",type:"youtube",duration:252,thumbnail:"http://i.ytimg.com/vi/QkkrQ8xHJlM/default.jpg",width:480,height:385},
        {Author:"Sammy1Am",
            Description:"Theme from Tetris as played on three floppy drives.",VideoID:"73Sie3yrcnE",Title:"Floppy Korobeiniki (Tetris Theme)",type:"youtube",duration:68,thumbnail:"http://i.ytimg.com/vi/73Sie3yrcnE/default.jpg",width:480,height:385}
    ], function(b) {
        a.push(GS.Models.Video.wrapYoutube(b))
    });
    GS.getLightbox().open("video", {videos:a})
},loadDubstep:function() {
    var a = GS.Models.Video.wrapYoutube({Author:"tobyharris100",Description:"",VideoID:"QbZhbZBK2ZY",Title:"How To Dance To Dubstep! Parrot",type:"youtube",
        duration:163,thumbnail:"http://i.ytimg.com/vi/QbZhbZBK2ZY/default.jpg",width:480,height:385});
    GS.getLightbox().open("video", {video:a})
}});
GS.Controllers.BaseController.extend("GS.Controllers.VimeoController", {isGSSingleton:true}, {f:null,API_URL:"http://vimeo.com/api/rest/v2/",API_KEY:"6bf5b02fd725f336e2587ee7feadcb42",API_SECRET:"247c4b613fcf18b5",init:function() {
    if (window.$f) {
        this.f = window.$f;
        window.$f = null
    }
    if (window.Froogaloop) {
        if (!this.f)this.f = window.Froogaloop;
        window.Froogaloop = null
    }
    this._super()
},attachPlayer:function(a, b, c, g, h) {
    if (this.f) {
        var k = "http://player.vimeo.com/video/" + a + "?api=1&player_id=videoVObj" + g + "&autoplay=1";
        if (!a ||
                _.notDefined(a))return false;
        b = b || 480;
        c = c || 385;
        a = $("<iframe />").width(b).height(c).attr("src", k).attr("id", "videoVObj" + g);
        $("#" + g).html(a);
        var m = this.makeVideoObject($("#videoVObj" + g)[0]);
        h && m.addEvent("ready", function() {
            h(m)
        });
        return m[0]
    }
},makeVideoObject:function(a) {
    var b = this.f(a);
    return{addEvent:function(c, g) {
        b.addEvent(c, g)
    },play:function() {
        b.api("play")
    },pause:function() {
        b.api("pause")
    },isPaused:function(c) {
        b.api("paused", c)
    },stop:function() {
        b.api("unload")
    },getCurrentTime:function(c) {
        b.api("getCurrentTime",
                c)
    },getVideoUrl:function(c) {
        b.api("getVideoUrl", c)
    }}
},searchCache:{},search:function(a, b, c) {
    if (!a || a == "")return false;
    this.searchCache[a] && $.isFunction(b) && b(this.searchCache[a]);
    var g = "jQueryVimeo" + OAuth.nonce(10),h = {per_page:10,query:a,method:"vimeo.videos.search",full_response:1,format:"jsonp",callback:g},k = this.API_URL;
    OAuth.completeRequest({method:"GET",action:k,parameters:h}, {consumerKey:this.API_KEY,consumerSecret:this.API_SECRET});
    h = OAuth.getParameterMap(h);
    k = k + "?" + _.httpBuildQuery(h);
    $.ajax({url:k,
        success:this.callback("searchSuccess", b, c, a),error:this.callback("searchFailed", c),dataType:"jsonp",jsonp:false,jsonpCallback:g,cache:true})
},searchSuccess:function(a, b, c, g) {
    if (g.videos && g.videos.video) {
        var h = [];
        _.forEach(g.videos.video, function(k) {
            h.push({Description:k.description || "",Duration:parseInt(k.duration),Height:parseInt(k.height),Width:parseInt(k.width),VideoID:k.id,Plays:parseInt(k.number_of_plays),Title:k.title || "",URL:"http://vimeo.com/" + k.id,Thumbnails:k.thumbnails.thumbnail})
        });
        this.searchCache[c] =
                h;
        $.isFunction(a) && a(h)
    } else {
        this.lastError = g;
        $.isFunction(b) && b(g)
    }
},searchFailed:function(a, b) {
    this.lastError = b;
    $.isFunction(a) && a(b)
}});
(function() {
    function a(k) {
        return"<span class='slick-column-name' data-translate-text='" + k.name + "'>" + $.localize.getString(k.name) + "</span>"
    }

    function b(k, m, n, o, q) {
        k = _.ucwords(o.name);
        m = $("#grid").controller();
        return q.IsVerified == 0.5 ? o.name == "ARTIST" ? m.filter.hasOwnProperty("onlyVerified") && !m.filter.onlyVerified ? '<div class="showMore showingMore" data-translate-text="SEARCH_RESULTS_SHOW_LESS">' + $.localize.getString("SEARCH_RESULTS_SHOW_LESS") + "</div>" : '<div class="showMore" data-translate-text="SEARCH_RESULTS_SHOW_MORE">' +
                $.localize.getString("SEARCH_RESULTS_SHOW_MORE") + "</div>" : "" : ['<a class="field" href="',o.name == "SONG" ? "javascript:_.redirectSong(" + q.SongID + ", event)" : o.name == "USER" ? _.cleanUrl(q.Name, q.UserID, "user") : o.name == "AUTHOR" ? _.cleanUrl(q.UserName, q.UserID, "user") : _.cleanUrl(q[k + "Name"], q[k + "ID"], o.name.toLowerCase()),'" class="ellipsis" title="',n,'">',n,"</a>"].join("")
    }

    function c(k, m, n) {
        return['<span class="filter field ellipsis" title="',n,'">',n,'</span><span class="arrow rowOption"></span>'].join("")
    }

    function g(k, m, n, o, q) {
        if (q.IsVerified == 0.5)return""; else {
            k = q.isFavorite ? " isFavorite" : "";
            m = q.fromLibrary ? " inLibrary" : "";
            o = q.fromLibrary ? "SONG_ROW_REMOVE_SONG_LIBRARY_TITLE" : "SONG_ROW_ADD_SONG_LIBRARY_TITLE";
            var v = q.isFavorite ? "SONG_ROW_REMOVE_SONG_FAVORITE_TITLE" : "SONG_ROW_ADD_SONG_FAVORITE_TITLE",x = GS.player.getCurrentQueue(),A = "SONG_ROW_ADD_SONG_PLAY_TITLE";
            if (x && x.songs && x.songs.length > 0)A = "SONG_ROW_ADD_SONG_ADD_TO_PLAYING_TITLE";
            return['<a class="play rowOption" data-translate-title="',A,'" title="',
                $.localize.getString(A),'" rel="',q.SongID,'"></a><div class="options ',k," ",m,'"><a class="rowOption favorite option',k,'" data-translate-title="',v,'" title="',$.localize.getString(v),'" rel="',q.SongID,'"></a><a class="rowOption library option',m,'" data-translate-title="',o,'" title="',$.localize.getString(o),'" rel="',q.SongID,'"></a><a class="rowOption more option grid_song_more',m,'" data-translate-title="OPTIONS" title="',$.localize.getString("OPTIONS"),'" rel="',q.SongID,'"></a></div><span class="songName"><a class="songLink ellipsis" title="',
                n,'" rel="',q.SongID,'">',n,"</a></span>"].join("")
        }
    }

    function h(k, m, n) {
        n = n == "0" ? "&nbsp;" : n;
        return['<span class="track">',n,"</span>"].join("")
    }

    GS.Controllers.BaseController.extend("GS.Controllers.GridController", {columns:{song:[
        {id:"song",name:"SONG",field:"SongName",cssClass:"song",minWidth:150,formatter:g,behavior:"selectAndMove",sortable:true,columnFormatter:a},
        {id:"artist",name:"ARTIST",field:"ArtistName",cssClass:"artist",minWidth:100,formatter:b,behavior:"selectAndMove",sortable:true,columnFormatter:a},
        {id:"album",name:"ALBUM",field:"AlbumName",cssClass:"album",minWidth:100,formatter:b,behavior:"selectAndMove",sortable:true,columnFormatter:a},
        {id:"track",name:"TRACK_NUM",field:"TrackNum",cssClass:"track",minWidth:70,maxWidth:90,formatter:h,behavior:"selectAndMove",sortable:true,columnFormatter:a}
    ],albumSongs:[
        {id:"song",name:"SONG",field:"SongName",cssClass:"song",minWidth:150,formatter:g,behavior:"selectAndMove",sortable:true,columnFormatter:a,minWidth:300},
        {id:"artist",name:"ARTIST",field:"ArtistName",
            cssClass:"artist",minWidth:100,formatter:b,behavior:"selectAndMove",sortable:true,columnFormatter:a},
        {id:"track",name:"TRACK_NUM",field:"TrackNum",cssClass:"track",minWidth:70,maxWidth:90,formatter:h,behavior:"selectAndMove",sortable:true,columnFormatter:a}
    ],queuesong:[
        {id:"song",name:"SONG",field:"SongName",cssClass:"song",minWidth:150,formatter:function(k, m, n, o, q) {
            k = q.isFavorite ? " isFavorite" : "";
            m = q.fromLibrary ? " inLibrary" : "";
            o = q.fromLibrary ? "SONG_ROW_REMOVE_SONG_LIBRARY_TITLE" : "SONG_ROW_ADD_SONG_LIBRARY_TITLE";
            return['<a class="play rowOption ',GS.player.isPlaying ? "" : "paused",'" rel="',q.SongID,'"></a><div class="options ',k," ",m,'"><a class="rowOption favorite option',k,'" rel="',q.SongID,'"></a><a class="rowOption library option',m,'" data-translate-title="',o,'" title="',$.localize.getString(o),'" rel="',q.SongID,'"></a><a class="rowOption more option',m,'" rel="',q.SongID,'"></a></div><span class="songName"><a class="songLink ellipsis" title="',n,'" rel="',q.SongID,'">',n,"</a></span>"].join("")
        },
            behavior:"selectAndMove",sortable:true,columnFormatter:a},
        {id:"artist",name:"ARTIST",field:"ArtistName",cssClass:"artist",minWidth:100,formatter:function(k, m, n, o, q) {
            k = q.autoplayVote == 1 || q.autoplayVote == 0 && q.source === "user" ? "selected" : "";
            m = q.autoplayVote == -1 ? "selected" : "";
            var v = _.ucwords(o.name);
            o = _.cleanUrl(q[v + "Name"], q[v + "ID"], o.name.toLowerCase());
            return['<div class="options"><a class="rowOption smile rowOption ',k,'"></a><a class="rowOption frown rowOption ',m,'"></a></div><a class="field ellipsis" href="',
                o,'" title="',n,'">',n,"</a>"].join("")
        },behavior:"selectAndMove",sortable:true,columnFormatter:a},
        {id:"album",name:"ALBUM",field:"AlbumName",cssClass:"album",minWidth:100,formatter:b,behavior:"selectAndMove",sortable:true,columnFormatter:a},
        {id:"track",name:"TRACK_NUM",field:"TrackNum",cssClass:"track",minWidth:70,maxWidth:90,formatter:h,behavior:"selectAndMove",sortable:true,columnFormatter:a}
    ],playlistsong:[
        {id:"song",name:"SONG",field:"SongName",cssClass:"song",minWidth:150,formatter:g,behavior:"selectAndMove",
            sortable:true,columnFormatter:a},
        {id:"artist",name:"ARTIST",field:"ArtistName",cssClass:"artist",minWidth:100,formatter:b,behavior:"selectAndMove",sortable:true,columnFormatter:a},
        {id:"album",name:"ALBUM",field:"AlbumName",cssClass:"album",minWidth:100,formatter:b,behavior:"selectAndMove",sortable:true,columnFormatter:a}
    ],album:[
        {id:"album",name:"ALBUM",field:"AlbumName",cssClass:"albumDetail",formatter:function(k, m, n, o, q) {
            k = '<a href="' + q.toArtistUrl() + '">' + q.ArtistName + "</a>";
            $("<span></span>").localeDataString("BY_ARTIST",
                    {artist:k});
            return['<a href="',q.toUrl(),'" class="image insetBorder height30"><img src="',q.getImageURL(30),'" width="30" height="30" class="avatar" /></a><a href="',q.toUrl(),'" class="title ellipsis">',q.AlbumName,"</a>"].join("")
        },behavior:"selectAndMove",sortable:true,columnFormatter:a},
        {id:"artist",name:"ARTIST",field:"ArtistName",cssClass:"albumArtist",formatter:b,behavior:"selectAndMove",sortable:true,columnFormatter:a}
    ],artist:[
        {id:"artist",name:"ARTIST",field:"ArtistName",cssClass:"artist-row",
            formatter:function(k, m, n, o, q) {
                k = '<a href="' + q.toUrl() + '">' + q.ArtistName + "</a>";
                $("<span></span>").localeDataString("BY_ARTIST", {artist:k});
                return['<a href="',q.toUrl(),'" class="image insetBorder height30"><img src="',q.getImageURL(30),'" width="30" height="30" class="avatar" /></a><a href="',q.toUrl(),'" class="title ellipsis">',q.ArtistName,"</a>"].join("")
            },behavior:"selectAndMove",sortable:true,columnFormatter:a}
    ],playlist:[
        {id:"playlist",name:"PLAYLIST",field:"PlaylistName",cssClass:"playlist",
            formatter:function(k, m, n, o, q) {
                k = q.isFavorite ? " subscribed" : "";
                m = q && q.NumSongs && q.Artists ? true : false;
                n = q.isFavorite ? "Unsubscribe" : "Subscribe";
                k = q.UserID === GS.user.UserID ? "" : ['<a class="subscribe ',k,'" rel="',q.PlaylistID,'"><span>',n,"</span></a>"].join("");
                if (m) {
                    m = q.Artists.split(",");
                    n = m.length;
                    m.splice(3, m.length);
                    n = n > m.length ? "..." : "";
                    return['<a href="',_.cleanUrl(q.PlaylistName, q.PlaylistID, "playlist"),'" class="image insetBorder height30"><img src="',q.getImageURL(30),'" width="30" height="30" class="albumart" /></a>',
                        k,'<p><span class="title"><a class="v-ellip" href="',_.cleanUrl(q.PlaylistName, q.PlaylistID, "playlist"),'">',_.cleanText(q.PlaylistName)," (",q.NumSongs,' Songs) </a></span><span class="artists">',m.join(", "),n,"</span></p>"].join("")
                } else return['<a href="',_.cleanUrl(q.PlaylistName, q.PlaylistID, "playlist"),'" class="image insetBorder height30"><img src="',q.getImageURL(30),'" width="30" height="30" class="albumart" /></a>',k,'<p><span class="title"><a class="v-ellip" href="',_.cleanUrl(q.PlaylistName,
                        q.PlaylistID, "playlist"),'">',_.cleanText(q.PlaylistName),"</a></span></p>"].join("")
            },behavior:"selectAndMove",sortable:true,columnFormatter:a},
        {id:"username",name:"AUTHOR",field:"UserName",cssClass:"playlistAuthor",formatter:b,behavior:"selectAndMove",sortable:true,columnFormatter:a}
    ],user:[
        {id:"username",name:"USER",field:"Name",cssClass:"user",formatter:function(k, m, n, o, q) {
            k = q.isFavorite ? " following" : "";
            m = q.isFavorite ? "UNFOLLOW" : "FOLLOW";
            k = q.UserID === GS.user.UserID ? "" : ['<a class="follow ',k,'" data-follow-userid="',
                q.UserID,'"><span data-translate-text="' + m + '">',$.localize.getString(m),"</span></a>"].join("");
            m = _.cleanUrl(q.Name, q.UserID, "user");
            n = '<div class="status ' + q.getVipPackage() + '"></div>';
            return['<a href="',m,'" class="who image">',n,'<img src="',q.getImageURL(30),'" width="30" height="30" class="avatar" /></a>',k,'<a href="',m,'" class="username">',q.Name,'</a><span class="location">',q.Country,"</span>"].join("")
        },behavior:"selectAndMove",sortable:true,columnFormatter:a}
    ],albumFilter:[
        {id:"album",
            name:"ALBUM",field:"AlbumName",cssClass:"cell-title",formatter:c,behavior:"selectAndMove",sortable:false,collapsable:true,columnFormatter:a}
    ],artistFilter:[
        {id:"artist",name:"ARTIST",field:"ArtistName",cssClass:"cell-title",formatter:c,behavior:"selectAndMove",sortable:false,collapsable:true,columnFormatter:a}
    ],event:[
        {id:"date",name:"DATE",field:"StartTime",cssClass:"cell-title",formatter:function(k, m, n, o, q) {
            k = q.StartTime.split(" ");
            m = k[1] ? k[1].split(":") : "00:00:00";
            k = k[0].split("-");
            newDate = new Date(parseInt(k[0],
                    10), parseInt(k[1], 10) - 1, parseInt(k[2], 10), parseInt(m[0], 10), parseInt(m[1], 10), parseInt(m[2], 10));
            return['<div class="field event_calendar" title="',newDate.format("D M j Y"),'"><span class="field month" >',newDate.format("M"),'</span><span class="field day" >',newDate.format("j"),"</span></div>"].join("")
        },behavior:"none",sortable:false,columnFormatter:a,minWidth:40,maxWidth:45},
        {id:"artist",name:"ARTISTS",field:"ArtistName",cssClass:"cell-title",formatter:function(k, m, n) {
            k = (n || "").split(", ");
            m =
                    "";
            n = [];
            for (var o = 0; o < k.length; o++) {
                m = o === k.length - 1 ? "" : ",&nbsp;";
                n.push([k[o],m].join(""))
            }
            return['<div class="filter"><a class="field url event_tickets" title="',$.localize.getString("BUY_TICKETS"),'">',$.localize.getString("BUY_TICKETS"),'</a><span class="field artist ellipsis">',n.join(""),"</span></div>"].join("")
        },behavior:"none",sortable:false,columnFormatter:a},
        {id:"location",name:"LOCATION",field:"Location",cssClass:"cell-title",formatter:function(k, m, n, o, q) {
            return['<div class="filter"><span class="field ellipsis venue" title="',
                q.VenueName,'">',q.VenueName,'</span><span class="field ellipsis city" title="',q.City,'">',q.City,"</span></div>"].join("")
        },behavior:"none",sortable:false,columnFormatter:a}
    ],topSongs:[
        {id:"song",name:"TRACK",field:"SongName",cssClass:"song",formatter:g,behavior:"selectAndMove",sortable:false,columnFormatter:a},
        {id:"album",name:"ALBUM",field:"AlbumName",cssClass:"album",formatter:b,behavior:"selectAndMove",sortable:true,columnFormatter:a}
    ],station:[
        {id:"station",name:"STATIONS",field:"StationTitle",
            cssClass:"station",formatter:function(k, m, n, o, q) {
            return['<a class="play rowOption" data-translate-title="STATION_ROW_PLAY_TITLE" title="',$.localize.getString("STATION_ROW_PLAY_TITLE"),'" data-tagid="',q.TagID,'"></a><span class="field ellipsis stationName" title="',$.localize.getString(n),'">',$.localize.getString(n),"</span>"].join("")
        },behavior:"selectAndMove",sortable:true,columnFormatter:a}
    ]},options:{enableCellNavigation:true,enableCellRangeSelection:true,onCellRangeSelected:function() {
        console.log("cell range select",
                arguments)
    },onSelectedRowChanged:function() {
        console.log("selectd row change", arguments)
    },forceFitColumns:true,rowHeight:25,editable:false,enableAddRow:false,rowCssClasses:function(k, m, n) {
        var o = "";
        if (k && k.IsVerified == 1)o = "verified"; else if (k && k.IsVerified == 0.5)o = "verifiedDivider";
        if (m == n - 1)o += " slick-row-last";
        return o
    },isSelectable:function(k) {
        return k.IsVerified === 0.5 ? false : true
    },dragProxy:function(k) {
        var m = k;
        if (k.length > 1)if (k[0]instanceof GS.Models.Song)m = _.getString("SELECTION_SONGS_COUNT", {count:k.length});
        else if (k[0]instanceof GS.Models.Playlist)m = _.getString("SELECTION_PLAYLIST_COUNT", {count:k.length}); else if (k[0]instanceof GS.Models.Album)m = _.getString("SELECTION_ALBUM_COUNT", {count:k.length}); else {
            if (k[0]instanceof GS.Models.Artist)m = _.getString("SELECTION_ARTIST_COUNT", {count:k.length})
        } else if (k instanceof Array)m = k[0].toProxyLabel ? k[0].toProxyLabel() : k[0];
        return['<div class="status"></div><span class="info"><span class="text">',m,"</span></span>"].join("")
    },disableMultiSelect:false},rowHeights:{song:25,
        album:41,artist:41,playlist:41,user:41,event:41,station:25},columnsByName:{song:"song",SongName:"song",album:"album",AlbumName:"album",artist:"artist",ArtistName:"artist",playlist:"playlist",PlaylistName:"playlist",user:"user",Name:"user",TrackNum:"track",tracknum:"track",track:"track",event:"user",Event:"user"},defaultSort:{song:"ArtistName",album:"TrackNum",artist:"Popularity",user:"Name",playlist:"PlaylistName"},defaultMultiSorts:{SongName:["SongName","SongID","GridKey"],ArtistName:["ArtistName",
        "AlbumName","TrackNum","SongName","SongID","GridKey"],AlbumName:["AlbumName","TrackNum","SongName","SongID","GridKey"],TrackNum:["TrackNum","SongName","SongID"],Popularity:["Popularity","Weight","NumPlays","ArtistName","AlbumName","TrackNum","SongName","SongID"]},numericColumns:{Rank:true,Sort:true,TrackNum:true,Popularity:true,Weight:true,NumPlays:true,Score:true,IsVerified:true,GridKey:true,GeoDist:true},forcedSortDirections:{TSAdded:false,TSFavorited:false,Popularity:false,TrackNum:true},init:function() {
        this._super();
        window.ctrlDown = false;
        $(document).keydown(this.callback(function(k) {
            if (!window.ctrlDown && (k.ctrlKey || k.metaKey || k.shiftKey || k.keyCode == 16 || k.keyCode == 17)) {
                $("div.gs_grid.songs .grid-canvas").addClass("noLinks");
                window.ctrlDown = true
            }
        }));
        $(document).keyup(this.callback(function(k) {
            if (window.ctrlDown && (!(k.ctrlKey || k.metaKey || k.shiftKey) || k.keyCode == 16 || k.keyCode == 17)) {
                $("div.gs_grid.songs .grid-canvas").removeClass("noLinks");
                window.ctrlDown = false
            }
        }))
    },resizeTimer:null,resizeAfterRender:function() {
        this.resizeTimer &&
        clearTimeout(this.resizeTimer);
        this.resizeTimer = setTimeout(function() {
            GS.resize();
            $(".gs_grid").resize()
        }, 500)
    }}, {dataView:null,grid:null,idProperty:null,selectedRowIDs:[],currentRow:0,filter:{artistIDs:false,albumIDs:false,onlyVerified:false},sortCol:"",sortCols:[],sortDir:1,origSortDir:1,onInitSort:true,sortNumeric:false,pastSorts:{},searchString:"",data:null,columns:null,options:null,type:null,SMALL_GRID_WIDTH:600,resizeSelf:function() {
        if (this.element)this.element.hasClass("songList") ? this.element.css({height:Math.min(200,
                Math.max(25, (this.data || []).length * this.options.rowHeight)),width:this.element.parent().innerWidth()}) : this.element.css({height:Math.min(this.element.parent().height(), $("#page").height()),width:this.element.parent().width()});
        this.grid && this.grid.resizeAndRender()
    },init:function(k, m, n, o, q, v) {
        function x(G, D) {
            var w,y,I,p,r = 1,s = false,t = false;
            if (u.options.isFilter || u.options.useVerifiedSort)u.sortCols = ["IsVerified",u.sortCol];
            for (I = 0; I < u.sortCols.length; I++) {
                p = u.sortCols[I];
                r = p === "IsVerified" ? u.sortDir ?
                        -1 : 1 : 1;
                try {
                    if (u.Class.numericColumns[p]) {
                        w = parseFloat(G[p], 10);
                        y = parseFloat(D[p], 10);
                        if (isNaN(w))w = 0;
                        if (isNaN(y))y = 0;
                        if (p === "TrackNum") {
                            if (w !== 0 && y === 0)return u.sortDir ? -1 : 1;
                            if (y !== 0 && w === 0)return u.sortDir ? 1 : -1
                        }
                    } else {
                        w = G[p].toString().toLowerCase();
                        y = D[p].toString().toLowerCase()
                    }
                    if (w !== y)return(w > y ? 1 : -1) * r
                } catch(B) {
                    if (_.notDefined(G) || isNaN(G))s = true;
                    if (_.notDefined(D) || isNaN(D))t = true;
                    if (s && !t)return-1;
                    if (!s && t)return 1;
                    return 0
                }
            }
            return 0
        }

        q = _.orEqual(q, "song");
        o = _.orEqual(o, {});
        o.rowHeight = _.orEqual(o.rowHeight,
                GS.Controllers.GridController.rowHeights[q]);
        o.allowDragSort = _.orEqual(o.allowDragSort, false);
        o.allowDropOn = _.orEqual(o.allowDropOn, false);
        o.allowDuplicates = _.orEqual(o.allowDuplicates, false);
        o.useVerifiedSort = _.orEqual(o.useVerifiedSort, false);
        o.searchText = _.orEqual(o.searchText, "searchText");
        o = $.extend({}, GS.Controllers.GridController.options, o);
        if (o.allowDragSort)o.autoDragScroll = true;
        this.subscribe("gs.auth." + q + ".update", this.callback(q + "Change"));
        this.subscribe("gs.auth.favorites." + q + "s.update",
                this.callback(q + "FavoritesChange"));
        this.subscribe("gs.player.queue.change", this.callback("queueChange"));
        var A = GS.player.getCurrentQueue();
        this.element.toggleClass("hasSongs", A && A.songs && A.songs.length > 0);
        this.data = m;
        this.columns = n;
        this.options = o;
        this.type = q;
        this.idProperty = this.grid = this.dataView = null;
        this.selectedRowIDs = [];
        this.currentRow = 0;
        this.filter = _.orEqual(o.filters, {artistIDs:false,albumIDs:false,onlyVerified:false});
        this.sortCol = _.orEqual(o.sortCol, GS.Controllers.GridController.defaultSort[q]);
        this.sortCols = _.orEqual(GS.Controllers.GridController.defaultMultiSorts[this.sortCol], $.makeArray(this.sortCol));
        this.origSortDir = this.sortDir = (this.sortDir = _.orEqual(o.sortDir, 1)) ? true : false;
        this.onInitSort = _.orEqual(o.onInitSort, false);
        this.sortNumeric = GS.Controllers.GridController.numericColumns[this.sortCol] ? true : false;
        this.pastSorts = {};
        this.searchString = "";
        this.allowDragSort = _.orEqual(o.allowDragSort, false);
        this.allowDropOn = _.orEqual(o.allowDropOn, false);
        var u = this;
        this.idProperty = _.orEqual(v,
                _.ucwords(q) + "ID");
        this.dataView = new Slick.Data.DataView;
        this.grid = new Slick.Grid($(k), this.dataView.rows, this.columns, this.options);
        this.dataView.setAllowDuplicates(this.options.allowDuplicates);
        this.grid.onContextMenu = function(G, D) {
            G.preventDefault();
            var w = u.grid.getSelectedRows().sort(function(p, r) {
                return p - r
            }),y = [];
            if (!(w.length > 1)) {
                u.currentRow = D;
                u.grid.setSelectedRows([D]);
                u.grid.onSelectedRowsChanged()
            }
            switch (u.type) {
                case "artist":
                    y = GS.Models.Artist.getOneFromCache(u.dataView.rows[D].ArtistID).getContextMenu();
                    break;
                case "album":
                    y = GS.Models.Album.getOneFromCache(u.dataView.rows[D].AlbumID).getContextMenu();
                    break;
                case "song":
                    if (w.length > 1) {
                        y = [];
                        for (var I = 0; I < w.length; I++)y.push(u.dataView.rows[w[I]].SongID);
                        y = u.getContextMenuMultiselectForSong(y)
                    } else y = u.getContextMenuForSong(u.dataView.rows[D].SongID);
                    break;
                case "playlist":
                    y = GS.Models.Playlist.getOneFromCache(u.dataView.rows[D].PlaylistID).getContextMenu();
                    break;
                case "station":
                    y = GS.Models.Station.getOneFromCache(u.dataView.rows[D].StationID).getContextMenu();
                    break
            }
            $(G.target).jjmenu(G, y, null, {xposition:"mouse",yposition:"mouse",show:"show",className:"contextmenu"})
        };
        this.grid.onDblClick = function(G, D) {
            var w = u.dataView.rows[D];
            if (!($(G.target).parents(".options").length > 0))if (!$(G.target).is("a.play"))if (u.options.isNowPlaying && w.queueSongID)GS.player.playSong(w.queueSongID); else if (w.SongID) {
                var y = GS.Controllers.PageController.getActiveController().getPlayContext();
                GS.player.addSongAndPlay(w.SongID, y);
                y = {songID:w.songID,rank:parseInt(D, 10) + 1};
                if (w.ppVersion)y.ppVersion =
                        w.ppVersion;
                GS.getGuts().logEvent("doubleClickToPlay", y)
            } else w.StationID && GS.player.setAutoplay(true, w.StationID)
        };
        this.grid.onKeyDown = function(G) {
            if (G.which === 65 && (G.ctrlKey || G.metaKey)) {
                G = [];
                u.selectedRowIDs = [];
                for (var D = 0; D < u.dataView.rows.length; D++) {
                    G.push(D);
                    u.selectedRowIDs.push(u.dataView.rows[D].id)
                }
                u.currentRow = u.dataView.rows.length - 1;
                u.grid.setSelectedRows(_.arrUnique(G));
                u.grid.onSelectedRowsChanged();
                return true
            }
            if (u.handleKeyPress(G))return true;
            return $(G.target).is("input,textarea,select") ?
                    true : false
        };
        this.grid.onSelectedRowsChanged = function() {
            u.selectedRowIDs = [];
            var G,D,w = u.grid.getSelectedRows().sort(function(I, p) {
                return I - p
            }),y = {};
            if (u.options.isFilter) {
                if (w.length === 1 && w[0] === 0 && u.dataView.getItemByIdx(0)[u.idProperty] === -1)w = [];
                G = w.indexOf(0);
                if (G > -1) {
                    w.splice(G, 1);
                    u.grid.setSelectedRows(w);
                    u.grid.onSelectedRowsChanged();
                    return
                }
                w.length === 0 ? $(".slick-row[row=0]", u.element).addClass("selected") : $(".slick-row[row=0]", u.element).removeClass("selected")
            }
            G = 0;
            for (l = w.length; G < l; G++)if (D =
                    u.dataView.rows[w[G]]) {
                u.selectedRowIDs.push(D[u.idProperty]);
                y[D[u.idProperty]] = true
            }
            u.selectedRowIDs = _.arrUnique(u.selectedRowIDs);
            if (u.options.isFilter)if (u.type === "album") {
                if (w.length === 0)$(".gs_grid.songs").controller().filter.albumIDs = false; else $(".gs_grid.songs").controller().filter.albumIDs = y;
                $(".gs_grid.songs").controller().dataView.refresh()
            } else if (u.type === "artist") {
                if (w.length === 0) {
                    $(".gs_grid.songs").controller().filter.artistIDs = false;
                    $(".gs_grid.albums").controller().filter.artistIDs =
                            false
                } else {
                    $(".gs_grid.songs").controller().filter.artistIDs = y;
                    $(".gs_grid.albums").controller().filter.artistIDs = y
                }
                $(".gs_grid.songs").controller().dataView.refresh();
                $(".gs_grid.albums").controller().dataView.refresh();
                $(".gs_grid.albums").controller().grid.onSelectedRowsChanged()
            }
            u.currentRow = _.orEqual(u.grid.getSelectedRows()[w.length - 1], 0);
            $.publish("gs.grid.selectedRows", {len:u.selectedRowIDs.length,type:u.type})
        };
        $(".slick-header-column").click(function() {
            $(this).addClass("selected");
            $(this).siblings().removeClass("selected")
        });
        this.grid.onSort = function(G, D, w) {
            var y;
            if (_.notDefined(D))D = _.defined(u.pastSorts[G]) && G == u.sortCol ? !u.pastSorts[G] : true;
            u.sortColData = G;
            u.sortName = G.name ? G.name : null;
            u.sortCol = G.field ? G.field : G;
            u.sortCols = _.orEqual(GS.Controllers.GridController.defaultMultiSorts[u.sortCol], $.makeArray(u.sortCol));
            u.sortDir = D ? true : false;
            u.element.find(".slick-sort-indicator").removeClass("slick-sort-indicator-asc").removeClass("slick-sort-indicator-desc");
            y = GS.Controllers.GridController.columnsByName[u.sortCol];
            forcedDir =
                    GS.Controllers.GridController.forcedSortDirections[u.sortCol];
            if (_.defined(y))u.grid.setSortColumn(y, u.sortDir); else u.sortDir = _.defined(forcedDir) ? forcedDir : u.origSortDir;
            u.pastSorts[u.sortCol] = u.sortDir;
            u.sortNumeric = GS.Controllers.GridController.numericColumns[u.sortCol] ? true : false;
            u.dataView.sort(x, u.sortDir);
            if (!w && G) {
                w = $("button.dropdownButton.sort").find("span.label");
                if (u.sortName) {
                    if (u.sortName == "PLAYLIST" || u.sortName == "USER")u.sortName = "NAME";
                    w.attr("data-translate-text", "SORT_BY_" + u.sortName);
                    w.text($.localize.getString("SORT_BY_" + u.sortName))
                } else if (u.columns) {
                    y = u.columns.length;
                    for (var I = 0; I < y; I++)if (u.columns[I] && u.columns[I].field === u.sortCol) {
                        w.attr("data-translate-text", "SORT_BY_" + u.columns[I].name);
                        w.text($.localize.getString("SORT_BY_" + u.columns[I].name));
                        break
                    }
                }
                if (GS.page.activePageName === "music" && GS.page.activePageIdentifier == GS.user.UserID)u.sortColData === "TSAdded" ? GS.store.remove("gs.sort.user.music") : GS.store.set("gs.sort.user.music", {sortCol:G,sortDir:D,onInitSort:false})
            }
        };
        u.dataView.onRowCountChanged.subscribe(function() {
            u.grid.updateRowCount()
        });
        u.dataView.onRowsChanged.subscribe(function(G) {
            u.grid.removeRows(G);
            u.grid.resizeAndRender();
            if (u.selectedRowIDs.length > 0) {
                G = [];
                for (var D,w = 0,y = u.selectedRowIDs.length; w < y; w++) {
                    D = u.dataView.getRowById(u.selectedRowIDs[w]);
                    D !== undefined && G.push(D)
                }
                u.currentRow = _.orEqual(D, 0);
                u.grid.setSelectedRows(_.arrUnique(G));
                u.grid.onSelectedRowsChanged()
            }
        });
        u.grid.onBeforeMoveRows = function() {
            if (u.allowDragSort)return true;
            return false
        };
        u.grid.onMoveRows = function(G, D) {
            var w = [],y = [],I = [],p = u.dataView.getItems(),r,s,t;
            if (!(!u.allowDragSort || u.sortCol !== "Sort"))if (u.options.playlistID)(w = GS.Models.Playlist.getOneFromCache(u.options.playlistID)) && w.moveSongsTo(G, D); else {
                r = p.slice(0, D);
                s = p.slice(D, p.length);
                for (t = 0; t < G.length; t++) {
                    p[G[t]].Sort = t;
                    w.push(p[G[t]])
                }
                G.sort().reverse();
                for (t = 0; t < G.length; t++) {
                    p = G[t];
                    p < D ? r.splice(p, 1) : s.splice(p - D, 1)
                }
                p = r.concat(w.concat(s));
                for (t = 0; t < p.length; t++)p[t].Sort = t + 1;
                u.data = p;
                for (t = 0; t < G.length; t++)y.push(r.length +
                        t);
                y = _.arrUnique(y);
                u.currentRow = y[y.length - 1];
                u.dataView.beginUpdate();
                u.grid.setSelectedRows(y);
                u.grid.onSelectedRowsChanged();
                u.dataView.setItems(u.data, u.idProperty);
                u.dataView.endUpdate();
                u.dataView.refresh();
                if (u.options.isNowPlaying) {
                    r = D;
                    for (t = 0; t < w.length; t++) {
                        I.push(w[t].queueSongID);
                        y = $("#queue .queueSong:nth-child(" + D + ")");
                        y.after($("#" + w[t].queueSongID).remove());
                        D += 1
                    }
                    GS.player.moveSongsTo(I, r)
                }
            }
        };
        if (u.allowDragSort || u.allowDropOn) {
            o = u.grid.getOptions();
            var C = $("#grid .slick-viewport"),
                    F = o.scrollPane ? $(o.scrollPane) : C,H = function(G, D) {
                var w = G.clientY - C.find(".grid-canvas").offset().top;
                if (C.within(G.clientX, G.clientY).length > 0) {
                    $(D.proxy).addClass("valid").removeClass("invalid");
                    if (u.allowDragSort) {
                        w = Math.max(0, Math.min(Math.round(w / o.rowHeight), m ? m.length : 0));
                        if (w !== D.gridInsertIndex) {
                            if (u.onBeforeMoveRows && u.onBeforeMoveRows(u.grid.getSelectedRows(), w) === false) {
                                $("div.slick-reorder-guide").css("top", -1000).show();
                                D.canMove = false
                            } else {
                                $("div.slick-reorder-guide").css({top:w * o.rowHeight +
                                        o.padding}).show();
                                D.canMove = true
                            }
                            D.gridInsertIndex = w
                        }
                    } else {
                        w = $(".slick-row").within(D.clientX, D.clientY).eq(0);
                        if (w.length) {
                            w.addClass("hover").siblings().removeClass("hover");
                            D.gridInsertIndex = parseInt(w.attr("row"), 10)
                        }
                    }
                } else {
                    $(D.proxy).addClass("invalid").removeClass("valid");
                    $("div.slick-reorder-guide").hide()
                }
                if (o.autoDragScroll) {
                    var y = F.within(G.clientX, G.clientY).length > 0;
                    w = Math.ceil(F.height() * 0.2);
                    var I = o.rowHeight * (m ? m.length : 0);
                    if (y)if (!($("#shortcuts").within(G.clientX, G.clientY).length >
                            0 || $("#footer").within(G.clientX, G.clientY).length > 0))if (D.gridAutoScrollWaitTimeout) {
                        y = function() {
                            var r = (new Date).valueOf();
                            if (D.gridAutoScrollHasWaited && (!D.gridAutoScrollLast || r - D.gridAutoScrollLast >= 200)) {
                                D.gridAutoScrollLast = r;
                                F.scrollTop(Math.max(0, F.scrollTop() - 41))
                            }
                        };
                        var p = function() {
                            var r = (new Date).valueOf();
                            if (D.gridAutoScrollHasWaited && (!D.gridAutoScrollLast || r - D.gridAutoScrollLast >= 200)) {
                                D.gridAutoScrollLast = r;
                                F.scrollTop(Math.min(I, F.scrollTop() + 41))
                            }
                        };
                        if (F.offset().top + w > G.clientY) {
                            y();
                            clearInterval(D.gridAutoScrollInterval);
                            D.gridAutoScrollInterval = setInterval(y, 200)
                        } else if (F.offset().top + F.height() - w < G.clientY) {
                            p();
                            clearInterval(D.gridAutoScrollInterval);
                            D.gridAutoScrollInterval = setInterval(p, 200)
                        } else {
                            clearTimeout(D.gridAutoScrollWaitTimeout);
                            D.gridAutoScrollWaitTimeout = false;
                            D.gridAutoScrollHasWaited = false;
                            clearInterval(D.gridAutoScrollInterval);
                            D.gridAutoScrollInterval = false
                        }
                    } else D.gridAutoScrollWaitTimeout = setTimeout(function() {
                        D.gridAutoScrollHasWaited = true;
                        D.gridAutoScrollWaitTimeout =
                                false
                    }, 500)
                }
            };
            F.data("ignoreForOverDrop", true).bind("dropinit",
                    function() {
                        this.updateDropOnDrag = H
                    }).bind("dropstart",
                    function(G, D) {
                        if (!D.draggedItems) {
                            this.updateDropOnDrag = null;
                            return false
                        }
                        $("<div class='slick-reorder-guide'/>").css({position:"absolute",zIndex:"99998",width:C.innerWidth() - o.padding * 2,top:-1000,right:o.padding}).appendTo(C);
                        D.gridInsertIndex = -1;
                        D.gridAutoScrollHasWaited = false;
                        D.gridAutoScrollWaitTimeout = false
                    }).bind("dropend",
                    function(G, D) {
                        C.find(".slick-reorder-guide").remove();
                        C.find(".slick-row").removeClass("hover");
                        clearInterval(D.gridAutoScrollInterval);
                        D.gridAutoScrollInterval = false
                    }).bind("drop", function(G, D) {
                        function w(I, p) {
                            p = _.orEqual(p, new GS.Models.PlayContext);
                            var r,s = [],t;
                            for (r = 0; r < I.length; r++)s.push(I[r].SongID);
                            if (u.allowDropOn)(r = u.dataView.getItemByIdx(D.gridInsertIndex)) && r instanceof GS.Models.Playlist && r.addSongs(s, null, true); else if (u.options.playlistID) {
                                r = GS.Models.Playlist.getOneFromCache(u.options.playlistID);
                                t = D.gridInsertIndex !== -1 ? D.gridInsertIndex :
                                        null;
                                r.addSongs(s, t)
                            } else {
                                t = D.gridInsertIndex !== -1 ? D.gridInsertIndex : GS.player.INDEX_DEFAULT;
                                GS.player.addSongsToQueueAt(s, t, false, p)
                            }
                        }

                        var y;
                        if (C.within(G.clientX, G.clientY).length > 0)if (D.draggedItemsSource == "grid" && u.grid.onMoveRows && D.canMove) {
                            u.grid.onMoveRows(u.grid.getSelectedRows(), D.gridInsertIndex);
                            GS.getGuts().gaTrackEvent("grid", "dragSuccess")
                        } else {
                            D.draggedItemsType = D.draggedItemsType || _.guessDragType(D.draggedItems);
                            switch (D.draggedItemsType) {
                                case "song":
                                    w(D.draggedItems, D.draggedItemsContext);
                                    break;
                                case "album":
                                    for (y = 0; y < D.draggedItems.length; y++)D.draggedItems[y].getSongs(function(I) {
                                        I.sort(GS.Models.Album.defaultSongSort);
                                        w(I, new GS.Models.PlayContext(GS.player.PLAY_CONTEXT_ALBUM, D.draggedItems[y]))
                                    }, null, true, {async:false});
                                    break;
                                case "artist":
                                    for (y = 0; y < D.draggedItems.length; y++)D.draggedItems[y].getSongs(function(I) {
                                        I.sort(GS.Models.Artist.defaultSongSort);
                                        w(I, new GS.Models.PlayContext(GS.player.PLAY_CONTEXT_ARTIST, D.draggedItems[y]))
                                    }, null, {async:false});
                                    break;
                                case "playlist":
                                    for (y =
                                                 0; y < D.draggedItems.length; y++)D.draggedItems[y].getSongs(function(I) {
                                        w(I, new GS.Models.PlayContext(GS.player.PLAY_CONTEXT_PLAYLIST, D.draggedItems[y]))
                                    }, null, false, {async:false});
                                    break;
                                case "user":
                                    for (y = 0; y < D.draggedItems.length; y++)D.draggedItems[y].getFavoritesByType("Song", function(I) {
                                        w(I, new GS.Models.PlayContext(GS.player.PLAY_CONTEXT_USER, D.draggedItems[y]))
                                    }, null, false, {async:false});
                                    break;
                                default:
                                    console.error("grid drop, invalid drag type", D.draggedItemsType);
                                    return
                            }
                        }
                    })
        }
        u.dataView.beginUpdate();
        u.dataView.setItems(u.data, u.idProperty);
        u.dataView.setFilter(function(G) {
            if (u.options.isFilter && G.isFilterAll)return true;
            if (u.searchString != "" && (!G.hasOwnProperty(u.options.searchText) || G[u.options.searchText].toLowerCase().indexOf(u.searchString) == -1))return false;
            if (u.filter.hasOwnProperty("onlyVerified") && u.filter.onlyVerified && G.IsVerified === 0)return false;
            if (u.filter.artistIDs && !u.filter.artistIDs[G.ArtistID])return false;
            if (u.filter.albumIDs && !u.filter.albumIDs[G.AlbumID])return false;
            return true
        });
        u.sortCol !== "" && u.grid.onSort(u.sortCol, u.sortDir, u.onInitSort);
        $(window).resize();
        u.dataView.endUpdate();
        if (u.options.isFilter) {
            u.grid.setSelectedRows([0]);
            u.grid.onSelectedRowsChanged()
        }
        this.Class.resizeAfterRender()
    },update:function() {
    },songChange:function(k) {
        var m = $("#page").is(".gs_page_playlist") ? $("#page").controllers(GS.Controllers.Page.PlaylistController)[0] : false;
        m = m ? m.playlist.songIDLookup[k.SongID] : this.dataView.getItemById(k[this.idProperty]);
        if (!m)return false;
        var n = ["IsVerified","TSAdded",
            "TSFavorited","Sort","Popularity"];
        for (var o in k)if (k.hasOwnProperty(o) && n.indexOf(o) == -1)m[o] = k[o];
        this.dataView.updateItem(m[this.idProperty], m)
    },albumChange:function(k) {
        var m = this.dataView.getItemById(k[this.idProperty]);
        if (!m)return false;
        for (var n in k)if (k.hasOwnProperty(n))m[n] = k[n];
        this.dataView.updateItem(m.AlbumID, m)
    },artistChange:function(k) {
        var m = this.dataView.getItemById(k[this.idProperty]);
        if (!m)return false;
        for (var n in k)if (k.hasOwnProperty(n))m[n] = k[n];
        this.dataView.updateItem(m.ArtistID,
                m)
    },playlistChange:function(k) {
        var m = this.dataView.getItemById(k[this.idProperty]);
        if (m) {
            for (var n in k)if (k.hasOwnProperty(n))m[n] = k[n];
            this.dataView.updateItem(m.PlaylistID, m)
        }
    },userChange:function(k) {
        var m = this.dataView.getItemById(k[this.idProperty]);
        if (!m)return false;
        for (var n in k)if (k.hasOwnProperty(n))m[n] = k[n];
        this.dataView.updateItem(m.UserID, m)
    },songFavoritesChange:function() {
        this.data = this.dataView.getItems();
        for (var k = 0; k < this.data.length; k++)if (GS.user.favorites.songs[this.data[k].SongID]) {
            this.data[k].isFavorite =
                    1;
            this.data[k].fromLibrary = 1;
            this.dataView.updateItem(this.data[k].SongID, this.data[k])
        }
        this.dataView.beginUpdate();
        this.dataView.setItems(this.data, "SongID");
        this.dataView.endUpdate()
    },albumFavoritesChange:function() {
        this.data = this.dataView.getItems();
        for (var k = 0; k < this.data.length; k++)if (GS.user.favorites.albums[this.data[k].AlbumID]) {
            this.data[k].isFavorite = 1;
            this.dataView.updateItem(this.data[k].SongID, this.data[k])
        }
        this.dataView.beginUpdate();
        this.dataView.setItems(this.data, "AlbumID");
        this.dataView.endUpdate()
    },
        artistFavoritesChange:function() {
            this.data = this.dataView.getItems();
            for (var k = 0; k < this.data.length; k++)if (GS.user.favorites.artists[this.data[k].ArtistID])this.data[k].isFavorite = 1;
            this.dataView.beginUpdate();
            this.dataView.setItems(this.data, "ArtistID");
            this.dataView.endUpdate()
        },playlistFavoritesChange:function() {
            this.data = this.dataView.getItems();
            for (var k = 0; k < this.data.length; k++)if (GS.user.favorites.playlists[this.data[k].PlaylistID])this.data[k].isFavorite = 1;
            this.dataView.beginUpdate();
            this.dataView.setItems(this.data,
                    "PlaylistID");
            this.dataView.endUpdate()
        },userFavoritesChange:function() {
            this.data = this.dataView.getItems();
            for (var k = 0; k < this.data.length; k++)if (GS.user.favorites.users[this.data[k].UserID])this.data[k].isFavorite = 1
        },queueChange:function(k) {
            k || (k = GS.player.getCurrentQueue());
            if (this.element) {
                this.element.toggleClass("hasSongs", k && k.songs && k.songs.length > 0);
                k && k.songs && k.songs.length > 0 ? $(".grid-canvas a.play").attr("data-translate-title", "SONG_ROW_ADD_SONG_ADD_TO_PLAYING_TITLE").attr("title", $.localize.getString("SONG_ROW_ADD_SONG_ADD_TO_PLAYING_TITLE")) :
                        $(".grid-canvas a.play").attr("data-translate-title", "SONG_ROW_ADD_SONG_PLAY_TITLE").attr("title", $.localize.getString("SONG_ROW_ADD_SONG_PLAY_TITLE"))
            }
        },getContextMenuForSong:function(k) {
            var m = GS.Controllers.PageController.getActiveController().getPlayContext(),n = GS.Models.Song.getOneFromCache(k),o = GS.getGuts().extractSongItemInfo(this),q = [
                {title:$.localize.getString("CONTEXT_PLAY_SONG_NOW"),action:{type:"fn",callback:function() {
                    GS.player.addSongAndPlay(k, m);
                    GS.getGuts().onContextMenuClick("contextPlaySongNow",
                            "rightClickSingleSong", false, o)
                }},customClass:"last jj_menu_item_hasIcon jj_menu_item_play"},
                {title:$.localize.getString("CONTEXT_PLAY_SONG_NEXT"),action:{type:"fn",callback:function() {
                    GS.player.addSongsToQueueAt([k], GS.player.INDEX_NEXT, false, m);
                    GS.getGuts().onContextMenuClick("contextPlaySongNext", "rightClickSingleSong", false, o)
                }},customClass:"last jj_menu_item_hasIcon jj_menu_item_play_next"},
                {title:$.localize.getString("CONTEXT_PLAY_SONG_LAST"),action:{type:"fn",callback:function() {
                    GS.player.addSongsToQueueAt([k],
                            GS.player.INDEX_LAST, false, m);
                    GS.getGuts().onContextMenuClick("contextPlaySongLast", "rightClickSingleSong", false, o)
                }},customClass:"last jj_menu_item_hasIcon jj_menu_item_play_last"},
                {customClass:"separator"}
            ];
            if (n)q = q.concat(n.getContextMenu({menuType:"rightClickSingleSong",gridController:this}));
            return q
        },getContextMenuMultiselectForSong:function(k) {
            var m = GS.Controllers.PageController.getActiveController().getPlayContext(),n = GS.getGuts().extractMultiSongInfo(this, k),o = {menuType:"rightClickMultiSong",
                multiClick:true,gridController:this},q = [
                {title:$.localize.getString("CONTEXT_PLAY_SONGS_NOW"),customClass:"jj_menu_item_hasIcon jj_menu_item_play",action:{type:"fn",callback:function() {
                    GS.player.addSongsToQueueAt(k, GS.player.INDEX_DEFAULT, true, m);
                    GS.getGuts().onContextMenuClick("contextPlaySongsNow", "rightClickMultiSong", true, n)
                }}},
                {title:$.localize.getString("CONTEXT_PLAY_SONGS_NEXT"),customClass:"jj_menu_item_hasIcon jj_menu_item_play_next",action:{type:"fn",callback:function() {
                    GS.player.addSongsToQueueAt(k,
                            GS.player.INDEX_NEXT, false, m);
                    GS.getGuts().onContextMenuClick("contextPlaySongsNext", "rightClickMultiSong", true, n)
                }}},
                {title:$.localize.getString("CONTEXT_PLAY_SONGS_LAST"),customClass:"jj_menu_item_hasIcon jj_menu_item_play_last",action:{type:"fn",callback:function() {
                    GS.player.addSongsToQueueAt(k, GS.player.INDEX_LAST, false, m);
                    GS.getGuts().onContextMenuClick("contextPlaySongsLast", "rightClickMultiSong", true, n)
                }}},
                {customClass:"separator"}
            ],v = true;
            if (GS.user.library)for (i in k) {
                if (k.hasOwnProperty(i)) {
                    songID =
                            k[i];
                    if (parseInt(songID) && !GS.user.library.songs[songID]) {
                        v = false;
                        break
                    }
                }
            } else v = false;
            v ? q.push({title:$.localize.getString("CONTEXT_REMOVE_FROM_LIBRARY"),customClass:"jj_menu_item_hasIcon jj_menu_item_remove_music",action:{type:"fn",callback:function() {
                GS.getGuts().onContextMenuClick("contextRemoveFromLibrary", "rightClickMultiSong", true, n);
                _.forEach(k, function(x) {
                    GS.user.removeFromLibrary(x)
                })
            }}}) : q.push({title:$.localize.getString("CONTEXT_ADD_TO_LIBRARY"),customClass:"jj_menu_item_hasIcon jj_menu_item_music",
                action:{type:"fn",callback:function() {
                    GS.user.addToLibrary(k);
                    GS.getGuts().onContextMenuClick("contextAddToLibrary", "rightClickMultiSong", true, n)
                }}});
            q.push({title:$.localize.getString("CONTEXT_ADD_TO_PLAYLIST"),type:"sub",customClass:"jj_menu_item_hasIcon jj_menu_item_playlists",src:GS.Models.Playlist.getPlaylistsMenu(k, function(x) {
                x.addSongs(k, null, true)
            }, null, null, o)}, {customClass:"separator"}, {title:$.localize.getString("CONTEXT_SHARE_SONG"),type:"sub",customClass:"jj_menu_item_hasIcon jj_menu_item_share",
                src:[
                    {title:$.localize.getString("SHARE_WIDGET"),customClass:"jj_menu_item_hasIcon jj_menu_item_share_widget",action:{type:"fn",callback:function() {
                        GS.getLightbox().open("share", {service:"widget",type:"manySongs",id:k});
                        GS.getGuts().onContextMenuClick("contextShareWidget", "rightClickMultiSong", true, n)
                    }}}
                ]}, {customClass:"separator"}, {title:$.localize.getString("CONTEXT_REPLACE_ALL_SONGS"),customClass:"jj_menu_item_hasIcon jj_menu_item_now_playing",action:{type:"fn",callback:function() {
                GS.player.addSongsToQueueAt(k,
                        GS.player.INDEX_REPLACE, GS.player.isPlaying, m);
                GS.getGuts().onContextMenuClick("contextReplaceAllSongs", "rightClickMultiSong", true, n)
            }}});
            return q
        },"input.search keyup":function(k) {
            Slick.GlobalEditorLock.cancelCurrentEdit();
            if (e.which == 27)k.value = "";
            this.searchString = k.value.toLowerCase();
            this.dataView.refresh()
        },".grid-canvas click":function(k, m) {
            if ($(m.target).parents(".slick-row").length === 0) {
                self.currentRow = 0;
                this.grid.setSelectedRows([]);
                this.grid.onSelectedRowsChanged()
            }
        },"* keydown":function(k, m) {
            this.handleKeyPress(m)
        },".slick-collapse-indicator click":function(k, m) {
            m.preventDefault();
            var n = $(k).parents("div.page_column"),o = GS.page.getActiveController().Class,q = n.attr("id") + "Collapse";
            o[q] || (o[q] = {});
            n.toggleClass("collapsed");
            n.addClass("suppressAutoCollapse");
            if (n.hasClass("collapsed")) {
                n.addClass("manualCollapse").removeClass("manualOpen");
                $(".page_column_fixed.collapsed").width(this.grid.getScrollWidth());
                o[q].manualCollapse = true;
                o[q].manualOpen = false;
                o[q].collapsed = true
            } else {
                n.addClass("manualOpen").removeClass("manualCollapse");
                $(".page_column_fixed").width(175);
                o[q].manualOpen = true;
                o[q].manualCollapse = false;
                o[q].collapsed = false
            }
            o.storeFilterCollapseState();
            GS.resize();
            $(this.element).resize()
        },handleKeyPress:function(k) {
            if ((k.which === 38 || k.which === 40) && k.shiftKey) {
                var m = this.grid.getSelectedRows().sort(function(q, v) {
                    return q - v
                });
                _.orEqual(m[m.length - 1], 1);
                var n,o;
                n = this.currentRow + (k.which === 38 ? -1 : 1);
                n = Math.max(0, Math.min(this.dataView.rows.length - 1, n));
                if ($.inArray(n, m) === -1) {
                    m.push(n);
                    this.selectedRowIDs.push(this.dataView.getItemByIdx(n).SongID);
                    this.currentRow = n;
                    this.grid.setSelectedRows(_.arrUnique(m));
                    this.grid.onSelectedRowsChanged()
                } else if (k.which === 38) {
                    if (n < this.currentRow) {
                        o = $.inArray(this.currentRow, m);
                        _.arrRemove(m, o, o);
                        this.currentRow = n;
                        o = $.inArray(this.currentRow, m);
                        _.arrRemove(m, o, o);
                        m.push(this.currentRow);
                        this.grid.setSelectedRows(_.arrUnique(m));
                        this.grid.onSelectedRowsChanged()
                    }
                } else if (n > this.currentRow) {
                    o = $.inArray(this.currentRow, m);
                    _.arrRemove(m, o, o);
                    this.currentRow = n;
                    o = $.inArray(this.currentRow, m);
                    _.arrRemove(m, o, o);
                    m.push(this.currentRow);
                    this.grid.setSelectedRows(_.arrUnique(m));
                    this.grid.onSelectedRowsChanged()
                }
                k.preventDefault();
                return true
            }
            return false
        },"#grid.songs a.songLink, #grid.feeds div.songs a.songLink click":function(k, m) {
            m.preventDefault();
            var n = parseInt($(k).attr("rel"), 10);
            if (n && _.defined(m.which) && !$(k).closest(".grid-canvas").hasClass("noLinks")) {
                var o = $(k).data("clickCount");
                o || (o = 0);
                o++;
                o == 1 && setTimeout(this.callback(function() {
                    if ($(k).data("clickCount") == 1)if (k[0].href) {
                        var x = $(k).attr("href");
                        if (x.indexOf("#") > 1) {
                            x = x.split("#");
                            location.hash = "#" + x[1]
                        } else location.hash = $(k).attr("href")
                    } else GS.Models.Song.getSong(n, this.callback(function(A) {
                        if (A) {
                            A.toUrl();
                            location.hash = A.toUrl();
                            var u = parseInt(this.grid.getSelectedRows()[0]) + 1,C = u <= this.data.length ? this.data[u - 1].ppVersion : 0;
                            GS.getGuts().handleFieldClick(A.toUrl(), u, n, C)
                        }
                    }));
                    $(k).data("clickCount", 0)
                }), 300);
                $(k).data("clickCount", o);
                if (o = $(k).attr("href")) {
                    var q = parseInt(this.grid.getSelectedRows()[0]) + 1,v = q <= this.data.length ? this.data[q -
                            1].ppVersion : 0;
                    GS.getGuts().handleFieldClick(o, q, n, v)
                }
            } else if (!_.defined(m.which))return false
        },"#grid .grid-canvas.noLinks mouseenter":function(k, m) {
            if (window.ctrlDown && !m.shiftKey && !m.ctrlKey && !m.metaKey) {
                $("#grid .grid-canvas").removeClass("noLinks");
                window.ctrlDown = false
            }
        },"#grid.radioStations .station a click":function(k, m) {
            m.stopPropagation();
            var n = k.attr("data-tagid");
            GS.player.setAutoplay(true, n);
            return false
        }})
})();
GS.Controllers.BaseController.extend("GS.Controllers.GUTSController", {isGSSingleton:true}, {shouldLog:false,server:"/guts",appID:"html",context:false,bufferLength:10,localLogs:[],searchClickLpid:"searchClick",init:function() {
    this.shouldLog = _.orEqual(gsConfig.shouldUseGuts, 0);
    this.server = _.orEqual(gsConfig.gutsServer, false);
    this.context = {};
    this.currentPage = {};
    this.currentPage.pageType = "home";
    this.currentPage.section = "";
    this.currentPage.subpage = "";
    this.currentPage.id = "";
    if (gsConfig.isPreview)this.appID =
            "preview";
    var a = _.browserDetect();
    this.beginContext({sessionID:GS.service.sessionID});
    this.beginContext({initTime:(new Date).getTime()});
    this.logEvent("init", {browser:a.browser,browserVersion:a.version,os:navigator.platform,ip:gsConfig.remoteAddr});
    GS.user && GS.user.UserID && GS.user.UserID > 0 && this.beginContext({userID:GS.user.UserID});
    window.chrome && window.chrome.app && window.chrome.app.isInstalled ? this.gaTrackEvent("chromeApp", "isInstalled") : this.gaTrackEvent("chromeApp", "notInstalled");
    this._super()
},
    beginContext:function(a) {
        _.forEach(a, function(b, c) {
            if (a.hasOwnProperty(c))this.context[c] = a[c]
        }, this)
    },endContext:function(a) {
        _.defined(this.context[a]) && delete this.context[a]
    },doLogEvent:function(a, b) {
        var c = {time:(new Date).getTime(),lpID:a,state:{},context:{}};
        currentContext = this.context;
        _.forEach(currentContext, function(g, h) {
            if (currentContext.hasOwnProperty(h))if ($.isArray(currentContext[h])) {
                this.context[h] = [];
                _.forEach(currentContext[h], function(k, m) {
                    this.push(m)
                }, this.context[h])
            } else this.context[h] =
                    _.orEqual(currentContext[h], "").toString()
        }, c);
        _.forEach(b, function(g, h) {
            if (b.hasOwnProperty(h))c.state[h] = _.orEqual(g, "").toString()
        }, c);
        this.localLogs.push(c);
        this.checkSendCondition() && this.sendLogs()
    },logEvent:function(a, b) {
        this.shouldLog && this.doLogEvent(a, b)
    },forceLogEvent:function(a, b) {
        this.doLogEvent(a, b)
    },checkSendCondition:function() {
        return this.localLogs.length >= this.bufferLength
    },forceSend:function() {
        this.sendLogs(true)
    },sendLogsTimeout:false,sendLogsWait:3E4,sendLogs:function(a) {
        clearTimeout(this.sendLogsTimeout);
        if (a)this._internalSend(false); else this.sendLogsTimeout = setTimeout(this.callback(this._internalSend), this.sendLogsWait)
    },_internalSend:function(a) {
        a = _.orEqual(a, true);
        if (this.localLogs.length > 0) {
            var b = this.toTransmissionFormat(this.localLogs);
            $.ajax({contentType:"text/xml",type:"POST",data:b,url:this.server,cache:false,async:a,success:function() {
            },error:function() {
            }});
            this.localLogs = []
        }
    },toTransmissionFormat:function(a) {
        var b = {result:(new Date).getTime() + "\n",appID:this.appID};
        _.forEach(a, function(c, g) {
            var h = /\:/g,k = /\\/g,m = a[g];
            this.result += this.appID + "\t";
            this.result += m.lpID + "\t";
            var n = m.context;
            _.forEach(n, function(q, v) {
                if (n.hasOwnProperty(v))this.result += v + ":" + n[v].replace(k, "\\\\").replace(h, "\\:") + "\t"
            }, this);
            var o = m.state;
            _.forEach(o, function(q, v) {
                if (o.hasOwnProperty(v))this.result += v + ":" + o[v].replace(k, "\\\\").replace(h, "\\:") + "\t"
            }, this);
            this.result += m.time + "\n"
        }, b);
        return b.result
    },handlePageLoad:function(a, b) {
        var c = {};
        c.destinationPageType = a;
        switch (a) {
            case "home":
                if (b.redeemingPromoCard)c.reason =
                        "redeem";
                break;
            case "user":
                switch (b.length) {
                    case 2:
                        c.destinationPageID = b.id;
                        break;
                    case 3:
                        c.destinationPageID = b.id;
                        c.destinationSubpageType = b.section;
                        break;
                    case 4:
                        c.destinationPageID = b.id;
                        c.destinationSubpageType = b.subpage;
                        break
                }
                c.destinationSubpageType = _.orEqual(c.destinationSubpageType, "profile");
                break;
            case "playlist":
            case "album":
            case "artist":
                c.destinationPageID = b.id;
                c.destinationSubpageType = a == "album" && !b.subpage ? "tracklist" : a == "artist" && !b.subpage ? "overview" : b.subpage;
                break;
            case "search":
                c.destinationSubpageType =
                        b.type == "everything" ? "everything" : b.type;
                break;
            case "popular":
                c.destinationSubpageType = b.pageType;
                break;
            case "song":
                c.destinationPageID = b.token;
                c.destinationSubpageType = b.subpage;
                break;
            case "notFound":
                this.logEvent("pageNotFound", {pageSought:b.page});
                c.destinationPageType = "home";
                c.reason = "pageNotFound";
                break;
            case "settings":
                c.destinationSubpageType = _.orEqual(b.subpage, "profile");
                break;
            case "surveys":
                if (b.subpage)c.destinationSubpageType = b.subpage;
                break;
            case "signup":
                if (b.subpage)c.destinationSubpageType =
                        b.subpage;
                break;
            case "explore":
                if (b.subpage && b.subpage == "popular") {
                    c.destinationPageType = "popular";
                    c.destinationSubpageType = b.type || "daily"
                } else c.destinationSubpageType = b.subpage || "featured";
                break;
            default:
                c.destinationPageType = a;
                break
        }
        if (a != "user" || a == "user" && this.pageParamsAreDifferent(c)) {
            this.logEvent("loadPage", c);
            this.beginContext({currentPageType:c.destinationPageType});
            c.destinationSubpageType ? this.beginContext({currentSubpage:c.destinationSubpageType}) : this.endContext("currentSubpage");
            c.destinationPageID ?
                    this.beginContext({currentPageID:c.destinationPageID}) : this.endContext("currentPageID")
        }
    },updateCurrentPage:function(a) {
        this.currentPage.pageType = a.type;
        this.currentPage.id = a.id;
        this.currentPage.section = a.section;
        this.currentPage.subpage = a.subpage
    },logPageLoad:function(a) {
        a.id ? this.logEvent("loadPage", {type:a.type,id:a.id}) : this.logEvent("loadPage", {type:a.type});
        this.beginContext({currentPageType:a.type});
        this.endContext("currentSubpage")
    },logSubpageLoad:function(a) {
        this.logEvent("loadSubpage", {type:a.type});
        this.beginContext({currentSubpage:a.type})
    },handleFieldClick:function(a, b, c, g) {
        b = {songID:c,rank:b};
        if (g != null && g.length > 0)b.ppVersion = g;
        g = "";
        g = a.indexOf("artist") > -1 ? "OLartistPageLoad" : a.indexOf("album") > -1 ? "OLalbumPageLoad" : "OLSongPageLoad";
        GS.getGuts().logEvent(g, b)
    },handleFeedEventClick:function(a) {
        var b = {};
        switch ($(a)[0].tagName) {
            case "A":
                feedEvent = $(a).parents(".event");
                if ($(a).attr("href")) {
                    var c = $(a).attr("href").split("/");
                    b.clickedType = c[1];
                    b.clickedID = c[3]
                } else b.clickedType = $(a).attr("class");
                break;
            case "LI":
                feedEvent = $(a).parents(".event");
                a = $(a).attr("class").split(" ");
                a = a[a.length - 1];
                if (a == "option")b.clickedType = "playSongs"; else if (a == "show")b.clickedType = "showSongs";
                break;
            default:
                break
        }
        b.rank = $(feedEvent).index() + 1;
        var g = $(feedEvent).attr("class");
        c = g.split(" ");
        b.whoseFeed = c[2].split("user")[1];
        _.forEach(c, function(n, o) {
            if (c[o].indexOf("type") > -1)b.eventType = c[o].substring(4, c[o].length)
        }, b);
        var h = {};
        $('.what>a[class!="showSongs"]', feedEvent).each(function() {
            var n = $(this).attr("href");
            if (n !== undefined) {
                n = n.split("/");
                var o = n[1];
                if (h[o])h[o] += 1; else h[o] = 1;
                b[o + h[o]] = n[3]
            }
        });
        var k = {};
        $("#feed>li").each(function() {
            g = $(this).attr("class");
            c = g.split(" ");
            var n = c[1].substring(4, c[1].length);
            if (k[n])k[n] += 1; else k[n] = 1
        });
        var m = "";
        _.forEach(k, function(n, o) {
            m = m + o + ";" + n + ","
        }, m);
        m = m.slice(0, m.length - 1);
        b.counts = m;
        this.logEvent("feedEventClick", b)
    },objectListPlayAdd:function(a, b, c) {
        var g,h;
        switch (c) {
            case "play":
                g = "OLPlayClick";
                break;
            case "add":
                g = "OLAddClick";
                break;
            default:
                break
        }
        var k;
        b = $("#grid .slick-row.selected",
                b);
        if (b.length > 0) {
            h = "";
            $(b).each(function() {
                k = parseInt($(this).attr("row"), 10);
                isNaN(k) || (h = h + (k + 1) + ",")
            });
            h = h.slice(0, h.length - 1)
        } else h = "all";
        this.logEvent(g, {songIDs:a,ranks:h})
    },songItemLibraryClick:function(a) {
        this.logEvent("OLlibraryClick", a)
    },songItemFavoriteClick:function(a) {
        this.logEvent("OLfavoriteClick", a)
    },songsRemovedFromQueue:function(a) {
        var b = a.details.items;
        if (a) {
            var c = "";
            _.forEach(b, function(g, h) {
                c = c + h[g].songID + ","
            }, c);
            c = c.slice(0, c.length - 1);
            GS.getGuts().logEvent("songsRemovedFromQueue",
                    {songIDs:c})
        }
    },handleSearchSidebarClick:function(a, b, c) {
        if (b = a.attr("href")) {
            b = b.substr(0, b.indexOf("?"));
            var g = b.split("/");
            b = g[1];
            g = g[3];
            $(a).attr("class") == "image" ? this.logEvent("searchSidebarClick", {section:c,linkType:b,id:g,imageClick:"true"}) : this.logEvent("searchSidebarClick", {section:c,linkType:b,id:g})
        } else if (a.hasClass("searchLink")) {
            b = "seeAll";
            this.logEvent("searchSidebarClick", {section:c,linkType:b})
        }
    },handleAutoplayOff:function() {
        this.logEvent("autoplayOff", {});
        this.endContext("autoplay");
        this.endContext("autoplaySeedSongs")
    },isSearchPage:function() {
        var a = $("#page").controller();
        if (a)return GS.Controllers.Page.SearchController == a.Class;
        return false
    },onContextMenuClick:function(a, b, c, g, h) {
        if (a && b && typeof c !== "undefined" && g && this.isSearchPage())if (c) {
            if (g && g.songIDs && g.ranks) {
                var k = g.songIDs,m = g.ranks,n = g.ppVersions;
                c = {};
                var o = k.length;
                if ((c = m.length == o) && n)c = n.length == o;
                if (c) {
                    c = {menuType:b,multiClick:"brokenDown"};
                    for (var q = 0; q < o; q++) {
                        var v = m[q],x = k[q];
                        if (n)c.ppVersions = g.ppVersions[q];
                        if (h)c.playlistID = h;
                        this.logSearchSingleSongClick(a, v, x, c)
                    }
                    k = g.songIDs.join();
                    m = g.ranks.join();
                    c = {menuType:b,multiClick:"multi"};
                    if (g.ppVersions)c.ppVersions = g.ppVersions.join();
                    if (h)c.playlistID = h;
                    this.logSearchMultiSongClick(a, m, k, c)
                }
            }
        } else if (g && g.songID && g.rank) {
            x = g.songID;
            v = g.rank;
            c = {menuType:b,multiClick:"single"};
            if (g.ppVersion)c.ppVersion = g.ppVersion;
            if (h)c.playlistID = h;
            this.logSearchSingleSongClick(a, v, x, c)
        }
    },logSearchSingleSongClick:function(a, b, c, g) {
        if (a && b && c) {
            var h = {};
            if (g)h = g;
            h.clickType =
                    a;
            h.rank = b;
            h.songID = c;
            GS.getGuts().logEvent(this.searchClickLpid, h)
        }
    },logSearchMultiSongClick:function(a, b, c, g) {
        if (a && b && c) {
            var h = {};
            if (g)h = g;
            h.clickType = a;
            h.ranks = b;
            h.songIDs = c;
            GS.getGuts().logEvent(this.searchClickLpid, h)
        }
    },extractSongItemInfo:function(a) {
        if (a) {
            var b = a.grid.getSelectedRows(),c = "",g = "";
            c = "";
            g = {};
            if (b.length == 1) {
                c = b[0];
                g = a.selectedRowIDs[0];
                g = {rank:c + 1,songID:g};
                if (a.data[c])if (c = a.data[c].ppVersion)g.ppVersion = c;
                return g
            }
        } else return null
    },logMultiSongDrag:function(a, b) {
        if (b.songIDs &&
                b.songIDs.length > 0 && b.ranks && b.ranks.length > 0) {
            var c,g = b.songIDs.length;
            for (c = 0; c < g; c++)b.ppVersions && b.ppVersions[c] ? this.logSearchSingleSongClick("drag", b.ranks[c], b.songIDs[c], {ppVersion:b.ppVersions[c]}) : this.logSearchSingleSongClick("drag", b.ranks[c], b.songIDs[c])
        }
        GS.getGuts().logEvent(a, b)
    },extractMultiSongInfo:function(a, b) {
        if (a && b) {
            var c = a.grid.getSelectedRows().sort(_.numSortA),g = [],h = [];
            _.forEach(c, function(k) {
                g.push(k + 1);
                (k = a.dataView.rows[k].ppVersion) && h.push(k)
            });
            c = {songIDs:b,ranks:g};
            if (h.length > 0)c.ppVersions = h;
            return c
        } else return null
    },handleExtrasDeviceButtonClick:function(a) {
        this.logEvent("extrasDeviceButtonClick", {device:$(a).attr("rel").split("_")[2]})
    },logQueueSaveInitiated:function() {
        this.logEvent("queueSaveInitiated", {})
    },pageParamsAreDifferent:function(a) {
        if (!this.context.currentPageType || !this.context.currentSubpage || !this.context.currentPageID)return true;
        if (a && a.destinationPageType && a.destinationSubpageType && a.destinationPageID) {
            if (this.context.currentPageType !=
                    a.destinationPageType)return true;
            if (this.context.currentSubpage != a.destinationSubpageType)return true;
            if (this.context.currentPageID != a.destinationPageID)return true;
            return false
        } else return true
    },gaTrackEvent:function(a, b, c, g) {
        if (_.notDefined(a) || _.notDefined(b))console.warn("guts.gaTrackEvent: bad category or action", a, b); else {
            c = "" + _.orEqual(c, "");
            g = parseFloat("" + _.orEqual(g, ""), 10);
            if (isNaN(g) || g == "")g = null;
            if (window._gaq && window._gaq.push)if (c && g)window._gaq.push(["_trackEvent",a,b,c,g]); else if (c)window._gaq.push(["_trackEvent",
                a,b,c]); else g ? window._gaq.push(["_trackEvent",a,b,null,g]) : window._gaq.push(["_trackEvent",a,b])
        }
    }});
(function() {
    GS.Controllers.BaseController.extend("GS.Controllers.FacebookController", {isGSSingleton:true,preSetup:function() {
        var a = GS.Controllers.BaseController.singletonCallback,b = $.subscribe;
        b("gs.auth.update", a("facebook", "update"));
        b("gs.auth.favorites.songs.add", a("facebook", "onFavoriteSong"));
        b("gs.auth.playlists.add", a("facebook", "onPlaylistCreate"));
        b("gs.player.nowplaying", a("facebook", "onNowPlaying"));
        b("gs.player.playing.continue", a("facebook", "onSongPlaying"));
        b("gs.player.playstatus",
                a("facebook", "onPlayStatusChange"));
        b("gs.theme.set", a("facebook", "parseTheme"))
    }}, {APPLICATION_ID:"111132365592157",SERVICE_ID:4,FACEBOOK_ONLY_SERVICE_ID:16,PERMISSIONS:"offline_access,publish_stream,email,rsvp_event,read_stream,user_about_me,user_likes,user_interests,user_location,user_birthday,publish_actions,user_actions:grooveshark",REQUIRED_PERMISSIONS:"offline_access,publish_stream,email,user_about_me,user_location,user_birthday",PUBLISH_PERMISSION:"publish_stream",WALL_FAVORITES:8,WALL_PLAYLIST_CREATE:16,
        SCROBBLING_FLAG:32,AUTO_RATE_LIMIT:18E6,MINIMUM_DURATION:15,profile:null,friends:null,registeredWithFacebook:false,facebookUserID:false,loggedIntoFacebook:false,flags:0,lastError:null,facebookLoaded:false,connectStatus:"unknown",connected:false,onLoginSaveData:null,initialXFBML:null,onUpdateCallback:null,lastUser:null,friendPermissions:{},userPermissions:{},forceLogin:false,scrobblingEnabled:false,currentListening:null,loginOnLoad:null,init:function() {
            this.LISTEN_APPLICATION_ID = "111132365592157";
            if (window.location.host.indexOf("grooveshark.com") > -1 && this.APPLICATION_ID !== this.LISTEN_APPLICATION_ID || !this.APPLICATION_ID)this.APPLICATION_ID = this.LISTEN_APPLICATION_ID;
            this._super()
        },appReady:function() {
            this.subscribe("gs.cowbell.ready", this.callback("commReady"))
        },commReady:function() {
            if (_.browserDetect().browser != "msie" || _.browserDetect().version > 6) {
                var a = 0;
                window.fbAsyncInit = function() {
                    if (window.GS && GS.getFacebook)GS.getFacebook().initFacebook(); else if (a < 10) {
                        a++;
                        setTimeout(window.fbAsyncInit,
                                100)
                    } else return false
                };
                window.fbLoadAttempts = 0;
                window.loadFacebook = function() {
                    try {
                        if (document.getElementById("fb-root") && document.getElementById("fb-root").getElementsByTagName("script").length) {
                            document.getElementById("fb-root").removeChild(document.getElementById("fb-root").getElementsByTagName("script")[0]);
                            document.getElementById("fb-root") && document.getElementById("fb-root").getElementsByTagName("div").length && document.getElementById("fb-root").removeChild(document.getElementById("fb-root").getElementsByTagName("div")[0]);
                            window.FB = null;
                            GS.getFacebook().facebookloaded = false
                        }
                        var b = document.createElement("script");
                        b.async = true;
                        b.src = document.location.protocol + "//connect.facebook.net/en_US/all.js";
                        document.getElementById("fb-root").appendChild(b);
                        window.fbLoadAttempts++;
                        window.facebookLoadTimeout = setTimeout(function() {
                                    if ((!window.FB || !GS.getFacebook().facebookloaded) && window.fbLoadAttempts < 3)window.loadFacebook(); else!window.FB && window.fbLoadAttempts >= 3 && $.publish("gs.notification", {type:"error",message:$.localize.getString("POPUP_UNABLE_LOAD_FACEBOOK")})
                                },
                                2E4)
                    } catch(c) {
                        console.error("Could not load Facebook Connect JS. Fatal Error: ", c);
                        GS.getFacebook().lastError = c;
                        $.publish("gs.notification", {type:"error",message:$.localize.getString("POPUP_UNABLE_LOAD_FACEBOOK")})
                    }
                };
                window.loadFacebook()
            }
        },initFacebook:function() {
            if (window.FB && window.FB.init) {
                FB.init({appId:this.APPLICATION_ID,status:false,cookie:false,xfbml:false,oauth:true});
                this.facebookLoaded = true;
                window.facebookLoadTimeout && clearTimeout(window.facebookLoadTimeout);
                var a = _.browserDetect();
                if (a.browser ==
                        "chrome" && a.version < 15) {
                    FB.XD._origin = window.location.protocol + "//" + document.domain + "/" + FB.guid();
                    FB.XD.Flash.init();
                    FB.XD._transport = "flash"
                } else if (a.browser == "opera") {
                    FB.XD._transport = "fragment";
                    FB.XD.Fragment._channelUrl = window.location.protocol + "//" + window.location.host + "/"
                } else if (a.browser == "msie" && a.version == 8) {
                    FB.XD._origin = window.location.protocol + "//" + document.domain + "/" + FB.guid();
                    FB.XD.Flash.init();
                    FB.XD._transport = "flash"
                }
                FB.getLoginStatus(this.callback(this.onFacebookLoginStatus, true));
                FB.Event.subscribe("auth.statusChange", this.callback(this.onFacebookLoginStatus, false));
                FB.Event.subscribe("edge.create", function(b) {
                    window._gaq && window._gaq.push && window._gaq.push(["_trackSocial","facebook","like",b]);
                    if (GS.page && GS.page.activePage && GS.page.activePage.likeWidth == "48px") {
                        GS.page.activePage.likeWidth = "77px";
                        GS.page.activePage.likeWidthCache[GS.page.activePage.fbUrl] = "77px";
                        $("#page_content_social_buttons .fblike").css("width", GS.page.activePage.likeWidth)
                    }
                });
                FB.Event.subscribe("edge.remove",
                        function(b) {
                            window._gaq && window._gaq.push && window._gaq.push(["_trackSocial","facebook","unlike",b])
                        });
                if (!window.document.getElementById("theme_home") || window.location.hash && window.location.hash.indexOf("/s/") > -1) {
                    $.publish("gs.facebook.xfbml.ready", true);
                    GS.getFacebook().initialXFBML = true;
                    $.subscribe("gs.facebook.xfbml.ready", this.callback(this.parseTheme))
                } else this.parseTheme();
                setTimeout(this.callback(function() {
                    if (FB.Auth._loadState == "loading") {
                        FB.Auth._loadState = null;
                        FB.getLoginStatus(this.callback(this.onFacebookLoginStatus,
                                true));
                        this.update()
                    }
                }), 1E4);
                this.loginOnLoad ? this.login(this.loginOnLoad.callback, this.loginOnLoad.errback, this.loginOnLoad.flags) : this.update()
            }
        },parseTheme:function() {
            if (window.FB)window.document.getElementById("theme_home") && FB.XFBML.parse(window.document.getElementById("theme_home"), function() {
                $.unsubscribe(["gs.facebook.xfbml.ready",this.parseTheme]);
                setTimeout(function() {
                    $.publish("gs.facebook.xfbml.ready")
                }, 100);
                GS.getFacebook().initialXFBML = true
            }); else this.initFacebook()
        },update:function() {
            if (this.facebookLoaded &&
                    GS.user && GS.user.isLoggedIn && GS.user.UserID > 0 && (GS.user.Flags & this.SERVICE_ID || GS.user.Flags & this.FACEBOOK_ONLY_SERVICE_ID)) {
                this.registeredWithFacebook = GS.user.Flags & this.FACEBOOK_ONLY_SERVICE_ID;
                GS.service.getUserFacebookData(this.callback("onUserFacebookData", null, null))
            } else if (this.facebookLoaded)GS.user && GS.user.isLoggedIn && this.onLoginSaveData && this.onLoginSaveData === GS.user.Email ? this.save(0, null, this.callback(function(a) {
                this.lastError = a;
                $.publish("gs.notification", {type:"error",message:$.localize.getString("POPUP_UNABLE_SAVE_FACEBOOK")});
                GS.getLightbox().open("reAuthFacebook")
            })) : this.clearInfo()
        },cleanSession:function(a) {
            if (a.accessToken.indexOf("|") >= 0) {
                a = a.accessToken.split("|");
                var b = a[1].split("-"),c = {};
                c.facebookUserID = b[1];
                c.sessionKey = b[0];
                c.accessToken1 = a[0];
                c.accessToken3 = a[2];
                return c
            } else return false
        },onFacebookLoginStatus:function(a, b) {
            if (b) {
                this.connectStatus = b.status;
                switch (this.connectStatus) {
                    case "connected":
                        this.loggedIntoFacebook = true;
                        break;
                    case "notConnected":
                        this.loggedIntoFacebook = true;
                        break;
                    case "unknown":
                    default:
                        if (!a &&
                                GS.airbridge && GS.airbridge.isDesktop && GS.user && GS.user.isLoggedIn && (GS.user.Flags & this.SERVICE_ID || GS.user.Flags & this.FACEBOOK_ONLY_SERVICE_ID)) {
                            this.connectStatus = "connected";
                            GS.service.getUserFacebookData(this.callback("onUserFacebookData", null, null))
                        } else this.loggedIntoFacebook = false;
                        break
                }
                var c = this.connected;
                this.connected = this.loggedIntoFacebook && b.authResponse && b.authResponse.userID ? b.authResponse.userID == this.facebookUserID : false;
                if (!a)if (!this.connected && c && (!GS.airbridge || !GS.airbridge.isDesktop)) {
                    c =
                            this.facebookUserID;
                    this.clearInfo();
                    this.connected = false;
                    this.facebookUserID = c;
                    FB.api("/?id=" + this.facebookUserID, this.callback("onGetMyProfile", null, null));
                    $.publish("gs.notification", {type:"error",message:$.localize.getString("POPUP_LOGOUT_FACEBOOK")})
                }
                $.publish("gs.facebook.status.update");
                if ($.isFunction(this.onUpdateCallback)) {
                    this.onUpdateCallback();
                    this.onUpdateCallback = null
                }
            }
        },onUserFacebookData:function(a, b, c) {
            try {
                if (window.FB && c && c.FacebookUserID) {
                    var g = c.AccessToken1 ? c.AccessToken1 + "|" +
                            c.SessionKey + "-" + c.FacebookUserID + "|" + c.AccessToken3 : c.AccessTokenEx;
                    this.facebookUserID = c.FacebookUserID;
                    this.flags = c.Flags;
                    if ((this.flags & this.SCROBBLING_FLAG) > 0)this.scrobblingEnabled = true;
                    var h = FB.getAuthResponse();
                    if (GS.airbridge && GS.airbridge.isDesktop && (!h || !h.accessToken))FB.Auth.setAuthResponse({accessToken:g,expiresIn:0,signedRequest:"",userID:c.FacebookUserID}, "connected");
                    if (h && h.userID && h.userID == this.facebookUserID) {
                        h.accessToken != g && this.save(c.Flags);
                        this.connected = true;
                        FB.api("/me",
                                this.callback("onGetMyProfile", a, b))
                    } else FB.api("/?id=" + this.facebookUserID, this.callback("onGetMyProfile", a, b));
                    this.onUpdateCallback = this.callback(function() {
                        !this.connected && this.flags >= 8 && $.publish("gs.facebook.notification.cannotPost")
                    });
                    FB.getLoginStatus(this.callback(this.onFacebookLoginStatus, false))
                } else {
                    GS.user.Flags = (GS.user.Flags | this.SERVICE_ID) - this.SERVICE_ID;
                    if (this.registeredWithFacebook)GS.user.Flags = (GS.user.Flags | this.FACEBOOK_ONLY_SERVICE_ID) - this.FACEBOOK_ONLY_SERVICE_ID;
                    this.connected =
                            false;
                    $.isFunction(b) && b()
                }
            } catch(k) {
                this.connected = false;
                $.isFunction(b) && b()
            }
        },onAuthFacebookUser:function(a, b, c) {
            if (c)if (c.userID == 0)this.register(a, b); else {
                this.connected = this.loggedIntoFacebook;
                $.isFunction(a) && a(c);
                GS.getGuts().logEvent("facebookAuthenticated", {authenticated:true})
            } else $.isFunction(b) && b({error:"POPUP_SIGNUP_LOGIN_FORM_FACEBOOK_ERROR"})
        },showReAuthLightbox:function() {
            GS.getLightbox().close();
            GS.getLightbox().open({type:"reAuthFacebook",view:{header:"POPUP_FACEBOOK_REAUTH_TITLE",
                message:"POPUP_FACEBOOK_REAUTH_MESSAGE",buttonsRight:[
                    {label:"POPUP_REAUTH_SUBMIT",className:"submit"}
                ],buttonsLeft:GS.getFacebook().registeredWithFacebook ? [] : [
                    {label:"POPUP_FACEBOOK_REAUTH_CANCEL",className:"close"}
                ]},callbacks:{".submit":function() {
                var a = GS.getFacebook().flags;
                GS.getFacebook().logout(function() {
                    GS.getFacebook().login(function() {
                        GS.getLightbox().close()
                    }, null, a)
                })
            },".close":function() {
                GS.getFacebook().logout(function() {
                    GS.getLightbox().close()
                })
            }}})
        },showInvalidPermissionsLightbox:function(a) {
            if ($.isFunction(a)) {
                GS.getLightbox().close();
                GS.getLightbox().open({type:"invalidPermissionsFacebook",view:{header:"POPUP_FACEBOOK_PERMS_TITLE",message:"POPUP_FACEBOOK_PERMS_MESSAGE",buttonsRight:[
                    {label:"POPUP_REAUTH_AUTH_SUBMIT",className:"submit"}
                ],buttonsLeft:[
                    {label:"POPUP_FACEBOOK_PERMS_CANCEL",className:"close"}
                ]},callbacks:{".submit":function() {
                    a()
                },".close":function() {
                    GS.getFacebook().logout(function() {
                        GS.getLightbox().close()
                    })
                }}})
            }
        },authErrors:[608,450,451,452,453,454,455,200,190,10],queryFQL:function(a, b, c, g) {
            FB.api({method:"fql.query",
                query:a}, this.callback(function(h) {
                if (h.error_code) {
                    if ($.isFunction(c))c(h); else g && $.inArray(h.error_code, this.authErrors) && this.showReAuthLightbox();
                    g && GS.getGuts().forceLogEvent("facebookFQLErr", {errCode:h.error_code})
                } else $.isFunction(b) && b(h)
            }))
        },register:function(a, b) {
            if (window.FB && FB.getAuthResponse() && FB.getAuthResponse().userID)this.queryFQL("select uid,name,first_name,last_name,profile_url,username,about_me,birthday_date,sex,email,locale from user where uid = me()", function(c) {
                if (c && c[0]) {
                    var g =
                    {id:c[0].uid,name:c[0].name,first_name:c[0].first_name,last_name:c[0].last_name,link:c[0].profile_url,birthday:c[0].birthday_date,about:c[0].profile_blurb,gender:c[0].sex,email:c[0].email,locale:c[0].locale};
                    GS.getFacebook().gotProfileForRegister(a, b, c[0].username ? c[0].username : "", g)
                } else GS.getFacebook().gotProfileForRegister(a, b)
            }, function() {
                var c = FB.getAccessToken();
                FB.getLoginStatus(GS.getFacebook().callback(function(g) {
                    if (!g.authResponse || g.authResponse.accessToken != c) {
                        this.onFacebookLoginStatus(false,
                                g);
                        this.login(a, b)
                    }
                }), true)
            }, true); else $.isFunction(b) && b({error:"POPUP_SIGNUP_LOGIN_FORM_FACEBOOK_ERROR"})
        },gotProfileForRegister:function(a, b, c, g) {
            if (g && !g.error)GS.service.getUsernameSuggestions(c, g.name ? g.name : "", g.id, this.callback("usernameSuggestSuccess", a, b, g), this.callback("usernameSuggestFailed", a, b, g)); else b && b({error:"POPUP_SIGNUP_LOGIN_FORM_FACEBOOK_ERROR"})
        },usernameSuggestSuccess:function(a, b, c, g) {
            b = "";
            if (g && g.length > 0)b = g[0];
            this.openRegisterLightbox(a, b, c)
        },usernameSuggestFailed:function(a, b, c) {
            a && b ? b({error:"POPUP_SIGNUP_LOGIN_FORM_FACEBOOK_ERROR"}) : this.openRegisterLightbox(null, "", c)
        },openRegisterLightbox:function(a, b, c) {
            a = {isFacebook:!_.isEmpty(c),username:b,session:this.cleanSession(FB.getAuthResponse()),fbFlags:0,message:$.localize.getString("POPUP_SIGNUP_LOGIN_FORM_FACEBOOK_NOT_FOUND")};
            if (!a.session) {
                b = FB.getAuthResponse();
                a.session = {facebookUserID:b.userID,accessTokenEx:b.accessToken}
            }
            if (c) {
                if (c.birthday) {
                    b = c.birthday.split("/");
                    a.month = b[0];
                    a.day = b[1];
                    a.year = parseInt(b[2])
                }
                a.fname =
                        c.name ? c.name : "";
                if (c.gender == "female")a.sex = "F"; else if (c.gender == "male")a.sex = "M";
                a.email = c.email ? c.email : ""
            }
            GS.user.defaultFromService = a;
            GS.getLightbox().close();
            if (GS.page.activePageName == "signup")GS.page.activePage.update(a); else location.hash = "#/signup";
            GS.getGuts().logEvent("facebookRegistered", {registered:true})
        },login:function(a, b, c) {
            if (window.FB && window.FB.login)if (GS.airbridge && GS.airbridge.isDesktop)this.connectStatus == "connected" && !this.forceLogin ? FB.getLoginStatus(this.callback("onAIRLogin",
                    a, b, c)) : FB.login(this.callback("onAIRLogin", a, b, c), {scope:this.PERMISSIONS}); else this.connectStatus == "connected" && !this.forceLogin ? FB.getLoginStatus(this.callback("onLogin", a, b, c)) : FB.login(this.callback("onLogin", a, b, c), {scope:this.PERMISSIONS}); else if (this.facebookLoaded)b && b({error:"POPUP_SIGNUP_LOGIN_FORM_FACEBOOK_ERROR"}); else this.loginOnLoad = {callback:a,errback:b,flags:c}
        },onAIRLogin:function(a, b, c) {
            window.setTimeout(function() {
                GS.getFacebook().onLogin(a, b, flags, c)
            }, 300)
        },onLogin:function(a, b, c, g) {
            g.authResponse && this.checkUserPermissions(this.REQUIRED_PERMISSIONS, this.callback(function(h) {
                if (h)if (GS.user.isLoggedIn) {
                    if (!this.connected && this.facebookUserID && this.facebookUserID != g.authResponse.userID)this.friends = this.profile = null;
                    this.save(c ? c : 0, a, b)
                } else(h = this.cleanSession(g.authResponse)) ? GS.service.authenticateFacebookUser(h.facebookUserID, h.sessionKey, h.accessToken1, h.accessToken3, null, this.callback("onAuthFacebookUser", a, b), function() {
                    $.isFunction(b) && b({error:"POPUP_SIGNUP_LOGIN_FORM_FACEBOOK_ERROR"})
                }) :
                        GS.service.authenticateFacebookUser(g.authResponse.userID, "", "", "", g.authResponse.accessToken, this.callback("onAuthFacebookUser", a, b), function() {
                            $.isFunction(b) && b({error:"POPUP_SIGNUP_LOGIN_FORM_FACEBOOK_ERROR"})
                        }); else GS.getFacebook().showInvalidPermissionsLightbox(GS.getFacebook().callback(function() {
                    GS.airbridge && GS.airbridge.isDesktop ? FB.login(this.callback("onAIRLogin", a, b, c), {scope:this.REQUIRED_PERMISSIONS}) : FB.login(this.callback("onLogin", a, b, c), {scope:this.REQUIRED_PERMISSIONS})
                }))
            }),
                    function() {
                        $.isFunction(b) && b({error:"POPUP_SIGNUP_LOGIN_FORM_FACEBOOK_ERROR"});
                        FB.getLoginStatus(GS.getFacebook().callback("onFacebookLoginStatus", false), true)
                    })
        },save:function(a, b, c) {
            if (window.FB && FB.getAccessToken() && GS.user.isLoggedIn) {
                var g = FB.getAuthResponse(),h = this.cleanSession(g);
                if (GS.user.Flags & this.SERVICE_ID || GS.user.Flags & this.FACEBOOK_ONLY_SERVICE_ID)h ? GS.service.updateUserFacebookData(h.facebookUserID, h.sessionKey, h.accessToken1, h.accessToken3, a ? a : 0, null, this.callback("onSaveUserFacebookData",
                        b, c), c) : GS.service.updateUserFacebookData(g.userID, "", "", "", a ? a : 0, g.accessToken, this.callback("onSaveUserFacebookData", b, c), c); else h ? GS.service.saveUserFacebookData(h.facebookUserID, h.sessionKey, h.accessToken1, h.accessToken3, a ? a : 0, null, this.callback("onSaveUserFacebookData", b, c), c) : GS.service.saveUserFacebookData(g.userID, "", "", "", a ? a : 0, g.accessToken, this.callback("onSaveUserFacebookData", b, c), c);
                this.flags = a
            }
        },onSaveUserFacebookData:function(a, b, c) {
            if (c == 1 && window.FB) {
                this.facebookUserID = FB.getAuthResponse().userID;
                this.connected = true;
                FB.api("/me", this.callback("onGetMyProfile", a, b));
                if (!(GS.user.Flags & this.SERVICE_ID) && !(GS.user.Flags & this.FACEBOOK_ONLY_SERVICE_ID) && this.lastUser !== GS.user.UserID) {
                    GS.getLightbox().open("newFacebookUser");
                    GS.getGuts().logEvent("facebookNewSave", {newSave:true})
                }
                if ((this.flags & this.SCROBBLING_FLAG) > 0)this.scrobblingEnabled = true;
                GS.user.Flags |= this.SERVICE_ID
            } else if (c == -1)if (GS.user.Flags & this.SERVICE_ID || GS.user.Flags & this.FACEBOOK_ONLY_SERVICE_ID)GS.service.getUserFacebookData(this.callback("onUserFacebookData",
                    a, function() {
                        b("FACEBOOK_PROBLEM_CONNECTING_ERROR_MSG")
                    }), function() {
                b("FACEBOOK_PROBLEM_CONNECTING_ERROR_MSG")
            }); else b && b({error:"FACEBOOK_DUPLICATE_ACCOUNT_ERROR_MSG"}); else b && b({error:"POPUP_SIGNUP_LOGIN_FORM_FACEBOOK_ERROR"})
        },onGetMyProfile:function(a, b, c) {
            if (c && c.id) {
                this.profile = c;
                $.publish("gs.facebook.profile.update");
                a && a()
            } else {
                this.connected = false;
                this.lastError = c;
                GS.user && GS.user.isLoggedIn && c.error && c.error.type == "OAuthException" && this.APPLICATION_ID == this.LISTEN_APPLICATION_ID && this.showReAuthLightbox();
                b && b()
            }
        },logout:function(a) {
            if (GS.user.isLoggedIn)this.profile && this.profile.id ? GS.service.removeUserFacebookData(this.profile.id, this.callback("onLogout", a)) : GS.service.removeUserFacebookData(false, this.callback("onLogout", a)); else {
                this.clearInfo();
                $.isFunction(a) && a()
            }
        },onLogout:function(a) {
            if (!this.registeredWithFacebook) {
                GS.user.Flags = (GS.user.Flags | this.SERVICE_ID) - this.SERVICE_ID;
                this.lastUser = GS.user.UserID
            }
            this.clearInfo(a);
            this.forceLogin = true
        },clearInfo:function(a) {
            this.profile = {};
            this.friends =
                    null;
            this.friendPermissions = {};
            this.userPermissions = {};
            this.registeredWithFacebook = this.connected = false;
            this.onLoginSaveData = this.loginOnLoad = null;
            this.facebookUserID = false;
            this.flags = 0;
            this.scrobblingEnabled = false;
            this.onUpdateCallback = a;
            FB.getLoginStatus(this.callback("onFacebookLoginStatus", false), true);
            $.isFunction(this.onUpdateCallback) && setTimeout(this.callback(function() {
                if ($.isFunction(this.onUpdateCallback)) {
                    this.onUpdateCallback();
                    this.onUpdateCallback = null
                }
            }), 1E4);
            $.publish("gs.facebook.profile.update")
        },
        onFavoriteSong:function(a, b, c) {
            if (this.connected && (c || (this.flags & this.WALL_FAVORITES) > 0)) {
                var g = this.callback(function() {
                    $.isFunction(a.toUrl) ? this.postToFeed("me", "http://grooveshark.com" + a.toUrl().substr(1), b, "song", c ? "notif" : "auto", this.callback("initiateRateLimit"), this.callback("onFailedPostEvent"), !c, a) : GS.Models.Song.getSong(_.orEqualEx(a.SongID, a.songID, a), this.callback(function(h) {
                        if ($.isFunction(h.toUrl))this.postToFeed("me", "http://grooveshark.com" + h.toUrl().substr(1), b, "song", c ? "notif" :
                                "auto", this.callback("initiateRateLimit"), this.callback("onFailedPostEvent"), !c, h)
                    }), this.onFailedPostEvent)
                });
                this.autoRateLimited && !c ? setTimeout(function() {
                    $.publish("gs.facebook.notification.rateLimited", {callback:g,type:"song"})
                }, 300) : g()
            }
        },onPlaylistCreate:function(a, b, c) {
            if (this.connected && (c || (this.flags & this.WALL_PLAYLIST_CREATE) > 0)) {
                var g = this.callback(function() {
                    this.postToFeed("me", "http://grooveshark.com" + a.toUrl().replace("#/", "/"), b, "playlist", c ? "notif" : "auto", this.callback("initiateRateLimit"),
                            this.callback("onFailedPostEvent"), !c, a)
                });
                this.autoRateLimited && !c ? setTimeout(function() {
                    $.publish("gs.facebook.notification.rateLimited", {callback:g,type:"playlist"})
                }, 300) : g()
            }
        },onSubscribePlaylist:function(a, b) {
            this.connected && this.postToFeed("me", "http://grooveshark.com" + a.toUrl().replace("#/", "/"), b, "playlist", "notif", this.callback("initiateRateLimit"), this.callback("onFailedPostEvent"), false, a)
        },onFollowUser:function(a, b) {
            this.connected && this.postToFeed("me", "http://grooveshark.com" + a.toUrl().substr(1),
                    b, "user", "notif", this.callback("initiateRateLimit"), this.callback("onFailedPostEvent"), false, a)
        },onFailedPostEvent:function() {
            $.publish("gs.facebook.notification.sent", {params:{type:"error",hideUndo:true},data:{},notifData:{}})
        },initiateRateLimit:function() {
            this.autoRateLimited && window.clearTimeout(this.autoRateLimited);
            this.autoRateLimited = setTimeout(this.callback(function() {
                this.autoRateLimited = null
            }), this.AUTO_RATE_LIMIT)
        },postToFeed:function(a, b, c, g, h, k, m, n, o) {
            a = _.orEqual(a, "me");
            this.postToFacebook("/" +
                    a + "/feed", a, b, c, g, h, k, m, false, o)
        },postLink:function(a, b, c, g, h, k, m, n, o) {
            a = _.orEqual(a, "me");
            this.postToFacebook("/" + a + "/links", a, b, c, g, h, k, m, n, o)
        },postToFacebook:function(a, b, c, g, h, k, m, n, o, q) {
            if (this.connected) {
                var v = {};
                v.link = c;
                v.message = g;
                v.access_token = FB.getAccessToken();
                v.type = _.orEqual(h, "song");
                v.ref = _.orEqual(k, "");
                c = $.extend(v, {hideUndo:!o,object:q});
                FB.api(a, "post", v, this.callback("onPostAPIReturn", c, a, b, m, n))
            } else $.isFunction(n) && n("No facebook session.")
        },onPostAPIReturn:function(a, b, c, g, h, k) {
            k.error ? this.onFailedPost(b, h, k.error) : this.onFeedPost(a, g, c, k)
        },onFeedPost:function(a, b, c, g) {
            g.target = c;
            a.type && $.publish("gs.facebook.notification.sent", {params:a,data:g,notifData:{}});
            b && b()
        },onFailedPost:function(a, b, c) {
            this.lastError = c;
            $.isFunction(b) && b(c);
            GS.getGuts().forceLogEvent("facebookShareErrMessage", {message:c.message,type:c.type})
        },removeEvent:function(a) {
            if (window.FB && this.connected && a && a.id) {
                var b = (a.target == "me" ? FB.getAuthResponse().userID : a.user) + "_" + a.id;
                FB.api("/" + b +
                        "?method=delete", this.callback("onRemoveEvent", a))
            }
        },onRemoveEvent:function(a, b) {
            if (b == true)$.publish("gs.facebook.notification.removed", {data:b,params:a}); else {
                this.onFailedPost(null, null, b);
                $.publish("gs.notification", {type:"error",message:$.localize.getString("NOTIF_FACEBOOK_UNDO_FAILED")})
            }
        },onNowPlaying:function(a) {
            if (this.connected && this.scrobblingEnabled) {
                if (!this.currentListening || a.queueSongID != this.currentListening.song.queueSongID || a.SongID != this.currentListening.song.SongID)this.currentListening =
                {song:a,secondsListened:0,id:null}; else if (GS.player.repeatMode == GS.player.REPEAT_ONE && a.queueSongID == this.currentListening.song.queueSongID) {
                    this.currentListening.secondsListened = 0;
                    if (this.currentListening.id) {
                        this.deleteListen(this.currentListening.id, this.callback(function() {
                            delete this.currentListening.id;
                            this.postListen(this.currentListening.song, this.callback("onNowPlayingComplete"))
                        }));
                        return
                    }
                } else return;
                a && this.postListen(a, this.callback("onNowPlayingComplete"))
            }
        },onNowPlayingComplete:function(a, b) {
            if (!b || !b.id)this.onFailedPost("scrobble", function() {
                $.publish("gs.notification", {type:"error",message:$.localize.getString("POPUP_FAIL_LISTENS_FACEBOOK")})
            }, b); else this.currentListening.id = b.id
        },onSongPlaying:function(a) {
            if (this.connected && this.scrobblingEnabled) {
                a = a.activeSong;
                if (!this.currentListening || a.queueSongID != this.currentListening.song.queueSongID || a.SongID != this.currentListening.song.SongID)this.currentListening = {song:a,secondsListened:0,id:null}; else this.currentListening.secondsListened +=
                        0.5
            }
        },onPlayStatusChange:function(a) {
            if (this.connected && this.scrobblingEnabled && this.currentListening && this.currentListening.song)switch (a.status) {
                case GS.player.PLAY_STATUS_FAILED:
                case GS.player.PLAY_STATUS_PAUSED:
                case GS.player.PLAY_STATUS_NONE:
                    if (this.currentListening.id && this.currentListening.secondsListened < this.MINIMUM_DURATION)this.deleteListen(this.currentListening.id, this.callback(function() {
                        delete this.currentListening.id
                    })); else if (this.currentListening.id) {
                        this.updateListenExpiresTime(this.currentListening.id,
                                this.currentListening.secondsListened);
                        this.currentListening.paused = true
                    }
                    break;
                case GS.player.PLAY_STATUS_PLAYING:
                    if (this.currentListening.id)this.currentListening.id && this.currentListening.secondsListened >= this.MINIMUM_DURATION && this.currentListening.paused && this.deleteListen(this.currentListening.id, this.callback(function() {
                        delete this.currentListening.id;
                        this.postListen(this.currentListening.song, this.callback("onNowPlayingComplete"))
                    })); else this.postListen(this.currentListening.song, this.callback("onNowPlayingComplete"));
                    this.currentListening.paused = false;
                    break
            }
        },postListen:function(a, b) {
            if (!(this.currentListening && this.currentListening.posting)) {
                if (this.currentListening)this.currentListening.posting = true;
                setTimeout(this.callback(function() {
                    var c = {};
                    c.song = "http://grooveshark.com" + a.toUrl().replace("#/", "/") + "&fbRocks";
                    c.access_token = FB.getAccessToken();
                    if (a.AlbumID && a.AlbumName)c.album = "http://grooveshark.com" + _.cleanUrl(a.AlbumName, a.AlbumID, "album").replace("#/", "/") + "?fbRocks";
                    if (a.ArtistID && a.ArtistName)c.album =
                            "http://grooveshark.com" + _.cleanUrl(a.ArtistName, a.ArtistID, "artist").replace("#/", "/") + "?fbRocks";
                    FB.api("/me/grooveshark:listen", "post", c, this.callback(function(g) {
                        $.isFunction(b) && b(a, g);
                        delete this.currentListening.posting
                    }))
                }), 50)
            }
        },updateListenExpiresTime:function(a, b) {
            FB.api("/" + a + "?expires_in=" + b, "post")
        },deleteListen:function(a, b) {
            FB.api("/" + a + "?method=delete", this.callback("onDeleteListen", b))
        },onDeleteListen:function(a, b) {
            if (b)$.isFunction(a) && a(); else $.publish("gs.notification", {type:"error",
                message:$.localize.getString("POPUP_FAIL_LISTENS_FACEBOOK")})
        },getFriends:function(a) {
            if (this.friends)a(this.friends); else if (this.connected)FB.api("me/friends", this.callback("onFacebookGetFriends", a)); else $.isFunction(a) && a(null)
        },onFacebookGetFriends:function(a, b) {
            if (b.data) {
                var c = [];
                $.each(b.data, function(g, h) {
                    c.push(h)
                });
                c.sort(function(g, h) {
                    var k = (g.name || "").toLowerCase(),m = (h.name || "").toLowerCase();
                    if (k < m)return-1; else if (k > m)return 1;
                    return 0
                });
                this.friends = c
            } else if (b.error) {
                this.lastError =
                        b.error;
                $.publish("gs.notification", {type:"error",message:$.localize.getString("NOTIF_FACEBOOK_FINDFRIENDS_ERROR")});
                $.isFunction(a) && a(null)
            }
            $.isFunction(a) && a(this.friends)
        },canPostToFriend:function(a, b) {
            (a = parseInt(a)) || $.isFunction(b) && b(false);
            if (this.friendPermissions[a] && typeof this.friendPermissions[a].canPost != "undefined")$.isFunction(b) && b(this.friendPermissions[a].canPost); else this.queryFQL("select can_post FROM user WHERE uid = " + a, this.callback(function(c) {
                if (c[0] && c[0]) {
                    if (this.friendPermissions[a])this.friendPermissions[a].canPost =
                            c[0].can_post; else this.friendPermissions[a] = {canPost:c[0].can_post};
                    $.isFunction(b) && b(c[0].can_post)
                }
            }), function() {
            }, true)
        },checkUserPermissions:function(a, b, c) {
            if (this.userPermissions)if (a.indexOf(",") > 0) {
                for (var g = a.split(","),h = true,k = 0,m = g.length; k < m; k++)if (!this.userPermissions[g[k]] || this.userPermissions[g[k]] == "0") {
                    h = false;
                    break
                }
                if (h)if ($.isFunction(b)) {
                    b(true);
                    return
                }
            } else if (this.userPermissions[a] && this.userPermissions[a] != "0")if ($.isFunction(b)) {
                b(true);
                return
            }
            this.queryFQL("SELECT " +
                    a + " FROM permissions WHERE uid = me()", this.callback(function(n) {
                if (n && n[0]) {
                    $.extend(this.userPermissions, n[0]);
                    for (var o in n[0])if (o && n[0].hasOwnProperty(o))if (n[0][o] == "0") {
                        $.isFunction(b) && b(false);
                        return
                    }
                    $.isFunction(b) && b(true)
                } else $.isFunction(b) && b(false)
            }), c, true)
        },getFacebookDetails:function(a, b) {
            if (a.toUrl) {
                var c = "http://listen.grooveshark.com/" + a.toUrl().replace("#/", "");
                GS.service.makeFacebookRequest("?ids=" + encodeURIComponent(c) + "&limit=100", null, "GET", function(g) {
                    try {
                        if (g) {
                            g = JSON.parse(g);
                            _.forEach(g, function(k) {
                                b(k)
                            })
                        }
                    } catch(h) {
                    }
                })
            }
        },getGroovesharkUsersFromFriends:function(a) {
            this.getFriends(this.callback(function(b) {
                if ($.isArray(b)) {
                    var c = [],g = [];
                    $.each(b, function(h, k) {
                        if (k && k.id) {
                            c.push(k.id);
                            g[k.id] = k.name
                        }
                    });
                    GS.service.getGroovesharkUsersFromFacebookUserIDs(c, this.callback("onGetGroovesharkUsers", g, a), function() {
                        $.publish("gs.notification", {type:"error",message:$.localize.getString("NOTIF_FACEBOOK_FINDFRIENDS_ERROR")});
                        $.isFunction(a) && a()
                    })
                } else {
                    $.publish("gs.notification", {type:"error",
                        message:$.localize.getString("NOTIF_FACEBOOK_FINDFRIENDS_ERROR")});
                    $.isFunction(a) && a()
                }
            }))
        },onGetGroovesharkUsers:function(a, b, c) {
            var g = [],h = false;
            if (c) {
                $.each(c, function(k, m) {
                    if (m && m.UserID && m.FacebookUserID && GS.user.favorites.users && !GS.user.favorites.users[m.UserID]) {
                        m.FacebookName = a[m.FacebookUserID];
                        g.push(m)
                    } else if (GS.user.favorites.users && GS.user.favorites.users[m.UserID])h = true
                });
                if (g && g.length > 0)GS.getLightbox().open("gsUsersFromThirdParty", {users:g,isTwitter:false,isFacebook:true}); else h ?
                        $.publish("gs.facebook.notification.findFriends", {message:"NOTIF_FACEBOOK_FINDFRIENDS_ALREADY",inviteFriends:false}) : $.publish("gs.facebook.notification.findFriends", {message:"NOTIF_FACEBOOK_FINDFRIENDS_NONE",inviteFriends:true})
            } else $.publish("gs.notification", {type:"error",message:$.localize.getString("NOTIF_FACEBOOK_FINDFRIENDS_ERROR")});
            $.isFunction(b) && b()
        }})
})();
GS.Controllers.BaseController.extend("GS.Controllers.LastfmController", {isGSSingleton:true,preSetup:function() {
    var a = GS.Controllers.BaseController.singletonCallback,b = $.subscribe;
    b("gs.auth.update", a("lastfm", "update"));
    b("gs.player.nowplaying", a("lastfm", "onNowPlaying"));
    b("gs.player.playing.continue", a("lastfm", "onSongPlaying"))
}}, {SERVICE_ID:2,API_KEY:"b1ecfd8a5f8ec4dbb4cdacb8f3638f6d",P_VERSION:"1.2.1",URL_USER_AUTH:"http://www.last.fm/api/auth",URL_AUDIOSCROBBLER:"http://ws.audioscrobbler.com/2.0/",
    CLIENT_ID:"gvs",CLIENT_VERSION:"1",MINIMUM_DURATION:240,SCROBBLING_FLAG:1,FAVORITES_FLAG:2,DEFAULT_FLAGS:1,authToken:null,sessionKey:null,username:null,sessionID:null,flags:0,scrobblingEnabled:false,lastError:null,nowPlaying:null,lastPlayed:null,currentListening:null,lastError:null,init:function() {
        if (!window.confirmLastfmConnection)window.confirmLastfmConnection = this.callback(function(a) {
            console.log("last.fm confirm connection", a);
            if (this.lastfmOpenerWindow) {
                this.lastfmOpenerWindow.close();
                this.lastfmOpenerWindow =
                        null
            }
            try {
                a = JSON.parse(a)
            } catch(b) {
                this.lastError = "parseError";
                this.loginFailedCallback();
                return
            }
            GS.airbridge && GS.airbridge.isDesktop ? window.setTimeout(function() {
                GS.getLastfm().onLogin(a)
            }, 300) : this.onLogin(a)
        });
        this._super()
    },appReady:function() {
        this.subscribe("gs.cowbell.ready", this.callback("commReady"))
    },commReady:function() {
        this.update()
    },update:function() {
        GS.user && GS.user.isLoggedIn && GS.user.UserID > 0 && GS.user.Flags & this.SERVICE_ID ? GS.service.getLastfmService(this.callback("onGetService"), this.callback("onGetService")) :
                this.clearInfo()
    },onGetService:function(a) {
        if (a.Session) {
            this.username = a.LastfmUsername;
            this.sessionKey = a.Session;
            this.flags = 1;
            this.scrobblingEnabled = true;
            if (a.FlagScrb) {
                this.flags |= this.SCROBBLING_FLAG;
                this.scrobblingEnabled = true
            }
            if (a.FlagFav)this.flags |= this.FAVORITES_FLAG;
            this.connected = true;
            $.publish("gs.lastfm.profile.update")
        }
    },showReAuthLightbox:function() {
        GS.getLightbox().open({type:"reAuthLastfm",view:{header:"POPUP_LASTFM_REAUTH_TITLE",message:"POPUP_LASTFM_REAUTH_MESSAGE",buttonsRight:[
            {label:"POPUP_REAUTH_SUBMIT",
                className:"submit"}
        ],buttonsLeft:GS.getLastfm().registeredWithLastfm ? [] : [
            {label:"POPUP_LASTFM_REAUTH_CANCEL",className:"close"}
        ]},callbacks:{".submit":function() {
            GS.getLastfm().logout(function() {
                GS.getLastfm().login(function() {
                    GS.getLightbox().close()
                })
            })
        },".close":function() {
            GS.getLastfm().logout(function() {
                GS.getLightbox().close()
            })
        }}})
    },login:function(a, b) {
        if (GS.user && GS.user.isLoggedIn) {
            this.loginSuccessCallback = a;
            this.loginFailedCallback = b;
            this.sessionKey = null;
            a = "http://" + window.location.host +
                    "/lastfmCallback.php?window=" + window.name;
            this.lastfmOpenerWindow = window.open(this.URL_USER_AUTH + "?api_key=" + this.API_KEY + "&cb=" + a, "", "width=950,height=700");
            if (GS.airbridge && GS.airbridge.isDesktop)this.lastfmOpenerWindow.parentSandboxBridge = {confirmLastfmConnection:window.confirmLastfmConnection}
        } else b({error:"LASTFM_PROBLEM_NOT_LOGGED_IN_ERROR_MSG"})
    },onLogin:function(a) {
        if (a.error || !a.token) {
            this.lastError = a.error;
            this.loginFailedCallback()
        } else {
            if (!this.flags)this.flags = this.DEFAULT_FLAGS;
            GS.user.Flags &
                    this.SERVICE_ID || GS.user.Flags & this.LASTFM_ONLY_SERVICE_ID ? GS.service.updateLastfmService("", a.token, "", 0, 0, this.callback("onSaveLastfmService", this.loginSuccessCallback, this.loginFailedCallback), this.loginFailedCallback) : GS.service.saveLastfmService("", a.token, "", this.flags, this.callback("onSaveLastfmService", this.loginSuccessCallback, this.loginFailedCallback), this.loginFailedCallback)
        }
    },onSaveLastfmService:function(a, b, c) {
        if (c.result == true && c.lastfmData && c.lastfmData.user) {
            this.username = c.lastfmData.user;
            this.sessionKey = c.lastfmData.session;
            this.connected = true;
            $.publish("gs.lastfm.profile.update");
            GS.user.Flags |= this.SERVICE_ID;
            $.isFunction(b) && a()
        } else if (c.result == -1)if (GS.user.Flags & this.SERVICE_ID || GS.user.Flags & this.FACEBOOK_ONLY_SERVICE_ID)GS.service.getLastfmService(this.callback("onGetService", a, function() {
            $.isFunction(b) && b({error:"LASTFM_PROBLEM_CONNECTING_ERROR_MSG"})
        }), function() {
            $.isFunction(b) && b({error:"LASTFM_PROBLEM_CONNECTING_ERROR_MSG"})
        }); else $.isFunction(b) && b({error:"LASTFM_DUPLICATE_ACCOUNT_ERROR_MSG"});
        else $.isFunction(b) && b({error:"POPUP_SIGNUP_LOGIN_FORM_LASTFM_ERROR"})
    },saveFlags:function(a, b, c) {
        var g = 0,h = 0;
        if (a & this.SCROBBLING_FLAG && !(this.flags & this.SCROBBLING_FLAG))g |= this.SCROBBLING_FLAG; else if (!(a & this.SCROBBLING_FLAG) && this.flags & this.SCROBBLING_FLAG)h |= this.SCROBBLING_FLAG;
        if (a & this.FAVORITES_FLAG && !(this.flags & this.FAVORITES_FLAG))g |= this.FAVORITES_FLAG; else if (!(a & this.FAVORITES_FLAG) && this.flags & this.FAVORITES_FLAG)h |= this.FAVORITES_FLAG;
        this.flags = a;
        GS.user.Flags & this.SERVICE_ID ||
                GS.user.Flags & this.LASTFM_ONLY_SERVICE_ID ? GS.service.updateLastfmService("", this.sessionKey, this.username, g, h, this.callback("onSaveLastfmService", b, c), c) : GS.service.saveLastfmService("", this.sessionKey, this.username, g, this.callback("onSaveLastfmService", b, c), c)
    },logout:function(a) {
        this.username ? GS.service.removeLastfmService(this.username, this.callback("onLogout", a)) : GS.service.removeLastfmService(false, this.callback("onLogout", a))
    },onLogout:function(a) {
        GS.user.Flags = (GS.user.Flags | this.SERVICE_ID) -
                this.SERVICE_ID;
        this.clearInfo();
        $.isFunction(a) && a()
    },clearInfo:function() {
        this.sessionKey = null;
        this.username = "";
        this.flags = null;
        this.connected = false;
        $.publish("gs.lastfm.profile.update")
    },onNowPlaying:function(a) {
        if (!this.currentListening || a.queueSongID != this.currentListening.queueSongID || a.SongID != this.currentListening.songID)this.currentListening = {songID:a.SongID,queueSongID:a.queueSongID,secondsListened:0,scrobbled:false}; else if (GS.player.repeatMode == GS.player.REPEAT_ONE && a.queueSongID == this.currentListening.queueSongID) {
            this.currentListening.scrobbled =
                    false;
            this.currentListening.secondsListened = 0
        } else return;
        if ((this.flags & this.SCROBBLING_FLAG) > 0 && this.scrobblingEnabled && a) {
            this.nowPlaying = {track:a.SongName,artist:a.ArtistName,album:a.AlbumName,duration:a.EstimateDuration ? Math.round(a.EstimateDuration / 1E3) : 0,method:"track.updateNowPlaying",sk:this.sessionKey,api_key:this.API_KEY};
            if (a.TrackNum)this.nowPlaying.trackNumber = String(a.TrackNum);
            this.getJSON(this.URL_AUDIOSCROBBLER, this.nowPlaying, this.callback("onNowPlayingComplete"), this.callback("onNowPlayingFailed"),
                    true)
        }
    },onNowPlayingComplete:function(a) {
        if (!a || !a.nowplaying)this.onLastfmError("POPUP_FAIL_SCROBBLE_LASTFM", a)
    },onLastfmError:function(a, b) {
        a || (a = "POPUP_FAIL_COMMUNICATE_LASTFM");
        (this.lastError = b) && b.error && b.error == 9 ? this.showReAuthLightbox() : $.publish("gs.notification", {type:"error",message:$.localize.getString(a)})
    },onSongPlaying:function(a) {
        var b = a.activeSong;
        a = Math.round(a.duration / 1E3);
        if (!this.currentListening || b.queueSongID != this.currentListening.queueSongID || b.SongID != this.currentListening.songID)this.currentListening =
        {songID:b.SongID,queueSongID:b.queueSongID,secondsListened:0,scrobbled:false}; else this.currentListening.secondsListened += 0.5;
        if ((this.flags & this.SCROBBLING_FLAG) > 0 && this.scrobblingEnabled && b && a >= 30 && (this.currentListening.secondsListened >= this.MINIMUM_DURATION || this.currentListening.secondsListened >= a / 2) && !this.currentListening.scrobbled) {
            this.lastPlayed = {artist:b.ArtistName,track:b.SongName,timestamp:Math.round((new Date).getTime() / 1E3),duration:b.EstimateDuration ? Math.round(b.EstimateDuration /
                    1E3) : 0,album:b.AlbumName,method:"track.scrobble",sk:this.sessionKey,api_key:this.API_KEY};
            if (b.TrackNum)this.lastPlayed.trackNumber = String(b.TrackNum);
            this.currentListening.scrobbled = true;
            this.getJSON(this.URL_AUDIOSCROBBLER, this.lastPlayed, this.callback("onSongPlayingComplete"), this.callback("onNowPlayingFailed"), true)
        }
    },onSongPlayingComplete:function(a) {
        if (!a || !a.scrobbles)this.onLastfmError("POPUP_FAIL_SCROBBLE_LASTFM", a)
    },getJSON:function(a, b, c, g, h) {
        if (a && b && c)if (h)GS.service.makeLastfmRequest(b,
                function(k) {
                    try {
                        k = JSON.parse(k)
                    } catch(m) {
                        k = null
                    }
                    c(k)
                }, g ? g : c); else {
            b.format = "json";
            $.ajax({url:a,data:b,success:c,error:g ? g : c,dataType:"jsonp",cache:true})
        }
    }});
GS.Controllers.BaseController.extend("GS.Controllers.GoogleController", {isGSSingleton:true}, {SERVICE_ID:64,GOOGLE_ONLY_SERVICE_ID:32,REQUIRED:"email,firstname,lastname",EXTENSIONS:{"openid.ns.ax":"http://openid.net/srv/ax/1.0","openid.ax.mode":"fetch_request","openid.ax.type.email":"http://axschema.org/contact/email","openid.ax.type.firstname":"http://axschema.org/namePerson/first","openid.ax.type.lastname":"http://axschema.org/namePerson/last","openid.ax.required":"email,firstname,lastname","openid.ui.icon":"true"},
    googleOpener:null,googleOpenerWindow:null,googleOpenerInterval:null,connected:false,registeredWithGoogle:false,email:"",firstname:"",lastname:"",googleID:"",lastError:"",onLoginSaveData:null,googlePlusloaded:false,loginSuccessCallback:null,loginFailedCallback:null,init:function() {
        this.subscribe("gs.auth.update", this.callback("update"));
        if (!window.confirmGoogleConnection)window.confirmGoogleConnection = this.callback(function(a) {
            if (this.googleOpenerWindow) {
                this.googleOpenerWindow.close();
                this.googleOpenerWindow =
                        null
            }
            try {
                a = JSON.parse(a)
            } catch(b) {
                this.lastError = "parseError";
                this.loginFailedCallback();
                return
            }
            if (a.mode == "cancel" || a.error == "cancel") {
                this.lastError = "cancel";
                this.onCancelledLogin()
            } else GS.airbridge && GS.airbridge.isDesktop ? window.setTimeout(function() {
                GS.getGoogle().onLogin(a)
            }, 300) : this.onLogin(a)
        });
        this._super()
    },appReady:function() {
        this.subscribe("gs.cowbell.ready", this.callback("commReady"));
        this.googleOpener = googleOpenIDPopup.createPopupOpener({realm:"http://*.grooveshark.com",opEndpoint:"https://www.google.com/accounts/o8/ud",
            returnToUrl:(window.location.protocol ? window.location.protocol : "http:") + "//" + (window.location.hostname ? window.location.hostname : "grooveshark.com") + "/googleCallback.php?window=" + window.name,shouldEncodeUrls:true,extensions:this.EXTENSIONS});
        if (!window.name)window.name = gsConfig.windowName
    },commReady:function() {
        if (_.browserDetect().browser != "msie" || _.browserDetect().version > 6) {
            window.goPLoadAttempts = 0;
            window.loadGooglePlus = function() {
                try {
                    var a = document.getElementById("go-root");
                    if (a && a.getElementsByTagName("script").length) {
                        a.removeChild(a.getElementsByTagName("script")[0]);
                        a.getElementsByTagName("div").length && a.removeChild(a.getElementsByTagName("div")[0]);
                        window.gapi = null;
                        GS.getGoogle().googlePlusloaded = false
                    }
                    var b = document.createElement("script");
                    b.async = true;
                    b.src = document.location.protocol + "//apis.google.com/js/plusone.js";
                    b.text = "{parsetags: 'explicit'}";
                    b.onload = b.onreadystatechange = function() {
                        if ($.browser.msie && this.readyState) {
                            if (this.readyState === "complete" || this.readyState === "loaded") {
                                this.onload = this.onreadystatechange = null;
                                setTimeout(function() {
                                    window.gapi &&
                                    GS.getGoogle().initGooglePlus()
                                }, 10)
                            }
                        } else {
                            this.onload = this.onreadystatechange = null;
                            setTimeout(function() {
                                window.gapi && GS.getGoogle().initGooglePlus()
                            }, 10)
                        }
                    };
                    document.getElementById("go-root").appendChild(b);
                    window.goPLoadAttempts++;
                    window.googlePlusLoadTimeout = setTimeout(function() {
                                if ((!window.gapi || !GS.getGoogle().googlePlusloaded) && window.goPLoadAttempts < 3)window.loadGooglePlus(); else!window.gapi && window.goPLoadAttempts >= 3 || window.gapi && !GS.getGoogle().googlePlusloaded && GS.getGoogle().initGooglePlus()
                            },
                            2E4)
                } catch(c) {
                    console.error("Could not load Google JS. Fatal Error: ", c);
                    GS.getGoogle().lastError = c
                }
            };
            window.loadGooglePlus()
        }
        this.update()
    },initGooglePlus:function() {
        this.googlePlusloaded = true;
        window.googlePlusLoadTimeout && clearTimeout(window.googlePlusLoadTimeout);
        this.parsePlusWidgets();
        $.subscribe("gs.theme.set", function() {
            window.document.getElementById("theme_home") && GS.getGoogle().parsePlusWidgets(window.document.getElementById("theme_home"))
        })
    },parsePlusWidgets:function(a) {
        if (window.gapi)window.gapi.plusone.go(a ?
                a : document.body)
    },update:function() {
        if (GS.user && GS.user.isLoggedIn && GS.user.UserID > 0 && (GS.user.Flags & this.SERVICE_ID || GS.user.Flags & this.GOOGLE_ONLY_SERVICE_ID)) {
            this.registeredWithGoogle = (GS.user.Flags & this.GOOGLE_ONLY_SERVICE_ID) > 0;
            GS.service.getUserGoogleData(this.callback("onUserGoogleData", null, null))
        } else GS.user && GS.user.isLoggedIn && this.onLoginSaveData && this.onLoginSaveData == GS.user.Email ? GS.service.saveUserGoogleData(this.callback("onSaveUserGoogleData", null, null), function() {
            GS.getGoogle().clearInfo()
        }) :
                this.clearInfo()
    },showReAuthLightbox:function() {
        GS.getLightbox().open({type:"reAuthGoogle",view:{header:"POPUP_GOOGLE_REAUTH_TITLE",message:"POPUP_GOOGLE_REAUTH_MESSAGE",buttonsRight:[
            {label:"POPUP_REAUTH_SUBMIT",className:"submit"}
        ],buttonsLeft:GS.getGoogle().registeredWithGoogle ? [] : [
            {label:"POPUP_GOOGLE_REAUTH_CANCEL",className:"close"}
        ]},callbacks:{".submit":function() {
            GS.getGoogle().logout(function() {
                GS.getGoogle().login(function() {
                    GS.getLightbox().close()
                })
            })
        },".close":function() {
            GS.getGoogle().logout(function() {
                GS.getLightbox().close()
            })
        }}})
    },
    onUserGoogleData:function(a, b, c) {
        try {
            if (c && c.GoogleEmailAddress && c.GoogleID) {
                this.email = c.GoogleEmailAddress;
                this.googleID = c.GoogleID;
                this.connected = true;
                $.publish("gs.google.profile.update");
                a && a()
            } else if (c && (!c.GoogleEmailAddress || !c.GoogleID))this.showReAuthLightbox(); else {
                GS.user.Flags = (GS.user.Flags | this.SERVICE_ID) - this.SERVICE_ID;
                if (this.registeredWithGoogle)GS.user.Flags = (GS.user.Flags | this.GOOGLE_ONLY_SERVICE_ID) - this.GOOGLE_ONLY_SERVICE_ID;
                this.clearInfo();
                $.isFunction(b) && b({error:"GOOGLE_MISSING_LOGIN_INFO_ERROR_MSG"})
            }
        } catch(g) {
            this.connected =
                    false;
            $.isFunction(b) && b({error:"GOOGLE_MISSING_LOGIN_INFO_ERROR_MSG"})
        }
    },onAuthGoogleUser:function(a, b, c) {
        if (c)if (c.userID == 0)this.register(a, b); else {
            a(c);
            $.publish("gs.google.profile.update");
            GS.getGuts().logEvent("googleAuthenticated", {authenticated:true})
        } else b && b(c)
    },onSaveUserGoogleData:function(a, b, c) {
        if (c == 1) {
            this.connected = true;
            $.publish("gs.google.profile.update");
            GS.user.Flags |= this.SERVICE_ID;
            $.isFunction(a) && a()
        } else if (c == -1)if (GS.user.Flags & this.SERVICE_ID || GS.user.Flags & this.GOOGLE_ONLY_SERVICE_ID)GS.service.getUserGoogleData(this.callback("onUserGoogleData",
                a, function() {
                    b("GOOGLE_PROBLEM_CONNECTING_ERROR_MSG")
                }), function() {
            b("GOOGLE_PROBLEM_CONNECTING_ERROR_MSG")
        }); else b && b({error:"GOOGLE_DUPLICATE_ACCOUNT_ERROR_MSG"}); else if (c == -2)b && b({error:"GOOGLE_MISSING_LOGIN_INFO_ERROR_MSG"}); else b && b({error:"POPUP_SIGNUP_LOGIN_FORM_GOOGLE_ERROR"})
    },register:function(a, b) {
        var c = this.email.split("@")[0];
        if (c) {
            c = c.replace(/^[\.\-_]|[^a-zA-Z0-9\.\-_]|[\.\-_]$/g, "");
            c = c.replace(/([\.\-_]){2,}/g, "$1")
        }
        var g = this.firstname + " " + this.lastname,h = Math.floor(Math.random() *
                997508) + 1005;
        g || c ? GS.service.getUsernameSuggestions(c, g, h, this.callback("usernameSuggestSuccess", a, b), this.callback("usernameSuggestFailed", a, b)) : this.usernameSuggestFailed("")
    },usernameSuggestSuccess:function(a, b, c) {
        b = "";
        if (c && c.length > 0)b = c[0];
        this.openRegisterLightbox(a, b)
    },usernameSuggestFailed:function(a, b) {
        a && b ? b({error:"POPUP_SIGNUP_LOGIN_FORM_GOOGLE_ERROR"}) : this.openRegisterLightbox(null, "")
    },openRegisterLightbox:function(a, b) {
        var c = {isGoogle:true,googleData:{email:this.email,googleID:this.googleID},
            username:b,email:this.email,fname:this.firstname + " " + this.lastname,message:$.localize.getString("POPUP_SIGNUP_LOGIN_FORM_GOOGLE_NOT_FOUND")};
        GS.user.defaultFromService = c;
        GS.getLightbox().close();
        if (GS.page.activePageName == "signup")GS.page.activePage.update(c); else location.hash = "#/signup";
        GS.getGuts().logEvent("googleRegistered", {registered:true})
    },login:function(a, b) {
        this.googleOpenerWindow = this.googleOpener.popup(450, 600);
        this.loginSuccessCallback = a;
        this.loginFailedCallback = b;
        if (GS.airbridge && GS.airbridge.isDesktop)this.googleOpenerWindow.parentSandboxBridge =
        {confirmGoogleConnection:window.confirmGoogleConnection}
    },onLogin:function(a) {
        if (a.error) {
            this.lastError = a.error;
            this.loginFailedCallback()
        } else {
            if (a.firstName)this.firstname = a.firstName;
            if (a.lastName)this.lastname = a.lastName;
            if (a.email)this.email = a.email;
            if (a.googleID)this.googleID = a.googleID;
            if (GS.user.isLoggedIn)GS.user.Flags & this.SERVICE_ID || GS.user.Flags & this.GOOGLE_ONLY_SERVICE_ID ? GS.service.updateUserGoogleData(this.callback("onSaveUserGoogleData", this.loginSuccessCallback, this.loginFailedCallback),
                    this.loginFailedCallback) : GS.service.saveUserGoogleData(this.callback("onSaveUserGoogleData", this.loginSuccessCallback, this.loginFailedCallback), this.loginFailedCallback); else GS.service.authenticateGoogleUser(this.callback("onAuthGoogleUser", this.loginSuccessCallback, this.loginFailedCallback), this.loginFailedCallback)
        }
    },onCancelledLogin:function() {
    },onLogout:function(a) {
        if (!this.registeredWithGoogle)GS.user.Flags = (GS.user.Flags | this.SERVICE_ID) - this.SERVICE_ID;
        this.clearInfo();
        $.publish("gs.google.profile.update");
        this.registeredWithGoogle && GS.auth.logout();
        $.isFunction(a) && a()
    },clearInfo:function() {
        this.identity = null;
        this.lastname = this.firstname = this.email = "";
        this.registeredWithGoogle = this.connected = false;
        this.googleID = this.onLoginSaveData = null
    },logout:function(a) {
        this.googleID ? GS.service.removeUserGoogleData(this.googleID, this.callback("onLogout", a)) : GS.service.removeUserGoogleData(false, this.callback("onLogout", a))
    },serviceLogout:function() {
        var a = googleOpenIDPopup.getCenteredCoords(890, 600);
        window.open("https://www.google.com/accounts/Logout",
                "", "width=890,height=600,status=1,location=1,resizable=yes,left=" + a[0] + ",top=" + a[1])
    }});
GS.Controllers.BaseController.extend("GS.Controllers.TwitterController", {isGSSingleton:true}, {twitterLoaded:false,lastError:null,init:function() {
    this._super()
},appReady:function() {
    this.subscribe("gs.cowbell.ready", this.callback("commReady"))
},commReady:function() {
    if (_.browserDetect().browser != "msie" || _.browserDetect().version > 6) {
        window.twLoadAttempts = 0;
        window.loadTwitter = function() {
            try {
                if (document.getElementById("tw-root") && document.getElementById("tw-root").getElementsByTagName("script").length) {
                    document.getElementById("tw-root").removeChild(document.getElementById("tw-root").getElementsByTagName("script")[0]);
                    document.getElementById("tw-root") && document.getElementById("tw-root").getElementsByTagName("div").length && document.getElementById("tw-root").removeChild(document.getElementById("tw-root").getElementsByTagName("div")[0]);
                    window.twttr = null;
                    GS.getTwitter().twitterloaded = false
                }
                var a = document.createElement("script");
                a.async = true;
                a.src = document.location.protocol + "//platform.twitter.com/widgets.js";
                a.onload = a.onreadystatechange = function() {
                    if ($.browser.msie && this.readyState) {
                        if (this.readyState === "complete" ||
                                this.readyState === "loaded") {
                            this.onload = this.onreadystatechange = null;
                            setTimeout(function() {
                                window.twttr && GS.getTwitter().initTwitter()
                            }, 10)
                        }
                    } else {
                        this.onload = this.onreadystatechange = null;
                        setTimeout(function() {
                            window.twttr && GS.getTwitter().initTwitter()
                        }, 10)
                    }
                };
                document.getElementById("tw-root").appendChild(a);
                window.twLoadAttempts++;
                window.twitterLoadTimeout = setTimeout(function() {
                    if ((!window.twttr || !GS.getTwitter().twitterloaded) && window.twLoadAttempts < 3)window.loadTwitter(); else!window.twttr && window.twLoadAttempts >=
                            3 || window.twttr && !GS.getTwitter().twitterloaded && GS.getTwitter().initTwitter()
                }, 2E4)
            } catch(b) {
                console.error("Could not load Twitter JS. Fatal Error: ", b);
                GS.getTwitter().lastError = b
            }
        };
        window.loadTwitter()
    }
},initTwitter:function() {
    this.twitterLoaded = true;
    window.twitterLoadTimeout && clearTimeout(window.twitterLoadTimeout);
    twttr.events.bind("tweet", function(a) {
        if (a) {
            var b;
            if (a.target && a.target.nodeName == "IFRAME" && a.target.src) {
                a = decodeURI(a.target.src).split("&");
                for (var c = 0,g; g = a[c]; ++c)if (g.indexOf("url=") ===
                        0)b = unescape(g.split("=")[1])
            }
            window._gaq && window._gaq.push && window._gaq.push(["_trackSocial","twitter","tweet",b])
        }
    });
    $.subscribe("gs.theme.set", this.parseWidgets)
},parseWidgets:function() {
    window.twttr && window.twttr.widgets.load()
},getTwitterShareMessage:function(a, b, c, g, h) {
    var k = this.callback(function(m) {
        m = m.tinySongURL;
        var n = new GS.Models.DataString;
        switch (a) {
            case "song":
                var o = b.SongName;
                if (o.length > 40)o = o.substr(0, 40) + "...";
                n.string = $.localize.getString("SHARE_TWITTER_SONG");
                n.data = {SongName:o,
                    ArtistName:b.ArtistName};
                n = n.render();
                break;
            case "artist":
                o = b.ArtistName;
                if (o.length > 60)o = o.substr(0, 60) + "...";
                n.string = $.localize.getString("SHARE_TWITTER_ARTIST");
                n.data = {ArtistName:o};
                n = n.render();
                break;
            case "album":
                o = b.AlbumName;
                if (o.length > 40)o = o.substr(0, 40) + "...";
                n.string = $.localize.getString("SHARE_TWITTER_ALBUM");
                n.data = {AlbumName:o,ArtistName:b.ArtistName};
                n = n.render();
                break;
            case "playlist":
                o = b.PlaylistName;
                if (o.length > 40)o = o.substr(0, 40) + "...";
                n.string = $.localize.getString("SHARE_TWITTER_PLAYLIST");
                n.data = {PlaylistName:o,UserName:b.UserName};
                n = n.render();
                break;
            default:
                n = "";
                break
        }
        if (n.length < 129 - m.length - 18)n += " #nowplaying";
        if (n.length < 128 - m.length - 18 && (new Date).format("D") === "Mon")n += " #musicmonday";
        if (n.length < 131 - m.length - 18 && (new Date).format("D") === "Tue")n += " #tunesday";
        g(n, m)
    });
    if (a == "playlist") {
        c = "http://tinysong.com/p/" + _.base62Encode(b.PlaylistID + "");
        k({tinySongURL:c})
    } else if (a == "song")GS.service.getDetailsForBroadcast(b.SongID, k, this.callback(function() {
        k({tinySongURL:c})
    })); else if (h)k({tinySongURL:c});
    else {
        c = "http://api.bitly.com/v3/shorten?login=grooveshark&apiKey=R_44014f5c4cfe09348eced3baebeadcc3&longUrl=" + c;
        $.ajax({url:c,dataType:"jsonp",success:this.callback(function(m) {
            m && m.data && m.data.url ? k({tinySongURL:m.data.url}) : k({tinySongURL:c})
        }),error:this.callback(function() {
            k({tinySongURL:c})
        })})
    }
}});
GS.Controllers.BaseController.extend("GS.Controllers.ApiController", {onDocument:true}, {_songStatusCallback:"",_statusLookup:{0:"none",1:"loading",2:"loading",3:"playing",4:"paused",5:"buffering",6:"failed",7:"completed"},_protocolActions:["play","add","next"],_lastStatus:null,init:function() {
    this.subscribe("gs.player.playstatus", this.callback(this._doStatusCallback));
    this.subscribe("gs.player.song.change", this.callback(this._onSongChange));
    this._super()
},getApplicationVersion:function() {
    return gsConfig.revision
},
    getAPIVersion:function() {
        return 1.5
    },executeProtocol:function(a) {
        var b = a.toLowerCase();
        if (b.indexOf("gs://") != -1) {
            a = a.substring(5);
            b = b.substring(5)
        }
        if (a.charAt(a.length - 1) == "/") {
            a = a.substring(0, a.length - 1);
            b = b.substring(0, b.length - 1)
        }
        b = b.split("/");
        var c = b.pop();
        if (this._protocolActions.indexOf(c) == -1) {
            b.push(c);
            c = ""
        }
        if (b[0] == "themes")GS.getLightbox().open("themes"); else {
            if (c) {
                a = a.substring(0, a.length - c.length - 1);
                var g = GS.player.INDEX_DEFAULT,h = false;
                switch (c) {
                    case "play":
                        h = true;
                        break;
                    case "next":
                        g =
                                GS.player.INDEX_NEXT;
                        break
                }
                if (GS.player)switch (b[0]) {
                    case "s":
                        GS.Models.Song.getSong(b[2], this.callback(function(k) {
                            GS.player.addSongsToQueueAt(k.SongID, g, h)
                        }), null, false);
                        break;
                    case "song":
                        GS.Models.Song.getSongFromToken(b[2], this.callback(function(k) {
                            GS.player.addSongsToQueueAt(k.SongID, g, h)
                        }), null, false);
                        break;
                    case "album":
                        GS.Models.Album.getAlbum(b[2], this.callback(function(k) {
                            k.play(g, h)
                        }), null, false);
                        break;
                    case "playlist":
                        GS.Models.Playlist.getPlaylist(b[2], this.callback(function(k) {
                            k.play(g,
                                    h)
                        }), null, false);
                        break
                }
            }
            if (b[0] == "search") {
                b = b[b.length - 1];
                a = a.substring(0, a.length - b.length);
                a += "?q=" + b
            }
            location.hash = "/" + a
        }
    },getCurrentSongStatus:function() {
        return this._buildCurrentPlayStatus()
    },setSongStatusCallback:function(a) {
        if ($.isFunction(a))this._songStatusCallback = a; else if (_.isString(a)) {
            a = a.split(".");
            a = this._getObjectChain(window, a);
            if ($.isFunction(a))this._songStatusCallback = a
        }
        return this._buildCurrentPlayStatus()
    },_getObjectChain:function(a, b) {
        var c = b.shift();
        return(c = a[c]) ? b.length ?
                this._getObjectChain(c, b) : c : null
    },_doStatusCallback:function(a) {
        if (a && this._lastStatus)if (a.status === this._lastStatus.status)if (!a.activeSong && !this._lastStatus.activeSong) {
            this._lastStatus = a;
            return
        } else if (a.activeSong && this._lastStatus.activeSong)if (a.activeSong.SongID === this._lastStatus.activeSong.SongID && a.activeSong.autoplayVote === this._lastStatus.activeSong.autoplayVote) {
            this._lastStatus = a;
            return
        }
        this._lastStatus = a;
        $.isFunction(this._songStatusCallback) && this._songStatusCallback(this._buildCurrentPlayStatus())
    },
    _onSongChange:function(a) {
        if (!this._lastStatus || this._lastStatus.activeSong && this._lastStatus.activeSong.SongID === a.SongID && this._lastStatus.activeSong.autoplayVote !== a.autoplayVote) {
            if (this._lastStatus)this._lastStatus.activeSong.autoplayVote = a.autoplayVote;
            $.isFunction(this._songStatusCallback) && this._songStatusCallback(this._buildCurrentPlayStatus())
        }
    },_buildCurrentPlayStatus:function() {
        var a = {song:null,status:"none"};
        if (GS.player) {
            var b = GS.player.getPlaybackStatus();
            if (b)if (b.activeSong) {
                var c =
                        GS.Models.Song.getOneFromCache(b.activeSong.SongID);
                a.song = {songID:b.activeSong.SongID,songName:b.activeSong.SongName.replace(/&amp\;/g, "&"),artistID:b.activeSong.ArtistID,artistName:b.activeSong.ArtistName.replace(/&amp\;/g, "&"),albumID:b.activeSong.AlbumID,albumName:b.activeSong.AlbumName.replace(/&amp\;/g, "&"),trackNum:c ? c.TrackNum : 0,estimateDuration:b.activeSong.EstimateDuration,artURL:c ? c.getImageURL() : gsConfig.assetHost + "/webincludes/images/default/album_250.png",calculatedDuration:b.duration,
                    position:b.position,vote:b.activeSong.autoplayVote};
                a.status = this._statusLookup[b.status]
            }
        }
        return a
    },getPreviousSong:function() {
        var a = null;
        if (GS.player && GS.player.queue && GS.player.queue.previousSong) {
            a = GS.player.queue.previousSong;
            var b = GS.Models.Song.getOneFromCache(a.SongID);
            a = {songID:a.SongID,songName:a.SongName.replace(/&amp\;/g, "&"),artistID:a.ArtistID,artistName:a.ArtistName.replace(/&amp\;/g, "&"),albumID:a.AlbumID,albumName:a.AlbumName.replace(/&amp\;/g, "&"),trackNum:b ? b.TrackNum : 0,estimateDuration:a.EstimateDuration,
                artURL:b ? b.getImageURL() : gsConfig.assetHost + "/webincludes/images/default/album_250.png",vote:a.autoplayVote}
        }
        return a
    },getNextSong:function() {
        var a = null;
        if (GS.player && GS.player.queue && GS.player.queue.nextSong) {
            a = GS.player.queue.nextSong;
            var b = GS.Models.Song.getOneFromCache(a.SongID);
            a = {songID:a.SongID,songName:a.SongName.replace(/&amp\;/g, "&"),artistID:a.ArtistID,artistName:a.ArtistName.replace(/&amp\;/g, "&"),albumID:a.AlbumID,albumName:a.AlbumName.replace(/&amp\;/g, "&"),trackNum:b ? b.TrackNum : 0,estimateDuration:a.EstimateDuration,
                artURL:b ? b.getImageURL() : gsConfig.assetHost + "/webincludes/images/default/album_250.png",vote:a.autoplayVote}
        }
        return a
    },addSongsByID:function(a, b) {
        GS.player && GS.player.addSongsToQueueAt(a, GS.player.INDEX_DEFAULT, b)
    },addSongByToken:function(a, b) {
        GS.player && GS.Models.Song.getSongFromToken(a, this.callback(function(c) {
            GS.player.addSongsToQueueAt([c.SongID], GS.player.INDEX_DEFAULT, b)
        }), null, false)
    },addAlbumByID:function(a, b) {
        GS.player && GS.Models.Album.getAlbum(a, this.callback(function(c) {
            c.play(GS.player.INDEX_DEFAULT,
                    b)
        }), null, false)
    },addPlaylistByID:function(a, b) {
        GS.player && GS.Models.Playlist.getPlaylist(a, this.callback(function(c) {
            c.play(GS.player.INDEX_DEFAULT, b)
        }), null, false)
    },play:function() {
        if (GS.player && GS.player.queue && GS.player.queue.activeSong)GS.player.isPaused ? GS.player.resumeSong() : GS.player.playSong(GS.player.queue.activeSong.queueSongID)
    },pause:function() {
        GS.player && GS.player.pauseSong()
    },seekToPosition:function(a) {
        GS.player && GS.player.seekTo(a)
    },togglePlayPause:function() {
        if (GS.player)GS.player.isPaused ?
                GS.player.resumeSong() : GS.player.pauseSong()
    },previous:function() {
        GS.player && GS.player.previousSong()
    },next:function() {
        GS.player && GS.player.nextSong()
    },setVolume:function(a) {
        GS.player && GS.player.setVolume(a)
    },getVolume:function() {
        if (GS.player)return GS.player.getVolume();
        return 0
    },setIsMuted:function(a) {
        GS.player && GS.player.setIsMuted(a)
    },getIsMuted:function() {
        if (GS.player)return GS.player.getIsMuted();
        return false
    },voteCurrentSong:function(a) {
        GS.player && GS.player.queue && GS.player.queue.activeSong &&
        GS.player.voteSong(GS.player.queue.activeSong.queueSongID, a)
    },getVoteForCurrentSong:function() {
        if (GS.player && GS.player.queue && GS.player.queue.activeSong)return GS.player.queue.activeSong.autoplayVote
    },favoriteCurrentSong:function() {
        GS.player && GS.player.queue && GS.player.queue.activeSong && GS.user.addToSongFavorites(GS.player.queue.activeSong.SongID)
    },addCurrentSongToLibrary:function() {
        GS.player && GS.player.queue && GS.player.queue.activeSong && GS.user.addToLibrary([GS.player.queue.activeSong.SongID])
    },
    removeCurrentSongFromQueue:function() {
        GS.player && GS.player.queue && GS.player.queue.activeSong && GS.player.removeSongs([GS.player.queue.activeSong.queueSongID])
    }});
(function() {
    GS.Controllers.BaseController.extend("GS.Controllers.PageController", {activePage:null,activePageName:null,activePageIdentifier:null,activePageParams:null,SMALL_APP_LIMIT:1200,_element:null,activate:function(a, b, c) {
                if (!this._element)this._element = $("#page");
                $(".slick-reorder-proxy").remove();
                $application = $("#application");
                if (this.activePageName === a && this.activePageIdentifier === b) {
                    this.activePageParams = c;
                    $.publish("gs.page.view", this.activePageName);
                    return this.activePage
                }
                var g = GS.Controllers.Page,
                        h = a;
                h = h.replace(/\_/g, " ");
                h = _.ucwords(h);
                h = h.replace(/\s/g, "");
                g = g[h + "Controller"];
                if (_.defined(g)) {
                    this.activePage && this.activePage.destroy();
                    this.activePage = new g(this._element);
                    this.activePageName = a;
                    this.activePageIdentifier = b;
                    this.activePageParams = c;
                    switch (a) {
                        case "home":
                        case "boxee":
                            if (GS.user.settings.local.persistPinboard)GS.getSidebar().show(); else GS.getSidebar.prototype.inst && GS.getSidebar().hide();
                            $("#theme_home *").show();
                            GS.theme.themeCenter();
                            break;
                        case "signup":
                            GS.getSidebar.prototype.inst &&
                            GS.getSidebar().hide();
                            $("#theme_home *").hide();
                            break;
                        case "music":
                            if (b == GS.user.UserID || GS.user.settings.local.persistPinboard)GS.getSidebar().show(); else GS.getSidebar.prototype.inst && GS.getSidebar().hide();
                            break;
                        case "playlist":
                            if (GS.user.settings.local.persistPinboard || GS.user.playlists[this.activePageIdentifier] && $("#application").width() > GS.page.SMALL_APP_LIMIT)GS.getSidebar().show(); else GS.getSidebar.prototype.inst && GS.getSidebar().hide();
                            $("#theme_home *").hide();
                            $("ul.ui-autocomplete").remove();
                            break;
                        case "album":
                        case "explore":
                        case "artist":
                        case "search":
                        case "user":
                        default:
                            if (GS.user.settings.local.persistPinboard)GS.getSidebar().show(); else GS.getSidebar.prototype.inst && GS.getSidebar().hide();
                            $("#theme_home *").hide();
                            $("ul.ui-autocomplete").remove();
                            break
                    }
                    GS.getLocale();
                    $("#theme_page_header").hide().removeClass("measure");
                    $("#theme_page_header_expandable").height(0);
                    $.publish("gs.page.view", this.activePageName);
                    return this.activePage
                }
            },titlePrepend:"Grooveshark - ",titlePostpend:" - Grooveshark",
                title:function(a, b) {
                    b = typeof b === "undefined" ? true : b;
                    document.title = b ? a + this.titlePostpend : this.titlePrepend + a
                },ALLOW_LOAD:true,justDidConfirm:false,lastPage:"",confirmMessage:$.localize.getString("ONCLOSE_PAGE_CHANGES"),checkLock:function() {
                    if (GS.Controllers.PageController.justDidConfirm || !GS.Controllers.PageController.ALLOW_LOAD && !confirm($.localize.getString("ONCLOSE_SAVE_PLAYLIST"))) {
                        GS.Controllers.PageController.justDidConfirm = true;
                        location.replace([location.protocol,"//",location.host,location.pathname,
                            GS.Controllers.PageController.lastPage].join(""));
                        setTimeout(function() {
                            GS.Controllers.PageController.justDidConfirm = false
                        }, 500);
                        return false
                    } else {
                        GS.Controllers.PageController.justDidConfirm = false;
                        GS.Controllers.PageController.ALLOW_LOAD = true;
                        GS.Controllers.PageController.lastPage = location.hash;
                        GS.Controllers.PageController.confirmMessage = $.localize.getString("ONCLOSE_PAGE_CHANGES");
                        $.publish("gs.router.before");
                        return true
                    }
                },getActiveController:function() {
                    return this.activePage
                },loadFilterCollapseState:function() {
                    this.artistFiltersCollapse =
                            GS.store.get(this.shortName + "_artistFiltersCollapse");
                    this.albumFiltersCollapse = GS.store.get(this.shortName + "_albumFiltersCollapse");
                    if (!this.artistFiltersCollapse)this.artistFiltersCollapse = {collapsed:true,manualCollapse:true,manualOpen:false};
                    if (!this.albumFiltersCollapse)this.albumFiltersCollapse = {collapsed:true,manualCollapse:true,manualOpen:false};
                    this.storeFilterCollapseState()
                },storeFilterCollapseState:function() {
                    _.defined(this.artistFiltersCollapse) && GS.store.set(this.shortName + "_artistFiltersCollapse",
                            this.artistFiltersCollapse);
                    _.defined(this.albumFiltersCollapse) && GS.store.set(this.shortName + "_albumFiltersCollapse", this.albumFiltersCollapse)
                },refreshTimeout:null,refreshed:null,resetRefreshButton:function() {
                    $("#page_content_pane .refresh").addClass("disabled");
                    GS.page.refreshTimeout && clearTimeout(GS.page.refreshTimeout);
                    GS.page.refreshTimeout = setTimeout(function() {
                        GS.page.refreshed = null;
                        GS.page.refreshTimeout = null;
                        $("#page_content_pane .refresh").removeClass("disabled")
                    }, 6E4)
                },fromCorrectUrl:false},
            {url:false,type:false,id:false,subpage:false,pageSearchHasFocus:false,slickbox:null,feed:null,header:{name:false,breadcrumbs:[],imageUrl:false,subpages:[],options:[],labels:[]},list:{doPlayAddSelect:false,doSearchInPage:false,sortOptions:[],gridOptions:{data:[],columns:{},options:{}}},cache:{},init:function() {
                this.subscribe("gs.page.loading.page", this.callback("showPageLoading"));
                this.subscribe("gs.page.loading.grid", this.callback("showGridLoading"));
                this.subscribe("gs.grid.selectedRows", this.callback("changeSelectionCount"));
                this.subscribe("gs.grid.onsort", this.callback("gridOnSort"));
                this._super();
                $(document).keydown(this.callback(function(a) {
                    if (!$(a.target).is("input,textarea,select,object")) {
                        var b = _.orEqual(a.keyCode, a.which),c = String.fromCharCode(b).replace(/\s+/g, ""),g = {17:true,91:true,93:true,37:true,38:true,39:true,40:true,16:true};
                        if (!$(a.target).is("input,textarea,select,object"))if (b == 8)history.back(); else c.length && c != "" && !g[b] && !a.metaKey && !GS.getLightbox().isOpen && $("input.search").select().focus();
                        if (String.fromCharCode(b) ==
                                " " && $(a.target).val().length == 0)return false
                    }
                }))
            },destroy:function() {
                this.searchTimeout && clearTimeout(this.searchTimeout);
                this._super()
            },index:function() {
                this.url = location.hash;
                this.element.html(this.view("index"))
            },notFound:function() {
                GS.Controllers.PageController.activate("home", null).notFound()
            },showPageLoading:function() {
                this.element.html(this.view("/shared/pageLoading"));
                var a = this.element.find(".page_loading");
                a.css("marginLeft", a.width() / 2 * -1 + "px")
            },showGridLoading:function() {
                $("#grid").html(this.view("/shared/loadingIndicator"));
                var a = this.element.find(".page_loading");
                a.css("marginLeft", a.width() / 2 * -1 + "px")
            },changeSelectionCount:function(a) {
                if (a.type === "album" || a.type === "artist")$("input.search", this.element).val("").trigger("keyup");
                if (a.type === "song") {
                    var b = _.isNumber(a.len) && a.len > 0 ? a.len : 0,c = $("#page .page_controls");
                    if (b) {
                        c.find(".play.count .label").localeDataString("SELECTION_PLAY_COUNT", {count:b});
                        c.find(".addSongs.count .label").localeDataString("SELECTION_ADD_COUNT", {count:b});
                        c.find(".deleteSongs.count .label").localeDataString("SELECTION_DELETE_COUNT",
                                {count:b})
                    } else {
                        c.find(".play.count .label").localeDataString("SELECTION_PLAY_ALL");
                        c.find(".addSongs.count .label").localeDataString("SELECTION_ADD_ALL");
                        c.find(".deleteSongs.count .label").localeDataString("SELECTION_DELETE_ALL")
                    }
                    c.find(".music_options").toggleClass("hide", b === 0);
                    var g = $("#page").attr("class").split("_")[2];
                    g = a.len > 0 ? "song" : g;
                    var h = c.find("a[name=share]");
                    h.parent().hide();
                    var k = GS.Controllers.Lightbox.ShareController.allowed[g];
                    if (k) {
                        c.find("button.share").parent().show();
                        $.each(k,
                                function(m, n) {
                                    h.filter("[rel=" + n + "]").show().parent().show().removeClass("hide")
                                })
                    } else c.find("button.share").parent().hide();
                    k = c.find(".share .label");
                    if (g === "song")b > 1 ? k.localeDataString("SHARE_SONGS") : k.localeDataString("SHARE_SONG"); else k.localeDataString("SHARE_" + g.toUpperCase());
                    if (a.len != 1)g === "playlist" ? c.find("li.shareOptions").show() : c.find("li.shareOptions .share_single").hide(); else {
                        c.find("li.shareOptions").show();
                        c.find("li.shareOptions share_single").show()
                    }
                    c.find("button.deleteSongs").parent().toggle(a.len >
                            0);
                    $("#page").hasClass("gs_page_now_playing") && c.find("button.delete").toggle(a.len > 0)
                }
            },correctUrl:function(a, b) {
                if (a) {
                    var c = function() {
                        if ($.isFunction(a.toUrl)) {
                            var g = a.toUrl(b);
                            if (location.hash !== g) {
                                var h = location.hash.match(/(?:&|\?)fb_comment_id=([a-zA-Z0-9\_\-]+)/);
                                if (h && h[1])g += h[0];
                                if (location.hash.replace(/src=\d/, "") !== g.replace(/src=\d/, "")) {
                                    GS.page.fromCorrectUrl = true;
                                    location.replace(g)
                                }
                            }
                        }
                    };
                    $.isFunction(a.getPathName) ? a.getPathName(c) : c()
                } else console.warn("invalid page.correctUrl obj",
                        a, b)
            },gridOnSort:function(a) {
                a && a.sortStoreKey && GS.store.set(a.sortStoreKey, a)
            },getPlayContext:function() {
                var a;
                switch (this.type) {
                    case "playlist":
                        if (this.hasOwnProperty("playlist") && this.playlist instanceof GS.Models.Playlist)a = new GS.Models.PlayContext(GS.player.PLAY_CONTEXT_PLAYLIST, this.playlist);
                        break;
                    case "artist":
                        if (this.hasOwnProperty("artist") && this.artist instanceof GS.Models.Artist)a = new GS.Models.PlayContext(GS.player.PLAY_CONTEXT_ARTIST, this.artist);
                        break;
                    case "album":
                        if (this.hasOwnProperty("album") &&
                                this.album instanceof GS.Models.Album)a = new GS.Models.PlayContext(GS.player.PLAY_CONTEXT_ALBUM, this.album);
                        break;
                    case "user":
                    case "music":
                        if (this.hasOwnProperty("user") && (this.user instanceof GS.Models.User || this.user instanceof GS.Models.AuthUser))a = new GS.Models.PlayContext(GS.player.PLAY_CONTEXT_USER, this.user);
                        break;
                    case "popular":
                        a = new GS.Models.PlayContext(GS.player.PLAY_CONTEXT_POPULAR);
                        break;
                    default:
                        if (this.hasOwnProperty("query"))a = new GS.Models.PlayContext(GS.player.PLAY_CONTEXT_SEARCH,
                                {query:this.query,type:this.type ? this.type : "everything"});
                        break
                }
                return _.orEqual(a, new GS.Models.PlayContext)
            },setSort:function(a, b, c) {
                var g = $("#grid").controller(),h = GS.page.activePage;
                if (g)a == "Rank" ? g.dataView.setItems(g.data) : g.grid.onSort(a); else if (h.slickbox) {
                    g = {};
                    switch (h.type) {
                        case "playlist":
                            switch (a) {
                                case "Rank":
                                    g = {sortType:"relevance",sortFunction:null};
                                    break;
                                case "PlaylistName":
                                    g = {sortType:"playlistName",sortFunction:_.getSort("PlaylistName", true)};
                                    break
                            }
                            break;
                        case "artist":
                            switch (a) {
                                case "Rank":
                                    g =
                                    {sortType:"relevance",sortFunction:null};
                                    break;
                                case "ArtistName":
                                    g = {sortType:"artistName",sortFunction:_.getSort("ArtistName", true)};
                                    break
                            }
                            break;
                        case "album":
                            switch (a) {
                                case "Rank":
                                    g = {sortType:"relevance",sortFunction:null};
                                    break;
                                case "AlbumName":
                                    g = {sortType:"albumName",sortFunction:_.getSort("AlbumName", true)};
                                    break;
                                case "ArtistName":
                                    g = {sortType:"artistname",sortFunction:_.getSort("ArtistName", true)};
                                    break
                            }
                            break;
                        case "user":
                            switch (a) {
                                case "Rank":
                                    g = {sortType:"byPicture",sortFunction:h.sortByPicture};
                                    break;
                                case "Name":
                                    g = {sortType:"username",sortFunction:_.getSort("Username", true)};
                                    break
                            }
                    }
                    if (h.currentSort && g && h.currentSort.sortType == g.sortType || !h.currentSort.sortFunction && !g.sortFunction)return;
                    h.slickbox.setSort(g.sortFunction);
                    h.currentSort = g
                }
                a = b.find("span.label");
                a.attr("data-translate-text", c);
                a.text($.localize.getString(c))
            },getPlayMenu:function() {
                var a = this.getPlayContext(),b = this.getSongsIDsFromSelectedGridRows(),c = this.element;
                return[
                    {title:$.localize.getString("PLAY_NOW"),action:{type:"fn",
                        callback:function() {
                            b.length && GS.player.addSongsToQueueAt(b, GS.player.INDEX_DEFAULT, true, a);
                            GS.getGuts().objectListPlayAdd(b, c, "play")
                        }},customClass:"jj_menu_item_hasIcon jj_menu_item_play"},
                    {title:$.localize.getString("PLAY_NEXT"),action:{type:"fn",callback:function() {
                        b.length && GS.player.addSongsToQueueAt(b, GS.player.INDEX_NEXT, false, a);
                        GS.getGuts().objectListPlayAdd(b, c, "play")
                    }},customClass:"jj_menu_item_hasIcon jj_menu_item_play_next"},
                    {title:$.localize.getString("PLAY_LAST"),action:{type:"fn",
                        callback:function() {
                            b.length && GS.player.addSongsToQueueAt(b, GS.player.INDEX_LAST, false, a);
                            GS.getGuts().objectListPlayAdd(b, c, "play")
                        }},customClass:"jj_menu_item_hasIcon jj_menu_item_play_last"},
                    {customClass:"separator"},
                    {title:$.localize.getString("REPLACE_QUEUE"),action:{type:"fn",callback:function() {
                        b.length && GS.player.addSongsToQueueAt(b, GS.player.INDEX_REPLACE, true, a);
                        GS.getGuts().objectListPlayAdd(b, c, "play")
                    }},customClass:"jj_menu_item_hasIcon jj_menu_item_replace_playlist"},
                    {title:$.localize.getString("START_RADIO"),
                        action:{type:"fn",callback:function() {
                            if ($("#grid").controller().selectedRowIDs.length)b.length && GS.player.addSongsToQueueAt(b, GS.player.INDEX_REPLACE, true, a, true); else GS.player.addSongsToQueueAt(b[0], GS.player.INDEX_REPLACE, true, a, true);
                            GS.getGuts().objectListPlayAdd(b, c, "play")
                        }},customClass:"jj_menu_item_hasIcon jj_menu_item_new_station"}
                ]
            },getAddMenu:function() {
                var a = this.getPlayContext(),b = this.getSongsIDsFromSelectedGridRows(),c = this.element,g = $("#grid").controller();
                g = g ? g.selectedRowIDs.length :
                        0;
                var h = [
                    {title:$.localize.getString("CONTEXT_ADD_TO_QUEUE"),action:{type:"fn",callback:function() {
                        b.length && GS.player.addSongsToQueueAt(b, GS.player.INDEX_LAST, false, a);
                        GS.getGuts().objectListPlayAdd(b, c, "add")
                    }},customClass:"jj_menu_item_hasIcon jj_menu_item_now_playing"}
                ];
                if (this.type && b.length && (this.type != "artist" || g != 0) && !(this.type == "song" && this.song && this.song.fromLibrary))h.push({title:$.localize.getString("CONTEXT_ADD_TO_LIBRARY"),action:{type:"fn",callback:function() {
                    if (b.length) {
                        GS.user.addToLibrary(b);
                        GS.getGuts().objectListPlayAdd(b, c, "add")
                    }
                }},customClass:"jj_menu_item_hasIcon jj_menu_item_music"});
                this.song && this.type == "song" && !this.song.isFavorite && h.push({title:$.localize.getString("CONTEXT_ADD_TO_FAVORITES"),action:{type:"fn",callback:function() {
                    if (b.length == 1) {
                        GS.user.addToSongFavorites(b[0], true);
                        GS.getGuts().objectListPlayAdd(b, this.element, "add")
                    }
                }},customClass:"jj_menu_item_hasIcon jj_menu_item_favorites"});
                if (this.type != "artist" || g != 0)h.push({title:$.localize.getString("CONTEXT_ADD_TO_PLAYLIST"),
                    type:"sub",src:GS.Models.Playlist.getPlaylistsMenu(b, function(k) {
                        k.addSongs(b, null, true)
                    }, false, true),customClass:"jj_menu_item_hasIcon jj_menu_item_add_playlist"});
                return h
            },getSortMenu:function() {
                return[]
            },getOptionMenu:function() {
                return[]
            },getShareMenu:function() {
                var a = this.element.find(".gs_grid:last").controller(),b = this.getSongsIDsFromSelectedGridRows(),c = GS.getGuts().extractSongItemInfo(a),g = [],h = this,k = a ? a.selectedRowIDs.length : 0;
                if (!a || k === 0) {
                    type = this.type;
                    id = this.id
                } else if (k === 1) {
                    type =
                            "song";
                    id = typeof b != "number" && typeof b != "string" ? b[0] : b
                }
                if (k === 0 || k === 1) {
                    GS.user.isLoggedIn && type != "album" && g.push({title:$.localize.getString("SHARE_EMAIL"),action:{type:"fn",callback:function() {
                        GS.getLightbox().open("share", {service:"email",type:type,id:id});
                        GS.getGuts().onContextMenuClick("contextShareEmail", "dropdownmenu", false, c)
                    }},customClass:"jj_menu_item_hasIcon jj_menu_item_share_email"});
                    g.push({title:$.localize.getString("SHARE_FACEBOOK"),action:{type:"fn",callback:function() {
                                GS.getLightbox().open("share",
                                        {service:"facebook",type:type,id:id});
                                GS.getGuts().onContextMenuClick("contextShareFacebook", "dropdownmenu", false, c)
                            }},customClass:"jj_menu_item_hasIcon jj_menu_item_share_facebook"}, {title:$.localize.getString("SHARE_TWITTER"),action:{type:"fn",callback:function() {
                                GS.getLightbox().open("share", {service:"twitter",type:type,id:id});
                                GS.getGuts().onContextMenuClick("contextShareTwitter", "dropdownmenu", false, c)
                            }},customClass:"jj_menu_item_hasIcon jj_menu_item_share_twitter"}, {title:$.localize.getString("SHARE_STUMBLE"),
                                action:{type:"fn",callback:function() {
                                    b && type != "playlist" ? GS.Models.Song.getSong(b, function(m) {
                                        if (m) {
                                            window.open(_.makeUrlForShare("stumbleupon", "song", m), "_blank");
                                            GS.getGuts().onContextMenuClick("contextShareStumble", "dropdownmenu", false, c)
                                        }
                                    }) : GS.Models.Playlist.getPlaylist(h.id, function(m) {
                                        window.open(_.makeUrlForShare("stumbleupon", type, m), "_blank");
                                        GS.getGuts().onContextMenuClick("contextShareStumble", "dropdownmenu", false, c)
                                    })
                                }},customClass:"jj_menu_item_hasIcon jj_menu_item_share_stumbleupon"},
                            {title:$.localize.getString("SHARE_REDDIT"),action:{type:"fn",callback:function() {
                                b && type != "playlist" ? GS.Models.Song.getSong(b, function(m) {
                                    if (m) {
                                        window.open(_.makeUrlForShare("reddit", "song", m), "_blank");
                                        GS.getGuts().onContextMenuClick("contextShareReddit", "dropdownmenu", false, c)
                                    }
                                }) : GS.Models.Playlist.getPlaylist(h.id, function(m) {
                                    window.open(_.makeUrlForShare("reddit", type, m), "_blank");
                                    GS.getGuts().onContextMenuClick("contextShareReddit", "dropdownmenu", false, c)
                                })
                            }},customClass:"jj_menu_item_hasIcon jj_menu_item_share_reddit"},
                            {title:$.localize.getString("SHARE_WIDGET"),action:{type:"fn",callback:function() {
                                GS.getLightbox().open("share", {service:"widget",type:type,id:id});
                                GS.getGuts().onContextMenuClick("contextShareWidget", "dropdownmenu", true, c)
                            }},customClass:"jj_menu_item_hasIcon jj_menu_item_share_widget"});
                    k == 1 && g.push({title:$.localize.getString("COPY_URL"),type:"sub",action:{type:"fn",callback:function() {
                        if (ZeroClipboard) {
                            GS.getGuts().onContextMenuClick("contextCopyUrl", "dropdownmenu", false, c);
                            GS.Models.Song.getSong(b,
                                    function(m) {
                                        if (m) {
                                            m.getClipboardAction([
                                                {text:"http://grooveshark.com/" + m.toUrl().replace("#/", ""),selector:"div.songUrl"},
                                                {text:"http://grooveshark.com/" + _.cleanUrl(m.AlbumName, m.AlbumID, "album").replace("#/", ""),selector:"div.albumUrl"},
                                                {text:"http://grooveshark.com/" + _.cleanUrl(m.ArtistName, m.ArtistID, "artist").replace("#/", ""),selector:"div.artistUrl"}
                                            ])();
                                            $("div[name$=Url]", elem).show()
                                        }
                                    })
                        }
                    }},src:[
                        {title:$.localize.getString("SONG_URL"),customClass:"songUrl jj_menu_item_hasIcon jj_menu_item_copy"},
                        {title:$.localize.getString("ALBUM_URL"),customClass:"albumUrl jj_menu_item_hasIcon jj_menu_item_copy"},
                        {title:$.localize.getString("ARTIST_URL"),customClass:"artistUrl jj_menu_item_hasIcon jj_menu_item_copy"}
                    ],customClass:"copyUrl jj_menu_item_hasIcon jj_menu_item_copy"})
                } else if (k > 1)g = [
                    {title:$.localize.getString("SHARE_WIDGET"),action:{type:"fn",callback:function() {
                        GS.getLightbox().open("share", {service:"widget",type:"manySongs",id:b});
                        GS.getGuts().onContextMenuClick("contextShareWidget", "dropdownmenu",
                                true, c)
                    }},customClass:"jj_menu_item_hasIcon jj_menu_item_share_widget"}
                ];
                return g
            },"input focus":function(a) {
                $(a).parent().parent().addClass("active")
            },"textarea focus":function(a) {
                $(a).parent().parent().parent().addClass("active")
            },"input blur":function(a) {
                $(a).parent().parent().removeClass("active")
            },"textarea blur":function(a) {
                $(a).parent().parent().parent().removeClass("active")
            },lastClickEvent:null,doubleClickTime:500,"button click":function(a, b) {
                if (this.lastClickEvent && this.lastClickEvent.target ==
                        b.target && b.timeStamp - this.lastClickEvent.timeStamp < this.doubleClickTime) {
                    b.stopImmediatePropagation();
                    this.lastClickEvent = b;
                    return false
                }
                this.lastClickEvent = b
            },"button.radio click":function(a) {
                a = $(a).attr("data-artists").split(",");
                a.length && GS.player.setAutoplay(true, null, {seeds:a,seedArtistWeightRange:[110,130],secondaryArtistWeightModifier:0.75})
            },".play.dropdownButton click":function(a, b) {
                a.jjmenu(b, this.getPlayMenu(), null, {xposition:"left",yposition:"auto",show:"default",className:"contextmenu",
                    keepState:a})
            },".addSongs.dropdownButton click":function(a, b) {
                a.jjmenu(b, this.getAddMenu(), null, {xposition:"left",yposition:"auto",show:"default",className:"contextmenu",keepState:a})
            },".dropdownButton.sort click":function(a, b) {
                var c = this.getSortMenu();
                c && c.length ? a.jjmenu(b, c, null, {xposition:"left",yposition:"auto",show:"default",className:"contextmenu",keepState:a}) : console.warn("no menu")
            },".dropdownButton.share click":function(a, b) {
                a.jjmenu(b, this.getShareMenu(), null, {xposition:"left",yposition:"auto",
                    show:"default",className:"contextmenu",keepState:a});
                var c = parseInt($("#grid .slick-row.selected").attr("row"), 10) + 1;
                GS.getGuts().logEvent("OLShare", {songIDs:this.getSongsIDsFromSelectedGridRows()[0],ranks:c})
            },".dropdownButton.option click":function(a, b) {
                var c = this.getOptionMenu();
                a.jjmenu(b, c, null, {xposition:"left",yposition:"auto",show:"default",className:"contextmenu",keepState:a})
            },".play.playTop click":function() {
                var a = this.getSongsIDsFromSelectedGridRows();
                a.length && GS.player.addSongsToQueueAt(a,
                        GS.Controllers.PlayerController.INDEX_DEFAULT, true, this.getPlayContext());
                GS.getGuts().objectListPlayAdd(a, this.element, "play")
            },"#page_header .upload click":function() {
                GS.user.isLoggedIn ? window.open("http://" + location.host + "/upload", "_blank") : GS.getLightbox().open("login")
            },"#page .dropdownButton click":function() {
                function a(c) {
                    if (c.target !== b.target) {
                        c.data.$groups.removeClass("active");
                        $(this).unbind("click", a)
                    }
                }

                var b;
                return function(c, g) {
                    b = g;
                    var h = $("#page .btn_group"),k = $(c).closest(".btn_group");
                    if (k.hasClass("active"))h.removeClass("active"); else {
                        h.removeClass("active");
                        k.addClass("active");
                        $(document).unbind("click contextmenu", a).bind("click contextmenu", {$groups:h}, a)
                    }
                }
            }(),".display_toggles .slickbox click":function(a) {
                if (this.displayMethod != "slickbox") {
                    this.displayResults("slickbox");
                    GS.store.set("searchDisplay", "slickbox");
                    $("#page_header .display_toggles button").removeClass("active");
                    a.addClass("active")
                }
            },".display_toggles .grid click":function(a) {
                if (this.displayMethod != "grid") {
                    this.displayResults("grid");
                    GS.store.set("searchDisplay", "grid");
                    $("#page_header .display_toggles button").removeClass("active");
                    a.addClass("active")
                }
            },getSongsIDsFromSelectedGridRows:function() {
                var a = $("#grid").controller(),b = [];
                if (a && a.selectedRowIDs.length > 0)b = a.selectedRowIDs; else if (a)for (var c = 0; c < a.dataView.rows.length; c++) {
                    if (b.length >= 1E3)break;
                    b.push(a.dataView.rows[c].SongID)
                } else this.type === "song" && this.song && b.push(this.song.SongID);
                return b
            },".inPageFilter input keydown":function(a, b) {
                if (b.which == _.keys.ENTER &&
                        !a.parents("form").hasClass("inPageSearch")) {
                    b.preventDefault();
                    b.stopPropagation()
                } else if (b.which == _.keys.ESC) {
                    a.siblings("a.remove").addClass("hide");
                    a.val("")
                }
                a.siblings("a.remove").toggleClass("hide", !a.val().length);
                this.inpageFilter(a)
            },".inPageSearch input keydown":function(a, b) {
                var c = $("#page_search_results li.selected");
                switch (b.which) {
                    case _.keys.ENTER:
                        a.parents("form").submit();
                        return;
                    case _.keys.ESC:
                        $("#page_search_results").hide();
                        $.publish("gs.menu.hide");
                        a.siblings("a.remove").addClass("hide");
                        a.val("");
                        this.inpageSearch(a);
                        return;
                    case _.keys.UP:
                        c.is(":first-child") ? $("#page_search_results li:last").addClass("selected") : c.prev().addClass("selected");
                        c.removeClass("selected");
                        return;
                    case _.keys.DOWN:
                        c.is(":last-child") ? $("#page_search_results li:first").addClass("selected") : c.next().addClass("selected");
                        c.removeClass("selected");
                        return
                }
                a.siblings("a.remove").toggleClass("hide", !a.val().length);
                this.inpageSearch(a)
            },filterTimeout:false,searchTimeout:false,searchTimeoutWait:100,inpageSearch:function(a) {
                clearTimeout(this.searchTimeout);
                this.searchTimeout = setTimeout(this.callback(function() {
                    if (this.element) {
                        this.element.find(".gs_grid:last").controller();
                        var b = $.trim(a.val().toLowerCase());
                        if (b.length > 0)GS.service.getAutocomplete(b, "artist", this.callback("autocompleteSuccess"), this.callback("autocompleteFail")); else {
                            $("#page_search_results").hide();
                            $.publish("gs.menu.hide")
                        }
                    }
                }), this.searchTimeoutWait)
            },inpageFilter:function(a) {
                clearTimeout(this.filterTimeout);
                this.filterTimeout = setTimeout(this.callback(function() {
                    if (this.element) {
                        var b =
                                this.element.find(".gs_grid:last").controller(),c = $.trim($(a).val().toLowerCase());
                        if (b) {
                            var g = c;
                            if ($("#page").is(".gs_page_search") && _.isString(this.query))if (c.indexOf(this.query.toLowerCase()) === 0)g = c.substring(this.query.length);
                            b.searchString = $.trim(g);
                            b.dataView.refresh()
                        } else if ($("#feed.events").length)if (c == "")$("#feed.events .event").show(); else {
                            (new Date).getTime();
                            $("#feed.events .event").each(function() {
                                var h = $(this);
                                h.text().toLowerCase().indexOf(c) !== -1 ? h.show() : h.hide()
                            });
                            (new Date).getTime()
                        } else this.slickbox &&
                        this.filterUsers(c)
                    }
                }), this.searchTimeoutWait)
            },".inPageSearchBar input focus":function(a) {
                a.siblings(".placeholder").hide();
                this.pageSearchHasFocus = true
            },".inPageSearchBar input blur":function(a) {
                if (!a.val()) {
                    a.siblings(".placeholder").show();
                    a.siblings("a.remove").addClass("hide")
                }
                setTimeout(this.callback(function() {
                    if (!this.pageSearchHasFocus) {
                        $("#page_search_results").hide();
                        $.publish("gs.menu.hide")
                    }
                }), 500);
                this.pageSearchHasFocus = false
            },".inPageSearchBar .search-item a click":function(a) {
                $("#page_search_results li.selected").removeClass("selected");
                $(a).parent().addClass("selected");
                $(a).is(".search-item") && a.closest("input").val($(a).text());
                a.submit()
            },".inPageSearchBar a.icon click":function(a) {
                a.siblings("input").focus().select()
            },".inPageSearchBar a.remove click":function(a) {
                a.addClass("hide");
                $("#page_search_results").hide();
                $.publish("gs.menu.hide");
                a.siblings("input").val("").focus();
                a.parents("form").hasClass("inPageSearch") ? this.inpageSearch(a.siblings("input")) : this.inpageFilter(a.siblings("input"))
            },".inPageSearchBar submit":function(a, b) {
                b.preventDefault();
                GS.search = _.orEqual(GS.search, {});
                GS.search.type = $(a).attr("data-search-type") || "";
                var c = $("#page_search_results li.selected");
                GS.search.query = c.is(".search-item-result") ? c.find("a").text() : $("input[name=q]", a).val();
                if (GS.search.query && GS.search.query.length) {
                    this.pageSearchHasFocus = false;
                    GS.router.performSearch(GS.search.type, GS.search.query)
                }
            },autocompleteSuccess:function(a) {
                this.autocompleteResults = a;
                $("#page_search_results").html(this.view("/shared/pageSearchResults"));
                if (this.pageSearchHasFocus) {
                    $("#page_search_results").show();
                    $.publish("gs.menu.show")
                }
            },autocompleteFail:function() {
                $("#page_search_results").remove(".search_result").hide();
                $.publish("gs.menu.hide")
            },addAutocomplete:function(a) {
                a = _.orEqual(a, $("#page").attr("class"));
                a.match(".gs_page_") || (a = ".gs_page_" + a);
                $("input.search.autocomplete", this.element).autocomplete({scroll:true,matchSubset:false,selectFirst:false,source:function(b, c) {
                    if (b = $.trim(b.term || b)) {
                        var g = [],h = $("#searchBar_precomplete");
                        h.hide();
                        GS.service.getAutocomplete(b, "artist", function(k) {
                            if ($("#page").is(a)) {
                                k && k.length && $.each(k, function(n, o) {
                                    o.hasOwnProperty("Name") && o.hasOwnProperty("ArtistID") && g.push({label:o.Name.toLowerCase(),value:o.ArtistID})
                                });
                                if (a == ".gs_page_home" && g.length) {
                                    k = $("#searchBar_input input").val();
                                    var m = g[0].label;
                                    m = [m.substring(0, k.length),m.substring(k.length)];
                                    k == b && k.toLowerCase() == m[0] ? h.text(k + m[1]).show() : h.text("").hide()
                                } else h.text("").hide();
                                c(g)
                            }
                        }, function() {
                        })
                    }
                },select:function(b, c) {
                    b.preventDefault();
                    if (a == ".gs_page_home" && parseInt(c.item.value, 10))location.hash = "/artist/~/" + c.item.value; else $("input.search.autocomplete").val(c.item.label).submit()
                },focus:function(b, c) {
                    b.preventDefault();
                    $("#searchBar_input input").val(c.item.label);
                    $("#searchBar_precomplete").hide()
                },close:function() {
                    $("#searchBar_precomplete").show()
                }})
            },getPlayOptionsMenuForFeeds:function(a) {
                return[
                    {title:$.localize.getString("PLAY_NOW"),action:{type:"fn",callback:function() {
                        a.playSongs(-1, true)
                    }},customClass:"jj_menu_item_hasIcon jj_menu_item_play"},
                    {title:$.localize.getString("PLAY_NEXT"),action:{type:"fn",callback:function() {
                        a.playSongs(-2, false)
                    }},customClass:"jj_menu_item_hasIcon jj_menu_item_play_next"},
                    {title:$.localize.getString("PLAY_LAST"),action:{type:"fn",callback:function() {
                        a.playSongs(-3, false)
                    }},customClass:"jj_menu_item_hasIcon jj_menu_item_play_last"},
                    {title:$.localize.getString("REPLACE_QUEUE"),action:{type:"fn",callback:function() {
                        a.playSongs(-4, true)
                    }},customClass:"jj_menu_item_hasIcon jj_menu_item_replace_playlist"}
                ]
            },scroll:function(a) {
                $page =
                        $(a);
                $controls = $(".page_controls");
                $sticky = $(".page_controls .sticky");
                if ($sticky.length) {
                    $sticky.width($controls.width());
                    $sticky.hasClass("fixed") || $controls.height($controls.height());
                    if ($controls.offset().top < 59)$sticky.addClass("fixed"); else {
                        $sticky.removeClass("fixed");
                        $controls.height("auto")
                    }
                }
            },"#feed.events .play.dropdownButton click":function(a, b) {
                var c = $(a).closest(".event").data("event");
                c ? a.jjmenu(b, this.getPlayOptionsMenuForFeeds(c), null, {xposition:"left",yposition:"auto",show:"default",
                    className:"contextmenu",keepState:a}) : console.warn("feed data not attached")
            },"#feed.events button[name=play] click":function(a) {
                $(a).closest(".event").data("event").playSongs(-1, true)
            },"#feed.events .event .songLink click":function(a, b) {
                b.preventDefault();
                var c = $(a).closest(".event");
                c = $(c).data("event");
                var g;
                c = GS.Models.Song.wrapCollection(c.data.songs);
                if (_.defined($(a).attr("data-songid"))) {
                    g = parseInt($(a).attr("data-songid"), 10);
                    g = GS.Models.Song.getOneFromCache(g)
                } else {
                    var h = _.defined($(a).attr("data-song-index")) ?
                            parseInt($(a).attr("data-song-index"), 10) : 0;
                    if (c.length > 0)g = c[h]
                }
                if (g = g && $.isFunction(g.toUrl) ? g.toUrl() : false)location.hash = g
            },"#feed.events .event button.subscribe click":function(a) {
                var b = $(a).closest(".event").data("event").data.playlists[0].playlistID;
                GS.Models.Playlist.getPlaylist(b, this.callback("subscribePlaylist", a), this.callback("subscribePlaylistError"), false)
            },subscribePlaylist:function(a, b) {
                if (b.isSubscribed()) {
                    GS.user.removeFromPlaylistFavorites(b.PlaylistID);
                    a.find("span.label").localeDataString("PLAYLIST_SUBSCRIBE")
                } else {
                    GS.user.addToPlaylistFavorites(b.PlaylistID);
                    a.find("span.label").localeDataString("PLAYLIST_UNSUBSCRIBE")
                }
            },subscribePlaylistError:function() {
                $.publish("gs.notification", {type:"error",message:$.localize.getString("NOTIF_FAVORITE_ERROR_GENERAL")})
            },"#feed.events .event .showSongs click":function(a) {
                a = $(a).closest(".event");
                var b = $(a).data("event"),c = $(a).find(".songWrapper"),g = $(a).find(".songList");
                if (g.children().length)c.toggle(); else {
                    var h = GS.Models.Song.wrapCollection(b.data.songs);
                    c.css("visibility", "hidden").show();
                    oldCols = GS.Controllers.GridController.columns.song.concat();
                    b = [oldCols[0],oldCols[1],oldCols[2]];
                    g.gs_grid(h, b, {sortCol:"Sort",padding:0});
                    $(window).resize();
                    c.css("visibility", "visible")
                }
                c = g.is(":visible") ? $.localize.getString("FEED_HIDE_SONGS") : $.localize.getString("FEED_VIEW_SONGS");
                $(a).find("button.showSongs .label").text(c)
            },"#feed.events .event .remove click":function(a) {
                var b = $(a).closest(".event");
                a = parseInt($(a).attr("rel"), 10);
                a == GS.user.UserID || this.user && this.user.UserID == GS.user.UserID ? $(".warning", b).attr("data-translate-text", "FEED_REMOVE_ACTIVITY_WARNING").attr("rel",
                        a).html($.localize.getString("FEED_REMOVE_ACTIVITY_WARNING")).show() : $(".warning", b).attr("data-translate-text", "FEED_HIDE_USER_WARNING").attr("rel", a).html($.localize.getString("FEED_HIDE_USER_WARNING")).show()
            },"#feed.events .event .removeComment click":function(a) {
                var b = $(a).closest(".feedComment");
                a = $(a).attr("rel");
                $(".warning", b).attr("data-translate-text", "FEED_REMOVE_COMMENT_WARNING").attr("rel", a).html($.localize.getString("FEED_REMOVE_COMMENT_WARNING")).show()
            },"#feed.events .event .warning .yesRemove click":function(a) {
                var b =
                        $(a).closest(".event"),c = $(b).data("event");
                a = parseInt($(a).parent().attr("rel"), 10);
                if (a == GS.user.UserID || this.user && this.user.UserID == GS.user.UserID) {
                    b.remove();
                    c.remove()
                } else {
                    this.find("#feed .user_" + a).remove();
                    GS.user.changeFollowFlags([
                        {userID:a,flags:1}
                    ])
                }
                $(".warning", b).hide()
            },"#feed.events .event .warning .noRemove click":function(a) {
                a = $(a).closest(".event");
                $(".warning", a).hide()
            },"#feed.events .event .warning .yesRemoveComment click":function(a) {
                var b = $(a).closest(".event"),c = $(a).closest(".feedComment");
                a = $(a).parents(".warning").attr("rel");
                var g = $(b).data("event");
                g.removeComment(a);
                c.remove();
                if (g.comments.length)g.comments.length == 1 ? b.find(".showCommentForm .label").html($.localize.getString("FEED_COMMENTS_COUNT_ONE")) : b.find(".showCommentForm .label").html(_.getString("FEED_COMMENTS_COUNT", {count:g.comments.length})); else {
                    b.find(".commentWrapper").hide();
                    b.find(".showCommentForm .label").html($.localize.getString("FEED_COMMENT"))
                }
            },"#feed.events .event .warning .noRemoveComment click":function(a) {
                a =
                        $(a).closest(".feedComment");
                $(".warning", a).hide()
            },"#feed.events .event .showCommentForm click":function(a) {
                if (!$(b).find(".commentFormWrapper").hasClass("hide")) {
                    var b = $(a).closest(".event");
                    $(b).data("event");
                    var c = $(b).find(".commentFormWrapper");
                    c.html(this.view("community/eventCommentForm"))
                }
                c.find(".message").select()
            },".feedCommentForm .message keydown":function(a, b) {
                if (b.which == _.keys.ENTER)return false
            },".feedCommentForm .message keyup":function(a, b) {
                if (b.which == _.keys.ENTER) {
                    b.preventDefault();
                    b.stopPropagation();
                    a.parents(".feedCommentForm").submit();
                    return false
                }
            },".feedCommentForm submit":function(a, b) {
                b.preventDefault();
                var c = $(a).closest(".event"),g = $(c).data("event"),h = $("textarea[name=message]", c).val(),k = $(".feedCommentForm .error");
                h = $.trim(h);
                if (h.length) {
                    k.hide();
                    g.addComment(h, this.callback(this.commentSuccess, c), this.callback(this.commentFailed, c))
                } else k.show().find(".message").html($.localize.getString("FEED_COMMENT_ERROR_EMPTY"))
            },commentSuccess:function(a, b) {
                if (b) {
                    var c =
                            $(a).data("event");
                    $(a).find(".commentFormWrapper").html("");
                    $(a).find(".commentWrapper").append(this.view("community/eventComments", {comments:[c.comments[c.comments.length - 1]],event:c})).show();
                    c.comments.length == 1 ? a.find(".showCommentForm .label").html($.localize.getString("FEED_COMMENTS_COUNT_ONE")) : a.find(".showCommentForm .label").html(_.getString("FEED_COMMENTS_COUNT", {count:c.comments.length}))
                } else this.commentFailed(a, b)
            },commentFailed:function(a, b) {
                $(".feedCommentForm .error").show().find(".message").html($.localize.getString("FEED_COMMENT_ERROR"));
                console.warn("commentFailed", b)
            },"#feed.events .event .showMoreComments click":function(a) {
                var b = $(a).closest(".event"),c = $(b).data("event");
                $(b).find(".commentWrapper").html(this.view("community/eventComments", {comments:c.comments,event:c}));
                $(a).remove()
            },".feeds_loadMore click":function(a) {
                if (this.feed) {
                    this.feed.next(this.callback("showNextFeedPage"));
                    $(".showMore", a).hide().siblings().show()
                }
            },showNextFeedPage:function(a) {
                if (a && a.length) {
                    this.activity = a;
                    $("#feed").append(this.view("/user/community/feedEvents"));
                    for (var b = 0; b < a.length; b++) {
                        event = a[b];
                        $event = $("#feedEvent_" + event.eventID).data("event", event);
                        event.dataString && event.dataString.hookup($event.find("p.what"))
                    }
                }
                $(".feeds_loadMore .loading").hide().siblings().show();
                this.feed.hasMore || $(".feeds_loadMore").hide()
            },".slick-row .song .options .favorite click":function(a) {
                var b = a.attr("rel"),c = parseInt($(a).parents(".slick-row").attr("row")),g = c + 1,h = "";
                if ($("#grid").controller())h = $("#grid").controller().data[c].ppVersion;
                c = {songID:b,rank:g};
                if (h)c.ppVersion =
                        h;
                if (a.is(".isFavorite")) {
                    GS.user.removeFromSongFavorites(b);
                    a.removeClass("isFavorite")
                } else {
                    GS.user.addToSongFavorites(b);
                    a.addClass("isFavorite");
                    GS.getGuts().songItemFavoriteClick(c)
                }
            },".slick-row .song .options .library click":function(a) {
                var b = a.attr("rel"),c = parseInt($(a).parents(".slick-row").attr("row")),g = c + 1,h = $("#grid"),k = "";
                if (h.controller()) {
                    h = h.controller().data;
                    if (h[c] && h[c].ppVersion)k = h[c].ppVersion
                }
                c = {songID:b,rank:g};
                if (k)c.ppVersion = k;
                if (a.parent().is(".inLibrary")) {
                    GS.user.removeFromLibrary(b);
                    a.parent().removeClass("inLibrary")
                } else {
                    GS.user.addToLibrary([b]);
                    a.parent().addClass("inLibrary");
                    GS.getGuts().songItemLibraryClick(c)
                }
            },".slick-row .playlist .subscribe click":function(a) {
                console.log("in here");
                var b = a.attr("rel");
                if (GS.Models.Playlist.getOneFromCache(b).isSubscribed()) {
                    GS.user.removeFromPlaylistFavorites(b);
                    a.removeClass("subscribed").find("span.label").text($.localize.getString("PLAYLIST_SUBSCRIBE"))
                } else {
                    GS.user.addToPlaylistFavorites(b);
                    a.addClass("subscribed").find("span.label").text($.localize.getString("PLAYLIST_UNSUBSCRIBE"))
                }
            },
                ".slick-cell.song a.more click":function(a, b) {
                    var c = $(a).attr("rel");
                    c = GS.Models.Song.getOneFromCache(c);
                    var g = $(a).parents(".slick-row").attr("row"),h = $(a).parents(".gs_grid").controller(),k = {},m;
                    if ($("#page").is(".gs_page_now_playing")) {
                        m = c.queueSongID;
                        k = {isQueue:true,flagSongCallback:function(n) {
                            GS.player.flagSong(m, n)
                        }}
                    }
                    if ($("div.gridrow" + g).is(":visible")) {
                        $("div.gridrow" + g).hide();
                        a.removeClass("active-context")
                    } else {
                        k = {menuType:"songOptionMenu",multiClick:false,gridController:h};
                        a.addClass("active-context").jjmenu(b,
                                c.getContextMenu(k), null, {xposition:"left",yposition:"auto",show:"show",className:"rowmenu gridrow" + g,keepState:a})
                    }
                    h.currentRow = g;
                    h.grid.setSelectedRows([g]);
                    h.grid.onSelectedRowsChanged()
                },playClickSongID:false,".slick-cell.song a.play click":function(a, b) {
                var c = parseInt(a.attr("rel"), 10),g = GS.player.getCurrentQueue(),h = GS.player.isPlaying;
                isPaused = GS.player.isPaused;
                if (this.playClickSongID != c) {
                    this.playClickSongID = c;
                    row = $(a).parents(".slick-row").attr("row");
                    rank = parseInt(row) + 1;
                    this.playClickSongID =
                            c;
                    row = parseInt($(a).parents(".slick-row").attr("row"), 10);
                    rank = row + 1;
                    var k = "";
                    if ($("#grid").controller()) {
                        var m = $("#grid").controller().data;
                        if (m[rank - 1])k = m[rank - 1].ppVersion
                    }
                    gutsInfo = k ? {songID:c,rank:rank,ppVersion:k} : {songID:c,rank:rank};
                    row = $(a).parents(".slick-row").attr("row");
                    rank = parseInt(row) + 1;
                    if (a.parents(".slick-row.active").length && g.activeSong.SongID == c)if (!h && !isPaused) {
                        $(a).removeClass("paused");
                        GS.player.playSong(c)
                    } else if (h) {
                        $(a).addClass("paused");
                        GS.player.pauseSong()
                    } else {
                        $(a).removeClass("paused");
                        GS.player.resumeSong()
                    } else if ($("#page").is(".gs_page_now_playing")) {
                        b.stopImmediatePropagation();
                        GS.player.playSong($(a).parents(".slick-row").attr("rel"))
                    } else if ($(a).parents(".gs_grid.hasSongs").length) {
                        GS.player.addSongsToQueueAt([c], GS.player.INDEX_DEFAULT, false, this.getPlayContext());
                        GS.getGuts().logEvent("songItemAddButton", gutsInfo)
                    } else {
                        GS.player.addSongAndPlay(c, this.getPlayContext());
                        GS.getGuts().logEvent("songItemPlayButton", gutsInfo)
                    }
                    setTimeout(this.callback(function() {
                        this.playClickSongID =
                                false
                    }), 500);
                    return false
                }
            },".slick-row.event .event_tickets click":function(a, b) {
                var c = a.parents(".slick-row").attr("row");
                c = $("#grid").controller().dataView.getItemByIdx(c);
                if (!$(b.target).is("a[href]") && c && c.TicketsURL) {
                    window.open(c.TicketsURL, "_blank");
                    GS.getGuts().gaTrackEvent("grid", "eventClick", c.TicketsURL);
                    return false
                }
            },"#searchForm, #homeSearch submit":function(a, b) {
                b.preventDefault();
                var c = $("input[name=q]", a).val();
                if (c.substring(0, 2).toLowerCase() == "gs")switch (c.toLowerCase()) {
                    case "GS.google.lasterror":
                        alert(JSON.stringify(GS.getGoogle().lastError));
                        return false;
                    case "GS.facebook.lasterror":
                        alert(JSON.stringify(GS.getFacebook().lastError));
                        return false;
                    case "GS.lastfm.lasterror":
                        alert(JSON.stringify(GS.getLastfm().lastError));
                        return false
                } else if (c.toLowerCase() == "floppy music" || c.toLowerCase() == "floppy drive music")GS.getYoutube().loadFloppyMusic(); else if (c.toLowerCase() == "about:dubstep" || c.toLowerCase() == "how do I dubstep")GS.getYoutube().loadDubstep();
                GS.search = _.orEqual(GS.search, {});
                GS.search.query = c;
                GS.search.type = $(a).attr("data-search-type") ||
                        "";
                GS.search.query && GS.search.query.length && GS.router.performSearch(GS.search.type, GS.search.query);
                return false
            },"a.searchLink click":function(a, b) {
                b.preventDefault();
                var c = a.data("searchtype"),g = a.data("searchquery");
                c = c ? c : "";
                g = g ? g : "";
                GS.router.performSearch(c, g)
            },"#feed .what>a click":function(a, b) {
                GS.getGuts().handleFeedEventClick(a, b)
            },"#feed li.option click":function(a, b) {
                GS.getGuts().handleFeedEventClick(a, b)
            },"#feed li.show click":function(a, b) {
                GS.getGuts().handleFeedEventClick(a, b)
            },"#searchArtists a click":function(a, b) {
                GS.getGuts().handleSearchSidebarClick(a, b, "artist")
            },"#searchAlbums a click":function(a, b) {
                GS.getGuts().handleSearchSidebarClick(a, b, "album")
            },"#searchPlaylists a click":function(a, b) {
                GS.getGuts().handleSearchSidebarClick(a, b, "playlist")
            },"#searchUsers a click":function(a, b) {
                GS.getGuts().handleSearchSidebarClick(a, b, "user")
            },"a.follow, button.follow click":function(a) {
                var b = parseInt($(a).attr("data-follow-userid"), 10),c = "",g = function() {
                    if (a.is(".following")) {
                        GS.user.removeFromUserFavorites(b);
                        a.removeClass("following").addClass("add");
                        c = "FOLLOW"
                    } else {
                        GS.user.addToUserFavorites(b);
                        a.addClass("following").removeClass("add");
                        c = "FOLLOWING"
                    }
                    a.find("span.label").attr("data-translate-text", c).text($.localize.getString(c))
                };
                GS.Models.User.getOneFromCache(b) ? g() : GS.Models.User.getUser(b, g, null, false)
            },"a.signup, button.signup click":function() {
                location.hash = "#/signup"
            },"a.login, button.login click":function() {
                GS.getLightbox().open("login")
            },"a.uploadMusic, button.uploadMusic click":function() {
                GS.user.isLoggedIn ?
                        window.open("http://" + location.host + "/upload", "_blank") : GS.getLightbox().open("login")
            },"a.saveQueue, button.saveQueue click":function() {
                GS.player.saveQueue()
            },"a.newPlaylist, button.newPlaylist click":function() {
                GS.getLightbox().open("newPlaylist")
            },"a.inviteFriends, button.inviteFriends click":function() {
                GS.getLightbox().open("invite")
            },"select.launchStation change":function(a) {
                (a = $(a).val()) && GS.player.setAutoplay(true, a)
            },"select change":function(a) {
                $(a).prev("span").text($(a).find("option:selected").html())
            },
                "button.playRecent click":function() {
                    if (this.feed)this.feed.play(GS.player.INDEX_DEFAULT, true); else this.user && this.user.profileFeed.play(GS.player.INDEX_DEFAULT, true)
                },"button.playDropdownRecent click":function(a, b) {
                this.user && a.jjmenu(b, this.getPlayMenu(), null, {xposition:"left",yposition:"auto",show:"default",className:"contextmenu",keepState:a})
            },"button.refresh click":function(a) {
                feedType = $(a).attr("data-feed-type");
                if (!GS.page.refreshed || GS.page.refreshed.type !== this.feed.type || GS.page.refreshed.user !==
                        this.user.UserID) {
                    switch (this.feed.type) {
                        case "profile":
                            this.user.UserID == GS.user.UserID ? this.loadMyProfile(GS.user) : this.loadProfile(this.user);
                            break;
                        case "community":
                            this.user.communityFeed.isDirty = true;
                            this.user.UserID == GS.user.UserID || this.UserID == -1 ? this.loadMyCommunity(this.user) : this.loadCommunity(this.user);
                            break
                    }
                    GS.page.refreshed = {type:this.feed.type,user:this.user.UserID};
                    GS.page.resetRefreshButton()
                }
            },"button.followArtist click":function(a) {
                var b = a.attr("data-artistid");
                if (GS.user.favorites.artists.hasOwnProperty(b)) {
                    GS.user.removeFromArtistFavorites(b,
                            true);
                    a.attr("title", "");
                    $(".artistID" + b).removeClass("following").addClass("plus").find("span.label").attr("data-translate-text", "ARTIST_FOLLOW").text($.localize.getString("ARTIST_FOLLOW"))
                } else {
                    GS.user.addToArtistFavorites(b, true);
                    a.attr("title", $.localize.getString("UNFOLLOW"));
                    $(".artistID" + b).removeClass("plus").addClass("following").find("span.label").attr("data-translate-text", "ARTIST_FOLLOWING").text($.localize.getString("ARTIST_FOLLOWING"))
                }
            },"button.subscribePlaylist click":function(a) {
                a =
                        a.attr("data-playlistid");
                if (GS.user.favorites.playlists.hasOwnProperty(a)) {
                    GS.user.removeFromPlaylistFavorites(a, false);
                    $(".playlistID" + a).removeClass("subscribed").addClass("plus").find("span.label").attr("data-translate-text", $.localize.getString("PLAYLIST_SUBSCRIBE")).text($.localize.getString("PLAYLIST_SUBSCRIBE"))
                } else {
                    GS.user.addToPlaylistFavorites(a, false);
                    $(".playlistID" + a).removeClass("plus").addClass("subscribed").find("span.label").attr("data-translate-text", $.localize.getString("PLAYLIST_SUBSCRIBED")).text($.localize.getString("PLAYLIST_SUBSCRIBED"))
                }
            },
                "button.librarySong click":function(a) {
                    a = a.attr("data-songid");
                    if (GS.user.library.songs.hasOwnProperty(a)) {
                        GS.user.removeFromLibrary(a, false);
                        $(".songID" + a).removeClass("inLibrary").addClass("plus").find("span.label").attr("data-translate-text", $.localize.getString("SONG_ADD_LIBRARY")).text($.localize.getString("SONG_ADD_LIBRARY"))
                    } else {
                        GS.user.addToLibrary(a, false);
                        $(".songID" + a).removeClass("plus").addClass("inLibrary").find("span.label").attr("data-translate-text", $.localize.getString("SONG_IN_LIBRARY")).text($.localize.getString("SONG_IN_LIBRARY"))
                    }
                },
                ".sliderBtn click":function(a, b) {
                    b.preventDefault();
                    var c = a.siblings(".page_content_sliderViewport").children(".page_content_slider");
                    if (!c.hasClass("sliding")) {
                        c.addClass("sliding");
                        var g = c.position(),h = c.outerWidth(),k = c.parent(".page_content_sliderViewport").width(),m = c.children(".page_content_slide:first").outerWidth(true),n = Math.floor(k / m),o = Math.floor((h + g.left) / m),q = c.children(".page_content_slide").length,v = Math.floor((Math.abs(g.left) + k) / m);
                        h = -(h - k);
                        if (a.hasClass("sliderNext"))if (v >= q)c.animate({left:g.left -
                                40}, 100, function() {
                            c.animate({left:g.left}, 400, "swing", function() {
                                c.removeClass("sliding")
                            })
                        }); else {
                            m = g.left - n * m;
                            c.animate({left:Math.max(h, m)}, 1E3, "swing", function() {
                                c.removeClass("sliding")
                            })
                        } else if (v - o < n && g.left != 0) {
                            m = 0;
                            c.animate({left:m}, 1E3, "swing", function() {
                                c.removeClass("sliding")
                            })
                        } else if (g.left != 0) {
                            m = g.left + n * m;
                            console.log("Animated to: ", m);
                            c.animate({left:Math.min(m, 0)}, 1E3, "swing", function() {
                                c.removeClass("sliding")
                            })
                        } else c.animate({left:40}, 100, function() {
                            c.animate({left:0}, 400, "swing",
                                    function() {
                                        c.removeClass("sliding")
                                    })
                        })
                    }
                },".slide_playBtn click, .playBtn click":function(a, b) {
                b.preventDefault();
                var c = !(GS.player.queue && GS.player.queue.activeSong);
                if (a.attr("data-playlistid"))GS.Models.Playlist.getPlaylist(a.attr("data-playlistid"), function(h) {
                    h.play(-1, true)
                }); else if (a.attr("data-songid"))if (a.attr("data-eventid") && this.feed && this.feed.cache && this.feed.cache[a.attr("data-eventid")]) {
                    var g = _.orEqual(a.attr("data-index"), 0);
                    (g = GS.Models.Song.wrap(this.feed.cache[a.attr("data-eventid")].data.songs[g])) &&
                    GS.player.addSongsToQueueAt([g.SongID], -1, c)
                } else GS.player.addSongsToQueueAt([a.attr("data-songid")], -1, c); else a.attr("data-albumid") ? GS.Models.Album.getAlbum(a.attr("data-albumid"), function(h) {
                    h.play(-1, true)
                }) : console.warn("Not a valid data attribute")
            },".songLink click":function(a, b) {
                b.preventDefault();
                var c;
                if (c = a.attr("data-songid"))if (c = (c = GS.Models.Song.getOneFromCache(c) ? GS.Models.Song.getOneFromCache(c) : GS.Models.Song.getSong(c)) && $.isFunction(c.toUrl) ? c.toUrl() : false)location.hash = c
            },
                sliderOrBoxDragSetup:function(a, b) {
                    a.unbind("draginit").unbind("dragstart").unbind("drag").unbind("dragend");
                    a.bind("draginit",
                            function(c, g) {
                                var h = $(c.target).closest(b);
                                if (h.length === 0)return false;
                                g.draggedItemID = h.attr("data-dragid");
                                g.draggedItemsType = h.attr("data-dragtype");
                                if (!g.draggedItemID || !g.draggedItemsType)return false;
                                g.proxyOffsetX = c.clientX - h.offset().left;
                                g.proxyOffsetY = c.clientY - h.offset().top
                            }).bind("dragstart",
                            function(c, g) {
                                var h,k;
                                h = GS.Controllers.PageController.getActiveController();
                                g.draggedItemsContext = h.getPlayContext();
                                g.draggedItems = [];
                                g.draggedItemsSource = "grid";
                                switch (g.draggedItemsType) {
                                    case "album":
                                        k = GS.Models.Album.getOneFromCache(parseInt(g.draggedItemID, 10));
                                        break;
                                    case "playlist":
                                        k = GS.Models.Playlist.getOneFromCache(parseInt(g.draggedItemID, 10));
                                        break;
                                    case "artist":
                                        k = GS.Models.Artist.getOneFromCache(parseInt(g.draggedItemID, 10));
                                        break;
                                    case "user":
                                        k = GS.Models.User.getOneFromCache(parseInt(g.draggedItemID, 10));
                                        break;
                                    case "song":
                                        k = GS.Models.Song.getOneFromCache(parseInt(g.draggedItemID,
                                                10));
                                        break
                                }
                                if (!k)return false;
                                g.draggedItems.push(k);
                                h = $('<div class="dragProxy slick-reorder-proxy"><div class="status"></div><span class="info"><span class="text"></span></span></div>').css({position:"absolute",zIndex:"99999","min-height":"50px","padding-right":"50px"}).appendTo("body").mousewheel(_.globalDragProxyMousewheel);
                                $.isFunction(k.toProxyLabel) ? h.find(".text").html(k.toProxyLabel()) : h.find(".text").html(k.toString());
                                g.proxyOffsetX = Math.floor(h.width() / 2) + 15;
                                g.proxyOffsetY = h.height() *
                                        2 - 52;
                                $.publish("gs.drag.start", g);
                                return h
                            }).bind("drag",
                            function(c, g) {
                                g.clientX = c.clientX;
                                g.clientY = c.clientY;
                                $(g.proxy).css("top", c.clientY - g.proxyOffsetY).css("left", c.clientX - g.proxyOffsetX);
                                var h = false,k = false;
                                _.forEach(g.drop, function(m) {
                                    $.isFunction(m.updateDropOnDrag) && m.updateDropOnDrag(c, g);
                                    if (!h)if ($(m).within(c.clientX, c.clientY).length > 0)if ($(m).data("ignoreForOverDrop"))k = true; else {
                                        k = false;
                                        h = true
                                    }
                                });
                                k || (h ? $(g.proxy).addClass("valid").removeClass("invalid") : $(g.proxy).addClass("invalid").removeClass("valid"))
                            }).bind("dragend",
                            function(c, g) {
                                $(g.proxy).remove();
                                $.publish("gs.drag.end", g)
                            })
                },likeWidth:"48px",likeWidthCache:{},loadLikeButtonCount:function(a, b) {
                if (!b && this.likeWidthCache[a]) {
                    this.likeWidth = this.likeWidthCache[a];
                    $("#page_content_social_buttons .fblike").css("width", this.likeWidth)
                }
                GS.getFacebook().queryFQL('SELECT total_count FROM link_stat WHERE url="' + a + '"', this.callback(function(c) {
                    if (c[0].total_count) {
                        this.likeWidth = c[0].total_count > 1E4 ? "80px" : c[0].total_count > 1E3 ? "77px" : c[0].total_count > 100 ? "80px" : c[0].total_count >
                                10 ? "77px" : c[0].total_count > 0 ? "77px" : "48px";
                        $("#page_content_social_buttons .fblike").css("width", this.likeWidth);
                        this.likeWidthCache[a] = this.likeWidth
                    }
                }), this.callback(function() {
                    this.likeWidth = "48px";
                    $("#page_content_social_buttons .fblike").css("width", this.likeWidth)
                }))
            }})
})();
GS.Controllers.BaseController.extend("GS.Controllers.RapLeafController", {isGSSingleton:true,preSetup:function() {
    $.subscribe("gs.auth.update", GS.Controllers.BaseController.singletonCallback("rapleaf", "update"))
}}, {personalizeMapTheme:{"4097253982":"10=2","4097253968":"10=2","4097253992":"10=3","4097253999":"10=4","4097254011":"10=5","4097254001":"10=5","4097254007":"10=5","4097253897":"1=0","4097253890":"1=1"},personalizeMapSidebar:{"4097253982":"10=2","4097253968":"10=2","4097253992":"10=3","4097253999":"10=4",
    "4097254011":"10=5","4097254001":"10=5","4097254007":"10=5","4097253897":"1=0","4097253890":"1=1"},init:function() {
    this._super()
},appReady:function() {
    this.onPersonalize()
},update:function() {
    this.onPersonalize()
},onPersonalize:function() {
    if (!GS.user.IsPremium && !GS.user.isLoggedIn) {
        var a = GS.store.get("webvisit");
        a ? this.updateParams(a) : $.getScript("http://rd.rlcdn.com/rd?type=js&site=108574", this.callback("onPersonalizeCallback"))
    }
},updateParams:function(a) {
    for (var b = 0; b < a.theme.length; b++) {
        if (a.theme[b].indexOf("0=") ==
                0) {
            a.theme[b] = a.theme[b].replace("0=18-24", "10=2");
            a.theme[b] = a.theme[b].replace("0=25-34", "10=3");
            a.theme[b] = a.theme[b].replace("0=35-44", "10=4");
            a.theme[b] = a.theme[b].replace("0=50-", "10=5")
        }
        if (a.sidebar[b].indexOf("AgeRange=") == 0) {
            a.sidebar[b] = a.sidebar[b].replace("AgeRange=18-24", "10=2");
            a.sidebar[b] = a.sidebar[b].replace("AgeRange=25-34", "10=3");
            a.sidebar[b] = a.sidebar[b].replace("AgeRange=35-44", "10=4");
            a.sidebar[b] = a.sidebar[b].replace("AgeRange=50-", "10=5")
        } else if (a.sidebar[b].indexOf("Gender=M") ==
                0)a.sidebar[b] = a.sidebar[b].replace("Gender=M", "1=0"); else if (a.sidebar[b].indexOf("Gender=F") == 0)a.sidebar[b] = a.sidebar[b].replace("Gender=F", "1=1")
    }
    GS.store.set("webvisit", a)
},onPersonalizeCallback:function() {
    if (_rlcdnsegs && _rlcdnsegs.length) {
        for (var a = {theme:[],sidebar:[]},b = 0; b < _rlcdnsegs.length; b++)try {
            a.theme.push(this.personalizeMapTheme[_rlcdnsegs[b].toString()]);
            a.sidebar.push(this.personalizeMapSidebar[_rlcdnsegs[b].toString()])
        } catch(c) {
            console.warn("[ Personalize Out of Bounds ]")
        }
        GS.store.set("webvisit",
                a);
        b = {};
        b.params = a.sidebar.toString();
        jQuery.isEmptyObject(b) || GS.getGuts().logEvent("rapleafCollectedData", b)
    } else GS.store.remove("webvisit")
}});
GS.Controllers.BaseController.extend("GS.Controllers.KruxController", {isGSSingleton:true,preSetup:function() {
    var a = GS.Controllers.BaseController.singletonCallback;
    $.subscribe("gs.auth.update", a("krux", "update"));
    $.subscribe("gs.app.ready", a("krux", "update"))
}}, {ksgmnts:null,kuid:null,kruxTimeoutID:null,kruxMap:{le41lbk67:"10=2",le41nxxu5:"10=3",le41psbqd:"10=4",le41rklq8:"10=5",le41vvpw0:"1=0",le41t46he:"1=1"},init:function() {
    this._super()
},update:function() {
    this.onPersonalize()
},onPersonalize:function() {
    if (GS.user.IsPremium)clearTimeout(this.kruxTimeoutID);
    else {
        if (GS.user.isLoggedIn) {
            var a = {};
            if (GS.user.Sex)a["1"] = GS.user.Sex.toLowerCase() == "m" ? "0" : "1";
            if (GS.user.TSDOB) {
                var b = GS.user.TSDOB.split("-");
                if (b.length == 3) {
                    var c = new Date,g = c.getFullYear() - parseInt(b[0], 10);
                    if (parseInt(b[1], 10) > c.month)g -= 1; else if (parseInt(b[1], 10) == c.month && parseInt(b[2], 10) > c.date)g -= 1;
                    var h;
                    if (g >= 13 && g < 18)h = "1"; else if (g >= 18 && g < 25)h = "2"; else if (g >= 25 && g < 35)h = "3"; else if (g >= 35 && g < 50)h = "4"; else if (g >= 50)h = "5"
                }
                a["10"] = h;
                a["14"] = GS.getAd().encodeInteger(g)
            }
            try {
                a["0"] = GS.getAd().locales[GS.getLocale().locale]
            } catch(k) {
                a["0"] =
                        "0=1"
            }
            window.KRUXSetup = {pubid:"b5c2e077-e8aa-4ed6-9bf5-d6e958d0e2ca",site:"Grooveshark.com",section:"Listen",sub_section:"Rock",async:true,userAttributes:a}
        } else {
            if (GS.store.get("krux"))return;
            window.KRUXSetup = {pubid:"b5c2e077-e8aa-4ed6-9bf5-d6e958d0e2ca",site:"Grooveshark.com",async:true,loadSegments:true}
        }
        a = !GS.user.isLoggedIn ? 1E4 : 100;
        this.kruxTimeoutID = setTimeout(this.callback(function() {
            $.ajax({cache:true,dataType:"script",url:"http://cdn.krxd.net/krux.js",success:this.callback("onKruxLoad")})
        }),
                a)
    }
},onKruxLoad:function() {
}});
GS.Controllers.BaseController.extend("GS.Controllers.InviteInterface", {onDocument:false}, {userInfo:{},googleContacts:null,facebookFriends:[],fbIDs:{},slickbox:false,peopleError:null,people:null,onFollowersSuccess:function(a) {
    var b = [];
    $.each(a, this.callback(function(c, g) {
        b.push([g.Email,g.Name + " " + g.Email,g.Name,g.Name]);
        this.userInfo[g.UserID] = g;
        this.userInfo[g.Email] = g
    }));
    a = new $.TextboxList("#emails", {addOnBlur:true,bitsOptions:{editable:{growing:true,growingOptions:{maxWidth:$("#emails").innerWidth() - 10}}},
        plugins:{autocomplete:{placeholder:$.localize.getString("SHARE_EMAIL_PLACEHOLDER")}},encode:this.callback(function(c) {
            for (var g = [],h = 0; h < c.length; h++)if (c[h][0])this.userInfo[c[h][0]] ? g.push(this.userInfo[c[h][0]].Email) : g.push(c[h][0]); else if (c[h][1])this.userInfo[c[h][1]] ? g.push(this.userInfo[c[h][1]].Email) : g.push(c[h][1]);
            return g.join(",")
        })});
    a.plugins.autocomplete.setValues(b);
    a.addEvent("bitAdd", this.callback(function(c) {
        c.getValue()[1] === "" && c.hide();
        if (this.userInfo[c.getValue()[1]] && _.notDefined(c.getValue()[0])) {
            var g =
                    this.userInfo[c.getValue()[1]];
            c.setValue([g.Email,g.Name + " " + g.Email,g.Name,g.Name]);
            c.show()
        }
    }));
    $("#services_content input.textboxlist-bit-editable-input").focus()
},extractInviteEmails:function(a) {
    var b,c = [],g,h = $.trim(a).split(",");
    for (a = 0; a < h.length; a++) {
        g = $.trim(h[a]).split(" ");
        for (b = 0; b < g.length; b++) {
            g[b] = $.trim(g[b]);
            g[b] && c.push(g[b])
        }
    }
    return c
},onFollowersFailed:function(a) {
    console.warn("failed grabbing contact info for followers", autocompleteTerms, a);
    $.publish("gs.notification", {type:"error",
        message:$.localize.getString("POPUP_FAIL_FANS_EMAIL_ONLY")})
},onFacebookFriends:function(a) {
    this.facebookFriends = a || [];
    var b = [];
    $.each(this.facebookFriends, this.callback(function(c, g) {
        b.push([g.id,g.name,g.name])
    }));
    this.facebookLoaded = true;
    if (b.length > 0)this.friendsLoaded = true;
    $("#lightbox_pane", this.element).html(this.view("/lightbox/invite/facebook"));
    GS.getLightbox().positionLightbox();
    if (b.length > 0) {
        a = new $.TextboxList("#facebook_invite_list", {addOnBlur:true,bitsOptions:{editable:{growing:true,
            growingOptions:{maxWidth:$("#facebook_invite_list").innerWidth() - 10}}},plugins:{autocomplete:{placeholder:$.localize.getString("SHARE_FACEBOOK_PLACEHOLDER")}},encode:this.callback(function(c) {
            var g = [];
            if (c.length) {
                for (var h = 0; h < c.length; h++)c[h][0] && g.push(c[h][0]);
                this.element.find(".submit span").attr("data-translate-text", "SHARE_FACEBOOK_FRIENDS").html($.localize.getString("SHARE_FACEBOOK_FRIENDS"))
            } else this.element.find(".submit span").attr("data-translate-text", "SHARE_FACEBOOK_WALL").html($.localize.getString("SHARE_FACEBOOK_WALL"));
            return g.join(",")
        })});
        a.plugins.autocomplete.setValues(b);
        a.addEvent("bitAdd", this.callback(function(c) {
            this.element.find(".error").hide();
            if (c.getValue()[1] === "")c.hide(); else {
                var g = $("#facebook_invite_list").val().split(",");
                if (g) {
                    var h = g.indexOf(c.getValue()[0]);
                    c.getValue()[0] && h >= 0 && h != g.length - 1 && c.hide();
                    c.getValue()[0] ? GS.getFacebook().canPostToFriend(c.getValue()[0], this.callback(function(k) {
                        if (!k) {
                            k = c.getValue()[1];
                            var m = $.localize.getString("POPUP_SHARE_ERROR_FACEBOOK_CANTPOST");
                            m = m.replace("{name}",
                                    k);
                            this.element.find(".error").show().find(".message").html(m);
                            c.hide();
                            GS.getLightbox().positionLightbox()
                        }
                    })) : c.hide()
                }
            }
        }));
        $("#services_content input.textboxlist-bit-editable-input").focus()
    }
},formSubmit:function() {
    var a = this,b = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/i;
    this.peopleError = [];
    this.people = [];
    switch (this.submitType) {
        case "email":
            var c;
            c = $.trim($("textarea[name=emails]", this.element).val());
            var g = $("div.textboxlist", this.element).find(".textboxlist-bit").not(".textboxlist-bit-box-deletable").filter(":last").text();
            if (c !== "") {
                c = this.extractInviteEmails(c);
                _.forEach(c, function(m) {
                    m.match(b) ? a.people.push(m) : a.peopleError.push(m)
                })
            }
            if (g) {
                g = this.extractInviteEmails(g);
                for (c = 0; c < g.length; c++)g[c].match(b) ? this.people.push(g[c]) : this.peopleError.push(g[c])
            }
            if (this.people.length)GS.service.sendInvites(this.people, this.callback("sendInviteSuccess"), this.callback("sendInviteFailed")); else this.peopleError.length && this.invalidInviteEmail();
            break;
        case "googleLogin":
            g = $("input[name=google_username]", this.element).val();
            c = $("input[name=google_password]", this.element).val();
            GS.service.getGoogleAuthToken(g, c, this.callback("googAuthSuccess"), this.callback("googAuthFailed"));
            break;
        case "googleContacts":
            var h = [];
            $(".contactsContainer input:checked", this.element).each(function() {
                h.push(this.value)
            });
            h.length && GS.service.sendInvites(h, this.callback("sendInviteSuccess"), this.callback("sendInviteFailed"));
            break;
        case "facebook":
            g = $("#facebook_invite_list").val() ? $("#facebook_invite_list").val().split(",") : [];
            var k = _.orEqual($("textarea[name=facebookMessage]",
                    this.element).val(), "");
            if (g.length > 0) {
                GS.getFacebook().lastError = false;
                _.forEach(g, this.callback(function(m) {
                    GS.getFacebook().lastError || GS.getFacebook().postToFeed(m, "http://grooveshark.com/", k, "link", "invite", null, this.callback("facebookFailed"))
                }));
                if (!GS.getFacebook().lastError) {
                    g.length > 1 ? $.publish("gs.facebook.notification.sent", {params:{type:"invites",hideUndo:true},data:{},notifData:{}}) : $.publish("gs.facebook.notification.sent", {params:{type:"invite",hideUndo:true},data:{},notifData:{}});
                    this.facebookSuccess()
                }
            } else if (GS.getFacebook().connected && window.FB && FB.getAccessToken())GS.getFacebook().postToFeed("me", "http://grooveshark.com/", k, "link", "invite", this.callback("facebookSuccess"), this.callback("facebookFailed")); else if (GS.getFacebook().facebookLoaded && GS.getFacebook().connected)this.facebookFailed(); else {
                window.open("http://www.facebook.com/sharer.php?u=http://grooveshark.com&t=Grooveshark&ref=invite");
                this.facebookSuccessCallback()
            }
            break
    }
    return false
},sendInviteSuccess:function(a) {
    var b =
            [],c = [],g = [],h = [],k = "";
    if (a)for (var m in a)switch (a[m].status) {
        case "error":
            a[m].errorCode == -3 ? h.push(m) : b.push(m);
            break;
        case "followed":
            c.push(a[m].Username || a[m].FName);
            break;
        case "invited":
            g.push(m);
            break
    }
    if (c.length) {
        k = (new GS.Models.DataString($.localize.getString("POPUP_INVITE_FORM_RESPONSE_FOLLOWING"), {list:c.join(", ")})).render();
        $.publish("gs.notification", {type:"info",message:k})
    }
    if (g.length) {
        k = g.length > 5 ? (new GS.Models.DataString($.localize.getString("POPUP_INVITE_FORM_RESPONSE_INVITED_SUM"),
                {sum:String(g.length)})).render() : (new GS.Models.DataString($.localize.getString("POPUP_INVITE_FORM_RESPONSE_INVITED_LIST"), {list:g.join(", ")})).render();
        $.publish("gs.notification", {type:"info",message:k})
    }
    if (h.length) {
        k = (new GS.Models.DataString($.localize.getString("POPUP_INVITE_FORM_RESPONSE_ALREADY_SENT"), {list:h.join(", ")})).render();
        $.publish("gs.notification", {type:"info",message:k})
    }
    if (b.length) {
        k = (new GS.Models.DataString($.localize.getString("POPUP_INVITE_FORM_RESPONSE_ERROR"), {list:b.join(", ")})).render();
        $.publish("gs.notification", {type:"error",message:k})
    }
    if (this.peopleError.length)this.invalidInviteEmail(); else if (b.length + c.length + g.length + h.length == 0) {
        this.element.find(".message").attr("data-translate-text", "POPUP_INVITE_FORM_RESPONSE_UNKNOWN_ERROR").html($.localize.getString("POPUP_INVITE_FORM_RESPONSE_UNKNOWN_ERROR"));
        this.element.find(".error").show()
    } else this.sendInviteSuccessCallback()
},sendInviteFailed:function(a) {
    console.warn("invite failed", a);
    this.element.find(".message").attr("data-translate-text",
            "POPUP_INVITE_FORM_RESPONSE_UNKNOWN_ERROR").html($.localize.getString("POPUP_INVITE_FORM_RESPONSE_UNKNOWN_ERROR"));
    this.element.find(".error").show()
},invalidInviteEmail:function() {
    console.warn("invalid invite email");
    var a = $("div.textboxlist", this.element).find(".textboxlist-bit").not(".textboxlist-bit-box-deletable").filter(":last").text();
    a && this.people.indexOf(a) >= 0 && $("div.textboxlist", this.element).find(".textboxlist-bit").not(".textboxlist-bit-box-deletable").remove();
    _.forEach(this.people,
            function(b) {
                $("li.textboxlist-bit:contains('" + b + "')").remove()
            });
    this.element.find(".message").attr("data-translate-text", "POPUP_INVITE_FORM_RESPONSE_INVALID_EMAIL_ERROR").html($.localize.getString("POPUP_INVITE_FORM_RESPONSE_INVALID_EMAIL_ERROR"));
    this.element.find(".error").show()
},googAuthSuccess:function(a) {
    switch (parseInt(a.result.statusCode)) {
        case 1:
            a = String(a.result.rawResponse);
            a = a.substr(a.indexOf("Auth=") + 5);
            GS.service.getGoogleContacts(a, this.callback("googContactsSuccess"), this.callback("googContactsFailed"));
            break;
        case 2:
            this.element.find(".message").attr("data-translate-text", "POPUP_INVITE_GOOGAUTH_RESPONSE_AUTH_ERROR").html($.localize.getString("POPUP_INVITE_GOOGAUTH_RESPONSE_AUTH_ERROR"));
            this.element.find(".error").show();
            break;
        default:
            this.element.find(".message").attr("data-translate-text", "POPUP_INVITE_GOOGAUTH_RESPONSE_UNKNOWN_ERROR").html($.localize.getString("POPUP_INVITE_GOOGAUTH_RESPONSE_UNKNOWN_ERROR"));
            this.element.find(".error").show();
            break
    }
},googAuthFailed:function() {
    this.element.find(".message").attr("data-translate-text",
            "POPUP_INVITE_GOOGAUTH_RESPONSE_UNKNOWN_ERROR").html($.localize.getString("POPUP_INVITE_GOOGAUTH_RESPONSE_UNKNOWN_ERROR"));
    this.element.find(".error").show()
},googContactsSuccess:function(a) {
    switch (parseInt(a.result.statusCode, 10)) {
        case 1:
            this.googleContacts = a.result.parsedResult;
            this.showOnlyNamedContacts = true;
            this.googContactsSuccessCallback();
            break;
        case 2:
            this.element.find(".message").attr("data-translate-text", "POPUP_INVITE_GOOGAUTH_RESPONSE_AUTH_ERROR").html($.localize.getString("POPUP_INVITE_GOOGAUTH_RESPONSE_AUTH_ERROR"));
            this.element.find(".error").show();
            break;
        default:
            this.element.find(".message").attr("data-translate-text", "POPUP_INVITE_GOOGAUTH_RESPONSE_UNKNOWN_ERROR").html($.localize.getString("POPUP_INVITE_GOOGAUTH_RESPONSE_UNKNOWN_ERROR"));
            this.element.find(".error").show();
            break
    }
},googContactsFailed:function(a) {
    console.warn("goog contacts failed", a);
    this.element.find(".message").attr("data-translate-text", "POPUP_INVITE_GOOGAUTH_RESPONSE_UNKNOWN_ERROR").html($.localize.getString("POPUP_INVITE_GOOGAUTH_RESPONSE_UNKNOWN_ERROR"));
    this.element.find(".error").show()
},facebookSuccess:function() {
    this.facebookSuccessCallback()
},facebookFailed:function() {
    this.element.find(".message").attr("data-translate-text", "POPUP_SHARE_FACEBOOK_ERROR").html($.localize.getString("POPUP_SHARE_FACEBOOK_ERROR"));
    this.element.find(".error").show()
},"input keydown":function(a, b) {
    b.keyCode && b.keyCode == 13 && a.is("[name*=google]") && this.formSubmit()
},"input.googleContact click":function(a) {
    $(a).is(":checked") ? $(a).closest("li.contact").addClass("selected") :
            $(a).closest("li.contact").removeClass("selected")
},"button.uncheckAll click":function() {
    if (this.submitType == "facebook")this.facebookClearSelected(); else this.submitType == "googleContacts" && $(".google_contacts input", this.element).attr("checked", false)
},"button.checkAll click":function() {
    if (this.submitType == "facebook") {
        this.element.find(".submit span").attr("data-translate-text", "SEND_INVITE").html($.localize.getString("SEND_INVITE"));
        _.forEach(this.facebookFriends, function(a, b) {
            this.facebookFriends[b].selected =
                    true;
            this.fbIDs[a.id] = a.id
        }, this);
        this.slickbox.setItems(this.facebookFriends)
    } else this.submitType == "googleContacts" && $(".google_contacts input", this.element).attr("checked", true)
},updateFacebookForm:function() {
    $("#settings_facebook_form").html(this.view("/shared/inviteFacebook"));
    $("#settings_facebook_form .error").addClass("hide");
    $(window).resize()
},updateFacebookFormWithError:function(a) {
    if (typeof a == "object" && a.error)a = a.error;
    $("#settings_facebook_form .error").html($.localize.getString(a));
    $("#settings_facebook_form .error").removeClass("hide");
    $(window).resize()
},"#fbConnect-btn.fbConnect click":function() {
    var a = GS.getFacebook().flags;
    GS.getFacebook().logout(this.callback(function() {
        GS.getFacebook().login(null, this.callback(function(b) {
            b && b.error ? this.element.find(".error").show().find(".message").html($.localize.getString(b.error)) : this.element.find(".error").show().find(".message").html($.localize.getString("FACEBOOK_PROBLEM_CONNECTING_ERROR_MSG"));
            GS.getLightbox().positionLightbox()
        }),
                a)
    }))
},"#fbConnect-btn.fbLogin click":function() {
    GS.getFacebook().login(null, this.callback(function(a) {
        a && a.error ? this.element.find(".error").show().find(".message").html($.localize.getString(a.error)) : this.element.find(".error").show().find(".message").html($.localize.getString("FACEBOOK_PROBLEM_CONNECTING_ERROR_MSG"));
        GS.getLightbox().positionLightbox()
    }))
},"#lightbox .error .message .resetPerms click":function(a, b) {
    b.preventDefault();
    var c = GS.getFacebook().flags;
    GS.getFacebook().logout(function() {
        GS.getFacebook().login(function() {
                    $("#lightbox").find(".error").hide()
                },
                this.callback(function() {
                    error && error.error ? this.element.find(".error").show().find(".message").html($.localize.getString(error.error)) : this.element.find(".error").show().find(".message").html($.localize.getString("FACEBOOK_PROBLEM_CONNECTING_ERROR_MSG"));
                    GS.getLightbox().positionLightbox()
                }), c)
    })
}});
GS.Controllers.BaseController.extend("GS.Controllers.VipInterface", {onDocument:false,vipErrorCodes:{"GS-00":"VIP_ERROR_UNKNOWN","GS-01":"VIP_ERROR_LOGIN","GS-02":"VIP_ERROR_ALREADY_VIP","CC-01":"VIP_ERROR_MISSING_NAME","CC-02":"VIP_ERROR_UNKNOWN","CC-03":"VIP_ERROR_MISSING_CC_INFO","CC-04":"VIP_ERROR_ADDRESS","CC-05":"VIP_ERROR_UNKNOWN","CC-06":"VIP_ERROR_PAYMENT_PROCESSOR","CC-07":"VIP_ERROR_SESSION_EXPIRED","CC-08":"VIP_ERROR_INVALID_CC","CC-09":"VIP_ERROR_MISSING_CVD","CC-10":"VIP_ERROR_INVALID_CVD",
    "CC-11":"VIP_ERROR_ADDRESS1_TOO_LONG","CC-000":"VIP_ERROR_GENERIC_PAYMENT_ERROR","CC-000X":"VIP_ERROR_GENERIC_PAYMENT_ERROR","PP-01":"VIP_ERROR_UNKNOWN","PP-02":"VIP_ERROR_UNKNOWN_PAYPAL","PP-03":"VIP_ERROR_UNKNOWN","PP-04":"VIP_ERROR_PAYPAL_CANCEL","PP-000":"VIP_ERROR_PAYPAL_FAIL","PP-000X":"VIP_ERROR_PAYPAL_FAIL","PC-01":"VIP_ERROR_NO_PROMOCODE","PC-02":"VIP_ERROR_CODE_NOT_FOUND","PC-03":"VIP_ERROR_CODE_REDEEMED","RC-01":"VIP_ERROR_NOT_ENOUGH_POINTS"},excludedCreditCardCountries:{AF:true,AL:true,
    AM:true,AO:true,AZ:true,BA:true,BD:true,BG:true,BI:true,BY:true,CD:true,CF:true,CG:true,CK:true,CS:true,CU:true,DZ:true,EG:true,ER:true,ET:true,GE:true,GT:true,HT:true,ID:true,IQ:true,IR:true,KG:true,KH:true,KP:true,KZ:true,LA:true,LR:true,LY:true,MD:true,MK:true,MM:true,MN:true,MY:true,NG:true,NR:true,PH:true,PK:true,RO:true,RU:true,RW:true,SD:true,SL:true,SR:true,SY:true,TJ:true,TM:true,UA:true,UZ:true,VE:true,YE:true,ZW:true}}, {vipPackages:{plus:"plus",anywhere:"anywhere",vip:"vip"},vipPackagePrices:GS.Models.AuthUser.getPricing(),
    showVipErrors:function(a) {
        if (a.errorID && a.message)a.error = [
            {errorID:a.errorID,message:a.message}
        ];
        var b,c = ['<ul class="errors">'];
        this.element.find(".error.response .message").html("");
        this.element.find(".error.response").hide();
        if (a.error && a.error.length) {
            _.forEach(a.error, this.callback(function(g) {
                if (b = $.trim($.localize.getString(GS.Controllers.VipInterface.vipErrorCodes[g.errorID])))c.push("<li>" + b + "</li>"); else {
                    console.warn("unknown error in arr", g.errorID, g.message, GS.Controllers.VipInterface.vipErrorCodes[g.errorID]);
                    b = _.isString(g.message) ? g.message : g.message[0];
                    if (b.match("AVS"))b = $.localize.getString("VIP_ERROR_AVS"); else if (b.match("invalid XML"))b = $.localize.getString("VIP_ERROR_XML"); else if (b.match("invalid card number"))b = $.localize.getString("VIP_ERROR_CARD_NUMBER"); else if (b.match("CVD check"))b = $.localize.getString("VIP_ERROR_CVD");
                    b && c.push("<li>" + b + "</li>")
                }
            }));
            c.push("</ul>");
            a = this.element.find(".error").show().find(".message");
            a.html("<strong>" + $.localize.getString("POPUP_VIP_ERROR_MESSAGE") + "</strong> " +
                    c.join(""))
        } else {
            this.element.find(".message").attr("data-translate-text", "VIP_ERROR_UNKNOWN").html($.localize.getString("VIP_ERROR_UNKNOWN"));
            this.element.find(".error").show()
        }
    },"a.login click":function() {
        GS.getLightbox().close();
        GS.getLightbox().open("login")
    }});
GS.Controllers.PageController.extend("GS.Controllers.Page.HomeController", {}, {init:function(a, b) {
    this.update(b);
    this.subscribe("gs.app.resize", this.callback("resize"));
    this._super()
},update:function() {
    if (!GS.getLightbox || !GS.getLightbox().isOpen)$("input.search.autocomplete", this.element).focus();
    !GS.user.isLoggedIn || GS.user.IsPremium ? $(".home_upgrade").addClass("hide") : $(".home_upgrade").removeClass("hide");
    $.publish("gs.page.home.update")
},index:function() {
    this._super();
    this.addAutocomplete("home");
    this.resize();
    this.subscribe("gs.app.resize", this.callback("resize"));
    this.subscribe("gs.auth.update", this.callback("update"));
    GS.Controllers.PageController.title("Listen to Free Music Online - Internet Radio - Free MP3 Streaming", false);
    $.publish("gs.page.home.view");
    GS.resize()
},resize:function() {
    var a = $("#homeSearch"),b = 500;
    if (a.length) {
        b = Math.max(250, Math.min(500, $(this.element).width() - 200));
        a.width(b).css("marginLeft", -Math.round(b / 2))
    }
},toggleHint:function(a, b) {
    var c = $("#searchBar_hint"),g =
            $("#searchBar_input input"),h = $("#searchBar_precomplete");
    if (b.type == "mousedown")g.val() === "" && b.button != 2 ? c.show().addClass("faded") : c.hide(); else if (b.type == "keyup" || b.type == "keydown") {
        var k = _.orEqual(b.keyCode, b.which),m = String.fromCharCode(k).replace(/[\b]/g, "");
        if (String.fromCharCode(k).replace(/[\s]/g, "").length > 0)g.val() === "" && m.length < 1 ? c.show().addClass("faded") : c.hide();
        if (b.type == "keydown") {
            h.hide();
            if (k == _.keys.TAB) {
                b.preventDefault();
                c = h.text();
                c.length && g.val(c)
            }
        }
    } else g.val() === "" ?
            c.show().removeClass("faded") : c.hide();
    g.val() === "" && h.text("")
},"#homeSearch submit":function(a, b) {
    if ($("input[name=q]", a).val() === "") {
        b.stopImmediatePropagation();
        return false
    }
    return true
},"#searchButton click":function() {
    $("#searchBar_input .search").val() ? $("#homeSearch").submit() : $("#searchBar_input span").trigger("click")
},"#searchBar_input span click":function() {
    $("input.search.autocomplete", this.element).focus();
    $("#searchBar_hint").addClass("faded")
},"#homePage keydown":function() {
    $("input.search.autocomplete",
            this.element).focus()
},"input.search.autocomplete mousedown":function(a, b) {
    return this.toggleHint(a, b)
},"input.search.autocomplete keydown":function(a, b) {
    return this.toggleHint(a, b)
},"input.search.autocomplete keyup":function(a, b) {
    return this.toggleHint(a, b)
},"input.search.autocomplete focusout":function(a, b) {
    if ($("#searchBar_input input").hasClass("focused")) {
        setTimeout(function() {
            $("input.search.autocomplete", "#page").focus()
        }, 0);
        $("#searchBar_input input").removeClass("focused");
        return true
    } else return this.toggleHint(a,
            b)
},"a.about click":function() {
    GS.getLightbox().open("about")
},"a.themes click":function() {
    GS.getLightbox().open("themes")
},"a.upgrade click":function() {
    GS.getLightbox().open("vipPerks")
},"a.station click":function(a, b) {
    b.stopPropagation();
    var c = a.attr("data-tagid");
    GS.player.setAutoplay(true, c);
    return false
},notFound:function() {
    this.element.html(this.view("not_found"));
    this.addAutocomplete("home");
    this.resize();
    this.subscribe("gs.app.resize", this.callback("resize"));
    this.subscribe("gs.auth.update",
            this.callback("update"));
    GS.Controllers.PageController.title("Unable To Find What You're Looking For")
}});
GS.Controllers.PageController.extend("GS.Controllers.Page.NowPlayingController", {}, {currentSong:{},index:function() {
    GS.Controllers.PageController.title("Now Playing");
    this.element.html(this.view("index"));
    this.list.doSearchInPage = true;
    var a = GS.player.getCurrentQueue();
    this.loadGrid(a);
    this.loadCurrentSong(a);
    this.subscribe("gs.player.queue.change", this.callback(["loadGrid","loadCurrentSong"]));
    GS.resize()
},init:function() {
    this._super();
    this.bind("keyup", this.callback(function(a) {
        a.which === 46 && this.deleteSelectedSongs()
    }));
    this.delegate("button.delete", "click", this.callback(this.deleteSelectedSongs))
},deleteSelectedSongs:function() {
    var a = [],b = this.element.find(".gs_grid").controller();
    if (b) {
        var c = b.grid.getSelectedRows();
        if (c.length !== 0) {
            for (var g = 0; g < c.length; g++)a.push(b.dataView.rows[c[g]].queueSongID);
            GS.player.removeSongs(a);
            b.grid.setSelectedRows([]);
            b.selectedRowIDs = [];
            $.publish("gs.grid.selectedRows", {len:0,type:"song"})
        }
    }
},loadCurrentSong:function() {
    var a = _.orEqual(GS.player.currentSong, {});
    if (!this.currentSong ||
            a.SongID !== this.currentSong.SongID) {
        this.currentSong = a;
        console.log(a);
        $("#currentSongInfo").html(this.view("current_song"))
    }
},loadGrid:function(a) {
    if (!a) {
        a = GS.player.getCurrentQueue();
        if (!a) {
            this.element.find(".gs_grid").html(this.view("noResults"));
            $("#searchForm input").select();
            this.addAutocomplete("now_playing");
            GS.resize();
            return
        }
    }
    this.queue = a;
    var b = a.songs.length > 0 && a.songs[0]instanceof GS.Models.Song ? a.songs : GS.Models.Song.wrapQueue(a.songs),c = this.element.find(".gs_grid").controller(),g = {sortCol:"Sort",
        sortDir:1,sortStoreKey:"gs.sort.nowPlaying.songs",scrollPane:$("#page_content"),padding:0};
    g = $.extend(g, {allowDuplicates:true,allowDragSort:true,isNowPlaying:true});
    for (var h = 1; h < b.length; h++)b[h].Sort = h;
    if (c) {
        g = c.dataView;
        var k = c.grid;
        if (g) {
            g.beginUpdate();
            var m = b.concat(),n,o = g.getItems().concat(),q;
            for (h = 0; h < o.length; h++) {
                n = o[h];
                q = m.indexOf(n);
                q != -1 && m.splice(q, 1);
                g.getIdxById(n.SongID);
                q = b.indexOf(n);
                q == -1 ? g.deleteItem(n.SongID) : g.updateItem(n.GridKey, n)
            }
            m.length && g.addItems(m, "SongID");
            g.endUpdate();
            g.refresh()
        }
        k && k.onSort(c.sortCol, c.sortDir);
        GS.resize()
    } else if (b.length) {
        g.rowCssClasses = this.callback(function(v) {
            var x = "";
            a = GS.player.getCurrentQueue();
            if (a.activeSong && a.activeSong.queueSongID == v.queueSongID)x += "active";
            if (a.autoplayEnabled)x += " autoplay";
            return x
        });
        g.rowAttrs = function(v) {
            return["rel='",v.queueSongID,"' rel2='",v.SongID,"'"].join("")
        };
        this.element.find(".gs_grid").gs_grid(b, GS.Controllers.GridController.columns.queuesong, g, "song")
    } else {
        this.element.find(".gs_grid").html(this.view("noResults"));
        $("#searchForm input").select();
        this.addAutocomplete("now_playing");
        GS.resize()
    }
    a.hasRestoreQueue ? $("#page_header button.clearRestore .restore").show().siblings().hide() : $("#page_header button.clearRestore .clears").show().siblings().hide();
    $("#grid .slick-row.active").removeClass("active");
    if (a.activeSong) {
        $("#grid .slick-row[rel=" + a.activeSong.queueSongID + "]").addClass("active");
        GS.player.isPlaying ? $("#grid .slick-row.active a.play").removeClass("paused") : $("#grid .slick-row.active a.play").addClass("paused")
    }
},
    getOptionMenu:function() {
        var a = [];
        addMenu = this.getAddMenu();
        a.concat(addMenu);
        this.queue = GS.player.getCurrentQueue(true);
        if (this.queue.songs.length) {
            a = addMenu.concat([
                {customClass:"separator"}
            ]);
            var b = this.queue.activeSong.getShareMenu();
            a.push({title:$.localize.getString("SHARE_SONG"),type:"sub",src:b,customClass:"jj_menu_item_hasIcon jj_menu_item_share jj_menu_item_more"})
        } else if (GS.player.queue.hasRestoreQueue)a = a.concat({title:$.localize.getString("QUEUE_RESTORE_QUEUE"),action:{type:"fn",callback:GS.player.restoreQueue},
            customClass:"jj_menu_item_hasIcon jj_menu_item_undo"});
        if (a.length)a = a.concat([
            {customClass:"separator"}
        ]);
        a.push({title:$.localize.getString("QUEUE_LOAD_STATION"),customClass:"stations jj_menu_item_hasIcon jj_menu_item_station",type:"sub",src:GS.Models.Station.getStationsStartMenu()});
        return a
    },getShareMenu:function() {
        return[
            {title:$.localize.getString("SHARE_WIDGET"),action:{type:"fn",callback:this.callback(function() {
                for (var a = [],b = 0; b < this.queue.songs.length; ++b)a.push(this.queue.songs[b].SongID);
                GS.getLightbox().open("share", {service:"widget",type:"manySongs",id:a});
                GS.getGuts().onContextMenuClick("contextShareWidget", "dropdownmenu", false, null)
            })},customClass:"jj_menu_item_hasIcon jj_menu_item_share_widget"}
        ]
    },getAddMenu:function() {
        var a = [];
        songID = this.currentSong.SongID;
        songName = this.currentSong.SongName;
        songIDs = [];
        for (var b = 0; b < this.queue.songs.length; ++b)songIDs.push(this.queue.songs[b].SongID);
        if (this.currentSong && this.currentSong.SongID)GS.user.favorites.songs.hasOwnProperty(songID) ?
                a.push({title:$.localize.getString("CONTEXT_REMOVE_FROM_FAVORITES"),action:{type:"fn",callback:function() {
                    GS.user.removeFromSongFavorites(songID, true);
                    GS.getGuts().objectListPlayAdd(songID, triggerElement)
                }},customClass:"jj_menu_item_hasIcon jj_menu_item_remove_favorite"}) : a.push({title:$.localize.getString("CONTEXT_ADD_TO_FAVORITES"),action:{type:"fn",callback:function() {
            GS.user.addToSongFavorites(songID, true);
            GS.getGuts().objectListPlayAdd(songID, triggerElement)
        }},customClass:"jj_menu_item_hasIcon jj_menu_item_favorites"});
        GS.user.isShortcut("song", songID) ? a.push({title:$.localize.getString("CONTEXT_REMOVE_FROM_PINBOARD"),action:{type:"fn",callback:function() {
            GS.user.removeFromShortcuts("song", songID);
            $("#page_header a[name=shortcut]").parent().show();
            $("#page_header a[name=removeshortcut]").parent().hide()
        }},customClass:"jj_menu_item_hasIcon jj_menu_item_remove_music"}) : a.push({title:$.localize.getString("CONTEXT_ADD_TO_PINBOARD"),action:{type:"fn",callback:function() {
            GS.user.addToShortcuts("song", songID, songName,
                    true);
            $("#page_header a[name=shortcut]").parent().hide();
            $("#page_header a[name=removeshortcut]").parent().show()
        }},customClass:"jj_menu_item_hasIcon jj_menu_item_pinboard"});
        a.push({title:$.localize.getString("CONTEXT_ADD_TO_PLAYLIST"),type:"sub",src:GS.Models.Playlist.getPlaylistsMenu(songIDs, function(c) {
            c.addSongs(songIDs, null, true)
        }, false, true),customClass:"jj_menu_item_hasIcon jj_menu_item_add_playlist"});
        return a
    },getSortMenu:function() {
        var a = this.setSort;
        return[
            {title:$.localize.getString("SORT_BY_PLAYLIST"),
                action:{type:"fn",callback:function() {
                    a("Sort", triggerElement, "SORT_BY_PLAYLIST")
                }},customClass:"jj_menu_item_blank"},
            {title:$.localize.getString("SORT_BY_SONG"),action:{type:"fn",callback:function() {
                a("SongName", triggerElement, "SORT_BY_SONG")
            }},customClass:"jj_menu_item_blank"},
            {title:$.localize.getString("SORT_BY_ARTIST"),action:{type:"fn",callback:function() {
                a("ArtistName", triggerElement, "SORT_BY_ARTIST")
            }},customClass:"jj_menu_item_blank"},
            {title:$.localize.getString("SORT_BY_ALBUM"),action:{type:"fn",
                callback:function() {
                    a("AlbumName", triggerElement, "SORT_BY_ALBUM")
                }},customClass:"jj_menu_item_blank"}
        ]
    },"button.clearRestore click":function(a) {
        if (GS.player.getCurrentQueue().hasRestoreQueue) {
            GS.player.restoreQueue();
            a.find(".restore").show().siblings().hide()
        } else {
            GS.player.clearQueue();
            a.find(".clears").show().siblings().hide()
        }
    },".slick-row .smile click":function(a, b) {
        b.stopImmediatePropagation();
        var c = a.parents(".slick-row").attr("row");
        c = $("#grid").controller().dataView.getItemByIdx(c).queueSongID;
        GS.player.voteSong(c, 1);
        $(a).addClass("selected").siblings(".frown").removeClass("selected")
    },".slick-row .frown click":function(a, b) {
        b.stopImmediatePropagation();
        var c = a.parents(".slick-row").attr("row");
        c = $("#grid").controller().dataView.getItemByIdx(c).queueSongID;
        GS.player.voteSong(c, -1);
        $(a).addClass("selected").siblings(".smile").removeClass("selected")
    }});
(function() {
    GS.Controllers.PageController.extend("GS.Controllers.Page.SettingsController", {}, {user:null,settings:null,desktopPrefs:null,subscriptionData:null,index:function(a) {
        this.pageType = a || "profile";
        GS.getGuts().handlePageLoad("settings", {subpage:a});
        if (!GS.user.isLoggedIn)if (this.pageType !== "preferences" && this.pageType !== "subscriptions") {
            this.pageType = "preferences";
            window.location.hash = "/settings/preferences"
        }
        GS.user.settings.getUserSettings(this.callback("loadSettings"), GS.router.notFound);
        this.subscribe("gs.auth.update", this.callback("index", a));
        this.subscribe("gs.auth.favorites.users.update", this.callback("updateActivityUsersForm"));
        this.subscribe("gs.facebook.profile.update", this.callback("updateFacebookForm"));
        this.subscribe("gs.facebook.status.update", this.callback("updateFacebookForm"));
        this.subscribe("gs.lastfm.profile.update", this.callback("updateLastfmForm"));
        this.subscribe("gs.google.profile.update", this.callback("updateGoogleForm"));
        this.subscribe("gs.settings.upload.onload",
                this.callback("iframeOnload"))
    },loadSettings:function() {
        if (this.element) {
            this.user = GS.user;
            this.settings = GS.user.settings;
            this.desktopPrefs = GS.airbridge.getDesktopPreferences();
            this.element.html(this.view("index"));
            switch (this.pageType) {
                case "profile":
                    GS.Controllers.PageController.title("Settings");
                    this.showProfile();
                    break;
                case "password":
                    GS.Controllers.PageController.title("Change Password");
                    this.showPassword();
                    break;
                case "preferences":
                    GS.Controllers.PageController.title("Preferences");
                    this.showPreferences();
                    break;
                case "services":
                    GS.Controllers.PageController.title("Services Settings");
                    this.showServices();
                    break;
                case "activity":
                    GS.Controllers.PageController.title("Activity Settings");
                    this.showActivity();
                    break;
                case "subscriptions":
                    GS.Controllers.PageController.title("Subscriptions Settings");
                    if (GS.user.isLoggedIn)this.subscriptionData !== null ? this.showSubscriptions(this.subscriptionData) : GS.service.getSubscriptionDetails(this.callback("showSubscriptions"), this.callback("showSubscriptions")); else this.showSubscriptions(false);
                    break
            }
            GS.resize()
        }
    },showProfile:function() {
        this.today = new Date;
        this.dob = new Date;
        if (this.settings.TSDOB) {
            var a = this.settings.TSDOB.split("-");
            this.dob = new Date(parseInt(a[0], 10), parseInt(a[1], 10) - 1, parseInt(a[2], 10))
        }
        this.months = $.localize.getString("MONTHS").split(",");
        this.countries = _.countries;
        GS.user.UserID > 0 && GS.user.getPathName(this.callback("loadProfile"))
    },loadProfile:function() {
        if (GS.user.UserID > 0 && this.pageType == "profile") {
            this.element.find("#settings").html(this.view("profile"));
            $(".settings_selectbox_country span").html($("select.country option:selected").html());
            $(".selectbox.month span").html($("select.month option:selected").html());
            window.location.hash.match(/pic$/) && setTimeout(function() {
                $("#settings").scrollTo("#settings_profilePicture")
            }, 100)
        }
    },showPassword:function() {
        this.element.find("#settings").html(this.view("password"));
        $(window).resize()
    },showServices:function() {
        this.element.find("#settings").html(this.view("services"));
        this.updateFacebookForm();
        this.updateLastfmForm();
        this.updateGoogleForm();
        $(window).resize()
    },showPreferences:function() {
        $(window).resize();
        this.element.find("#settings").html(this.view("preferences"));
        if (this.desktopPrefs) {
            $("#desktop_selected_notifDuration", this.element).localeDataString("NUM_SECONDS", {seconds:this.desktopPrefs.notifications.duration});
            $("option.notifDuration", this.element).each(function() {
                $(this).localeDataString("NUM_SECONDS", {seconds:$(this).val()})
            })
        }
    },showActivity:function() {
        this.settings.privacy = GS.service.privacy;
        this.element.find("#settings").html(this.view("activity"));
        this.hideUsers = new $.TextboxList("#settings_usersToHide",
                {addOnBlur:false,plugins:{autocomplete:{placeholder:$.localize.getString("SETTINGS_USER_HIDE_PLACEHOLDER")}},encode:this.callback(function(a) {
                    for (var b = [],c = 0; c < a.length; c++)a[c][0] ? b.push(a[c][0]) : b.push(a[c][1]);
                    return b.join(",")
                })});
        this.hideUsers.addEvent("bitAdd", this.callback("bitCheck"));
        this.updateActivityUsersForm();
        $(window).resize()
    },showSubscriptions:function(a) {
        var b = GS.Models.AuthUser.getPricing(a.bVip);
        this.data = this.subscriptionData = a;
        this.noData = true;
        this.recurring = this.bVip = this.bAnywhere =
                this.bPlus = this.hasSpecialVip = false;
        this.billingAmount = this.nextBillingDate = this.paymentType = this.subscriptionType = "";
        this.anywhereMonthPrice = b.anywhere.month;
        this.plusMonthPrice = b.plus.month;
        this.dateUnsubscribed = this.endDate = false;
        if (a === false || a.fault || a.code || a.bVip && _.notDefined(a.paymentType)) {
            this.noData = true;
            this.recurring = _.orEqual(a.bRecurring, false);
            this.bAnywhere = this.bPlus = false;
            if (GS.user.IsPremium)this.hasSpecialVip = true;
            if (a && a.bVip)this.bVip = parseInt(a.bVip, 10)
        } else {
            this.noData = false;
            switch (a.paymentType) {
                case "OPTIMAL_PAYMENTS":
                    this.paymentMethod = $.localize.getString("CREDIT_CARD");
                    break;
                case "PAYPAL":
                    this.paymentMethod = $.localize.getString("PAYPAL");
                    break;
                case "FREE_TRIAL":
                    this.paymentMethod = $.localize.getString("FREE_TRIAL");
                    break;
                case "ZONG":
                    this.paymentMethod = $.localize.getString("ZONG");
                    break;
                case "ALLOPASS":
                    this.paymentMethod = $.localize.getString("ALLOPASS");
                    break;
                case "GWALLET":
                    this.paymentMethod = $.localize.getString("GWALLET");
                    break;
                case "TRIAL_PAY":
                    this.paymentMethod =
                            $.localize.getString("TRIAL_PAY");
                    break;
                default:
                    this.paymentMethod = _.orEqual(a.paymentType, "")
            }
            this.subscriptionType = a.subscriptionType;
            this.paymentType = a.paymentType;
            this.billingAmount = "$" + a.amount;
            this.recurring = a.bRecurring;
            this.bVip = parseInt(a.bVip, 10);
            this.bAnywhere = (GS.user.Flags & GS.Models.User.FLAG_ANYWHERE) > 0;
            this.bPlus = (GS.user.Flags & GS.Models.User.FLAG_PLUS) > 0;
            this.dateUnsubscribed = a.dateUnsubscribed;
            if (a.dateStart == a.dateNextCheck && !this.recurring)this.nextBillingDate = false; else try {
                var c =
                        _.orEqual(a.dateNextBill, a.dateNextCheck).split("-");
                this.nextBillingDate = (new Date(parseInt(c[0], 10), parseInt(c[1], 10) - 1, parseInt(c[2], 10))).format("F j, Y")
            } catch(g) {
                console.warn("subPage error:", g);
                this.nextBillingDate = $.localize.getString("UNKNOWN")
            }
            try {
                var h = _.orEqual(a.dateSubcriptionEnd, a.dateEnd).split("-");
                this.endDate = (new Date(parseInt(h[0], 10), parseInt(h[1], 10) - 1, parseInt(h[2], 10))).format("F j, Y")
            } catch(k) {
            }
        }
        if (this.bVip)this.plusMonthPrice = this.anywhereMonthPrice = b.vip.month;
        $("#page_header_navigation .subscriptions_link").hasClass("active") &&
        this.element.find("#settings").html(this.view("subscriptions"));
        $(window).resize()
    },paymentTypeToString:function(a) {
        var b = "";
        switch (a) {
            case "FREE_TRIAL":
                break;
            default:
                b = $.localize.getString("SUBSCRIPTIONS_UNKNOWN_PAYMENT_TYPE")
        }
        return b
    },bitCheck:function(a) {
        this.userInfo[a.getValue()[1]] || a.hide()
    },updateActivityUsersForm:function() {
        if (this.element) {
            this.hiddenUsers = GS.user.filterFriends(1);
            this.visibleUsers = GS.user.filterFriends(1, true);
            this.element.find("#hiddenUsers").html(this.view("hiddenUsers"));
            this.element.find("#settings_usersToHide").val("");
            this.element.find(".textboxlist-bit-box-deletable").remove();
            this.userInfo = {};
            var a = [];
            $.each(this.visibleUsers, this.callback(function(b, c) {
                a.push([c.UserID,c.Name,c.Name,c.Name]);
                this.userInfo[c.UserID] = c;
                this.userInfo[c.Name] = c
            }));
            _.defined(this.hideUsers) && this.hideUsers.plugins && this.hideUsers.plugins.autocomplete.setValues(a)
        }
    },"#settings_userInfo submit":function(a, b) {
        b.preventDefault();
        var c = $.trim($("input[name=fname]", a).val()),g = $.trim($("input[name=username]",
                a).val()),h = $.trim($("input[name=email]", a).val()),k = $("select[name=country]", a).val(),m = $("input[name=zip]", a).val(),n = $("input[name=sex]:checked", a).val(),o = parseInt($("select[name=month]", this.element).val(), 10),q = parseInt($("select[name=year]", this.element).val(), 10),v = parseInt($("select[name=day]", this.element).val(), 10),x = new Date(q, o - 1, v);
        o = o.toString().length == 1 ? "0" + o : o;
        v = v.toString().length == 1 ? "0" + v : v;
        o = [q,o,v].join("-");
        c = {FName:c,Email:h,Country:k,Zip:m,Sex:n,TSDOB:o,PageName:g};
        if (Math.floor((+new Date -
                +x) / 864E5 / 365.24) < 13)this._userInfoFailed({statusCode:0,message:$.localize.getString("POPUP_SIGNUP_FORM_TOO_YOUNG_ACCOUNT")}); else h.match(_.emailRegex) ? GS.user.settings.updateProfile(c, this.callback(this._userInfoSuccess), this.callback(this._userInfoFailed)) : this._userInfoFailed({statusCode:-2});
        return false
    },checkUsernameTimer:null,"#user_customURL keyup":function(a) {
        a = a.val();
        $(".settings_usernameURL .status", this.element).removeClass("verified alert error");
        clearTimeout(this.checkUsernameTimer);
        if (a !== "" && a.length && a != GS.user.PathName)this.checkUsernameTimer = setTimeout(this.callback("checkUsername", a), 500)
    },checkUsername:function(a) {
        var b = 0,c = /^([a-zA-Z0-9]+[\.\-_]?)+[a-zA-Z0-9]+$/;
        $(".settings_usernameURL .status", this.element).removeClass("verified alert error");
        if (a.length && (a.length < 5 || a.length > 32 || !a.match(c))) {
            b |= 128;
            $(".settings_usernameURL .status", this.element).addClass("alert").attr("title", $.localize.getString("POPUP_SIGNUP_FORM_USERNAME_INVALID"))
        } else a.length && a != GS.user.PathName &&
        GS.service.getItemByPageName(a, this.callback(function(g) {
            if (!g || g.type) {
                b |= 4;
                $(".settings_usernameURL .status", this.element).addClass("error").attr("title", $.localize.getString("POPUP_SIGNUP_FORM_USERNAME_UNAVAILABLE"))
            } else $(".settings_usernameURL .status", this.element).addClass("verified").attr("title", $.localize.getString("POPUP_SIGNUP_FORM_USERNAME_AVAILABLE"))
        }), null, {async:false});
        return b
    },_userInfoSuccess:function() {
        $("#settings_userInfo .form_buttons .status").addClass("success").removeClass("failure")
    },
        _userInfoFailed:function(a) {
            $("#settings_userInfo .form_buttons .status").addClass("failure").removeClass("success");
            switch (a.statusCode) {
                case -2:
                    $.publish("gs.notification", {type:"error",message:$.localize.getString("POPUP_EMAIL_INVALID")});
                    break;
                case -3:
                    $.publish("gs.notification", {type:"error",message:$.localize.getString("POPUP_NAME_CANNOT_BE_EMPTY")});
                    break;
                case -4:
                    $.publish("gs.notification", {displayDuration:1E4,type:"error",message:$.localize.getString("POPUP_EMAIL_TAKEN")});
                    break;
                case -7:
                case -9:
                    $.publish("gs.notification",
                            {type:"error",message:$.localize.getString("POPUP_INCORRECT_PASSWORD")});
                    break;
                case -10:
                    $.publish("gs.notification", {type:"error",message:$.localize.getString("POPUP_USERNAME_INVALID_CHARACTERS")});
                    break;
                case -11:
                    $.publish("gs.notification", {type:"error",message:$.localize.getString("POPUP_USERNAME_INVALID_LENGTH")});
                    break;
                case -12:
                    $.publish("gs.notification", {type:"error",message:$.localize.getString("POPUP_USERNAME_RATE_LIMIT")});
                    break;
                case -13:
                    $.publish("gs.notification", {type:"error",message:$.localize.getString("POPUP_USERNAME_TAKEN")});
                    break;
                default:
                    a = _.orEqual(a.message, $.localize.getString("POPUP_UNABLE_SAVE_SETTINGS"));
                    $.publish("gs.notification", {type:"error",message:a});
                    break
            }
        },"#uploadPath change":function(a) {
            a = $(a).val();
            a = a.replace(/.+\\/g, "");
            if (a.length > 20)a = a.substr(0, 20) + "&hellip;";
            $("#uploadLabel").html(a)
        },"#settings_profilePicture .browse click":function() {
            $("#uploadPath").click()
        },isFormOnload:false,"#settings_profilePicture submit":function() {
            $("#settings_profilePicture .form_buttons .status").text($.localize.getString("LOADING...")).show();
            return this.isFormOnload = true
        },iframeOnload:function(a, b) {
            console.log("iframe.upload.onload", a, b);
            $("#settings_profilePicture .form_buttons .status").text("");
            var c = a.contentWindow || a.get().contentDocument,g;
            if (c.document)c = c.document;
            c = c.body.innerHTML;
            console.log("iframe.upload.resp str", c);
            if (c) {
                try {
                    g = $.parseJSON(c)
                } catch(h) {
                    g = {}
                }
                if (!g || !g.success || !g.filename) {
                    g = g || {};
                    g.error && g.error.code && (g.error.code == 1 || g.error.code == 2) ? $.publish("gs.notification", {type:"error",message:$.localize.getString("POPUP_UPLOAD_IMAGE_TOO_BIG")}) :
                            $.publish("gs.notification", {type:"error",message:$.localize.getString("POPUP_UNABLE_UPLOAD_IMAGE")});
                    $("#settings_profilePicture .form_buttons .status").addClass("failure")
                } else {
                    $("#settings_profilePicture .form_buttons .status").addClass("success");
                    c = $("#settings_profilePicture").find("img");
                    GS.user.Picture = g.filename;
                    c.attr("src", GS.user.getImageURL());
                    $("#header_account_button .profileImg img").attr("src", GS.user.getImageURL(30))
                }
            } else if (this.isFormOnload) {
                $.publish("gs.notification", {type:"error",
                    message:$.localize.getString("POPUP_UNABLE_UPLOAD_IMAGE")});
                $("#settings_profilePicture .form_buttons .status").addClass("failure")
            }
            return this.isFormOnload = false
        },"#settings_changePassword submit":function(a, b) {
            b.preventDefault();
            var c = $("input[name=oldPass]", a).val(),g = $("input[name=newPass]", a).val(),h = $("input[name=confirmPass]", a).val();
            g == h && c.length > 4 && g.length > 4 ? GS.user.changePassword(c, g, this.callback(this._passwordSuccess), this.callback(this._passwordFailed)) : $.publish("gs.notification",
                    {type:"error",message:$.localize.getString("POPUP_SIGNUP_FORM_PASSWORD_INVALID_NO_MATCH")});
            return false
        },_passwordSuccess:function() {
            $("#settings_changePassword .form_buttons .status").addClass("success")
        },_passwordFailed:function() {
            $("#settings_changePassword .form_buttons .status").addClass("failure")
        },"#settings_changePassword a.forgot click":function() {
            GS.getLightbox().open("forget")
        },"#settings_notifications submit":function(a, b) {
            b.preventDefault();
            var c = {userFollow:$("#settings_notifications_userFollow").is(":checked"),
                inviteSignup:$("#settings_notifications_userSignup").is(":checked"),playlistSubscribe:$("#settings_notifications_userSubscribe").is(":checked"),newFeature:$("#settings_notifications_newFeature").is(":checked")};
            GS.user.settings.changeNotificationSettings(c, this.callback(this._notificationsSuccess), this.callback(this._notificationsFailed));
            return false
        },_notificationsSuccess:function() {
            $("#settings_notifications .form_buttons .status").addClass("success")
        },_notificationsFailed:function() {
            $("#settings_notifications .form_buttons .status").addClass("failure");
            $.publish("gs.notification", {type:"error",message:$.localize.getString("POPUP_UNABLE_SAVE_NOTIFICATION")})
        },"select blur":function(a) {
            a.change()
        },"select keydown":function(a) {
            a.change()
        },"li.settings_genderOrientation mousedown":function(a) {
            $(a).data("previous", $("#settings_userInfo input[name=sex]:checked").val())
        },"li.settings_genderOrientation click":function(a, b) {
            var c = $("input", a);
            if ($(c).val() === $(a).data("previous")) {
                $("#gender_none").attr("checked", "checked");
                b.preventDefault();
                $(c).blur();
                return false
            }
        },"form :input change":function(a) {
            $(a).closest("form").find(".form_buttons .status").removeClass("success failure")
        },"#settings_localSettings button.clearLocal click":function(a, b) {
            b.preventDefault();
            GS.store.clear();
            $("#settings_localSettings .form_buttons .status").addClass("success");
            return false
        },"#settings_localSettings submit":function(a, b) {
            b.preventDefault();
            var c = GS.theme.THEME_FLAG_DEFAULT;
            c |= ($("input[name=familyFriendly]:checked", a).length ? 1 : 0) * GS.theme.THEME_FLAG_FAMILY_FRIENDLY;
            c = {restoreQueue:$("input[name=restoreQueue]:checked", a).length ? 1 : 0,persistShuffle:$("input[name=persistShuffle]:checked", a).length ? 1 : 0,lowerQuality:$("input[name=lowerQuality]:checked", a).length ? 1 : 0,noPrefetch:$("input[name=noPrefetch]:checked", a).length ? 1 : 0,playPauseFade:$("input[name=doCrossfade]:checked", a).length ? 1 : 0,crossfadeAmount:$("select[name=crossfadeSecs]", a).val() * 1E3,tooltips:$("input[name=tooltips]:checked", a).length ? 1 : 0,themeFlags:c,persistPinboard:$("input[name=persistPinboard]:checked",
                    a).length ? 1 : 0};
            GS.user.settings.changeLocalSettings(c, this.callback(this._localSettingSuccess), this.callback(this._localSettingFailed));
            return false
        },_localSettingSuccess:function() {
            $("#settings_localSettings .form_buttons .status").addClass("success").removeClass("failure")
        },_localSettingFailed:function() {
            $("#settings_localSettings .form_buttons .status").addClass("failure").removeClass("success")
        },"#settings_activity_privacy submit":function(a, b) {
            b.preventDefault();
            switch ($(a).find("input:checked").val()) {
                case "-1":
                    GS.service.privacy =
                            1;
                    $("#settings_activity_privacy .form_buttons .status").addClass("success");
                    GS.service.reportUserChange(GS.user, 1);
                    GS.getFacebook().scrobblingEnabled = false;
                    GS.getLastfm().scrobblingEnabled = false;
                    break;
                case "0":
                    var c = false;
                    if (!(GS.user.Privacy & 1) && GS.service.privacy & 1)c = true;
                    GS.service.privacy = GS.user.Privacy = 0;
                    if (c) {
                        $("#settings_activity_privacy .form_buttons .status").addClass("success");
                        GS.service.reportUserChange(GS.user, 1)
                    } else GS.service.changePrivacySettings(0, this.callback("changePrivacySuccess"),
                            this.callback("changePrivacyFailure"));
                    if ((GS.getFacebook().flags & GS.getFacebook().SCROBBLING_FLAG) > 0)GS.getFacebook().scrobblingEnabled = true;
                    if ((GS.getLastfm().flags & GS.getLastfm().SCROBBLING_FLAG) > 0)GS.getLastfm().scrobblingEnabled = true;
                    break;
                case "1":
                    GS.service.privacy = GS.user.Privacy = 1;
                    GS.service.changePrivacySettings(1, this.callback("changePrivacySuccess"), this.callback("changePrivacyFailure"));
                    GS.getFacebook().scrobblingEnabled = false;
                    GS.getLastfm().scrobblingEnabled = false;
                    break
            }
            return false
        },
        changePrivacySuccess:function(a) {
            if (!a || a.statusCode !== 1)this.changePrivacyFailed(a); else {
                $("#settings_activity_privacy .form_buttons .status").addClass("success");
                GS.service.reportUserChange(GS.user)
            }
        },changePrivacyFailed:function() {
            $("#settings_activity_privacy .form_buttons .status").addClass("failure")
        },"#settings_activity_users submit":function(a, b) {
            b.preventDefault();
            for (var c = ($("#settings_usersToHide").val() || "").split(","),g = [],h = 0; h < c.length; h++)this.userInfo[c[h]] && g.push({userID:this.userInfo[c[h]].UserID,
                flags:1});
            GS.user.changeFollowFlags(g);
            return false
        },"#settings_activity_users button.showUser click":function(a) {
            a = [
                {userID:parseInt($(a).attr("data-userid"), 10),flags:0}
            ];
            GS.user.changeFollowFlags(a)
        },updateFacebookForm:function() {
            $("#settings_facebook_form").html(this.view("facebook_form"));
            $("#settings_facebook_form .checkbox_list").html(this.view("/shared/facebookSettings"));
            $(window).resize()
        },updateFacebookFormWithError:function(a) {
            if (typeof a == "object" && a.error)a = a.error;
            $("#settings_facebook_form .error").removeClass("hide").html($.localize.getString(a));
            $(window).resize()
        },"#fbConnect-btn.fbLogin click":function() {
            GS.getFacebook().login(this.callback("updateFacebookForm"), this.callback("updateFacebookFormWithError"))
        },"#fbConnect-btn.fbConnect click":function() {
            var a = GS.getFacebook().flags;
            GS.getFacebook().logout(this.callback(function() {
                GS.getFacebook().login(this.callback("updateFacebookForm"), this.callback("updateFacebookFormWithError"), a)
            }))
        },"a.fb-logout click":function() {
            GS.getFacebook().registeredWithFacebook ? GS.getLightbox().open("resetPassword",
                    this.callback(function(a) {
                        var b = GS.getFacebook().flags;
                        GS.getFacebook().logout(this.callback(function() {
                            this.callback("updateFacebookForm");
                            a()
                        }), b)
                    })) : GS.getFacebook().logout(this.callback("updateFacebookForm"))
        },"form#settings_facebook_form submit":function(a, b) {
            b.preventDefault();
            var c = 0;
            $("#settings_facebook_form input:checkbox:checked").each(function(g, h) {
                c |= $(h).val()
            });
            GS.getFacebook().save(c, function() {
                $("#settings_facebook_form .form_buttons .status").addClass("success")
            }, function() {
                $("#settings_facebook_form .form_buttons .status").addClass("failure")
            });
            return false
        },"a.fb-findfriends click":function() {
            GS.getFacebook().getGroovesharkUsersFromFriends()
        },"a.fb-disableScrobbling click":function() {
            GS.getFacebook().scrobblingEnabled = false;
            $("form#settings_facebook_form .fb-disableScrobbling").hide();
            $("form#settings_facebook_form .fb-enableScrobbling").show()
        },"a.fb-enableScrobbling click":function() {
            GS.getFacebook().scrobblingEnabled = true;
            $("form#settings_facebook_form .fb-enableScrobbling").hide();
            $("form#settings_facebook_form .fb-disableScrobbling").show()
        },
        updateGoogleForm:function() {
            this.element.find("#settings_google_form").html(this.view("google_form"));
            this.element.find("#settings_google_form .error").addClass("hide");
            $(window).resize()
        },updateGoogleFormWithError:function(a) {
            if (!a || !a.error)a = {error:"POPUP_SIGNUP_LOGIN_FORM_GOOGLE_ERROR"};
            this.element.find("#settings_google_form .error").removeClass("hide").html($.localize.getString(a.error));
            $(window).resize()
        },"#googleLogin-btn click":function() {
            GS.getGoogle().login(this.callback("updateGoogleForm"),
                    this.callback("updateGoogleFormWithError"))
        },"a.google-logout click":function() {
            GS.getGoogle().registeredWithGoogle ? GS.getLightbox().open("resetPassword", this.callback(function(a) {
                GS.getGoogle().logout(this.callback(function() {
                    this.callback("updateGoogleForm");
                    a()
                }))
            })) : GS.getGoogle().logout(this.callback("updateGoogleForm"))
        },updateLastfmForm:function() {
            this.element.find("#settings_lastfm_form").html(this.view("lastfm_form"));
            this.element.find("#settings_lastfm_form .error").addClass("hide");
            $(window).resize()
        },
        updateLastfmFormWithError:function(a) {
            if (!a || !a.error)a = {error:"POPUP_SIGNUP_LOGIN_FORM_LASTFM_ERROR"};
            console.log($.localize.getString(a.error));
            this.element.find("#settings_lastfm_form .error").removeClass("hide").html($.localize.getString(a.error));
            $(window).resize()
        },"#lastfmConnect-btn click":function(a, b) {
            b.preventDefault();
            GS.getLastfm().login(this.callback("updateLastfmForm"), this.callback("updateLastfmFormWithError"));
            return false
        },"a.lastfm-logout click":function() {
            GS.getLastfm().logout(this.callback("updateLastfmForm"))
        },
        "form#settings_lastfm_form submit":function(a, b) {
            b.preventDefault();
            if ($("#settings_lastfm_enabled:checked").length)GS.getLastfm().scrobblingEnabled = false; else GS.getLastfm().scrobblingEnabled = true;
            $("#settings_lastfm_form .form_buttons .status").addClass("success");
            return false
        },"#settings_userSubscriptions button.upgrade click":function(a, b) {
            b.preventDefault();
            var c,g = !this.noData && !this.recurring ? 1 : 0;
            if (GS.user.isLoggedIn)if (a.hasClass("plus")) {
                c = this.bVip ? "vip" : "plus";
                GS.getLightbox().open("vipSignup",
                        {vipPackage:c,bExtend:g})
            } else if (a.hasClass("anywhere")) {
                c = this.bVip ? "vip" : "anywhere";
                GS.getLightbox().open("vipSignup", {vipPackage:c,bExtend:g})
            } else {
                c = this.bVip ? "vip" : "anywhere";
                GS.getLightbox().open("vipSignup", {initOffers:true,vipPackage:c,bExtend:g})
            } else location.hash = "/signup";
            return false
        },"#settings_userSubscriptions button.extend click":function(a, b) {
            b.preventDefault();
            var c;
            c = this.subscriptionType.match("Anywhere") ? "anywhere" : this.subscriptionType.match("Plus") ? "plus" : this.bVip == true ||
                    this.bVip == 1 ? "vip" : "plus";
            if (c === "vip" || c === "anywhere")GS.getLightbox().open("vipSignup", {bExtend:1,vipPackage:this.bVip ? "vip" : c}); else location.hash = "/signup/upgrade"
        },"#settings_userSubscriptions button.cancel click":function(a, b) {
            b.preventDefault();
            this.subscriptionData = null;
            GS.getLightbox().open("vipCancel");
            return false
        },"#settings_userSubscriptions button.update click":function(a, b) {
            b.preventDefault();
            this.subscriptionData = null;
            GS.getLightbox().open("vipSignup", {updateCreditCard:true});
            return false
        },
        "a.feedback click":function() {
            GS.user.IsPremium && GS.getLightbox().open("feedback")
        },"p.form_finePrint a.login click":function() {
            GS.getLightbox().open("login")
        },"p.form_finePrint a.signup click":function() {
            location.hash = "/signup"
        },"#init_deactivate_account click":function(a, b) {
            b.preventDefault();
            GS.getLightbox().open("deactivateAccount")
        },"#settings_desktop submit":function(a, b) {
            b.preventDefault();
            var c = {onClose:$("#settings_desktop input[name=settings_desktop_onClose]:checked").val(),onMinimize:$("#settings_desktop input[name=settings_desktop_onMinimize]:checked").val(),
                externalControlEnabled:$("#settings_desktop_globalKeyboard").is(":checked"),notifications:{songNotifications:$("#settings_desktop_songNotifications").is(":checked"),position:parseInt($("select[name=settings_desktop_notifPosition]", a).val(), 10),duration:parseInt($("select[name=settings_desktop_notifDuration]", a).val(), 10)}};
            this.desktopPrefs = c;
            GS.airbridge.setDesktopPreferences(c);
            $("#settings_desktop .form_buttons .status").addClass("success");
            return false
        },"#settings_preview .reload click":function() {
            $("#settings_preview_reload").val(1)
        },
        "#settings_preview .noReload click":function() {
            $("#settings_preview_reload").val(0)
        },"#settings_preview submit":function(a, b) {
            b.preventDefault();
            var c = $("input[name=settings_preview_usePreview]:checked", a).val(),g = parseInt($("#settings_preview_reload").val(), 10);
            c ? $.cookie("use_preview", true, {domain:".grooveshark.com",expires:60}) : $.cookie("use_preview", null, {domain:".grooveshark.com"});
            if (g)c ? setTimeout(function() {
                window.location = "http://preview.grooveshark.com"
            }, 100) : setTimeout(function() {
                window.location =
                        "http://grooveshark.com"
            }, 100);
            return false
        }})
})();
GS.Controllers.PageController.extend("GS.Controllers.Page.SongController", {}, {type:"song",scrollToComment:false,index:function(a, b) {
    this.url = location.hash;
    this.token = a || "";
    this.subpage = b || "overview";
    this.token ? GS.Models.Song.getSongFromToken(this.token, this.callback("loadSong")) : GS.router.notFound()
},loadSong:function(a) {
    if (a.validate()) {
        this.song = a;
        if (!a.fanbase)a.fanbase = GS.Models.Fanbase.wrap({objectID:a.SongID,objectType:"song"});
        this.correctUrl(this.song, this.subpage === "overview" ? "" : this.subpage);
        this.id = this.song.SongID;
        this.fbCommentsUrl = "http://listen.grooveshark.com/" + this.song.toUrl().replace("#/", "");
        this.fbUrl = "http://grooveshark.com/" + this.song.toUrl().replace("#/", "").split("?")[0];
        this.header.name = this.song.SongName;
        this.header.breadcrumbs = [
            {text:this.song.ArtistName,url:_.cleanUrl(this.song.ArtistName, this.song.ArtistID, "artist")},
            {text:this.song.AlbumName,url:_.cleanUrl(this.song.AlbumName, this.song.AlbumID, "album")}
        ];
        this.header.subpages = ["overview"];
        this.header.options = false;
        this.list.doPlayAddSelect = true;
        this.list.doSearchInPage = true;
        this.list.sortOptions = [
            {text:"Track",column:"TrackNum"},
            {text:"Popularity",column:"Popularity"},
            {text:"Song Name",column:"Name"},
            {text:"Artist Name",column:"ArtistName"}
        ];
        this.element.html(this.view("index"));
        switch (this.subpage) {
            case "overview":
            default:
                this.song.album = GS.Models.Album.getOneFromCache(this.song.AlbumID);
                this.triedUnverified = this.song.album ? this.song.album.songsLoaded && this.song.album.songsUnverifiedLoaded : false;
                GS.Controllers.PageController.title(this.song.getTitle());
                $("#page_header button.share").parent().show();
                if (window.FB && FB.XFBML && this.fbUrl && GS.getFacebook().initialXFBML)FB.XFBML.parse(window.document.getElementById("page_content"), this.callback("onPageLoaded")); else if (this.fbUrl) {
                    var b = this.callback(function() {
                        $.unsubscribe(["gs.facebook.xfbml.ready",b]);
                        FB.XFBML.parse(window.document.getElementById("page_content_pane"), this.callback("onPageLoaded"))
                    });
                    this.subscribe("gs.facebook.xfbml.ready", b)
                }
                this.fans = [];
                this.fansLoaded = false;
                this.song.fanbase.getFans(this.callback("loadSidebarFans"),
                        this.callback("loadSidebarFans"), false);
                break
        }
        a.getVideos(this.callback("loadVideos"), this.callback("loadVideosFailed"));
        GS.Models.Artist.getArtist(this.song.ArtistID, this.callback("loadDigests"));
        GS.service.getSongRecentListeners(this.song.SongID)
    } else GS.router.notFound()
},onPageLoaded:function() {
    setTimeout(this.callback(function() {
        if ($("#page_content_social_buttons").length) {
            $("#page_content .comments").removeClass("loadingFBComments");
            $("#page_content_social_buttons .fblike").css("width", this.likeWidth);
            this.loadLikeButtonCount(this.fbUrl);
            FB.XFBML.parse(window.document.getElementById("fbLike"), this.callback(function() {
                setTimeout(function() {
                    $.publish("gs.facebook.xfbml.ready")
                }, 100);
                this.scrollToComment && this.scrollToFBComment();
                $("#page_content_social_buttons .fblike").css("width", this.likeWidth)
            }));
            GS.resize();
            GS.getTwitter().getTwitterShareMessage("song", this.song, this.fbUrl, this.callback(function(a, b) {
                var c = $(document.createElement("a"));
                c.attr("data-text", a.replace('"', '"'));
                c.attr("data-url",
                        b);
                c.attr("data-via", "grooveshark");
                c.attr("data-count", "none");
                c.addClass("twitter-share-button");
                c.text("Tweet");
                $("#page_content_social_buttons .tweetButton").empty().append(c);
                GS.getTwitter().parseWidgets()
            }));
            GS.getGoogle().parsePlusWidgets($("#page_content_social_buttons .googlePlusButton").get(0))
        }
    }), 10)
},loadDigests:function(a) {
    this.artist = a;
    this.artist.getTunipopID(this.callback(function() {
    }));
    this.artist.getSongs(this.callback("loadAlbumDigest"));
    GS.service.artistGetSimilarArtists(this.artist.ArtistID,
            this.callback("loadSimilarDigest"));
    GS.service.artistGetSongkickEvents(this.artist.ArtistID, this.artist.ArtistName, this.callback("loadEventsDigest"));
    if (!GS.user.IsPremium) {
        GS.getAd().updateRotationCount();
        GS.getAd().buildAd($("#songCapital_300"), 300, 250, ["p=song_overview"]);
        GS.getAd().buildAd($("#songCapital_728"), 728, 90, ["p=song_overview"])
    }
},loadAlbumDigest:function() {
    if (this.artist && this.artist.albums) {
        var a = _.toArray(this.artist.albums).sort(GS.Models.Album.prettySort).slice(0, 6);
        a.length && $("#album_digest").html(this.view("/artist/album_digest",
                {artist:this.artist,albums:a}))
    }
},loadSimilarDigest:function(a) {
    this.similarArtists = GS.Models.Artist.wrapCollection(a.SimilarArtists);
    this.similarArtists.length && this.element.find("#similarArtists_digest").html(this.view("/artist/similarArtists_digest"))
},loadEventsDigest:function(a) {
    if (a && a.length) {
        a.sort(_.getSort("StartTime", -1));
        a = a.slice(0, 5);
        $("#events_digest").html(this.view("/artist/event_digest", {artist:this.artist,events:a}))
    }
},loadVideos:function(a) {
    if (this.subpage === "overview")if (a && a.length) {
        this.videos =
                a;
        $("#song_videos").html(this.view("song_videos", {videos:a}))
    }
},loadVideosFailed:function() {
    if (this.subpage === "overview")if (this.fans.length) {
        this.sliderObject = this.videos = this.fans;
        this.sliderObject.name = '<span data-translate-text="FANS">' + $.localize.getString("FANS") + "</span>";
        this.sliderWidth = this.fans.length * 140;
        this.sliderContents = this.fans;
        this.sliderRenderer = GS.Models.User.sliderRenderer;
        $("#song_subcontent").removeClass("loading").html(this.view("/shared/slider"))
    } else if (this.fansLoaded)$("#song_subcontent").removeClass("loading").hide();
    else this.loadSubFans = true
},loadSidebarFans:function(a) {
    this.fansLoaded = true;
    if (a) {
        var b = [];
        for (var c in a)if (a.hasOwnProperty(c)) {
            if (b.length >= 18)break;
            a[c].Picture && b.push(a[c])
        }
        this.fans = b;
        this.sidebarFans = true;
        $("#song_fans").html(this.view("/shared/sidebarFans", {fans:b,seeAll:false}));
        this.loadSubFans && this.loadVideosFailed()
    } else this.loadSubFans && $("#song_subcontent").removeClass("loading").hide()
},selectCurrentSong:function() {
    var a = this.element.find(".gs_grid").controller();
    if (a) {
        var b = a.dataView.getIdxById(this.song.SongID),
                c = a.grid.getSelectedRows();
        c.push(b);
        a.selectedRowIDs.push(this.song.SongID);
        a.grid.setSelectedRows(c);
        a.grid.onSelectedRowsChanged()
    }
},scrollToFBComment:function() {
    this.scrollToComment = true
},".slick-row.verifiedDivider click":function(a, b) {
    b.stopPropagation();
    var c = $("#grid").controller(),g;
    if (c) {
        if (!this.triedUnverified) {
            this.triedUnverified = true;
            this.song.getRelatedSongs(this.callback("loadRelatedGrid"), null, false)
        }
        if (c.filter.onlyVerified) {
            a.find(".showMore").addClass("showingMore").attr("data-translate-text",
                    "SEARCH_RESULTS_SHOW_LESS").html($.localize.getString("SEARCH_RESULTS_SHOW_LESS"));
            c.filter.onlyVerified = false
        } else {
            a.find(".showMore").removeClass("showingMore").attr("data-translate-text", "SEARCH_RESULTS_SHOW_MORE").html($.localize.getString("SEARCH_RESULTS_SHOW_MORE"));
            c.filter.onlyVerified = 1
        }
        (g = c.grid) && g.onSort(c.sortCol, c.sortDir)
    }
},"a.songLink click":function(a, b) {
    b.preventDefault();
    var c = parseInt($(a).attr("rel"), 10);
    c && GS.Models.Song.getSong(c, function(g) {
        if (g)location.hash = g.toUrl()
    })
},
    "a.video click":function(a) {
        a = parseInt($(a).attr("rel"), 10);
        GS.getLightbox().open("video", {videos:this.videos,index:a,autoSkipToNextVideo:false,renderSection:false})
    },".capitalSliderBtn click":function(a) {
        a = $(a);
        a.scrollLeft(0);
        $(a).hasClass("capitalSliderNext") ? $(".capitalView_728").animate({scrollLeft:$(".capitalView_728").scrollLeft() + 200}, 500) : $(".capitalView_728").animate({scrollLeft:$(".capitalView_728").scrollLeft() - 200}, 500)
    },".capitalSliderBtn mouseup":function(a) {
        a = $(a);
        a.scrollLeft(0);
        console.warn("hereeee")
    },getOptionMenu:function() {
        var a = [],b = this.song.getShareMenu(),c = this.song.SongID;
        songName = this.song.SongName;
        GS.user.isShortcut("song", c) ? a.push({title:$.localize.getString("CONTEXT_REMOVE_FROM_PINBOARD"),action:{type:"fn",callback:function() {
            GS.user.removeFromShortcuts("song", c);
            $("#page_header a[name=shortcut]").parent().show();
            $("#page_header a[name=removeshortcut]").parent().hide()
        }},customClass:"jj_menu_item_hasIcon jj_menu_remove_music"}) : a.push({title:$.localize.getString("CONTEXT_ADD_TO_PINBOARD"),
            action:{type:"fn",callback:function() {
                GS.user.addToShortcuts("song", c, songName, true);
                $("#page_header a[name=shortcut]").parent().hide();
                $("#page_header a[name=removeshortcut]").parent().show()
            }},customClass:"jj_menu_item_hasIcon jj_menu_item_pinboard"});
        a.push({customClass:"separator"});
        a.push({title:$.localize.getString("SHARE_SONG"),type:"sub",src:b,customClass:"jj_menu_item_hasIcon jj_menu_item_share jj_menu_item_more"}, {customClass:"separator"}, {title:$.localize.getString("CONTEXT_BUY_SONG"),
            action:{type:"fn",callback:function() {
                GS.getLightbox().open("buySong", c);
                GS.getGuts().onContextMenuClick("contextBuySong", "songOptionsMenu", false, null)
            }},customClass:"jj_menu_item_hasIcon jj_menu_item_download"});
        if (this.artist && (GS.service.country.ID === 0 || GS.service.country.ID == 1 || GS.service.country.ID == 223) && this.artist.tunipopID && !isNaN(this.artist.tunipopID) && this.artist.tunipopID > 0)a.push({title:$.localize.getString("CONTEXT_BUY_MERCH"),action:{type:"fn",callback:function() {
            GS.getLightbox().open("tunipop",
                    {songID:c});
            GS.getGuts().onContextMenuClick("contextBuyMerch", "songOptionsMenu", false, null)
        }},customClass:"jj_menu_item_hasIcon jj_menu_item_buy_merch"});
        return a
    },getPlayMenu:function() {
        var a = this.getPlayContext(),b = [this.song.SongID],c = this.element;
        return[
            {title:$.localize.getString("PLAY_NOW"),action:{type:"fn",callback:function() {
                b.length && GS.player.addSongsToQueueAt(b, GS.player.INDEX_DEFAULT, true, a);
                GS.getGuts().objectListPlayAdd(b, c, "play")
            }},customClass:"jj_menu_item_hasIcon jj_menu_item_play"},
            {title:$.localize.getString("PLAY_NEXT"),action:{type:"fn",callback:function() {
                b.length && GS.player.addSongsToQueueAt(b, GS.player.INDEX_NEXT, false, a);
                GS.getGuts().objectListPlayAdd(b, c, "play")
            }},customClass:"jj_menu_item_hasIcon jj_menu_item_play_next"},
            {title:$.localize.getString("PLAY_LAST"),action:{type:"fn",callback:function() {
                b.length && GS.player.addSongsToQueueAt(b, GS.player.INDEX_LAST, false, a);
                GS.getGuts().objectListPlayAdd(b, c, "play")
            }},customClass:"jj_menu_item_hasIcon jj_menu_item_play_last"},
            {customClass:"separator"},
            {title:$.localize.getString("REPLACE_QUEUE"),action:{type:"fn",callback:function() {
                b.length && GS.player.addSongsToQueueAt(b, GS.player.INDEX_REPLACE, true, a);
                GS.getGuts().objectListPlayAdd(b, c, "play")
            }},customClass:"jj_menu_item_hasIcon jj_menu_item_replace_playlist"},
            {title:$.localize.getString("START_RADIO"),action:{type:"fn",callback:function() {
                b.length && GS.player.addSongsToQueueAt(b, GS.player.INDEX_REPLACE, true, a, true);
                GS.getGuts().objectListPlayAdd(b, c, "play")
            }},customClass:"jj_menu_item_hasIcon jj_menu_item_new_station"}
        ]
    }});
GS.Controllers.PageController.extend("GS.Controllers.Page.AlbumController", {}, {type:"album",index:function(a, b, c) {
    this.url = location.hash;
    this.id = parseInt(a, 10) || 0;
    this.subpage = _.orEqual(b, "music");
    this.playOnView = c || false;
    this.id < 0 ? GS.router.notFound() : GS.Models.Album.getAlbum(this.id, this.callback("loadAlbum"))
},loadAlbum:function(a) {
    this.album = a;
    if (!a.fanbase)a.fanbase = GS.Models.Fanbase.wrap({objectID:a.AlbumID,objectType:"album"});
    this.correctUrl(this.album, this.subpage === "music" ? "" : this.subpage);
    this.fbUrl = "http://grooveshark.com/" + this.album.toUrl().replace("#/", "");
    this.element.html(this.view("index"));
    $.publish("gs.page.loading.grid");
    switch (this.subpage) {
        case "fans":
            GS.Controllers.PageController.title(this.album.getTitle() + " - fans");
            this.album.fanbase.getFans(this.callback("loadGridFans"));
            break;
        default:
            this.triedUnverified = this.album.songsLoaded && this.album.songsUnverifiedLoaded;
            GS.Controllers.PageController.title(this.album.getTitle());
            this.album.getSongs(this.callback("loadGrid"),
                    null, true)
    }
    GS.Models.Artist.getArtist(this.album.ArtistID, this.callback("loadDigests"));
    GS.service.getAlbumRecentListeners(this.album.AlbumID)
},onPageLoaded:function() {
    setTimeout(this.callback(function() {
        if ($("#page_content_social_buttons").length) {
            var a = this.callback(function() {
                $("#page_content_social_buttons .fblike").css("width", this.likeWidth);
                this.loadLikeButtonCount(this.fbUrl);
                FB.XFBML.parse(window.document.getElementById("fbLike"), this.callback(function() {
                    $("#page_content_social_buttons .fblike").css("width",
                            this.likeWidth)
                }))
            });
            if (window.FB && FB.XFBML)a(); else {
                var b = function() {
                    $.unsubscribe(["gs.facebook.xfbml.ready",b]);
                    a()
                };
                this.subscribe("gs.facebook.xfbml.ready", b)
            }
            GS.getTwitter().getTwitterShareMessage("album", this.album, this.fbUrl, this.callback(function(c, g) {
                var h = $(document.createElement("a"));
                h.attr("data-text", c.replace('"', '"'));
                h.attr("data-url", g);
                h.attr("data-via", "grooveshark");
                h.attr("data-count", "none");
                h.addClass("twitter-share-button");
                h.text("Tweet");
                $("#page_content_social_buttons .tweetButton").empty().append(h);
                GS.getTwitter().parseWidgets()
            }), true);
            GS.getGoogle().parsePlusWidgets($("#page_content_social_buttons .googlePlusButton").get(0))
        }
    }), 10)
},loadDigests:function(a) {
    this.artist = a;
    this.artist.getSongs(this.callback("loadAlbumDigest"));
    GS.service.artistGetSimilarArtists(this.artist.ArtistID, this.callback("loadSimilarDigest"));
    GS.service.artistGetSongkickEvents(this.artist.ArtistID, this.artist.ArtistName, this.callback("loadEventsDigest"));
    if (!GS.user.IsPremium) {
        GS.getAd().updateRotationCount();
        GS.getAd().buildAd($("#albumCapital_300"),
                300, 250, ["p=album_overview"])
    }
},loadAlbumDigest:function() {
    if (this.artist && this.artist.albums) {
        var a = this.album,b = _.toArray(this.artist.albums).sort(GS.Models.Album.prettySort).slice(0, 6).filter(function(c) {
            return a.AlbumID != c.AlbumID
        });
        b.length && $("#album_digest").html(this.view("/artist/album_digest", {artist:this.artist,albums:b}))
    }
},loadSimilarDigest:function(a) {
    this.similarArtists = GS.Models.Artist.wrapCollection(a.SimilarArtists);
    this.similarArtists.length && this.element.find("#similarArtists_digest").html(this.view("/artist/similarArtists_digest"))
},
    loadEventsDigest:function(a) {
        if (a && a.length) {
            a.sort(_.getSort("StartTime", -1));
            a = a.slice(0, 5);
            $("#events_digest").html(this.view("/artist/event_digest", {artist:this.artist,events:a}))
        }
    },loadGridFans:function(a) {
        if (this.subpage === "fans") {
            var b = GS.store.get("gs.sort.album.fans") || {sortCol:"Name",sortDir:1,sortStoreKey:"gs.sort.albums.fans"};
            b.scrollPane = $("#page_content");
            if (a.length)this.element.find(".gs_grid").gs_grid(a, GS.Controllers.GridController.columns.user, b, "user"); else {
                this.element.find(".gs_grid").html(this.view("/shared/noResults",
                        {type:"user"}));
                $("#searchForm input").select();
                this.addAutocomplete("album");
                GS.resize()
            }
            this.onPageLoaded()
        }
    },loadGrid:function(a) {
        if (this.subpage === "music") {
            var b = this.element.find(".gs_grid").controller(),c = GS.store.get("gs.sort.album.songs") || {sortCol:"TrackNum",sortStoreKey:"gs.sort.albums.songs"};
            c.scrollPane = $("#page_content");
            c.filters = {artistIDs:false,albumIDs:false,onlyVerified:false};
            c.useVerifiedSort = true;
            c.searchText = "SongName";
            if (b) {
                c = b.dataView;
                var g = b.grid;
                if (c) {
                    c.beginUpdate();
                    c.addItems(a,
                            "SongID");
                    c.endUpdate();
                    c.refresh()
                }
                g && g.onSort(b.sortCol, b.sortDir)
            } else if (a.length) {
                if (a.length < 5 && !this.triedUnverified) {
                    this.triedUnverified = true;
                    this.album.getSongs(this.callback("loadGrid"), null, false)
                } else if (!this.triedUnverified) {
                    b = GS.Models.Song.getVerifiedDivider();
                    a.push(b);
                    c.filters.onlyVerified = 1
                }
                if (this.playOnView && (a.length >= 5 || this.triedUnverified))this.album.play({playOnAdd:true});
                this.element.find(".gs_grid").gs_grid(a, GS.Controllers.GridController.columns.albumSongs, c, "song")
            } else if (this.triedUnverified) {
                this.element.find(".gs_grid").html(this.view("/shared/noResults",
                        {type:"song"}));
                $("#searchForm input").select();
                this.addAutocomplete("album");
                GS.resize()
            } else {
                this.triedUnverified = true;
                this.album.getSongs(this.callback("loadGrid"), null, false)
            }
            this.onPageLoaded()
        }
    },getOptionMenu:function() {
        var a = [];
        albumID = this.album.AlbumID;
        albumName = this.album.AlbumName;
        GS.user.isShortcut("album", albumID) ? a.push({title:$.localize.getString("CONTEXT_REMOVE_FROM_PINBOARD"),action:{type:"fn",callback:function() {
            GS.user.removeFromShortcuts("album", albumID);
            $("#page_header a[name=shortcut]").parent().show();
            $("#page_header a[name=removeshortcut]").parent().hide()
        }},customClass:"jj_menu_item_hasIcon jj_menu_remove_music"}) : a.push({title:$.localize.getString("CONTEXT_ADD_TO_PINBOARD"),action:{type:"fn",callback:function() {
            GS.user.addToShortcuts("album", albumID, albumName, true);
            $("#page_header a[name=shortcut]").parent().hide();
            $("#page_header a[name=removeshortcut]").parent().show()
        }},customClass:"jj_menu_item_hasIcon jj_menu_item_pinboard"});
        a.push({customClass:"separator"});
        a.push({title:$.localize.getString("SHARE_ALBUM"),
            type:"sub",action:{type:"fn",callback:this.album.getClipboardAction([
                {text:"http://grooveshark.com/" + this.album.toUrl().replace("#/", ""),selector:"div.albumUrl"}
            ])},src:this.album.getShareMenu(),customClass:"jj_menu_item_hasIcon jj_menu_item_share jj_menu_item_more"});
        return a
    },getShareMenu:function() {
        return this.album.getShareMenu()
    },getSortMenu:function() {
        var a = this.setSort;
        return[
            {title:$.localize.getString("SORT_BY_TRACK_NUM"),action:{type:"fn",callback:function() {
                a("TrackNum", triggerElement,
                        "SORT_BY_TRACK_NUM")
            }},customClass:"jj_menu_item_blank"},
            {title:$.localize.getString("SORT_BY_POPULARITY"),action:{type:"fn",callback:function() {
                a("Popularity", triggerElement, "SORT_BY_POPULARITY")
            }},customClass:"jj_menu_item_blank"},
            {title:$.localize.getString("SORT_BY_SONG"),action:{type:"fn",callback:function() {
                a("SongName", triggerElement, "SORT_BY_SONG")
            }},customClass:"jj_menu_item_blank"},
            {title:$.localize.getString("SORT_BY_ARTIST"),action:{type:"fn",callback:function() {
                a("ArtistName", triggerElement,
                        "SORT_BY_ARTIST")
            }},customClass:"jj_menu_item_blank"}
        ]
    },".slick-row.verifiedDivider click":function(a, b) {
        b.stopPropagation();
        var c = $("#grid").controller(),g;
        if (c) {
            if (!this.triedUnverified) {
                this.triedUnverified = true;
                this.album.getSongs(this.callback("loadGrid"), null, false)
            }
            if (c.filter.onlyVerified) {
                a.find(".showMore").addClass("showingMore").attr("data-translate-text", "SEARCH_RESULTS_SHOW_LESS").html($.localize.getString("SEARCH_RESULTS_SHOW_LESS"));
                c.filter.onlyVerified = false
            } else {
                a.find(".showMore").removeClass("showingMore").attr("data-translate-text",
                        "SEARCH_RESULTS_SHOW_MORE").html($.localize.getString("SEARCH_RESULTS_SHOW_MORE"));
                c.filter.onlyVerified = 1
            }
            (g = c.grid) && g.onSort(c.sortCol, c.sortDir)
        }
    }});
GS.Controllers.PageController.extend("GS.Controllers.Page.ArtistController", {}, {type:"artist",artistImage:null,albumsSeen:{},albums:[],feedEmpty:false,index:function(a, b) {
    this.url = location.hash;
    this.id = parseInt(a, 10) || 0;
    this.subpage = _.orEqual(b, "profile");
    if (this.id < 0)GS.router.notFound(); else {
        this.albumsSeen = {};
        this.albums = [];
        GS.Models.Artist.getArtist(this.id, this.callback("loadArtist"))
    }
},loadArtist:function(a) {
    this.artist = a;
    if (!a.fanbase)a.fanbase = GS.Models.Fanbase.wrap({objectID:a.ArtistID,objectType:"artist"});
    if (!a.feed)a.feed = GS.Models.ArtistFeed.wrap({artist:a});
    this.correctUrl(this.artist, this.subpage === "profile" ? "" : this.subpage);
    this.fbUrl = "http://grooveshark.com/" + _.cleanUrl(this.artist.ArtistName, this.artist.ArtistID, "artist").replace("#/", "");
    if ((this.artistImage = a.getImageURL(200)) && this.artistImage.indexOf("/webincludes/images/default") != -1)this.artistImage = null;
    switch (this.subpage) {
        case "profile":
            this.element.html(this.view("index"));
            GS.Controllers.PageController.title(this.artist.getTitle());
            this.artist.feed.getFeed(this.callback("loadFeed"), this.callback("loadFeed"));
            this.loadDigests();
            if (!GS.user.IsPremium) {
                GS.getAd().updateRotationCount();
                GS.getAd().buildAd($("#artistCapital_728"), 728, 90, ["p=artist_" + this.subpage])
            }
            break;
        case "songs":
            this.element.html(this.view("index"));
            GS.Controllers.PageController.title(this.artist.getTitle() + " - Songs");
            this.artist.getSongs(this.callback("loadSongs"));
            this.loadDigests();
            break;
        case "albums":
            this.element.html(this.view("index"));
            GS.Controllers.PageController.title(this.artist.getTitle() +
                    " - Albums");
            this.artist.getSongs(this.callback("loadAlbums"));
            this.loadDigests();
            break;
        case "events":
            this.element.html(this.view("index"));
            GS.Controllers.PageController.title(this.artist.getTitle() + " - Events");
            GS.service.artistGetSongkickEvents(this.artist.ArtistID, this.artist.ArtistName, this.callback("loadGridEvents"), this.callback("loadGridEventsFailed"));
            this.loadDigests();
            break;
        case "collection":
            this.element.html(this.view("collection"));
            GS.Controllers.PageController.title(this.artist.getTitle());
            $.publish("gs.page.loading.grid");
            this.artist.getSongs(this.callback("loadGrid"));
            break;
        case "similar_artists":
            this.element.html(this.view("index"));
            GS.Controllers.PageController.title(this.artist.getTitle());
            $.publish("gs.page.loading.grid");
            GS.service.artistGetSimilarArtists(this.artist.ArtistID, this.callback("loadSimilarArtists"));
            this.loadDigests();
            break;
        case "fans":
            this.element.html(this.view("index"));
            GS.Controllers.PageController.title(this.artist.getTitle());
            $.publish("gs.page.loading.grid");
            this.artist.fanbase.getFans(this.callback("loadFans"), this.callback("loadFans"), false);
            this.loadDigests();
            break;
        default:
            GS.router.notFound()
    }
    GS.service.getArtistRecentListeners(this.artist.ArtistID)
},onPageLoaded:function() {
    setTimeout(this.callback(function() {
        if ($("#page_content_social_buttons").length) {
            var a = this.callback(function() {
                $("#page_content_social_buttons .fblike").css("width", this.likeWidth);
                this.loadLikeButtonCount(this.fbUrl);
                FB.XFBML.parse(window.document.getElementById("fbLike"), this.callback(function() {
                    $("#page_content_social_buttons .fblike").css("width",
                            this.likeWidth)
                }))
            });
            if (window.FB && FB.XFBML)a(); else {
                var b = function() {
                    $.unsubscribe(["gs.facebook.xfbml.ready",b]);
                    a()
                };
                this.subscribe("gs.facebook.xfbml.ready", b)
            }
            GS.getTwitter().getTwitterShareMessage("artist", this.artist, this.fbUrl, this.callback(function(c, g) {
                var h = $(document.createElement("a"));
                h.attr("data-text", c.replace('"', '"'));
                h.attr("data-url", g);
                h.attr("data-via", "grooveshark");
                h.attr("data-count", "none");
                h.addClass("twitter-share-button");
                h.text("Tweet");
                $("#page_content_social_buttons .tweetButton").empty().append(h);
                GS.getTwitter().parseWidgets()
            }), true);
            GS.getGoogle().parsePlusWidgets($("#page_content_social_buttons .googlePlusButton").get(0))
        }
    }), 10)
},loadDigests:function() {
    this.artist.getTunipopID().then(this.callback("loadTunipop"), this.callback("loadTunipop"));
    this.subpage != "similar_artists" && GS.service.artistGetSimilarArtists(this.artist.ArtistID, this.callback("loadSimilarDigest"));
    this.fans = [];
    this.subpage != "fans" && this.artist.fanbase.getFans(this.callback("loadDigestFans"), this.callback("loadDigestFans"),
            false);
    this.subpage != "songs" && this.artist.getSongs(this.callback("loadTopSongsDigest"), function(a) {
        return a.sort(_.getSort("Popularity")).filter(
                function(b) {
                    return b.CoverArtFilename
                }).slice(0, 5)
    });
    this.subpage != "albums" && this.artist.getAlbums(this.callback("loadAlbumDigest"), function(a) {
        return a.sort(GS.Models.Album.prettySort).slice(0, 5)
    });
    this.subpage != "events" && GS.service.artistGetSongkickEvents(this.artist.ArtistID, this.artist.ArtistName, this.callback("loadEventsDigest"));
    if (!GS.user.IsPremium) {
        GS.getAd().updateRotationCount();
        GS.getAd().buildAd($("#artistCapital_300"), 300, 250, ["p=artist_" + this.subpage])
    }
},loadFeed:function() {
    var a,b;
    if (this.artist && this.artist.feed && this.artist.feed.events && this.artist.feed.events.length) {
        this.feed = this.artist.feed;
        this.activity = this.artist.feed.events;
        this.filteredUserIDs = [];
        $("#artistFeed").html(this.view("/user/community/feedEvents"));
        for (a = 0; a < this.activity.length; a++) {
            b = this.activity[a];
            $event = $("#feedEvent_" + b.eventID).data("event", b);
            b.dataString && b.dataString.hookup($event.find("p.what"))
        }
    } else {
        this.feedEmpty =
                true;
        this.artist.getSongs(this.callback("loadGridTopSongs"));
        $("#topSongs_digest").hide();
        $("#feed").hide()
    }
    this.onPageLoaded()
},loadSimilarArtists:function(a) {
    if ((this.similarArtists = GS.Models.Artist.wrapCollection(a.SimilarArtists)) && this.similarArtists.length) {
        this.slickbox = $("#grid").slickbox({scrollPane:"#page",padding:0,listClass:"smallUserView",itemRenderer:GS.Models.Artist.itemRenderer,itemWidth:195,itemHeight:70,maxHorizontalGap:100,minHorizontalGap:15,verticalGap:15,hidePositionInfo:true},
                this.similarArtists);
        this.element.find("#page_content_synopsis button.radio").show()
    } else $("#grid").html(this.view("noSimilarResults"));
    GS.resize()
},loadFans:function(a) {
    if (a && a.length)this.slickbox = $("#grid").slickbox({scrollPane:"#page",padding:0,listClass:"smallUserView",itemRenderer:GS.Models.User.itemRenderer,itemWidth:195,itemHeight:70,maxHorizontalGap:100,minHorizontalGap:15,verticalGap:15,hidePositionInfo:true}, a); else $("#grid").html(this.view("noFanResults"));
    GS.resize()
},loadTopSongsDigest:function(a) {
    a &&
            a.length && $("#topSongs_digest").html(this.view("topSongs_digest", {songs:a,artist:this.artist}))
},loadAlbumDigest:function(a) {
    a && a.length && $("#album_digest").html(this.view("album_digest", {albums:a,artist:this.artist}))
},loadSimilarDigest:function(a) {
    this.similarArtists = GS.Models.Artist.wrapCollection(a.SimilarArtists);
    if (this.similarArtists.length) {
        this.element.find("#page_content_synopsis button.radio").show();
        this.element.find("#similarArtists_digest").html(this.view("similarArtists_digest"))
    }
},
    loadDigestFans:function(a) {
        if (a) {
            var b = [];
            for (var c in a)if (a.hasOwnProperty(c)) {
                if (b.length > 19)break;
                a[c].Picture && b.push(a[c])
            }
            this.fans = b;
            this.sidebarFans = true;
            $("#artistFans_digest").html(this.view("/shared/sidebarFans", {fans:b,seeAll:this.artist.toUrl("fans")}))
        }
    },loadEventsDigest:function(a) {
        if (a && a.length) {
            a.sort(_.getSort("StartTime", -1));
            a = a.slice(0, 5);
            $("#events_digest").html(this.view("/artist/event_digest", {artist:this.artist,events:a}))
        }
    },loadTunipop:function(a) {
        if (a && a > 0) {
            this.tunipopID =
                    parseInt(a, 10);
            $(".tunipop").removeClass("hide")
        } else {
            this.tunipopID = 0;
            $(".tunipop").addClass("hide")
        }
        $(window).resize()
    },loadSongs:function(a) {
        this.subpage === "songs" && setTimeout(this.callback(function() {
            var b,c,g;
            c = store.get("gs.sort.artist.songs") || {sortCol:"Popularity",sortDir:0,sortStoreKey:"gs.sort.artist.songs"};
            b = $("#grid").controller();
            c = $.extend(c, {filters:{artistIDs:false,albumIDs:false,onlyVerified:false},padding:0,scrollPane:$("#page")});
            this.element.find("#grid").removeClass("songs artists users").addClass("songs");
            if (a.length) {
                if (b) {
                    c = b.dataView;
                    g = b.grid;
                    b.data = b.data.concat(a);
                    if (c) {
                        c.beginUpdate();
                        c.addItems(a, "SongID");
                        c.endUpdate();
                        c.refresh()
                    }
                    g && g.onSort(b.sortCol, b.sortDir)
                } else $("#grid").gs_grid(a, GS.Controllers.GridController.columns.song, c, "song");
                this.onPageLoaded()
            } else {
                $("#grid").html(this.view("/shared/noResults", {type:"song"}));
                $("#searchForm input").select();
                this.addAutocomplete("artist");
                GS.resize();
                b = (new GS.Models.DataString($.localize.getString("QUEUE_NUM_SONGS"), {numSongs:"0"})).render();
                $("#gridNumItems").text(b).show()
            }
        }), 100)
    },loadAlbums:function() {
        if (this.subpage === "albums") {
            this.albums = _.toArray(this.artist.albums);
            this.albums.sort(_.getSort("AlbumName", true));
            var a = this.albums.filter(function(b) {
                return b.IsVerified == 1 || _.count(b.songs) >= 3
            });
            this.slickbox = $("#grid").slickbox({scrollPane:"#page",padding:0,itemRenderer:GS.Models.Album.itemRenderer,itemWidth:250,itemHeight:70,maxHorizontalGap:50,minHorizontalGap:10,verticalGap:15,dragAs:"album",dragItemID:"AlbumID"}, a);
            this.sliderOrBoxDragSetup(this.slickbox,
                    ".slickbox-item");
            this.onPageLoaded()
        }
    },loadGrid:function(a) {
        this.subpage === "collection" && setTimeout(this.callback(function() {
            var b,c = [],g;
            g = GS.store.get("gs.sort.artist.songs") || {sortCol:"Popularity",sortDir:0,sortStoreKey:"gs.sort.artist.songs"};
            var h = this.element.find("#grid").controller(),k = this.element.find("#albumGrid").controller();
            g = $.extend(g, {filters:{artistIDs:false,albumIDs:false,onlyVerified:false},padding:0});
            if (a.length) {
                for (b = 0; b < a.length; b++)if (!this.albumsSeen[a[b].AlbumID] && a[b].AlbumName &&
                        a[b].AlbumName.length) {
                    var m = GS.Models.Album.wrap({AlbumName:a[b].AlbumName,AlbumID:a[b].AlbumID,ArtistName:a[b].ArtistName,ArtistID:a[b].ArtistID,CoverArtFilename:a[b].CoverArtFilename}).dupe();
                    m.IsVerified = a[b].IsVerified == 1 ? 1 : 0;
                    this.albums.push(m);
                    c.push(m);
                    this.albumsSeen[a[b].AlbumName] = true;
                    this.albumsSeen[a[b].AlbumID] = true
                }
                if (c.length && c.length === this.albums.length) {
                    b = GS.Models.Album.getFilterAll(this.artist.ArtistName);
                    c.push(b)
                }
                $("#albumFilters").resizable({handles:{e:$("#albumFilter-resize")},
                    minWidth:30,maxWidth:350,animate:false,resize:function() {
                        $(window).resize()
                    }});
                this.element.find("#grid").removeClass("songs artists users").addClass("songs");
                if (h) {
                    b = h.dataView;
                    g = h.grid;
                    h.data = h.data.concat(a);
                    if (b) {
                        b.beginUpdate();
                        b.addItems(a, "SongID");
                        b.endUpdate();
                        b.refresh();
                        b = (new GS.Models.DataString($.localize.getString("QUEUE_NUM_SONGS"), {numSongs:b.rows.length})).render();
                        $("#gridNumItems").text(b).show()
                    }
                    g && g.onSort(h.sortCol, h.sortDir)
                } else if (a.length) {
                    this.element.find(".gs_grid.songs").gs_grid(a,
                            GS.Controllers.GridController.columns.song, g, "song");
                    b = (new GS.Models.DataString($.localize.getString("QUEUE_NUM_SONGS"), {numSongs:a.length})).render();
                    $("#gridNumItems").text(b).show()
                }
                if (k) {
                    if (c.length) {
                        b = k.dataView;
                        g = k.grid;
                        k.data = k.data.concat(c);
                        if (b) {
                            b.beginUpdate();
                            b.addItems(c, "AlbumID");
                            b.endUpdate();
                            b.refresh()
                        }
                        g && g.onSort(k.sortCol, k.sortDir)
                    }
                } else this.element.find("#albumGrid").gs_grid(c, GS.Controllers.GridController.columns.albumFilter, {rowHeight:25,sortCol:"AlbumName",isFilter:true,
                    padding:0}, "album");
                this.onPageLoaded()
            } else {
                this.element.find(".gs_grid.songs").html(this.view("/shared/noResults", {type:"song"}));
                $("#searchForm input").select();
                this.addAutocomplete("artist");
                GS.resize();
                b = (new GS.Models.DataString($.localize.getString("QUEUE_NUM_SONGS"), {numSongs:"0"})).render();
                $("#gridNumItems").text(b).show()
            }
        }), 100)
    },loadGridFans:function(a) {
        if (!(this.subpage !== "fans" && this.subpage !== "profile")) {
            var b = GS.store.get("gs.sort.artist.fans") || {sortCol:"Name",sortDir:1,sortStoreKey:"gs.sort.artist.fans"};
            b.scrollPane = $("#page");
            var c = this.element.find("#grid").removeClass("songs artists users").addClass("users");
            if (a.length)c.gs_grid(a, GS.Controllers.GridController.columns.user, b, "user"); else {
                c.html(this.view("/shared/noResults", {type:"user"}));
                $("#searchForm input").select();
                this.addAutocomplete("artist");
                GS.resize()
            }
        }
    },loadGridTopSongs:function(a) {
        if (this.subpage === "profile") {
            var b = this.getTopSongs(a.concat());
            if (a.length) {
                this.element.find("#topSongsGrid").show();
                this.element.find("#grid.topSongs").gs_grid(b,
                        GS.Controllers.GridController.columns.topSongs, {scrollPane:$("page"),padding:0,sortCol:"Popularity",autoHeight:true}, "song")
            }
        }
    },getTopSongs:function(a, b) {
        b = _.orEqual(b, 6);
        return a.sort(
                function(c, g) {
                    var h = _.orEqual(parseInt(c.Popularity, 10), 0);
                    return _.orEqual(parseInt(g.Popularity, 10), 0) - h
                }).slice(0, b)
    },loadGridEvents:function(a) {
        if (this.subpage === "events") {
            var b = {sortCol:"StartTime",sortDir:1,rowCssClasses:function() {
                return"event"
            },scrollPane:$("#page")};
            a = GS.Models.Event.wrapCollection(a, {USE_INDEX:"EventID",
                ArtistName:this.artist.ArtistName});
            var c = this.element.find("#grid").removeClass("songs artists users").addClass("events");
            if (a.length)c.gs_grid(a, GS.Controllers.GridController.columns.event, b, "event"); else {
                c.html(this.view("/shared/noResults", {type:"event"}));
                $("#searchForm input").select();
                this.addAutocomplete("artist");
                GS.resize()
            }
            this.onPageLoaded()
        }
    },loadGridEventsFailed:function() {
        if (this.subpage === "events") {
            this.element.find("#grid").removeClass("songs artists users").addClass("events").html(this.view("/shared/noResults",
                    {type:"event"}));
            $("#searchForm input").select();
            this.addAutocomplete("artist");
            GS.resize();
            this.onPageLoaded()
        }
    },getSortMenu:function() {
        var a = this.setSort;
        return[
            {title:$.localize.getString("SORT_BY_POPULARITY"),action:{type:"fn",callback:function() {
                a("Popularity", triggerElement, "SORT_BY_POPULARITY")
            }},customClass:"jj_menu_item_blank"},
            {title:$.localize.getString("SORT_BY_SONG"),action:{type:"fn",callback:function() {
                a("SongName", triggerElement, "SORT_BY_SONG")
            }},customClass:"jj_menu_item_blank"},
            {title:$.localize.getString("SORT_BY_ALBUM"),action:{type:"fn",callback:function() {
                a("AlbumName", triggerElement, "SORT_BY_ALBUM")
            }},customClass:"jj_menu_item_blank"},
            {title:$.localize.getString("SORT_BY_TRACK_NUM"),action:{type:"fn",callback:function() {
                a("TrackNum", triggerElement, "SORT_BY_TRACK_NUM")
            }},customClass:"jj_menu_item_blank"}
        ]
    },getOptionMenu:function() {
        var a = [],b = this.artist.ArtistID,c = this.artist.ArtistName;
        GS.user.isShortcut("artist", b) ? a.push({title:$.localize.getString("CONTEXT_REMOVE_FROM_PINBOARD"),
            action:{type:"fn",callback:function() {
                GS.user.removeFromShortcuts("artist", b);
                $("#page_header a[name=shortcut]").parent().show();
                $("#page_header a[name=removeshortcut]").parent().hide()
            }},customClass:"jj_menu_item_hasIcon jj_menu_remove_music"}) : a.push({title:$.localize.getString("CONTEXT_ADD_TO_PINBOARD"),action:{type:"fn",callback:function() {
            GS.user.addToShortcuts("artist", b, c, true);
            $("#page_header a[name=shortcut]").parent().hide();
            $("#page_header a[name=removeshortcut]").parent().show()
        }},customClass:"jj_menu_item_hasIcon jj_menu_item_pinboard"});
        a.push({title:$.localize.getString("SHARE_ARTIST"),type:"sub",action:{type:"fn",callback:this.artist.getClipboardAction([
            {text:"http://grooveshark.com/" + this.artist.toUrl().replace("#/", ""),selector:"div.artistUrl"}
        ])},src:this.artist.getShareMenu(),customClass:"jj_menu_item_hasIcon jj_menu_item_share jj_menu_item_more"});
        if ((GS.service.country.ID === 0 || GS.service.country.ID == 1 || GS.service.country.ID == 223) && this.tunipopID && !isNaN(this.tunipopID) && this.tunipopID > 0)a.push({customClass:"separator"}, {title:$.localize.getString("CONTEXT_BUY_MERCH"),
            action:{type:"fn",callback:function() {
                GS.getLightbox().open("tunipop", {artistID:b});
                GS.getGuts().onContextMenuClick("contextBuyMerch", "artistOptionsMenu", false, null)
            }},customClass:"jj_menu_item_hasIcon jj_menu_item_buy_merch"});
        return a
    },getPlayMenu:function() {
        var a = this.artist,b = this.getPlayContext(),c = this.artist.ArtistID,g;
        g = [
            {title:$.localize.getString("CONTEXT_PLAY_TOP_SONGS"),action:{type:"fn",callback:this.callback(function() {
                a.getSongs(this.callback(function(h) {
                    h = this.getTopSongs(_.toArray(h),
                            10);
                    var k = [];
                    _.forEach(h, function(m) {
                        k.push(m.SongID)
                    });
                    GS.player.addSongsToQueueAt(k, GS.player.INDEX_DEFAULT, true, b)
                }))
            })},customClass:"jj_menu_item_hasIcon jj_menu_item_play"}
        ];
        this.similarArtists && this.similarArtists.length && g.push({title:$.localize.getString("CONTEXT_START_STATION"),action:{type:"fn",callback:function() {
            GS.player.setAutoplay(true, null, {seeds:[c],seedArtistWeightRange:[110,130],secondaryArtistWeightModifier:0.75})
        }},customClass:"jj_menu_item_hasIcon jj_menu_item_station"});
        return g
    },
    ".slick-row.verifiedDivider click":function(a, b) {
        b.stopImmediatePropagation();
        var c = $("#grid").controller(),g;
        if (c) {
            if (c.filter.onlyVerified) {
                a.find(".showMore").addClass("showingMore").attr("data-translate-text", "SEARCH_RESULTS_SHOW_LESS").html($.localize.getString("SEARCH_RESULTS_SHOW_LESS"));
                c.filter.onlyVerified = false
            } else {
                a.find(".showMore").removeClass("showingMore").attr("data-translate-text", "SEARCH_RESULTS_SHOW_MORE").html($.localize.getString("SEARCH_RESULTS_SHOW_MORE"));
                c.filter.onlyVerified =
                        1
            }
            (g = c.grid) && g.onSort(c.sortCol, c.sortDir)
        }
    },"a.tunipop click":function(a) {
        a = parseInt($(a).attr("rel"), 10);
        if (this.tunipopID)GS.getLightbox().open("tunipop", {tunipopID:this.tunipopID}); else a && GS.getLightbox().open("tunipop", {artistID:this.artistID})
    },"#profileImage .icon click":function() {
        this.artist.getArtAttribution(this.callback(function(a) {
            var b = new GS.Models.DataString,c = "";
            if (a.URL) {
                b.string = $.localize.getString("POPUP_ARTIST_ART_MESSAGE");
                c = a.URL
            } else b.string = $.localize.getString("POPUP_ARTIST_ART_MESSAGE_BROKEN");
            b.data = {src:this.artist.getImageURL(500),url:c};
            GS.getLightbox().close();
            GS.getLightbox().open({type:"artistArtAttribution",view:{headerHTML:this.artist.ArtistName,messageHTML:'<div id="artistPopupImage">' + b.render() + "</div>",buttonsRight:[],buttonsLeft:[
                {label:"CLOSE",className:"close"}
            ]},loadCallback:function() {
                GS.getLightbox().positionLightbox();
                $("#artistPopupImage img").load(function() {
                    GS.getLightbox().positionLightbox()
                })
            }})
        }))
    },".capitalSliderBtn click":function(a) {
        console.warn("here");
        a = $(a);
        $(a).hasClass("capitalSliderNext") ? $(".capitalView_728").animate({scrollLeft:$(".capitalView_728").scrollLeft() + 200}, 500) : $(".capitalView_728").animate({scrollLeft:$(".capitalView_728").scrollLeft() - 200}, 500)
    }});
GS.Controllers.PageController.extend("GS.Controllers.Page.ExploreController", {}, {featuredData:null,index:function(a, b) {
    this.subpage = _.orEqual(a, "featured");
    this.pageType = _.orEqual(b, "");
    this.type = "explore";
    GS.Controllers.PageController.title("Explore Music: " + _.ucwords(this.subpage));
    this.explore = GS.Models.Explore.getType(b);
    switch (this.subpage) {
        case "featured":
            this.element.html(this.view("index"));
            this.explore.getFeaturedData(this.callback("loadFeaturedPage"), this.callback("loadFeaturedPageError"));
            break;
        case "popular":
            this.element.html(this.view("popular"));
            this.loadPopular();
            break;
        case "stations":
            this.element.html(this.view("index"));
            this.loadStations();
            break
    }
    this.loadExploreSidebar();
    GS.resize()
},loadPopular:function() {
    this.list.doSearchInPage = true;
    this.explore.getPopularSongs(this.callback("loadPopularGrid"))
},loadPopularGrid:function(a) {
    var b,c = {sortCol:"Popularity",sortDir:true,sortStoreKey:"gs.sort.popular",scrollPane:$("#page"),padding:0};
    if (a.length) {
        b = GS.Controllers.GridController.columns.song.concat();
        b = [b[0],b[1],b[2]];
        this.element.find(".gs_grid").gs_grid(a, b, c, "song")
    } else {
        this.element.find(".gs_grid").html(this.view("/shared/noResults", {type:"song"}));
        $("#searchForm input").select();
        this.addAutocomplete("popular");
        GS.resize()
    }
},loadExploreSidebar:function() {
    if (this.subpage == "featured") {
        this.explore.getPopularSongs(this.callback("loadPopularSidebar"), this.callback("loadFeaturedPageError"));
        this.loadStationsSidebar()
    } else if (this.subpage == "popular") {
        this.loadStationsSidebar();
        this.explore.getFeaturedData(this.callback("loadArtistsSidebar"),
                this.callback("loadFeaturedPageError"))
    } else if (this.subpage == "stations") {
        this.explore.getPopularSongs(this.callback("loadPopularSidebar"), this.callback("loadFeaturedPageError"));
        this.explore.getFeaturedData(this.callback("loadArtistsSidebar"), this.callback("loadFeaturedPageError"))
    }
    if (!GS.user.IsPremium) {
        GS.getAd().updateRotationCount();
        GS.getAd().buildAd($("#exploreCapital_300"), 300, 250, ["p=explore_" + this.subpage]);
        GS.getAd().buildAd($("#exploreCapital_728"), 728, 90, ["p=explore_" + this.subpage])
    }
},
    loadPopularSidebar:function(a) {
        a = a.sort(_.getSort("Popularity")).filter(
                function(b) {
                    return b.CoverArtFilename
                }).slice(0, 5);
        $("#profilePopular").html(this.view("popular_sidebar", {data:a}))
    },loadStationsSidebar:function() {
        var a = GS.Models.Station.tagStations;
        a.sort(function() {
            return 0.5 - Math.random()
        });
        $("#profileStations").html(this.view("station_sidebar", {data:a}))
    },loadArtistsSidebar:function() {
        var a = this.explore.featuredData.Contents,b = [];
        for (i = 0; i < a.length; i++)if (a[i].name == "Artists") {
            b = a[i].items.slice(0,
                    5);
            break
        }
        $("#profileArtists").html(this.view("artists_sidebar", {data:b}))
    },loadFeaturedPage:function() {
        $("#page_sidebar_featured").html(this.view("page_sidebar_featured"));
        this.pageType ? this.loadGrid(this.pageType) : this.loadFeaturedSections()
    },loadFeaturedPageError:function() {
        if (this.subpage == "featured") {
            console.warn("failed to load featured content");
            $("#page_sidebar_featured").html(this.view("page_sidebar_featured"));
            $("#grid").html(this.view("noResults"))
        }
    },loadFeaturedSections:function() {
        $featuredSections =
                $("#featuredSections");
        if (this.explore.featuredData) {
            var a = {},b,c;
            $featuredSections.empty();
            for (var g = 0,h = this.explore.featuredData.Contents.length; g < h; g++) {
                b = _.guessDragType(this.explore.featuredData.Contents[g].items[0]);
                c = b != "unknown" ? _.ucwords(b) + "ID" : false;
                a.title = this.explore.featuredData.Contents[g].name;
                a.sectionID = "featured_" + _.cleanURLSlug(a.title);
                $featuredSections.append(this.view("featured_section", a));
                $sectionElem = $("#" + a.sectionID + " .items");
                $sectionElem.slickbox({scrollPane:"#page_content",
                    padding:0,itemRenderer:GS.Models.Explore.proxyRenderer,itemWidth:120,itemHeight:175,maxHorizontalGap:50,minHorizontalGap:20,verticalGap:30,dragAs:b,dragItemID:c,hidePositionInfo:true}, this.explore.featuredData.Contents[g].items);
                c && this.sliderOrBoxDragSetup($sectionElem, ".slickbox-item")
            }
            GS.resize()
        }
    },loadGrid:function(a) {
        var b = {sortFunction:null,scrollPane:"#page",padding:15,itemRenderer:GS.Models.Explore.proxyRenderer,itemWidth:120,itemHeight:160,maxHorizontalGap:60,minHorizontalGap:15,verticalGap:10,
            hidePositionInfo:true},c;
        if (["playlists","artists","songs","albums"].indexOf(a) != -1) {
            b.dragAs = a.substring(0, a.length - 1);
            b.dragItemID = _.ucwords(b.dragAs) + "ID"
        }
        for (i = 0; i < this.explore.featuredData.Contents.length; i++)if (!c && _.cleanURLSlug(this.explore.featuredData.Contents[i].name) == a)c = this.explore.featuredData.Contents[i].items;
        GS.resize();
        this.slickbox = $("#grid").slickbox(b, c);
        GS.resize();
        this.sliderOrBoxDragSetup(this.slickbox, ".slickbox-item")
    },loadStations:function() {
        var a = GS.Models.Station.tagStations;
        options = {sortCol:"StationName",sortDir:true,disableMultiSelect:true,scrollPane:$("#page_content")};
        $(".gs_grid").gs_grid(a, GS.Controllers.GridController.columns.station, options, "station");
        $(".gs_grid").addClass("radioStations")
    },getSortMenu:function() {
        var a = this.setSort;
        return[
            {title:$.localize.getString("SORT_BY_POPULARITY"),action:{type:"fn",callback:function() {
                a("Popularity", triggerElement, "SORT_BY_POPULARITY")
            }},customClass:"jj_menu_item_blank"},
            {title:$.localize.getString("SORT_BY_SONG"),action:{type:"fn",
                callback:function() {
                    a("SongName", triggerElement, "SORT_BY_SONG")
                }},customClass:"jj_menu_item_blank"},
            {title:$.localize.getString("SORT_BY_ARTIST"),action:{type:"fn",callback:function() {
                a("ArtistName", triggerElement, "SORT_BY_ARTIST")
            }},customClass:"jj_menu_item_blank"},
            {title:$.localize.getString("SORT_BY_ALBUM"),action:{type:"fn",callback:function() {
                a("AlbumName", triggerElement, "SORT_BY_ALBUM")
            }},customClass:"jj_menu_item_blank"}
        ]
    },"#profileSongs .songLink click":function(a, b) {
        b.preventDefault();
        GS.Models.Song.getSong(a.attr("data-songid"),
                function(c) {
                    if (c = c && $.isFunction(c.toUrl) ? c.toUrl() : false)location.hash = c
                }, null, false)
    },".station a click":function(a, b) {
        b.stopPropagation();
        var c = a.attr("data-tagid");
        GS.player.setAutoplay(true, c);
        return false
    },".capitalSliderBtn click":function(a) {
        a = $(a);
        a.scrollLeft(0);
        $(a).hasClass("capitalSliderNext") ? $(".capitalView_728").animate({scrollLeft:$(".capitalView_728").scrollLeft() + 200}, 500) : $(".capitalView_728").animate({scrollLeft:$(".capitalView_728").scrollLeft() - 200}, 500)
    },".showMore_featured click":function(a, b) {
        b.preventDefault();
        a.data("initHeight") || a.data("initHeight", a.prev(".page_content_featuredSection").height());
        if (a.hasClass("showLess")) {
            a.find(".label").text($.localize.getString("SHOW_MORE"));
            a.removeClass("showLess").prev().css({height:a.data("initHeight")})
        } else {
            a.find(".label").text($.localize.getString("SHOW_LESS"));
            a.addClass("showLess").prev().css({height:"auto"})
        }
    },"#featuredSections a click":function(a, b) {
        if (!$(b.target).hasClass("playBtn")) {
            var c = $(a).parents(".slickbox-item"),g = $(a).attr("href");
            if (c.length) {
                var h = $(a).parents(".page_content_featuredSection").attr("id"),k = c.attr("data-dragtype");
                c = c.attr("data-dragid");
                GS.getGuts().forceLogEvent("featuredItemClick", {type:k,section:h,id:c,href:g})
            }
        }
    },"#featuredSections .playBtn click":function(a) {
        var b = $(a).parents(".slickbox-item");
        if (b.length) {
            a = $(a).parents(".page_content_featuredSection").attr("id");
            var c = b.attr("data-dragtype");
            b = b.attr("data-dragid");
            GS.getGuts().forceLogEvent("featuredItemPlay", {type:c,section:a,id:b})
        }
    },"#featuredSections .followArtist click":function(a) {
        a =
                $(a).attr("data-artistid");
        GS.user.favorites.artists.hasOwnProperty(a) ? GS.getGuts().forceLogEvent("featuredArtistUnfollow", {id:a}) : GS.getGuts().forceLogEvent("featuredArtistFollow", {id:a})
    }});
GS.Controllers.PageController.extend("GS.Controllers.Page.UserController", {}, {correctUrl:function(a, b, c) {
    this._super(a, b + (b && c ? "/" : "") + c)
},index:function(a) {
    this.UserID = parseInt(a, 10);
    if (this.UserID === 0)GS.router.notFound(); else if (GS.user.UserID) {
        GS.user.UserID == this.UserID ? this.loadMyProfile() : GS.Models.User.getUser(this.UserID, this.callback(this.loadProfile));
        this.subscribe("gs.auth.user.update", this.callback("userUpdated"));
        this.subscribe("gs.auth.favorite.user", this.callback("userUpdated"));
        this.subscribe("gs.locale.update", this.callback("onLocaleUpdate"));
        this.subscribe("gs.auth.favorites.users.update", this.callback("userFavoritesUpdated"))
    } else this.subscribe("gs.app.ready", this.callback(this.index, a))
},userChangeTimeout:false,userChangeWaitDuration:100,userFavoritesUpdated:function() {
    clearTimeout(this.userChangeTimeout);
    this.userChangeTimeout = setTimeout(this.callback(function() {
        if (this.user) {
            var a = GS.user.favorites.users[this.user.UserID];
            if (a)GS.user.UserID == this.user.UserID ? this.loadMyProfile() :
                    this.loadProfile(a)
        }
    }), this.userChangeWaitDuration)
},userUpdated:function(a) {
    clearTimeout(this.userChangeTimeout);
    this.userChangeTimeout = setTimeout(this.callback(function() {
        if (this.user && this.user.UserID === a.UserID)GS.user.UserID == this.user.UserID ? this.loadMyProfile() : this.loadProfile(a)
    }), this.userChangeWaitDuration)
},loadMyProfile:function() {
    this.user = GS.user;
    this.UserID = this.user.UserID;
    this.subpage = this.section = "";
    this.correctUrl(this.user, this.section, this.subpage);
    GS.Controllers.PageController.title(this.user.getTitle());
    this.element.empty().scrollTop(0).html(this.view("profile"));
    this.user.getProfileFeed(this.callback("loadGridProfileFeed", this.user), this.callback("loadGridProfileFeed", this.user));
    this.loadDigests(this.user);
    $.publish("gs.profile.view", {user:this.user})
},loadProfile:function(a) {
    this.user = a;
    if (!a.library)a.library = GS.Models.Library.wrap({userID:a.UserID});
    if (!a.fanbase)a.fanbase = GS.Models.Fanbase.wrap({objectID:a.UserID,objectType:"user"});
    if (!a.profileFeed)a.profileFeed = GS.Models.ProfileFeed.wrap({user:a});
    if (!a.communityFeed)a.communityFeed = GS.Models.CommunityFeed.wrap({user:a});
    this.UserID = this.user.UserID;
    this.subpage = this.section = "";
    this.correctUrl(this.user, this.section, this.subpage);
    GS.Controllers.PageController.title(this.user.getTitle());
    this.element.empty().scrollTop(0).html(this.view("profile"));
    $.publish("gs.profile.view", {user:this.user});
    this.user.getProfileFeed(this.callback("loadGridProfileFeed", this.user), this.callback("loadGridProfileFeed", this.user));
    this.loadDigests();
    this.resetBroadcastForm()
},
    loadDigests:function() {
        this.user.getPlaylists(this.callback("loadPlaylistDigest", this.user));
        this.user.getFavoritesByType("Artists", this.callback("loadFavoriteArtistDigest", this.user));
        this.user.getFavoritesByType("Users", this.callback("loadUserFollowingDigest", this.user))
    },loadPlaylistDigest:function(a) {
        this.user = a;
        this.UserID = this.user.UserID;
        this.topPlaylists = _.toArray(this.user.playlists).sort(function(b, c) {
            return c.TSAdded > b.TSAdded
        });
        $("#playlist_digest").html(this.view("/user/playlist_digest",
                {playlists:this.topPlaylists,user:this.user}));
        if (!GS.user.IsPremium) {
            a = this.subpage.length ? this.subpage : GS.Controllers.PageController.activePage.section;
            a = a.length ? a : "activity";
            if (GS.getAd) {
                GS.getAd().updateRotationCount();
                GS.getAd().buildAd($("#profileCapital_300"), 300, 250, ["p=" + (GS.user.UserID == this.UserID ? "my" : "") + "profile_" + a]);
                GS.user.UserID != this.UserID && GS.getAd().buildAd($("#profileCapital_728"), 728, 90, ["p=profile_" + a])
            }
        }
    },loadUserFollowingDigest:function(a) {
        var b = _.toArray(a.favorites.users);
        b = b.sort(function(c, g) {
            return!c.Picture && g.Picture ? 1 : c.Picture && !g.Picture ? -1 : 0
        });
        $("#following_digest").html(this.view("/user/following_digest", {following:b,user:a}))
    },loadFavoriteArtistDigest:function(a) {
        var b = [];
        a = a.favorites.artists;
        for (var c in a)a.hasOwnProperty(c) && b.push(a[c]);
        b.sort(function(g, h) {
            return Date.parse(h.TSFavorited) - Date.parse(g.TSFavorited)
        });
        b = b.slice(0, 5);
        $("#artist_digest").html(this.view("/user/artist_digest", {artists:b,titleLabel:"USER_FAVORITE_ARTISTS"}))
    },loadGridProfileFeed:function(a, b) {
        if (!(this.section !== "" || this.subpage !== "")) {
            if (!this.user.profileFeed.isLoaded)return false;
            if (!GS.user.fanbase)GS.user.fanbase = GS.Models.Fanbase.wrap({objectID:GS.user.UserID,objectType:"user"});
            if (GS.user.UserID > 0 && !GS.user.fanbase.fansLoaded)GS.user.fanbase.getFans(this.callback(function() {
                this.loadGridProfileFeed(a, b)
            }), null, false); else {
                this.feed = this.user.profileFeed;
                this.activity = this.user.profileFeed.events;
                this.noFriends = false;
                this.filteredUserIDs = [];
                if (this.activity && this.activity.length) {
                    this.element.find(".gs_grid").html(this.view("community/activity"));
                    this.feed.hasMore || $(".feeds_loadMore").show();
                    for (var c,g,h = 0; h < this.activity.length; h++) {
                        g = this.activity[h];
                        c = $("#feedEvent_" + g.eventID).data("event", g);
                        g.dataString && g.dataString.hookup(c.find("p.what"))
                    }
                } else {
                    this.element.find(".gs_grid").html(this.view("community/noActivityResults"));
                    $("#searchForm input").select()
                }
                GS.resize();
                GS.page.resetRefreshButton()
            }
        }
    },redirectUser:function(a) {
        this.user = a;
        this.UserID = this.user.UserID;
        location.hash = this.user.toUrl();
        return false
    },myCommunity:false,noFriends:false,
    filteredUserIDs:[],community:function(a, b) {
        this.UserID = a;
        this.section = "community";
        this.subpage = b;
        this.currentFilterStr = "";
        if (b == "following")GS.user.UserID == this.UserID ? this.loadFollowing(GS.user) : GS.Models.User.getUser(this.UserID, this.callback("loadFollowing")); else if (b == "fans")GS.user.UserID == this.UserID ? this.loadFans(GS.user) : GS.Models.User.getUser(this.UserID, this.callback("loadFans")); else if (b == "recent")this.loadRecentActiveFeed(GS.user); else if (b == "mentions")GS.user.UserID == this.UserID && GS.user.UserID >
                0 ? this.loadMyMentions(GS.user) : GS.router.notFound(); else if (GS.user.UserID == this.UserID || this.UserID == -1) {
            this.loadMyCommunity(GS.user);
            this.myCommunity = true
        } else GS.Models.User.getUser(this.UserID, this.callback("loadCommunity"))
    },loadMyCommunity:function() {
        this.user = GS.user;
        this.correctUrl(this.user, this.section, this.subpage);
        GS.Controllers.PageController.title(this.user.getTitle() + " - Community");
        this.element.empty().scrollTop(0).html(this.view("community/myCommunity"));
        !this.user.userFavoritesLoaded &&
                this.UserID > 0 ? this.subscribe("gs.auth.favorites.users.update", this.callback("loadCommunityFeed")) : this.loadCommunityFeed()
    },loadMyMentions:function() {
        this.user = GS.user;
        this.correctUrl(this.user, this.section, this.subpage);
        GS.Controllers.PageController.title(this.user.getTitle() + " - Mentions");
        this.element.html(this.view("community/myCommunity"));
        this.loadMentionFeed()
    },communitySidebar:function(a) {
        if (a && a.isComplete) {
            var b = a.events,c,g = {},h = {};
            c = [];
            for (var k = [],m = 0; m < b.length; m++) {
                c = b[m];
                if (!(this.user.UserID ==
                        GS.user.UserID && c.user.UserID == this.user.UserID)) {
                    k = c.user.UserID;
                    if (!(a.userIDs && a.userIDs.indexOf(k.toString()) > -1)) {
                        if (g[c.user.UserID])g[c.user.UserID].weight++; else g[c.user.UserID] = {user:c.user,weight:1};
                        if (c.data.hasOwnProperty("songs") && c.data.songs[0].artistID && c.data.songs[0].artistName && c.data.songs[0].artistName != "unknown")if (h[c.data.songs[0].artistID]) {
                            h[c.data.songs[0].artistID].weight++;
                            h[c.data.songs[0].artistID].users[c.user.UserID] = c.user
                        } else {
                            k = {};
                            k[c.user.UserID] = c.user;
                            h[c.data.songs[0].artistID] =
                            {artist:GS.Models.Artist.wrap({ArtistID:c.data.songs[0].artistID,ArtistName:c.data.songs[0].artistName}, false),weight:1,users:k}
                        }
                    }
                }
            }
            k = _.toArray(h).sort(_.getSort("weight", false)).slice(0, 10);
            c = _.toArray(g).sort(_.getSort("weight", false)).slice(0, 20);
            for (m = 0; m < k.length; m++)k[m].users = _.toArray(k[m].users);
            if (c.length % 11 === 0)c = c.slice(0, Math.floor(c.length / 10) * 10);
            $("#communityUsers").html(this.view("community/myCommunity_activeUsers", {userInfo:c}));
            $("#communityArtists").html(this.view("community/myCommunity_topArtists",
                    {artistInfo:k}));
            if (this.user.UserID > 0 && this.user.UserID == GS.user.UserID) {
                $("#communityProfileStats").html(this.view("community/myCommunity_profile"));
                GS.user.getPlaylists(this.callback("showMyPlaylistCount"));
                GS.user.fanbase.getFans(this.callback("showMyFanCount", null, false), null, false)
            }
            if (!GS.user.IsPremium)if (GS.getAd) {
                GS.getAd().updateRotationCount();
                GS.getAd().buildAd($("#commCapital_300"), 300, 250, ["p=community_activity"])
            }
        }
    },showMyPlaylistCount:function() {
        $("#bio_playlistCount").html(_.count(GS.user.playlists))
    },
    showMyFanCount:function() {
        $("#bio_fanCount").html(GS.user.fanbase.userIDs.length)
    },loadCommunity:function(a) {
        this.user = a;
        this.correctUrl(this.user, this.section, this.subpage);
        GS.Controllers.PageController.title(this.user.getTitle() + " - Community");
        this.element.empty().scrollTop(0).html(this.view("community/community"));
        $.publish("gs.page.loading.grid");
        this.user.UserID > 0 ? this.user.getFavoritesByType("Users", this.callback("loadCommunityFeed")) : GS.Models.RecentFeed.interestingFeed.getFeed(this.callback("loadGridCommunityFeed",
                GS.Models.RecentFeed.interestingFeed));
        this.loadDigests(this.user)
    },loadCommunityFeed:function() {
        if (!GS.user.fanbase)GS.user.fanbase = GS.Models.Fanbase.wrap({objectID:GS.user.UserID,objectType:"user"});
        if (GS.user.UserID > 0 && !GS.user.fanbase.fansLoaded)GS.user.fanbase.getFans(this.callback(this.loadCommunityFeed), null, false); else {
            if (!this.user.communityFeed)this.user.communityFeed = GS.Models.CommunityFeed.wrap({user:this.user});
            if (this.user.UserID > 0 && _.count(this.user.favorites.users)) {
                this.users = this.user.favorites.users;
                this.noFriends = false;
                this.communityFeed = this.user.communityFeed;
                this.user.getCommunityFeed(this.callback("loadGridCommunityFeed", this.user.communityFeed), this.callback("loadGridCommunityFeed", this.user.communityFeed))
            } else {
                this.communityFeed = GS.Models.RecentFeed.interestingFeed;
                GS.Models.RecentFeed.interestingFeed.getFeed(this.callback("loadGridCommunityFeed", GS.Models.RecentFeed.interestingFeed), this.callback("loadGridCommunityFeed", GS.Models.RecentFeed.interestingFeed))
            }
        }
    },loadMentionFeed:function() {
        this.mentionFeed =
                GS.user.mentionsFeed;
        this.mentionFeed.getFeed(this.callback("loadGridCommunityFeed", this.mentionFeed))
    },loadGridCommunityFeed:function(a) {
        if (!a.isLoaded || !this.element || this.section != "community" || this.subpage == "mentions" && a.type != "mentions")return false;
        this.feed = a;
        this.activity = a.events;
        if (this.user === GS.user && a.type == "community")this.myCommunity = true;
        this.filteredUserIDs = this.communityFeed && typeof this.communityFeed.userIDs === "object" ? this.communityFeed.userIDs : [];
        if (this.activity.length) {
            this.element.find(".gs_grid").html(this.view("community/activity"));
            a.pages.length == 1 && GS.resize();
            a.hasMore || $(".feeds_loadMore").show()
        } else {
            this.element.find(".gs_grid").html(this.view("community/noActivityResults"));
            $("#searchForm input").select();
            GS.resize()
        }
        for (var b = 0; b < this.activity.length; b++) {
            var c = this.activity[b],g = $("#feedEvent_" + c.eventID).data("event", c);
            c.dataString && c.dataString.hookup(g.find("p.what"))
        }
        this.communitySidebar(a);
        GS.page.resetRefreshButton()
    },loadRecentActiveFeed:function(a) {
        this.user = a;
        this.correctUrl(this.user, this.section, this.subpage);
        GS.Controllers.PageController.title(this.user.getTitle() + " - Recent Activity");
        this.element.html(this.view("community/community"));
        this.user.getRecentlyActiveUsersFeed(this.callback("loadGridRecentActiveFeed"))
    },loadGridRecentActiveFeed:function() {
        this.feed = this.user.recentActiveUsersFeed;
        this.activity = this.user.recentActiveUsersFeed.events;
        this.noFriends = false;
        this.filteredUserIDs = [];
        if (this.activity.length)this.element.find(".gs_grid").html(this.view("community/activity")); else {
            this.element.find(".gs_grid").html(this.view("/shared/noResults",
                    {type:"activity"}));
            $("#searchForm input").select()
        }
        this.element.find(".event").each(this.callback(function(a, b) {
            $(b).data("event", this.activity[a]);
            this.activity[a].dataString.hookup($(b).find("p.what"))
        }));
        GS.resize()
    },loadFollowing:function(a) {
        this.user = a;
        this.correctUrl(this.user, this.section, this.subpage);
        GS.Controllers.PageController.title(this.user.getTitle() + " - Following");
        this.element.html(this.view("community/community"));
        this.user.getFavoritesByType("Users", this.callback(this.renderFollows));
        this.loadDigests(a);
        GS.resize()
    },renderFollows:function() {
        if (this.subpage == "following") {
            this.followUsers = _.toArray(this.user.favorites.users);
            this.followUsers.sort(this.sortByPictureAlphabet);
            if (this.followUsers.length) {
                var a = this.followUsers.filter(this.callback("filterUsersFunction"));
                $("#grid").html("").css("height", "auto").addClass("userlist");
                this.slickbox = $("#grid").slickbox({scrollPane:"#page",padding:0,listClass:"smallUserView",itemRenderer:GS.Models.User.itemRenderer,itemWidth:195,itemHeight:70,
                    maxHorizontalGap:100,minHorizontalGap:15,verticalGap:15}, a)
            } else {
                $("#grid").html(this.view("noFollowResults"));
                GS.resize()
            }
        }
    },loadFans:function(a) {
        if (this.subpage == "fans") {
            this.user = a;
            this.correctUrl(this.user, this.section, this.subpage);
            GS.Controllers.PageController.title(this.user.getTitle() + " - Fans");
            this.element.html(this.view("community/community"));
            this.user.fanbase.getFans(this.callback(this.renderFans));
            this.loadDigests(a);
            GS.resize()
        }
    },renderFans:function(a) {
        this.fanUsers = a;
        this.fanUsers.sort(this.sortByPictureAlphabet);
        if (this.fanUsers.length) {
            a = this.fanUsers.filter(this.callback(this.filterUsersFunction));
            $("#grid").html("").css("height", "auto").addClass("userlist");
            this.slickbox = $("#grid").slickbox({scrollPane:"#page",padding:0,listClass:"smallUserView",itemRenderer:GS.Models.User.itemRenderer,itemWidth:195,itemHeight:70,maxHorizontalGap:15,minHorizontalGap:15,verticalGap:15}, a)
        } else {
            $("#grid").html(this.view("noFanResults"));
            GS.resize()
        }
    },sortByPictureAlphabet:function(a, b) {
        return!a.Picture && b.Picture ? 1 : a.Picture &&
                !b.Picture ? -1 : a.Name.toLowerCase() < b.Name.toLowerCase() ? -1 : a.Name.toLowerCase() > b.Name.toLowerCase() ? 1 : 0
    },currentFilterStr:null,filterUsers:function(a) {
        if (this.currentFilterStr != a) {
            this.currentFilterStr = a;
            if (this.subpage == "fans")this.fanUsers && this.renderFans(this.fanUsers); else this.subpage == "following" && this.followUsers && this.renderFollows(this.followUsers)
        }
    },filterUsersFunction:function(a) {
        return(a.Username.toLowerCase() + " " + a.Name.toLowerCase()).indexOf(this.currentFilterStr.toLowerCase()) !==
                -1
    },onLocaleUpdate:function() {
        if (this.user) {
            var a = this.user.getAccountDuration();
            _.isEmpty(a) || $("#userAcctDuration").html((new GS.Models.DataString($.localize.getString(a.key), a)).render())
        }
    },"#broadcastSearch input focus":function() {
        $("#broadcastSearch .placeholder").hide()
    },"#broadcastSearch input blur":function(a) {
        $("#broadcastSearch .placeholder").toggle(!$(a).val().length)
    },"#broadcastMentions input focus":function() {
        $("#broadcastMentions .placeholder").hide()
    },"#broadcastMentions input blur":function(a) {
        $("#broadcastMentions .placeholder").toggle(!$(a).val().length)
    },
    "#broadcastMessage textarea focus":function() {
        $("#broadcastMessage .placeholder").hide()
    },"#broadcastMessage textarea blur":function(a) {
        $("#broadcastMessage .placeholder").toggle(!$(a).val().length)
    },".placeholder click":function(a) {
        $(a).siblings("input, textarea").eq(0).focus()
    },"#broadcastSearchForm submit":function() {
        return false
    },loadBroadcastSearchResults:function(a, b, c, g) {
        g = g ? g.result || g : [];
        b = [];
        b = g.slice(0, 5);
        switch (c) {
            case "playlist":
                b = _.toArray(GS.user.playlists).concat(_.toArray(GS.user.favorites.playlists)).filter(GS.Models.Playlist.matchFilter(a)).splice(0,
                        5);
                break;
            case "song":
                b = GS.Models.Song.wrapCollection(b);
                b = _.toArray(GS.user.library.songs).filter(GS.Models.Song.matchFilter(a, true)).concat(b).splice(0, 5);
                break;
            case "album":
                b = GS.Models.Album.wrapCollection(b);
                break;
            case "artist":
                b = GS.Models.Artist.wrapCollection(b);
                break;
            default:
                console.warn("Cannot wrap results");
                return
        }
        b.length ? $("#broadcastSearchResults").html(this.view("/shared/broadcast/searchResults", {results:b,type:c})).removeClass("hide") : $("#broadcastSearchResults").html(this.view("/shared/broadcast/noResults",
                {type:this.broadcastType})).removeClass("hide");
        $("body").unbind("click.broadcastResults").bind("click.broadcastResults", function(h) {
            if (!$(h.target).parent("broadcastResult").length) {
                $("#broadcastSearchResults").addClass("hide");
                $(this).unbind("click.broadcastResults")
            }
        })
    },".broadcastOption click":function(a, b) {
        $el = $(a);
        b.preventDefault();
        this.broadcastType = _.ucwords(a.attr("rel")) + "s";
        $el.siblings().removeClass("active");
        $el.addClass("active");
        $("#broadcastForm").addClass("hide");
        $("#broadcastSearchResults").empty();
        $("#broadcastSearch .placeholder").html($.localize.getString("SEARCH_" + this.broadcastType.toUpperCase()) + "\u2026");
        $("#broadcastSearch input").val("").parent().removeClass("hide").children("input").focus()
    },"#broadcastForm .close click":function() {
        this.resetBroadcastForm()
    },lastBroadcastSearch:null,broadcastMentions:{},broadcastMentionsLookup:{},broadcastType:"Songs","#broadcastSearch input keyup":function(a, b) {
        if (b.which == _.keys.DOWN && $("#broadcastSearchResults ul").length)$("#broadcastSearchResults .active").length ?
                $("#broadcastSearchResults .active").removeClass("active").next().addClass("active") : $("#broadcastSearchResults li:first").addClass("active"); else if (b.which == _.keys.UP && $("#broadcastSearchResults ul").length)$("#broadcastSearchResults .active").length ? $("#broadcastSearchResults .active").removeClass("active").prev().addClass("active") : $("#broadcastSearchResults li:last").addClass("active"); else if (b.which == _.keys.ENTER && $("#broadcastSearchResults .active").length) {
            b.preventDefault();
            $("#broadcastSearchResults .active a").trigger("click")
        } else if (this.lastBroadcastSearch !=
                a.val()) {
            this.lastBroadcastSearch = a.val();
            this.searchRequest && clearTimeout(this.searchRequest);
            if (!this.lastBroadcastSearch || this.lastBroadcastSearch.length && this.lastBroadcastSearch.length < 4)$("#broadcastSearchResults").addClass("hide").html(""); else {
                $("#broadcastSearchResults").html("<ul><li>" + this.view("/shared/loadingIndicator") + "</li></ul>").removeClass("hide");
                this.searchRequest = setTimeout(this.callback(function() {
                    var c = a.val();
                    if (c) {
                        var g = this.broadcastType.substr(0, this.broadcastType.length -
                                1).toLowerCase();
                        g == "playlist" ? this.loadBroadcastSearchResults(c, "", "playlist") : GS.service.getAutocomplete(c, g, this.callback(this.loadBroadcastSearchResults, c, "", g), this.callback(this.loadBroadcastSearchResults, c, "", g))
                    } else $("#broadcastSearchResults").addClass("hide")
                }), 500)
            }
        }
    },"#broadcastSearchResults .broadcastResult click":function(a) {
        $("#broadcastSearchResults, #broadcastSearch").addClass("hide");
        $("#broadcastForm").removeClass("hide");
        if (a.attr("data-playlistid"))GS.Models.Playlist.getPlaylist(a.attr("data-playlistid"),
                this.callback(function(b) {
                    this.broadcastItem = b;
                    $("#broadcastItem").html(this.view("/shared/broadcast/searchItem")).removeClass("hide")
                })); else if (a.attr("data-songid"))GS.Models.Song.getSong(a.attr("data-songid"), this.callback(function(b) {
            this.broadcastItem = b;
            $("#broadcastItem").html(this.view("/shared/broadcast/searchItem")).removeClass("hide")
        })); else if (a.attr("data-albumid"))GS.Models.Album.getAlbum(a.attr("data-albumid"), this.callback(function(b) {
            this.broadcastItem = b;
            $("#broadcastItem").html(this.view("/shared/broadcast/searchItem")).removeClass("hide")
        }));
        else a.attr("data-artistid") && GS.Models.Artist.getArtist(a.attr("data-artistid"), this.callback(function(b) {
                this.broadcastItem = b;
                $("#broadcastItem").html(this.view("/shared/broadcast/searchItem")).removeClass("hide")
            }))
    },".broadcastSearchResults li hover":function(a) {
        a.addClass("active").siblings().removeClass("active")
    },".broadcastMentions keydown":function(a, b) {
        if (b.which == _.keys.ENTER && $("#broadcastMentionResults .active").length)return false
    },".broadcastMentions keyup":function(a, b) {
        if (b.which ==
                _.keys.DOWN && $("#broadcastMentionResults ul").length)$("#broadcastMentionResults .active").length ? $("#broadcastMentionResults .active").removeClass("active").next().addClass("active") : $("#broadcastMentionResults li:first").addClass("active"); else if (b.which == _.keys.UP && $("#broadcastMentionResults ul").length)$("#broadcastMentionResults .active").length ? $("#broadcastMentionResults .active").removeClass("active").prev().addClass("active") : $("#broadcastMentionResults li:last").addClass("active"); else {
            if (b.which ==
                    _.keys.ENTER && $("#broadcastMentionResults .active").length) {
                b.preventDefault();
                b.stopPropagation();
                $("#broadcastMentionResults .active a").trigger("click");
                return false
            }
            var c = $(".broadcastMentions").val().match(/(^|\W)(\w+)($|\W)/g);
            if (c && c.length) {
                c = $.trim(c.pop());
                var g = _.toArray(GS.user.favorites.users).filter(GS.Models.User.matchFilter(c)).slice(0, 5);
                g.length ? $("#broadcastMentionResults").html(this.view("/shared/broadcast/searchResults", {results:g,match:c,type:"user"})).show() : $("#broadcastMentionResults").empty().hide()
            } else $("#broadcastMentionResults").empty().hide()
        }
    },
    ".broadcastMessage keyup":function(a) {
        var b = $(".broadcastMessage").val().substr(0, 140);
        parseInt($(".broadcastCharCount").text(), 10) <= 0 && $(".broadcastMessage").val(b);
        $(".broadcastCharCount").text(140 - a.val().length)
    },"#broadcastMentionResults .broadcastResult click":function(a) {
        var b = a.attr("data-userid");
        a = a.attr("data-match");
        var c;
        if (GS.user.favorites.users[b]) {
            if (c = GS.user.favorites.users[b]) {
                this.broadcastMentions[b] = c.getDetailsForFeeds();
                this.broadcastMentionsLookup[c.Name] = b
            }
            b = $(".broadcastMentions").val();
            b = b.replace(a, c.Name) + ", ";
            $("#broadcastMentionResults").empty().hide();
            $(".broadcastMentions").val(b).focus();
            $("#broadcastItem .mentions").html(this.view("/shared/broadcast/formMentions"))
        }
    },".broadcastMessage focus":function() {
        $("#broadcastMentions").show()
    },broadcastTypes:{Songs:"song",Playlists:"playlist",Albums:"album",Artists:"artist"},"#broadcastForm submit":function(a, b) {
        b.preventDefault();
        b.stopPropagation();
        var c = $(".broadcastMentions").val();
        _.forEach(this.broadcastMentionsLookup, function(m, n) {
            c.indexOf(n) == -1 && delete this.broadcastMentions[m]
        }, this);
        ($("input[name=to]", a).val() || "").split(",");
        var g = $("textarea[name=message]", a).val(),h = $(".broadcastItemInner").attr("id"),k = _.toArray(this.broadcastMentions);
        $(a).find("button.submit").attr("disabled", "true");
        GS.service.sendFeedBroadcast(this.broadcastTypes[this.broadcastType], h, k, g, this.callback("broadcastSuccess"), this.callback("broadcastFail"));
        $("#broadcastForm input.facebook:checked").length == 1 && GS.getFacebook().postToFeed("me",
                "http://grooveshark.com" + this.broadcastItem.toUrl().replace("#/", "/"), g, this.broadcastTypes[this.broadcastType], this.broadcastTypes[this.broadcastType] + "Share");
        return false
    },resetBroadcastForm:function() {
        $("#broadcastForm").addClass("hide");
        $(".broadcastOption:first").addClass("active").siblings().removeClass("active");
        $(".broadcastQuery").val("");
        $(".broadcastMessage").val("");
        $(".broadcastMentions").val("");
        $(".broadcastCharCount").text(140);
        $("#broadcastSearch").val("").removeClass("hide");
        $("#broadcastForm button.submit").removeAttr("disabled");
        $("#broadcastForm .placeholder").show();
        this.broadcastMentions = {};
        this.broadcastMentionsLookup = {};
        if (this.user.UserID !== GS.user.UserID) {
            this.broadcastMentions[this.user.UserID] = this.user.getDetailsForFeeds();
            this.broadcastMentionsLookup[this.user.Name] = this.user.UserID;
            $(".broadcastMentions").val(this.user.Name + ", ");
            $("#broadcastMentions .placeholder").hide()
        }
    },broadcastSuccess:function() {
        this.resetBroadcastForm();
        this.feed.isDirty = true;
        if (this.feed.type == "community")setTimeout(this.callback(function() {
            this.loadCommunityFeed()
        }),
                3E3); else this.feed.type == "profile" && setTimeout(this.callback(function() {
            this.loadProfile(this.user)
        }), 3E3)
    },broadcastFail:function() {
        $.publish("gs.notification", {type:"notice",message:_.getString("NOTIFICATION_BROADCAST_FAILED", {type:this.broadcastType})})
    },"#broadcastForm input.facebook change":function(a) {
        if (a.is(":checked"))if (!GS.getFacebook().connected && GS.getFacebook().facebookUserID && GS.getFacebook().loggedIntoFacebook)GS.getFacebook().showChangeUserLightbox(); else!GS.getFacebook().connected &&
                GS.getFacebook().facebookUserID && !GS.getFacebook().loggedIntoFacebook && GS.getFacebook().login()
    },getPlayMenu:function() {
        if ($("#page").hasClass("gs_page_music"))return this._super();
        var a = this.user;
        return[
            {title:$.localize.getString("PLAY_NOW"),action:{type:"fn",callback:function() {
                a.profileFeed && a.profileFeed.play(GS.player.INDEX_DEFAULT, true)
            }},customClass:"jj_menu_item_hasIcon jj_menu_item_play"},
            {title:$.localize.getString("PLAY_NEXT"),action:{type:"fn",callback:function() {
                a.profileFeed && a.profileFeed.play(GS.player.INDEX_NEXT,
                        false)
            }},customClass:"jj_menu_item_hasIcon jj_menu_item_play_next"},
            {title:$.localize.getString("PLAY_LAST"),action:{type:"fn",callback:function() {
                a.profileFeed && a.profileFeed.play(GS.player.INDEX_LAST, false)
            }},customClass:"jj_menu_item_hasIcon jj_menu_item_play_last"},
            {customClass:"separator"},
            {title:$.localize.getString("REPLACE_QUEUE"),action:{type:"fn",callback:function() {
                a.profileFeed && a.profileFeed.play(GS.player.INDEX_REPLACE, true)
            }},customClass:"jj_menu_item_hasIcon jj_menu_item_replace_playlist"}
        ]
    },
    "button.play_user click":function() {
        this.UserID > 0 && this.user.profileFeed.play(-1, true, 0, 100)
    },"button.play_community click":function() {
        this.user.communityFeed.play(-1, true, 0, 100)
    },"button.invite click":function() {
        this.UserID == GS.user.UserID && GS.user.UserID > 0 && GS.getLightbox().open("invite")
    },".capitalSliderBtn click":function(a) {
        a = $(a);
        a.scrollLeft(0);
        $(a).hasClass("capitalSliderNext") ? $(".capitalView_728").animate({scrollLeft:$(".capitalView_728").scrollLeft() + 200}, 500) : $(".capitalView_728").animate({scrollLeft:$(".capitalView_728").scrollLeft() -
                200}, 500)
    }});
GS.Controllers.Page.UserController.extend("GS.Controllers.Page.MusicController", {init:function() {
    this._super();
    this.loadFilterCollapseState()
}}, {section:"music",type:"music",subscribed:false,adTimeoutID:null,correctUrl:function(a, b, c, g) {
    c = _.orEqual(c, "");
    g = _.orEqual(g, "");
    this._super(a, b, c + (b && c && g.length ? "/" : "") + g)
},init:function() {
    this._super();
    GS.getSidebar()
},index:function(a, b) {
    this.UserID = parseInt(a, 10);
    this.subpage = _.orEqual(b, "");
    if (this.UserID === 0)GS.router.notFound(); else {
        if (GS.user.UserID == this.UserID) {
            this.user =
                    GS.user;
            this.UserID = this.user.UserID;
            this.correctUrl(this.user, this.section, this.subpage);
            if (this.subpage === "favorites") {
                GS.Controllers.PageController.title(GS.user.getTitle() + " - Favorites");
                this.subscribe("gs.auth.favorites.songs.add", this.callback("addToGrid"));
                this.subscribe("gs.auth.favorites.songs.remove", this.callback("removeFromGrid"));
                this.loadMySongFavorites()
            } else {
                GS.Controllers.PageController.title(GS.user.getTitle() + " - Music");
                this.subscribe("gs.auth.library.add", this.callback("addToGrid"));
                this.subscribe("gs.auth.library.remove", this.callback("removeFromGrid"));
                this.loadMyMusic()
            }
            this.element.find("#page_header button.opts").show()
        } else GS.Models.User.getUser(this.UserID, this.callback("loadMusic"));
        if (!GS.user.IsPremium)if (!this.adTimeoutID)this.adTimeoutID = setTimeout(this.callback(function() {
            GS.getAd().updateRotationCount();
            GS.getAd().buildAd($("#musicCapital_160"), 160, 600, ["p=mymusic_" + (this.subpage.length ? this.subpage : "songs")]);
            this.adTimeoutID = null
        }), 100)
    }
},favorites:function(a) {
    this.index(a,
            "favorites")
},albums:function(a) {
    this.UserID = parseInt(a, 10);
    this.subpage = "albums";
    if (GS.user.UserID == this.UserID) {
        this.user = GS.user;
        this.UserID = this.user.UserID;
        this.correctUrl(this.user, this.section, this.subpage);
        GS.Controllers.PageController.title(GS.user.getTitle() + " - Albums");
        this.loadMyAlbums()
    } else GS.Models.User.getUser(this.UserID, this.callback("loadAlbums"))
},loadMyMusic:function() {
    this.user = GS.user;
    this.UserID = this.user.UserID;
    this.correctUrl(this.user, this.section, this.subpage);
    this.element.html(this.view("/user/music/myMusic"));
    var a = [],b;
    for (b in GS.user.library.songs)if (GS.user.library.songs.hasOwnProperty(b)) {
        GS.user.library.songs[b].fromLibrary = 1;
        a.push(GS.user.library.songs[b])
    }
    this.loadGridMusic(a, true)
},loadMyAlbums:function() {
    this.user = GS.user;
    this.UserID = this.user.UserID;
    this.correctUrl(this.user, this.section, this.subpage);
    this.element.html(this.view("/user/music/albums"));
    var a = [],b;
    for (b in GS.user.library.songs)if (GS.user.library.songs.hasOwnProperty(b)) {
        GS.user.library.songs[b].fromLibrary = 1;
        a.push(GS.user.library.songs[b])
    }
    this.loadGridAlbums(a,
            true)
},addToGrid:function(a) {
    if (this.UserID === GS.user.UserID) {
        a.isDeleted = false;
        var b = this.element.find(".gs_grid.songs").controller();
        if (b) {
            var c = this.element.find(".gs_grid.artists").controller(),g = this.element.find(".gs_grid.albums").controller(),h = b.grid,k = b.dataView;
            b.data.push(a);
            if (k) {
                k.beginUpdate();
                k.addItem(a);
                k.endUpdate();
                k = (new GS.Models.DataString($.localize.getString("QUEUE_NUM_SONGS"), {numSongs:k.rows.length})).render();
                $("#gridNumItems").text(k).show()
            }
            h && h.onSort(b.sortCol, b.sortDir);
            if (!this.albumsSeen[a.AlbumID] && a.AlbumName && a.AlbumName.length) {
                g.dataView.beginUpdate();
                b = GS.Models.Album.wrap({AlbumName:a.AlbumName,AlbumID:a.AlbumID,ArtistName:a.ArtistName,ArtistID:a.ArtistID,CoverArtFilename:songs[i].CoverArtFilename}, true, "m_");
                b.IsVerified = 0;
                g.dataView.addItem(b);
                g.dataView.endUpdate();
                this.albumsSeen[a.AlbumID] = true;
                g.grid && g.grid.onSort(g.sortCol, g.sortDir)
            }
            if (!this.artistsSeen[a.ArtistID] && a.ArtistName && a.ArtistName.length) {
                c.dataView.beginUpdate();
                g = GS.Models.Artist.wrap({ArtistName:a.ArtistName,
                    ArtistID:a.ArtistID}, true, "m_");
                g.IsVerified = 0;
                c.dataView.addItem(g);
                c.dataView.endUpdate();
                this.artistsSeen[a.ArtistID] = true;
                c.grid && c.grid.onSort(c.sortCol, c.sortDir)
            }
        } else this.loadMyMusic()
    }
},removeFromGrid:function(a) {
    a.isDeleted = true;
    var b = this.element.find(".gs_grid.songs").controller(),c = b.grid,g = b.dataView;
    if (g) {
        g.beginUpdate();
        g.updateItem(a.SongID, a);
        g.endUpdate()
    }
    c && c.onSort(b.sortCol, b.sortDir)
},loadMySongFavorites:function() {
    this.user = GS.user;
    this.UserID = this.user.UserID;
    this.section =
            "music";
    this.correctUrl(this.user, this.section, this.subpage);
    this.element.html(this.view("/user/music/myMusic"));
    var a = [],b;
    for (b in GS.user.favorites.songs)GS.user.favorites.songs.hasOwnProperty(b) && a.push(GS.user.favorites.songs[b]);
    this.loadGridMusic(a)
},loadMusic:function(a) {
    this.user = a;
    this.UserID = this.user.UserID;
    this.correctUrl(this.user, this.section, this.subpage);
    this.element.html(this.view("/user/music/index"));
    $("#page_content_profile").hover(function() {
        $(this).find(".thumb").stop(true,
                false);
        $(this).find(".thumb").fadeTo(300, 0.5)
    }, function() {
        $(this).find(".thumb").stop(true, false);
        $(this).find(".thumb").fadeTo(300, 0)
    });
    if (this.subpage === "favorites") {
        GS.Controllers.PageController.title(this.user.getTitle() + " - Favorites");
        this.user.getFavoritesByType("Songs", this.callback("loadGridSongFavorites", true, false))
    } else {
        GS.Controllers.PageController.title(this.user.getTitle() + " - Music");
        this.user.getFavoritesByType("Songs", this.callback("loadGridSongFavorites", false, true))
    }
    this.loadDigests(this.user)
},
    loadAlbums:function(a) {
        this.user = a;
        this.UserID = this.user.UserID;
        this.correctUrl(this.user, this.section, this.subpage);
        this.element.html(this.view("/user/music/albums"));
        GS.Controllers.PageController.title(this.user.getTitle() + " - Albums");
        this.user.library.getSongs(this.callback("loadGridAlbums"))
    },loadGridSongFavorites:function(a, b) {
        b = _.orEqual(b, false);
        var c = [],g;
        for (g in this.user.favorites.songs)this.user.favorites.songs.hasOwnProperty(g) && c.push(this.user.favorites.songs[g]);
        this.loadGridMusic(c,
                a);
        b && this.user.library.getSongs(this.callback("loadGridMusic"), null, false)
    },albumsSeen:{},artistsSeen:{},buildAlbumsArtists:function(a) {
        var b = [],c = [],g,h,k;
        h = 0;
        for (k = a.length; h < k; h++) {
            if (!this.albumsSeen[a[h].AlbumID] && a[h].AlbumName && a[h].AlbumName.length) {
                g = GS.Models.Album.wrap({AlbumName:a[h].AlbumName,AlbumID:a[h].AlbumID,ArtistName:a[h].ArtistName,ArtistID:a[h].ArtistID,CoverArtFilename:a[h].CoverArtFilename}, true, "m_");
                g.IsVerified = 0;
                c.push(g);
                this.albumsSeen[a[h].AlbumID] = true
            }
            if (!this.artistsSeen[a[h].ArtistID]) {
                g =
                        GS.Models.Artist.wrap({ArtistName:a[h].ArtistName,ArtistID:a[h].ArtistID}, true, "m_");
                g.IsVerified = 0;
                b.push(g);
                this.artistsSeen[a[h].ArtistID] = true
            }
        }
        this._albums = this._albums.concat(c);
        this._artists = this._artists.concat(b)
    },_albums:[],_artists:[],loadGridMusic:function(a, b) {
        var c,g,h = [],k = [];
        g = {sortCol:"TSAdded",sortDir:0,padding:0,onInitSort:true};
        var m = this.element.find(".gs_grid.songs").controller();
        artistController = this.element.find(".gs_grid.artists").controller();
        albumController = this.element.find(".gs_grid.albums").controller();
        b = _.orEqual(b, false);
        g.padding = 0;
        g.rowCssClasses = function(n) {
            return n.isDeleted ? "strikethrough" : ""
        };
        if (GS.store.get("gs.sort.user.music"))g = $.extend(g, GS.store.get("gs.sort.user.music"));
        if (!m) {
            this.albumsSeen = {};
            this.artistsSeen = {};
            this._albums = [];
            this._artists = []
        }
        if (a) {
            this.buildAlbumsArtists(a);
            h = this._albums.concat();
            k = this._artists.concat()
        }
        $("#artistFilters").resizable({handles:{e:$("#artistFilter-resize")},minWidth:30,maxWidth:350,animate:false,resize:function() {
            $(window).resize()
        }});
        $("#albumFilters").resizable({handles:{e:$("#albumFilter-resize")},
            minWidth:30,maxWidth:350,animate:false,resize:function() {
                $(window).resize()
            }});
        c = GS.Models.Album.getFilterAll();
        h.push(c);
        c = GS.Models.Artist.getFilterAll();
        k.push(c);
        if (this.user.UserID != GS.user.UserID)g.scrollPane = "#page";
        if (m) {
            c = m.dataView;
            g = m.grid;
            m.data = m.data.concat(a);
            if (c) {
                c.beginUpdate();
                if (this.user.UserID == GS.user.UserID) {
                    albumController.dataView.beginUpdate();
                    artistController.dataView.beginUpdate()
                }
                if (b) {
                    c.setItems(a, "SongID");
                    if (this.user.UserID == GS.user.UserID) {
                        albumController.dataView.setItems(h,
                                "AlbumID");
                        artistController.dataView.setItems(k, "ArtistID")
                    }
                } else {
                    c.addItems(a, "SongID");
                    if (this.user.UserID == GS.user.UserID) {
                        albumController.dataView.addItems(h, "AlbumID");
                        artistController.dataView.addItems(k, "ArtistID")
                    }
                }
                c.endUpdate();
                if (this.user.UserID == GS.user.UserID) {
                    albumController.dataView.endUpdate();
                    artistController.dataView.endUpdate()
                }
                c.refresh();
                if (this.user.UserID == GS.user.UserID) {
                    albumController.dataView.refresh();
                    artistController.dataView.refresh()
                }
            }
            if (g) {
                g.onSort(m.sortCol, m.sortDir,
                        true);
                if (this.user.UserID == GS.user.UserID) {
                    albumController.grid.onSort(albumController.sortCol, albumController.sortDir, true);
                    artistController.grid.onSort(artistController.sortCol, artistController.sortDir, true)
                }
            }
        } else if (a && a.length)if (this.user.UserID == GS.user.UserID) {
            this.element.find(".grid").html(this.view("/user/music/musicGrid"));
            this.element.find(".gs_grid.songs").gs_grid(a, GS.Controllers.GridController.columns.song, g);
            this.element.find(".gs_grid.albums").gs_grid(h, GS.Controllers.GridController.columns.albumFilter,
                    {rowHeight:25,sortCol:"AlbumName",isFilter:true,padding:0,onInitSort:true}, "album");
            this.element.find(".gs_grid.artists").gs_grid(k, GS.Controllers.GridController.columns.artistFilter, {rowHeight:25,sortCol:"ArtistName",isFilter:true,padding:0,onInitSort:true}, "artist")
        } else this.element.find(".gs_grid.songs").gs_grid(a, GS.Controllers.GridController.columns.song, g); else {
            this.element.find(".grid").html(this.view("/user/music/noMusicResults"));
            $("#searchForm input").select();
            GS.resize()
        }
        this.subpage !==
                "favorites" && !this.user.library.songsLoaded && GS.user.UserID != this.UserID && this.user.library.getSongs(this.callback("loadGridMusic"), null, false);
        this.fixCollapsedState();
        if (this.subscribed && this.subpage !== "favorites") {
            this.subscribed = true;
            this.subscribe("gs.auth.library.update", this.callback("loadMyMusic"))
        } else if (this.subscribed) {
            this.subscribed = true;
            this.subscribe("gs.auth.favorites.songs.update", this.callback("loadMySongFavorites"))
        }
    },loadGridAlbums:function(a) {
        this.albumsSeen = {};
        this.artistsSeen =
        {};
        if (a) {
            this.buildAlbumsArtists(a);
            $("#grid").html("").css("height", "auto").addClass("albums");
            this.slickbox = $("#grid").slickbox({sortFunction:_.getSort("ArtistName", true),scrollPane:"#page_content",padding:10,itemRenderer:GS.Models.Album.itemRenderer,itemWidth:250,itemHeight:70,maxHorizontalGap:50,minHorizontalGap:10,verticalGap:20,dragAs:"album",dragItemID:"AlbumID"}, this._albums);
            this.sliderOrBoxDragSetup(this.slickbox, ".slickbox-item")
        }
    },playlists:function(a, b) {
        this.UserID = a;
        this.subpage = "playlists";
        this.objType = b;
        if (b === "subscribed") {
            if (GS.user.UserID == this.UserID) {
                this.user = GS.user;
                this.correctUrl(this.user, this.section, this.subpage, this.objType);
                this.loadMySubscribedPlaylists(GS.user)
            } else GS.Models.User.getUser(this.UserID, this.callback("loadSubscribedPlaylists"));
            this.subscribe("gs.auth.favorites.playlists.update", this.callback("loadGridSubscribedPlaylists"))
        } else if (GS.user.UserID == this.UserID) {
            this.user = GS.user;
            this.correctUrl(this.user, this.section, this.subpage);
            this.loadMyPlaylists();
            this.subscribe("gs.auth.playlists.update", this.callback("loadGridPlaylists"));
            this.subscribe("gs.auth.favorites.playlists.update", this.callback("loadGridPlaylists"))
        } else GS.Models.User.getUser(this.UserID, this.callback("loadPlaylists"));
        if (!GS.user.IsPremium)if (!this.adTimeoutID)this.adTimeoutID = setTimeout(this.callback(function() {
            GS.getAd().updateRotationCount();
            GS.getAd().buildAd($("#playlistCapital_160"), 160, 600, ["p=mymusic_playlists_" + (b ? b : "overview")]);
            this.adTimeoutID = null
        }), 100);
        GS.resize()
    },
    loadMyPlaylists:function() {
        this.user = GS.user;
        this.correctUrl(this.user, this.section, this.subpage);
        GS.Controllers.PageController.title(this.user.getTitle() + " - Playlists");
        this.element.html(this.view("/user/music/myPlaylists"));
        this.loadGridPlaylists()
    },loadMySubscribedPlaylists:function() {
        this.user = GS.user;
        this.correctUrl(this.user, this.section, this.subpage, this.objType);
        GS.Controllers.PageController.title(this.user.getTitle() + " - Subscribed Playlists");
        this.element.html(this.view("/user/music/myPlaylists"));
        this.loadGridSubscribedPlaylists()
    },loadPlaylists:function(a) {
        this.user = a;
        this.correctUrl(this.user, this.section, this.subpage);
        GS.Controllers.PageController.title(this.user.getTitle() + " - Playlists");
        this.element.html(this.view("/user/music/playlists"));
        this.user.getPlaylists(this.callback("loadGridPlaylists"));
        a.UserID != GS.user.UserID && this.loadDigests()
    },loadSubscribedPlaylists:function(a) {
        this.user = a;
        this.correctUrl(this.user, this.section, this.subpage, this.objType);
        GS.Controllers.PageController.title(this.user.getTitle() +
                " - Subscribed Playlists");
        this.element.html(this.view("/user/music/playlists"));
        this.user.getFavoritesByType("Playlists", this.callback("loadGridSubscribedPlaylists"));
        a.UserID != GS.user.UserID && this.loadDigests()
    },loadGridPlaylists:function() {
        if (this.user)if (this.subpage !== "subscribed") {
            var a = _.toArray(this.user.playlists),b,c;
            b = GS.store.get("gs.sort.user.playlists") || {sortCol:"TSAdded",sortDir:0,sortStoreKey:"gs.sort.user.playlists"};
            var g = this.element.find(".gs_grid.playlists").controller();
            b.disableMultiSelect =
                    true;
            if (this.user.UserID == GS.user.UserID) {
                b.scrollPane = "#page_content_pane";
                b.allowDropOn = true
            } else {
                b.scrollPane = "#page_content";
                b.allowDropOn = false
            }
            if (g) {
                b = g.dataView;
                c = g.grid;
                if (b) {
                    b.beginUpdate();
                    b.setItems(a, "PlaylistID");
                    b.endUpdate();
                    b.refresh()
                }
                c && c.onSort(g.sortCol, g.sortDir)
            } else if (a.length)this.element.find(".gs_grid.playlists").gs_grid(a, GS.Controllers.GridController.columns.playlist, b, "playlist"); else {
                this.element.find(".gs_grid.playlists").html(this.view("/user/music/noPlaylistResults"));
                $("#searchForm input").select();
                this.addAutocomplete("user");
                GS.resize()
            }
        }
    },loadGridSubscribedPlaylists:function() {
        if (!(!this.user || this.objType !== "subscribed")) {
            var a = _.toArray(this.user.favorites.playlists),b,c;
            b = GS.store.get("gs.sort.user.subscribed") || {sortCol:"TSFavorited",sortDir:0,sortStoreKey:"gs.sort.user.subscribed",scrollPane:"#page_content"};
            var g = this.element.find(".gs_grid").controller();
            if (b.sortCol == "TSAdded") {
                b.sortCol = "TSFavorited";
                GS.store.remove("gs.sort.user.subscribed")
            }
            if (g) {
                b =
                        g.dataView;
                c = g.grid;
                if (b) {
                    b.beginUpdate();
                    b.setItems(a, "PlaylistID");
                    b.endUpdate();
                    b.refresh()
                }
                c && c.onSort(g.sortCol, g.sortDir)
            } else if (a.length)this.element.find(".gs_grid.playlists").gs_grid(a, GS.Controllers.GridController.columns.playlist, b, "playlist"); else {
                this.element.find(".gs_grid.playlists").html(this.view("/user/music/noPlaylistResults"));
                $("#searchForm input").select();
                this.addAutocomplete("user");
                GS.resize()
            }
        }
    },fixCollapsedState:function() {
        var a = false,b,c,g;
        if (this.Class.hasOwnProperty("artistFiltersCollapse")) {
            b =
                    $("#artistFilters");
            _.forEach(this.Class.artistFiltersCollapse, function(h, k) {
                g = b.hasClass(k);
                if (h) {
                    if (!g) {
                        b.addClass(k);
                        a = true
                    }
                } else if (g) {
                    b.removeClass(k);
                    a = true
                }
            })
        }
        if (this.Class.hasOwnProperty("albumFiltersCollapse")) {
            c = $("#albumFilters");
            _.forEach(this.Class.albumFiltersCollapse, function(h, k) {
                g = c.hasClass(k);
                if (h) {
                    if (!g) {
                        c.addClass(k);
                        a = true
                    }
                } else if (g) {
                    c.removeClass(k);
                    a = true
                }
            })
        }
        a && GS.resize()
    },getSortMenu:function() {
        var a = this.setSort,b = [];
        this.subpage == "playlists" ? b.push({title:$.localize.getString("SORT_BY_DATE_ADDED"),
            action:{type:"fn",callback:function() {
                var c = "TSAdded";
                if (_.defined(GS.page.activePageParams.objType) && GS.page.activePageParams.objType == "subscribed")c = "TSFavorited";
                a(c, triggerElement, "SORT_BY_DATE_ADDED")
            }},customClass:"jj_menu_item_blank"}, {title:$.localize.getString("SORT_BY_NAME"),action:{type:"fn",callback:function() {
            a("PlaylistName", triggerElement, "SORT_BY_NAME")
        }},customClass:"jj_menu_item_blank"}) : b.push({title:$.localize.getString("SORT_BY_SONG"),action:{type:"fn",callback:function() {
            a("SongName",
                    triggerElement, "SORT_BY_SONG")
        }},customClass:"jj_menu_item_blank"}, {title:$.localize.getString("SORT_BY_ARTIST"),action:{type:"fn",callback:function() {
            a("ArtistName", triggerElement, "SORT_BY_ARTIST")
        }},customClass:"jj_menu_item_blank"}, {title:$.localize.getString("SORT_BY_ALBUM"),action:{type:"fn",callback:function() {
            a("AlbumName", triggerElement, "SORT_BY_ALBUM")
        }},customClass:"jj_menu_item_blank"}, {title:$.localize.getString("SORT_BY_DATE_ADDED"),action:{type:"fn",callback:function() {
            a("TSAdded", triggerElement,
                    "SORT_BY_DATE_ADDED")
        }},customClass:"jj_menu_item_blank"}, {title:$.localize.getString("SORT_BY_TRACK_NUM"),action:{type:"fn",callback:function() {
            a("TrackNum", triggerElement, "SORT_BY_TRACK_NUM")
        }},customClass:"jj_menu_item_blank"});
        return b
    },"#page_header a[name=delete] click":function() {
        var a = $("#grid").controller();
        if (a) {
            var b = a.grid.getSelectedRows(),c,g,h;
            if (b.length !== 0) {
                g = 0;
                for (h = b.length; g < h; g++) {
                    $("#grid").find(".slick-row[row=" + b[g] + "]").addClass("strikethrough");
                    if (c = a.dataView.rows[b[g]])this.subpage ===
                            "favorites" ? GS.user.removeFromSongFavorites(c.SongID) : GS.user.removeFromLibrary(c.SongID)
                }
                a.grid.setSelectedRows([]);
                a.selectedRowIDs = [];
                $.publish("gs.grid.selectedRows", {len:0})
            }
        }
    },"#page_header button.newPlaylist, a.newPlaylist click":function() {
        GS.getLightbox().open("newPlaylist")
    },".slick-row .playlist .subscribe click":function(a) {
        var b = a.attr("rel");
        b = GS.Models.Playlist.getOneFromCache(b);
        if (a.is(".subscribed")) {
            b.unsubscribe();
            a.removeClass("subscribed").find("a.subscribe span").text("Subscribe")
        } else {
            b.subscribe();
            a.addClass("subscribed").find("a.subscribe span").text("Unsubscribe")
        }
    },".capitalSliderBtnRev click":function(a) {
        a = $(a);
        $(a).hasClass("capitalSliderDown") ? $("#page_wrapper .capitalView_160").animate({scrollTop:$("#page_wrapper .capitalView_160").scrollTop() + 200}, 500) : $("#page_wrapper .capitalView_160").animate({scrollTop:$("#page_wrapper .capitalView_160").scrollTop() - 200}, 500)
    }});
GS.Controllers.PageController.extend("GS.Controllers.Page.PlaylistController", {}, {type:"playlist",index:function(a, b, c) {
    this.url = location.hash;
    this.id = parseInt(a, 10) || 0;
    this.subpage = b || "music";
    this.playOnView = c || false;
    this.subscribe("gs.auth.favorites.playlists.update", this.callback("onPlaylistsUpdate"));
    this.subscribe("gs.playlist.view.update", this.callback("onPlaylistUpdate"));
    GS.Models.Playlist.getPlaylist(this.id, this.callback("loadPlaylist"))
},loadPlaylist:function(a) {
    this.playlist = a;
    if (a.PlaylistID ===
            0)GS.router.notFound(); else {
        if (!this.playlist.fanbase)this.playlist.fanbase = GS.Models.Fanbase.wrap({objectID:a.PlaylistID,objectType:"playlist",userIDs:[]});
        this.correctUrl(this.playlist, this.subpage === "music" ? "" : this.subpage);
        this.fbUrl = "http://grooveshark.com/" + this.playlist.toUrl().replace("#/", "");
        this.list.doPlayAddSelect = true;
        this.list.doSearchInPage = true;
        this.list.sortOptions = [
            {text:"Popularity",column:"Popularity"},
            {text:"Song Name",column:"Name"},
            {text:"Favorite",column:"Favorite"},
            {text:"Artist Name",
                column:"ArtistName"},
            {text:"Album Name",column:"AlbumName"}
        ];
        this.list.useGrid = true;
        this.element.html(this.view("index"));
        console.warn();
        this.playlist && GS.user.playlists[this.playlist.PlaylistID] && $("#application").width() > GS.page.SMALL_APP_LIMIT && GS.getSidebar().show();
        switch (this.subpage) {
            case "subscribers":
                GS.Controllers.PageController.title(this.playlist.getTitle() + " - subscribers");
                this.playlist.fanbase.getFans(this.callback("loadGridFans"));
                this.playlist.getSongs(this.callback(["updatePlaylistArt",
                    "loadDigestAlbums"]));
                break;
            case "albums":
                this.playlist.getSongs(this.callback(["loadGridAlbums","updatePlaylistArt"]));
                this.playlist.fanbase.getFans(this.callback("loadDigestFans"), null, false);
                break;
            default:
                GS.Controllers.PageController.title(this.playlist.getTitle());
                this.playlist.getSongs(this.callback(["loadGrid","updatePlaylistArt","loadDigestAlbums"]));
                this.playlist.fanbase.getFans(this.callback("loadDigestFans"), null, false);
                break
        }
        this.updatePlaylistProps(this.playlist);
        GS.Models.User.getUser(this.playlist.UserID,
                this.callback("loadUserPlaylists"));
        GS.user.IsPremium || GS.getAd().buildAd($("#playlistCapital_300"), 300, 250, ["p=playlist_" + this.subpage]);
        GS.Controllers.PageController.confirmMessage = $.localize.getString("ONCLOSE_SAVE_PLAYLIST")
    }
},onPageLoaded:function() {
    this.id > 0 && setTimeout(this.callback(function() {
        if ($("#page_content_social_buttons").length) {
            var a = this.callback(function() {
                $("#page_content_social_buttons .fblike").css("width", this.likeWidth);
                this.loadLikeButtonCount(this.fbUrl);
                FB.XFBML.parse(window.document.getElementById("fbLike"),
                        this.callback(function() {
                            $("#page_content_social_buttons .fblike").css("width", this.likeWidth)
                        }))
            });
            if (window.FB && FB.XFBML)a(); else {
                var b = function() {
                    $.unsubscribe(["gs.facebook.xfbml.ready",b]);
                    a()
                };
                this.subscribe("gs.facebook.xfbml.ready", b)
            }
            GS.getTwitter().getTwitterShareMessage("playlist", this.playlist, this.fbUrl, this.callback(function(c, g) {
                var h = $(document.createElement("a"));
                h.attr("data-text", c.replace('"', '"'));
                h.attr("data-url", g);
                h.attr("data-via", "grooveshark");
                h.attr("data-count", "none");
                h.addClass("twitter-share-button");
                h.text("Tweet");
                $("#page_content_social_buttons .tweetButton").empty().append(h);
                GS.getTwitter().parseWidgets()
            }), true);
            GS.getGoogle().parsePlusWidgets($("#page_content_social_buttons .googlePlusButton").get(0))
        }
    }), 10)
},updatePlaylistProps:function(a) {
    if (!(!this.playlist || this.playlist.PlaylistID !== a.PlaylistID)) {
        if (this.playlist.hasUnsavedChanges) {
            $("button.save", this.element).show();
            $("button.undo", this.element).show()
        } else {
            $("button.save", this.element).hide();
            $("button.undo", this.element).hide()
        }
        this.playlist.isDeleted ? $("#page_content_profile_title").addClass("deleted") : $("#page_content_profile_title").removeClass("deleted")
    }
},onPlaylistUpdate:function(a) {
    if (!(!this.playlist || this.playlist.PlaylistID !== a.PlaylistID)) {
        this.updatePlaylistProps(a);
        this.updatePlaylistArt();
        this.subpage == "music" && this.playlist.getSongs(this.callback("loadGrid"))
    }
},onPlaylistsUpdate:function() {
    this.playlist && GS.user.playlists[this.playlist.PlaylistID] && $("#application").width() >
            GS.page.SMALL_APP_LIMIT && GS.getSidebar().show()
},updatePlaylistArt:function() {
    this.playlist.images = this.playlist.getPlaylistArt(200);
    this.element.find("#profile_playlistImage").html(this.view("/playlist/playlistArt", {playlist:this.playlist}))
},loadGrid:function(a) {
    if (this.subpage === "music") {
        var b = {sortCol:"Sort",sortDir:1,sortStoreKey:"gs.sort.playlist.songs"},c = this.element.find(".gs_grid").controller();
        if (c) {
            a = c.dataView;
            b = c.grid;
            if (a) {
                var g,h,k,m = this.playlist.songs.concat(),n = a.getItems().concat();
                a.beginUpdate();
                for (k = 0; k < n.length; k++) {
                    g = n[k];
                    h = m.indexOf(g);
                    h != -1 && m.splice(h, 1);
                    a.getIdxById(g.GridKey);
                    h = this.playlist.songs.indexOf(g);
                    h == -1 ? a.deleteItem(g.GridKey) : a.updateItem(g.GridKey, g)
                }
                m.length && a.addItems(m, "GridKey");
                a.endUpdate();
                a.refresh()
            }
            b && b.onSort(c.sortCol, c.sortDir)
        } else {
            if (GS.user.UserID === this.playlist.UserID) {
                b.allowDragSort = true;
                b.allowDuplicates = true;
                b.playlistID = this.playlist.PlaylistID
            }
            if (a.length) {
                this.playOnView && this.playlist.play({playOnAdd:true});
                b.scrollPane = $("#page");
                b.rowCssClasses = function(q) {
                    return q.isDeleted ? "strikethrough" : ""
                };
                $(".grid").unbind("dropend");
                this.element.find(".gs_grid").gs_grid(a, GS.Controllers.GridController.columns.playlistsong, b, "song", "GridKey")
            } else {
                this.element.find(".gs_grid").html(this.view("noResults"));
                $("#searchForm input").select();
                this.addAutocomplete("playlist");
                GS.resize();
                var o = this;
                $(".grid").bind("dropend", function(q, v) {
                    if ($("#grid").controller())return false;
                    var x = [],A,u,C = v.draggedItems;
                    if (typeof C[0].SongID !== "undefined")for (A =
                                                                        0; A < C.length; A++)x.push(C[A].SongID); else if (typeof C[0].PlaylistID !== "undefined")for (A = 0; A < C.length; A++)C[A].getSongs(function(F) {
                        for (u = 0; u < F.length; u++)x.push(F[u].SongID)
                    }, null, false, {async:false});
                    x.length && o.playlist.addSongs(x)
                })
            }
            $(window).resize()
        }
        this.onPageLoaded()
    }
},loadGridAlbums:function() {
    if (this.subpage === "albums") {
        var a = {sortCol:"Sort",sortDir:1},b = this.element.find(".gs_grid").controller();
        if (b) {
            a = b.dataView;
            var c = b.grid;
            if (a) {
                a.beginUpdate();
                a.endUpdate();
                a.refresh()
            }
            c && c.onSort(b.sortCol,
                    b.sortDir)
        } else {
            b = _.toArray(this.playlist.albums);
            if (b.length) {
                a.scrollPane = $("#page");
                this.element.find(".gs_grid").gs_grid(b, GS.Controllers.GridController.columns.album, a, "album")
            } else this.element.find(".gs_grid").html(this.view("noResults"));
            GS.resize()
        }
        this.onPageLoaded()
    }
},loadUserPlaylists:function(a) {
    this.user = a;
    this.user.getPlaylists(this.callback("loadDigestPlaylists"))
},loadDigestPlaylists:function(a) {
    var b = this.playlist;
    a = _.toArray(this.user.playlists).sort(GS.Models.Playlist.prettySort).slice(0,
            6).filter(function(c) {
                return b.PlaylistID != c.PlaylistID
            });
    a.length && $("#playlist_digest").html(this.view("/user/playlist_digest", {playlists:a,user:this.user}))
},loadDigestAlbums:function() {
    if (this.playlist && this.playlist.albums) {
        var a = _.toArray(this.playlist.albums).sort(GS.Models.Album.prettySort).slice(0, 7);
        a.length > 1 && $("#album_digest").html(this.view("album_digest", {playlist:this.playlist,albums:a}))
    }
},loadDigestFans:function(a) {
    if (a) {
        var b = [];
        for (var c in a)if (a.hasOwnProperty(c)) {
            if (b.length >=
                    18)break;
            a[c].Picture && b.push(a[c])
        }
        this.songFans = b;
        this.sidebarFans = true;
        $("#subscriber_digest").html(this.view("subscriber_digest"));
        this.loadSubFans && $("#song_subcontent").removeClass("loading").html(this.view("song_fans_large"))
    }
},loadGridFans:function(a) {
    if (this.subpage === "subscribers") {
        var b = GS.store.get("gs.sort.playlist.fans") || {sortCol:"Name",sortDir:1,sortStoreKey:"gs.sort.playlist.fans"};
        if (a.length)this.element.find(".gs_grid").gs_grid(a, GS.Controllers.GridController.columns.user, b, "user");
        else {
            this.element.find(".gs_grid").html(this.view("/shared/noResults", {type:"subscribers"}));
            this.addAutocomplete("users")
        }
        GS.resize();
        this.onPageLoaded()
    }
},getSortMenu:function() {
    var a = this.setSort;
    return[
        {title:$.localize.getString("SORT_BY_PLAYLIST"),action:{type:"fn",callback:function() {
            a("Sort", triggerElement, "SORT_BY_PLAYLIST")
        }},customClass:"jj_menu_item_blank"},
        {title:$.localize.getString("SORT_BY_SONG"),action:{type:"fn",callback:function() {
            a("SongName", triggerElement, "SORT_BY_SONG")
        }},customClass:"jj_menu_item_blank"},
        {title:$.localize.getString("SORT_BY_ARTIST"),action:{type:"fn",callback:function() {
            a("ArtistName", triggerElement, "SORT_BY_ARTIST")
        }},customClass:"jj_menu_item_blank"},
        {title:$.localize.getString("SORT_BY_ALBUM"),action:{type:"fn",callback:function() {
            a("AlbumName", triggerElement, "SORT_BY_ALBUM")
        }},customClass:"jj_menu_item_blank"}
    ]
},getOptionMenu:function() {
    var a = [],b = this.getOptionsSubMenu();
    playlistID = this.playlist.PlaylistID;
    if (GS.user.UserID == this.playlist.UserID)for (var c = 0; c < b.length; ++c)a.push(b[c]);
    if (this.playlist.PlaylistID > 0) {
        GS.user.UserID == this.playlist.UserID && a.push({customClass:"separator"});
        a.push({title:$.localize.getString("SHARE_PLAYLIST"),type:"sub",action:{type:"fn",callback:this.playlist.getClipboardAction([
            {text:"http://grooveshark.com/" + this.playlist.toUrl().replace("#/", ""),selector:"div.playlistUrl"}
        ])},src:this.playlist.getShareMenu(),customClass:"jj_menu_item_hasIcon jj_menu_item_share jj_menu_item_more"})
    }
    return a
},getOptionsSubMenu:function() {
    var a = this.playlist,b = this.playlist.PlaylistID,
            c = this.playlist.PlaylistName,g = [];
    if (a.UserID == GS.user.UserID) {
        g.push({title:$.localize.getString("PLAYLIST_RENAME"),action:{type:"fn",callback:function() {
            GS.getLightbox().open("renamePlaylist", b)
        }},customClass:"jj_menu_item_hasIcon jj_menu_item_edit"});
        a.isDeleted ? g.push({title:$.localize.getString("PLAYLIST_RESTORE"),action:{type:"fn",callback:function() {
            a.restore()
        }},customClass:"jj_menu_item_hasIcon jj_menu_item_undo"}) : g.push({title:$.localize.getString("PLAYLIST_DELETE"),action:{type:"fn",callback:function() {
            GS.getLightbox().open({type:"deletePlaylist",
                view:{header:"POPUP_DELETE_PLAYLIST_TITLE",messageHTML:(new GS.Models.DataString($.localize.getString("POPUP_DELETE_PLAYLIST_MESSAGE"), {playlist:c})).render(),buttonsLeft:[
                    {className:"close",label:"CANCEL"}
                ],buttonsRight:[
                    {className:"submit",label:"DELETE"}
                ]},callbacks:{"button.submit":function() {
                    a.remove()
                }}})
        }},customClass:"jj_menu_item_hasIcon jj_menu_item_delete"})
    }
    GS.user.isShortcut("playlist", a.PlaylistID) ? g.push({title:$.localize.getString("CONTEXT_REMOVE_FROM_PINBOARD"),action:{type:"fn",
        callback:function() {
            GS.user.removeFromShortcuts("playlist", a.PlaylistID)
        }},customClass:"jj_menu_item_hasIcon jj_menu_item_pinboard"}) : g.push({title:$.localize.getString("CONTEXT_ADD_TO_PINBOARD"),action:{type:"fn",callback:function() {
        GS.user.addToShortcuts("playlist", a.PlaylistID, a.PlaylistName)
    }},customClass:"jj_menu_item_hasIcon jj_menu_item_pinboard"});
    return g
},getSongsIDsFromSelectedGridRows:function() {
    var a = this.element.find(".gs_grid:last").controller(),b = [],c;
    if (a && a.selectedRowIDs.length >
            0)for (c = 0; c < a.selectedRowIDs.length; c++) {
        var g = this.playlist.gridKeyLookup[a.selectedRowIDs[c]];
        g && b.push(g.SongID)
    } else if (a)for (c = 0; c < a.dataView.rows.length; c++)b.push(a.dataView.rows[c].SongID);
    return b
},"#page_header .dropdownButton.opts click":function(a, b) {
    a.jjmenu(b, this.getOptionsMenu(), null, {xposition:"left",yposition:"auto",show:"default",className:"contextmenu",keepState:a})
},".page_controls button.deleteSongs click":function() {
    var a = this.element.find(".gs_grid:last").controller(),b = [],
            c;
    if (a && a.selectedRowIDs.length > 0)for (c = 0; c < a.selectedRowIDs.length; c++) {
        var g = this.playlist.gridKeyLookup[a.selectedRowIDs[c]];
        g && b.push(this.playlist.songs.indexOf(g))
    }
    b.length && this.playlist.removeSongs(b)
},"button.save click":function() {
    this.playlist.save()
},"button.undo click":function() {
    this.playlist.undo()
},"#playlist_options a.editPlaylist click":function(a, b) {
    b.preventDefault();
    GS.getLightbox().open("renamePlaylist", this.playlist.PlaylistID)
},"#playlist_options a.subscribePlaylist click":function(a, b) {
    b.preventDefault();
    GS.user.addToPlaylistFavorites(this.playlist.PlaylistID);
    a.addClass("unsubscribePlaylist").removeClass("subscribePlaylist").localeDataString("PLAYLIST_UNSUBSCRIBE")
},"#playlist_options a.unsubscribePlaylist click":function(a, b) {
    b.preventDefault();
    GS.user.removeFromPlaylistFavorites(this.playlist.PlaylistID);
    a.addClass("subscribePlaylist").removeClass("unsubscribePlaylist").localeDataString("PLAYLIST_SUBSCRIBE")
},"#playlist_options a.sharePlaylist click":function(a, b) {
    b.preventDefault();
    GS.getLightbox().open("share", {id:this.playlist.PlaylistID,type:"playlist",service:"email"})
},"#playlist_options a.pinPlaylist click":function(a, b) {
    b.preventDefault();
    GS.user.addToShortcuts("playlist", this.playlist.PlaylistID, this.playlist.PlaylistName);
    a.addClass("unpinPlaylist").removeClass("pinPlaylist").localeDataString("CONTEXT_REMOVE_FROM_PINBOARD")
},"#playlist_options a.unpinPlaylist click":function(a, b) {
    b.preventDefault();
    GS.user.removeFromShortcuts("playlist", this.playlist.PlaylistID);
    a.addClass("pinPlaylist").removeClass("unpinPlaylist").localeDataString("CONTEXT_ADD_TO_PINBOARD")
}});
GS.Controllers.PageController.extend("GS.Controllers.Page.SearchController", {cache:{}}, {defaultType:"song",validTypes:{song:true,playlist:true,user:true,event:true,album:true,artist:true},query:"",type:"",ppOverride:false,originalUsers:null,searchUsers:null,startTimes:{},currentFilterStr:null,currentSort:null,prefetchSize:3,displayMethod:"grid",index:function(a, b) {
    this.ppOverride = _.orEqual(GS.user.searchVersion, false);
    if (b.indexOf("ppVersion:", 0) === 0) {
        var c = b.split(/\s+/);
        this.ppOverride = c[0].split(":")[1];
        b = c.splice(1, c.length).join(" ")
    }
    this.query = _.orEqual(b, "").replace(/\s+/g, " ");
    this.cleanQuery = _.cleanText(this.query);
    if ((this.type = _.orEqual(a, "song")) && !this.validTypes[this.type])this.type = this.defaultType;
    GS.search.lastSearch = GS.search.search;
    GS.search.lastType = GS.search.type;
    GS.search.search = this.query;
    (GS.search.type = this.type) ? GS.Controllers.PageController.title("All " + _.ucwords(this.type) + " Results: " + this.query) : GS.Controllers.PageController.title("Search: " + this.query);
    this.displayMethod =
            _.orEqual(GS.store.get("searchDisplay"), "grid");
    this.element.html(this.view("index"));
    this.element.find("input:first").focus();
    if (this.query === "") {
        this.element.find(".gs_grid." + (a + "s")).html(this.view("noResults"));
        $(".gs_grid input[name=q]", this.element).val(this.query);
        $("#searchForm input").select();
        this.addAutocomplete("search");
        GS.resize();
        GS.getGuts().logEvent("search", {type:this.type || "song",searchString:this.query,searchTime:0,numResults:0});
        GS.getGuts().beginContext({mostRecentSearch:this.query,
            mostRecentSearchType:this.type || "song",mostRecentSearchVersion:""})
    } else {
        $("#page_search a.remove").removeClass("hide");
        $.localize.ready ? this.detectRadio() : this.subscribe("gs.locale.ready", this.callback(function() {
            this.detectRadio()
        }));
        $.publish("gs.page.loading.grid");
        this.startTimes.song = (new Date).getTime();
        this.getResults(false, this.type || "song", this.callback(function() {
            var g = (new Date).getTime();
            this.startTimes.artist = g;
            this.startTimes.album = g;
            this.startTimes.playlist = g;
            this.startTimes.user =
                    g;
            this.getResults(this.callback(function(h) {
                $("#page_nav_option_artist .count").text(h ? h.length : 0);
                this.artists = h && h.length ? h.slice(0, 3) : [];
                $("#searchArtists").html(this.view("topArtists"));
                if (!GS.user.IsPremium) {
                    h = ["q=" + this.query,"t=" + (this.type || "song"),"p=search_" + this.type];
                    this.artists && this.artists[0] && h.push("7=" + this.artists[0].ArtistID, "8=" + this.artists[0].ArtistName);
                    GS.getAd().updateRotationCount();
                    GS.getAd().buildAd($("#searchCapital_300"), 300, 250, h)
                }
            }), "artist");
            this.type != "artist" &&
            this.getResults(this.callback(function(h) {
                this.artists = h && h.length ? h.slice(0, 3) : [];
                $("#profile_artists").html(this.view("topArtists"))
            }), "artist");
            this.type != "album" && this.getResults(this.callback(function(h) {
                this.albums = h && h.length ? h.slice(0, 3) : [];
                $("#profile_albums").html(this.view("topAlbums"))
            }), "album");
            this.type != "playlist" && this.getResults(this.callback(function(h) {
                this.playlists = h && h.length ? h.slice(0, 3) : [];
                $("#profile_playlists").html(this.view("topPlaylists"))
            }), "playlist");
            this.type != "user" &&
            this.getResults(this.callback(function(h) {
                h.sort(this.sortByPicture);
                this.users = h && h.length ? h.slice(0, 3) : [];
                $("#profile_users").html(this.view("topUsers"))
            }), "user");
            this.type != "event" && this.getResults(this.callback(function(h) {
                this.events = h && h.length ? h.slice(0, 3) : [];
                $("#profile_events").html(this.view("topEvents"))
            }), "event");
            this.suggest()
        }), true)
    }
},getResults:function(a, b, c, g) {
    var h = this.type,k = "",m = this.callback(function(n, o, q) {
        if (n === this.query) {
            var v,x;
            n = {sortCol:"Score",sortDir:0};
            GS.Controllers.Page.SearchController.cache[o] =
                    q;
            if ($.isArray(q.result)) {
                if ($.isArray(h) && h.length === 1)h = h[0];
                h = h.substring(0, h.length - 1);
                x = h == "playlist" ? GS.Models[_.ucwords(h)].wrapCollection(q.result, {ppVersion:""}, null, null, false) : GS.Models[_.ucwords(h)].wrapCollection(q.result, {ppVersion:""})
            }
            if (x && x.length) {
                h = h.toLowerCase();
                if (h === "song") {
                    v = GS.Controllers.GridController.columns.song.concat();
                    v = [v[0],v[1],v[2]];
                    for (var A = [],u = 0; u < x.length && u < this.prefetchSize; u++)A.push(x[u].SongID);
                    GS.player.prefetchStreamKeys(A)
                } else {
                    v = GS.Controllers.GridController.columns[h];
                    if (h === "event") {
                        n = {sortCol:"StartTime",sortDir:1,rowCssClasses:function() {
                            return"event"
                        }};
                        for (A = 0; A < x.length; A++) {
                            x[A].EventID = A;
                            x[A].StartTime = parseInt(x[A].StartTime);
                            if (x[A].StartTime)x[A].StartTime = (new Date(x[A].StartTime * 1E3)).format("Y-m-d G:i:s");
                            x[A].ArtistName = x[A].ArtistName || x[A].Artists
                        }
                    }
                }
                if ($.isFunction(a))a(x, o); else {
                    this.items = x;
                    this.options = n;
                    this.columns = v;
                    this.displayResults(this.displayMethod)
                }
            } else if ($.isFunction(a))a(x, o); else {
                o = (new Date).getTime() - this.startTimes[h.toLowerCase()];
                h = this.type ? this.type + "s" : "songs";
                this.element.find(".gs_grid." + h.toLowerCase()).html(this.view("noResults"));
                this.addAutocomplete("search");
                GS.resize()
            }
            if (g) {
                o = (new Date).getTime() - this.startTimes[h];
                GS.search.version = q.version;
                GS.search.server = _.orEqual(q.server, "not set");
                GS.getGuts().logEvent("search", {type:this.type || "song",searchString:this.query,searchVersion:q.version,searchTime:o,numResults:x.length});
                GS.getGuts().beginContext({mostRecentSearch:this.query,mostRecentSearchType:this.type ||
                        "song",mostRecentSearchVersion:q.version});
                GS.getGuts().handlePageLoad("search", {type:this.type || "song"})
            }
            if (this.type == "song" && h == "song" && !GS.user.searchVersion)GS.user.searchVersion = q.assignedVersion;
            $.isFunction(c) && c()
        }
    });
    h = _.orEqual(b, h);
    h = $.isArray(h) ? h : _.ucwords(h) + "s";
    k = h + ":" + this.query + ":" + this.ppOverride;
    GS.Controllers.Page.SearchController.cache[k] ? m(this.query, k, GS.Controllers.Page.SearchController.cache[k]) : GS.service.getResultsFromSearch(this.query, h, this.ppOverride, this.callback(m,
            this.query, k), this.callback(m, this.query, k))
},displayResults:function(a) {
    if (a != this.displayMethod)if (this.displayMethod == "grid") {
        $("#grid").controller().destroy();
        $("#grid").addClass("gs_grid")
    } else if (this.displayMethod == "slickbox") {
        this.slickbox.destroy();
        this.slickbox = null
    }
    if (this.type == "song" || this.type == "event" || this.type == "" || a == "grid") {
        this.options.scrollPane = $("#page");
        this.options.padding = 0;
        if (this.type === "user") {
            this.items = this.items.sort(this.sortByPicture);
            this.options.sortCol = false
        } else if (this.type ===
                "artist" || this.type == "event")this.options.disableMultiSelect = true;
        this.element.find("#grid").gs_grid(this.items, this.columns, this.options, this.type)
    } else this.type == "user" ? this.renderSlickBox(this.type, this.items, {sortType:"byPicture",sortFunction:this.sortByPicture}) : this.renderSlickBox(this.type, this.items, this.currentSort);
    this.displayMethod = a
},suggest:function() {
    if ($("#page_content").is(".search")) {
        if (!window.google)window.google = {};
        if (!window.google.ac)window.google.ac = {};
        window.google.ac.h =
                this.callback(function(a) {
                    var b = false;
                    if (a[1].length > 0) {
                        a = a[1];
                        b = a[0][0].replace(/\s(lyrics.*)$/, "")
                    }
                    b && this.suggestSuccess("eg", b)
                });
        $.ajax({url:"http://google.com/complete/search?output=json&q=" + this.query + " lyrics",dataType:"jsonp",jsonp:false,jsonpCallback:"window.google.ac.h",success:function() {
        },error:function() {
        }})
    }
},suggestSuccess:function(a, b) {
    if ((b = $.trim(b)) && $.trim(this.query).toLowerCase() !== b) {
        this.querySuggest = b;
        this.suggestSource = a;
        $("#didYouMean a").text(b).attr("title", b).data({searchquery:b,
            searchtype:this.type ? this.type : ""});
        $("#page_subheader").removeClass("hide");
        GS.resize();
        GS.getGuts().gaTrackEvent("search", "suggest", this.suggestSource);
        GS.getGuts().logEvent("suggest", {suggest:this.querySuggest,source:this.suggestSource,numSongs:$("#grid").controller().dataView.rows.length})
    }
},".didYouMean a.remove click":function() {
    $("#page_subheader").remove();
    GS.resize()
},".didYouMean a click":function() {
    var a = $("#grid").controller();
    a = a && a.dataView ? a.dataView.rows.length : 0;
    GS.getGuts().gaTrackEvent("search",
            "suggestClick", this.suggestSource, a);
    GS.getGuts().logEvent("suggestClick", {suggest:this.querySuggest,source:this.suggestSource,numSongs:a})
},detectRadio:function() {
    if ($("#page_content").is(".search")) {
        var a = GS.Models.Station.getStationByName(this.query.toLowerCase());
        if (a) {
            var b = new GS.Models.DataString;
            b.string = $.localize.getString("SEARCH_START_RADIO");
            b.data = {name:$.localize.getString(a.StationTitle)};
            $("#page_content_pane .radio_suggestion").removeClass("hide");
            $("#page_content_pane .radio_suggestion a.startRadio").attr("rel",
                    a.StationID).html("<span>" + b.render() + "</span>")
        }
    }
},".radio_suggestion a.startRadio click":function(a) {
    GS.player.setAutoplay(true, a.attr("rel"))
},renderSlickBox:function(a, b, c) {
    switch (a) {
        case "user":
            this.currentFilterStr = this.query;
            this.originalUsers = b.concat();
            this.renderUsers(this.originalUsers, c);
            break;
        case "playlist":
            this.renderPlaylists(b, c);
            break;
        case "album":
            this.renderAlbums(b, c);
            break;
        case "artist":
            this.renderArtists(b, c);
            break
    }
},renderAlbums:function(a, b) {
    this.currentSort = _.orEqual(b, {sortType:"relevance",
        sortFunction:null});
    $("#grid").html("").css("height", "auto").addClass("albums");
    this.slickbox = $("#grid").slickbox({sortFunction:this.currentSort.sortFunction,scrollPane:"#page",padding:0,itemRenderer:GS.Models.Album.itemRenderer,itemWidth:250,itemHeight:70,maxHorizontalGap:50,minHorizontalGap:10,verticalGap:15,dragAs:"album",dragItemID:"AlbumID"}, a);
    this.sliderOrBoxDragSetup(this.slickbox, ".slickbox-item")
},renderPlaylists:function(a, b) {
    this.currentSort = _.orEqual(b, {sortType:"relevance",sortFunction:null});
    $("#grid").html("").css("height", "auto").addClass("playlistList");
    this.slickbox = $("#grid").slickbox({sortFunction:this.currentSort.sortFunction,scrollPane:"#page",padding:0,itemRenderer:GS.Models.Playlist.itemRenderer,itemWidth:250,itemHeight:70,maxHorizontalGap:50,minHorizontalGap:10,verticalGap:15,dragAs:"playlist",dragItemID:"PlaylistID"}, a);
    this.sliderOrBoxDragSetup(this.slickbox, ".slickbox-item")
},renderArtists:function(a, b) {
    this.currentSort = _.orEqual(b, {sortType:"relevance",sortFunction:null});
    $("#grid").html("").css("height", "auto").addClass("artistList");
    this.slickbox = $("#grid").slickbox({sortFunction:this.currentSort.sortFunction,scrollPane:"#page",padding:0,itemRenderer:GS.Models.Artist.itemRenderer,itemWidth:250,itemHeight:70,maxHorizontalGap:50,minHorizontalGap:10,verticalGap:15,dragAs:"artist",dragItemID:"ArtistID"}, a);
    this.sliderOrBoxDragSetup(this.slickbox, ".slickbox-item")
},renderUsers:function(a, b) {
    this.currentSort = _.orEqual(b, {sortType:"relevance",sortFunction:null});
    var c =
            $("body").width() <= 1024 || $("body").height() <= 800;
    $("#grid").html("").css("height", "auto").addClass("userlist");
    this.slickbox = $("#grid").slickbox({sortFunction:this.currentSort.sortFunction,scrollPane:"#page",padding:0,listClass:c ? "smallUserView" : "",itemRenderer:GS.Models.User.itemRenderer,itemWidth:c ? 175 : 130,itemHeight:c ? 50 : 185,maxHorizontalGap:50,minHorizontalGap:20,verticalGap:15}, a)
},getSortMenu:function() {
    switch (this.type) {
        case "song":
            return this.getSongSortMenu();
        case "playlist":
            return this.getPlaylistSortMenu();
        case "user":
            return this.getUserSortMenu();
        case "event":
            return this.getEventSortMenu();
        case "album":
        case "artist":
            return this.getArtistAlbumSortMenu();
        default:
            return[]
    }
},getSongSortMenu:function() {
    var a = this.setSort;
    return[
        {title:$.localize.getString("SORT_BY_RELEVANCE"),action:{type:"fn",callback:function() {
            a("Rank", triggerElement, "SORT_BY_RELEVANCE")
        }},customClass:"jj_menu_item_blank"},
        {title:$.localize.getString("SORT_BY_SONG"),action:{type:"fn",callback:function() {
            a("SongName", triggerElement, "SORT_BY_SONG")
        }},
            customClass:"jj_menu_item_blank"},
        {title:$.localize.getString("SORT_BY_ARTIST"),action:{type:"fn",callback:function() {
            a("ArtistName", triggerElement, "SORT_BY_ARTIST")
        }},customClass:"jj_menu_item_blank"},
        {title:$.localize.getString("SORT_BY_ALBUM"),action:{type:"fn",callback:function() {
            a("AlbumName", triggerElement, "SORT_BY_ALBUM")
        }},customClass:"jj_menu_item_blank"},
        {title:$.localize.getString("SORT_BY_POPULARITY"),action:{type:"fn",callback:function() {
            a("Popularity", triggerElement, "SORT_BY_POPULARITY")
        }},
            customClass:"jj_menu_item_blank"}
    ]
},getPlaylistSortMenu:function() {
    var a = this.setSort;
    return[
        {title:$.localize.getString("SORT_BY_RELEVANCE"),action:{type:"fn",callback:function() {
            a("Rank", triggerElement, "SORT_BY_RELEVANCE")
        }},customClass:"jj_menu_item_blank"},
        {title:$.localize.getString("SORT_BY_NAME"),action:{type:"fn",callback:function() {
            a("PlaylistName", triggerElement, "SORT_BY_NAME")
        }},customClass:"jj_menu_item_blank"}
    ]
},getEventSortMenu:function() {
    var a = this.setSort;
    return[
        {title:$.localize.getString("SORT_BY_SOONEST_DATE"),
            action:{type:"fn",callback:function() {
                a("StartTime", triggerElement, "SORT_BY_SOONEST_DATE")
            }},customClass:"jj_menu_item_blank"},
        {title:$.localize.getString("SORT_BY_RELEVANCE"),action:{type:"fn",callback:function() {
            a("Rank", triggerElement, "SORT_BY_RELEVANCE")
        }},customClass:"jj_menu_item_blank"}
    ]
},getUserSortMenu:function() {
    var a = this.setSort;
    return[
        {title:$.localize.getString("SORT_BY_RELEVANCE"),action:{type:"fn",callback:function() {
            a("Rank", triggerElement, "SORT_BY_RELEVANCE")
        }},customClass:"jj_menu_item_blank"},
        {title:$.localize.getString("SORT_BY_NAME"),action:{type:"fn",callback:function() {
            a("Name", triggerElement, "SORT_BY_NAME")
        }},customClass:"jj_menu_item_blank"}
    ]
},getArtistAlbumSortMenu:function() {
    var a = this.setSort;
    return[
        {title:$.localize.getString("SORT_BY_RELEVANCE"),action:{type:"fn",callback:function() {
            a("Rank", triggerElement, "SORT_BY_RELEVANCE")
        }},customClass:"jj_menu_item_blank"}
    ]
},sortByPicture:function(a, b) {
    return!a.Picture && b.Picture ? 1 : a.Picture && !b.Picture ? -1 : GS.user.favorites.users && !GS.user.favorites.users[a.UserID] &&
            GS.user.favorites.users[b.UserID] ? 1 : GS.user.favorites.users && GS.user.favorites.users[a.UserID] && !GS.user.favorites.users[b.UserID] ? -1 : 0
},filterUsers:function(a) {
    if (this.currentFilterStr != a) {
        this.currentFilterStr = a;
        this.type == "user" && this.originalUsers && this.renderUsers(this.originalUsers.filter(this.callback("filterUsersFunction")), this.currentSort)
    }
},filterUsersFunction:function(a) {
    return(a.Username.toLowerCase() + " " + a.Name.toLowerCase()).indexOf(this.currentFilterStr.toLowerCase()) !== -1
}});
GS.Controllers.PageController.extend("GS.Controllers.Page.SurveysController", {}, {type:"surveys",questionIndex:0,index:function(a, b) {
    this.subpage = a || "index";
    this.id = b || false;
    this.numPointsPerProfiler = GS.Models.Clearvoice.defaultPointsPerProfiler;
    this.neverShowNotice = GS.store.get("gs.surveys.neverShowNotice" + GS.user.UserID);
    GS.Controllers.PageController.title("Surveys");
    $.publish("gs.page.loading.page");
    GS.Models.Clearvoice.getMember(this.callback("loadMember"));
    this.subscribe("gs.auth.pointsUpdated",
            this.callback("getUserPoints"));
    this.subscribe("gs.auth.update", this.callback("index"));
    GS.user.isLoggedIn && this.getUserPoints()
},getUserPoints:function() {
    GS.user.getPoints(this.callback(function(a) {
        $("#userPoints").text(a)
    }))
},loadMember:function(a) {
    this.member = a;
    GS.user.clearvoice = a;
    if (this.subpage === "bonus")if (GS.user.isLoggedIn)if (this.currentSurvey) {
        this.pollQuestionIndex = 1;
        this.pollAnswers = {};
        for (a = 0; a < this.member.polls.available.length; a++)if (this.member.polls.available[a].SurveyID == this.currentSurvey) {
            this.surveyIndex =
                    a;
            a = 0;
            var b = this.member.polls.available[this.surveyIndex].Questions;
            for (var c in b)b.hasOwnProperty(c) && a++;
            this.surveyLength = a;
            this.element.html(this.view("bonus"));
            break
        }
    } else location.hash = "/surveys"; else location.hash = "/surveys"; else {
        this.element.html(this.view("index"));
        this.member.resetProgress()
    }
    $(window).resize()
},determineNextQuestion:function() {
    for (var a; a = this.member.questions[this.questionIndex];)if (this.member.answers && this.member.answers[a.DemographicId])this.questionIndex++; else if (this.member.answers &&
            a.AnswerId && this.member.answers[a.ParentDemographicId] && !this.member.answers[a.ParentDemographicId][a.AnswerId])this.questionIndex++; else {
        if (this.questionIndex < this.member.questions.length) {
            this.member.resetProgress();
            this.element.html(this.view("profiler"))
        } else location.hash = "/surveys";
        $(window).resize();
        return
    }
    location.hash = "/surveys"
},"button.next.rewards click":function(a, b) {
    b.preventDefault();
    var c,g,h = parseInt($(".survey_question").attr("data-questionID"));
    switch (parseInt(a.attr("data-question-type"))) {
        case 0:
        case 1:
            var k =
                    $("ul.survey_answers input:checked");
            g = k.attr("data-answerID");
            if (k.length && g)c = this.member.polls.available[this.surveyIndex].Questions[this.pollQuestionIndex].PossibleAnswers[g];
            break;
        case 3:
        case 4:
            $("ul.survey_answers input:checked").each(function() {
                c = this.member.polls.available[this.surveyIndex].Questions[this.pollQuestionIndex].PossibleAnswers[g];
                g = $(this).attr("data-answerID")
            });
            break;
        case 5:
        case 6:
            c = $("ul.survey_answers textarea").val();
            c = $.trim(c);
            break;
        default:
    }
    if (c) {
        this.pollAnswers[h] = g ?
                [parseInt(g)] : [c];
        this.pollQuestionIndex++;
        if (this.pollQuestionIndex - 1 < this.surveyLength)this.element.html(this.view("bonus")); else {
            h = this.member.polls.available[this.surveyIndex].Points;
            this.member.savePollAnswers(this.currentSurvey, GS.user.UserID, this.pollAnswers, h, this.callback("saveSuccess", h))
        }
    }
    return false
},saveSuccess:function() {
    location.hash = "/surveys"
},"button.next.profiler click":function(a, b) {
    b.preventDefault();
    var c;
    switch (this.member.questions[this.questionIndex].DemographicTypeId) {
        case 2:
        case 9:
        case 12:
            var g =
                    $("ul.survey_answers input:checked", this.element);
            if (g.length && this.member.answerLookup[g.val()])c = this.member.answerLookup[$("ul.survey_answers input:checked").val()];
            break;
        case 6:
        case 7:
            var h = this;
            $("ul.survey_answers input:checked", this.element).each(function() {
                c || (c = []);
                var k = $(this).val();
                h.member.answerLookup[k] && c.push(h.member.answerLookup[k])
            });
            break;
        case 8:
        case 10:
            if (this.member.answerLookup[$("ul.survey_answers textarea", this.element).attr("data-answerid")]) {
                c = this.member.answerLookup[$("textarea",
                        this.element).attr("data-answerid")];
                c.LocalizedValue = $("textarea", this.element).val()
            }
            break;
        case 3:
        case 5:
            break
    }
    if (c) {
        this.member.saveAnswers(c, function(k) {
            GS.user.clearvoice.determineValidAnswer(k)
        });
        this.questionIndex++;
        this.determineNextQuestion()
    }
    return false
},"a.startSurvey click":function(a) {
    a = a.attr("data-index");
    (a = _.defined(GS.user.clearvoice.AvailableSurveys[a]) ? GS.user.clearvoice.AvailableSurveys[a] : GS.user.clearvoice.DynamicSurveys[a]) && GS.getLightbox().open("startSurvey", {survey:a})
},
    "a.clearvoiceSignup click":function(a, b) {
        b.preventDefault();
        if (GS.user.isLoggedIn)location.hash = "/surveys/profiler"; else GS.getLightbox().open("login")
    },"a.bonus click":function(a, b) {
        b.preventDefault();
        this.currentSurvey = a.attr("data-surveyID");
        if (GS.user.isLoggedIn)location.hash = "/surveys/bonus"; else GS.getLightbox().open("login")
    },"a.login click":function() {
        GS.getLightbox().open("login")
    },"button.pause click":function(a, b) {
        b.preventDefault();
        if (this.pollAnswers && !_.isEmpty(this.pollAnswers))GS.getLightbox().open({type:"dontLeaveSurveys",
            view:{header:"GROOVESHARK_SURVEYS_DONT_LEAVE_TITLE",message:"GROOVESHARK_SURVEYS_DONT_LEAVE_MESSAGE",buttonsRight:[
                {label:"GROOVESHARK_SURVEYS_STAY",className:"stay"}
            ],buttonsLeft:[
                {label:"SURVEY_BACK_TO_SURVEYS",className:"leave"}
            ]},callbacks:{".leave":function() {
                GS.getLightbox().close();
                location.hash = "/surveys"
            },".stay":function() {
                GS.getLightbox().close()
            }}}); else location.hash = "/surveys";
        return false
    },"button.redeem_button click":function(a) {
        if (GS.user.isLoggedIn)if ($(a).is(".redeem_plus"))GS.getLightbox().open("redeemPoints",
                {type:"plus"}); else $(a).is(".redeem_anywhere") && GS.getLightbox().open("redeemPoints", {type:"anywhere"}); else GS.getLightbox().open("login")
    },"button.dontShowAgain click":function() {
        $(".featureBox", this.element).slideUp();
        GS.store.set("gs.surveys.neverShowNotice" + GS.user.UserID, true)
    },"button.hideNotice click":function() {
        $(".featureBox", this.element).slideUp()
    }});
(function() {
    var a = {1:{message:"POPUP_SIGNUP_FORM_UNKNOWN_ERROR"},2:{message:"POPUP_SIGNUP_FORM_DUPLICATE_EMAIL",fields:["#signup_email"]},4:{message:"POPUP_SIGNUP_FORM_DUPLICATE_USERNAME",fields:["#signup_username"]},8:{message:"POPUP_SIGNUP_FORM_INVALID_PASSWORD",fields:["#signup_password"]},16:{message:"POPUP_SIGNUP_FORM_MISSING_GENDER",fields:["#sex_M","#sex_F"]},32:{message:"POPUP_SIGNUP_FORM_MISSING_NAME",fields:["#signup_fname"]},64:{message:"POPUP_SIGNUP_FORM_USERNAME_LENGTH_ERROR",fields:["#signup_username"]},
        128:{message:"POPUP_SIGNUP_FORM_INVALID_USERNAME",fields:["#signup_username"]},256:{message:"POPUP_SIGNUP_FORM_INVALID_EMAIL",fields:["#signup_email"]},512:{message:"POPUP_SIGNUP_FORM_TOO_YOUNG",fields:[]},16384:{message:"POPUP_SIGNUP_FORM_PASSWORD_NO_MATCH",fields:["#signup_password","#signup_password2"]},32768:{message:"POPUP_SIGNUP_FORM_MUST_ACCEPT_TOS",fields:["#signup_tos"]},65536:{message:"POPUP_SIGNUP_FORM_MISSING_DOB",fields:[]}};
    GS.Controllers.PageController.extend("GS.Controllers.Page.SignupController",
            {}, {curStage:false,section:false,stages:{profile1:"profile1",profile2:"profile2",connect:"connect",upgrade:"upgrade",complete:"complete"},userInfo:{},googleContacts:null,facebookFriends:[],fbIDs:{},slickbox:false,thirdPartyErrors:{},init:function() {
                this._super();
                this.section = "";
                this.today = new Date;
                this.months = $.localize.getString("MONTHS").split(",");
                this.isFacebook = false;
                this.fbSession = {};
                this.isGoogle = false;
                this.googleData = {};
                this.subscribe("gs.app.resize", this.callback(this.resize));
                this.subscribe("gs.auth.update",
                        this.callback(this.update));
                this.subscribe("gs.locale.update", this.callback(function() {
                    this.months = $.localize.getString("MONTHS").split(",")
                }))
            },index:function(b) {
                this.section = b;
                var c = {};
                if (b)c.subpage = b;
                GS.getGuts().handlePageLoad("signup", c);
                this._super();
                this.resize();
                GS.resize();
                GS.getLightbox().close();
                GS.Controllers.PageController.title("Signup", false);
                this.update()
            },resize:function() {
                $("#page_signup").css({top:Math.max(30, ($("#page").height() - $("#page_signup").height()) / 2)})
            },update:function() {
                var b =
                        GS.user.defaultFromService;
                if (this.section == "complete" && GS.user.UserID > 0) {
                    this.vipPackage = GS.user.getVipPackage();
                    this.initComplete(this.vipPackage)
                } else if (this.section == "upgrade" && GS.user.UserID > 0)this.initUpgrade(); else if (this.section == "connect" || GS.user.UserID > 0)this.initConnect(); else this.section == "aboutme" ? this.initProfile2() : this.initProfile1();
                if (b) {
                    b.username && $("input[name=username]", this.element).val(b.username);
                    b.email && $("input[name=email]", this.element).val(b.email);
                    b.fname && $("input[name=fname]",
                            this.element).val(b.fname);
                    b.month && $("select[name=month]").val(b.month);
                    b.day && $("select[name=day]").val(b.day);
                    b.year && $("select[name=year]").val(b.year);
                    b.sex && $("#sex_" + b.sex).click();
                    this.thirdPartyErrors.facebook = {1024:{message:"POPUP_SIGNUP_FORM_FACEBOOK_GENERAL_ERROR",fields:[]},2048:{message:"POPUP_SIGNUP_FORM_FACEBOOK_GENERAL_ERROR",fields:[]},4096:{message:"FACEBOOK_DUPLICATE_ACCOUNT_ERROR_MSG",fields:[]}};
                    this.thirdPartyErrors.google = {2048:{message:"POPUP_SIGNUP_FORM_GOOGLE_GENERAL_ERROR",
                        fields:[]},4096:{message:"GOOGLE_DUPLICATE_ACCOUNT_ERROR_MSG",fields:[]}};
                    if (b.isFacebook) {
                        this.isFacebook = true;
                        if (b.session) {
                            this.fbSession = b.session;
                            this.fbSession.flags = b.fbFlags
                        }
                        $("#page_signup_password").hide();
                        $("#page_signup_password2").hide();
                        $("#signup_third_parties").hide();
                        a[1024] = this.thirdPartyErrors.facebook[1024];
                        a[2048] = this.thirdPartyErrors.facebook[2048];
                        a[4096] = this.thirdPartyErrors.facebook[4096]
                    } else if (b.isGoogle) {
                        this.isGoogle = true;
                        if (b.googleData)this.googleData = b.googleData;
                        $("#page_signup_password").hide();
                        $("#page_signup_password2").hide();
                        $("#signup_third_parties").hide();
                        a[2048] = this.thirdPartyErrors.google[2048];
                        a[4096] = this.thirdPartyErrors.google[4096]
                    }
                    b.error && this.element.find(".error").show().find(".message").html(b.error);
                    b.message && this.element.find(".intro-message").show().find(".message").html(b.message);
                    $(".input_wrapper_selectbox.month span").html($(".input_wrapper_selectbox.month").find("option:selected").html());
                    $(".input_wrapper_selectbox.day span").html($(".input_wrapper_selectbox.day").find("option:selected").html());
                    $(".input_wrapper_selectbox.year span").html($(".input_wrapper_selectbox.year").find("option:selected").html());
                    this.bExtend = GS.user.IsPremium ? 1 : 0;
                    this.resumeRedeem = b.resumeRedeem ? true : false
                }
                GS.resize()
            },initProfile1:function() {
                this.curStage = this.stages.profile1;
                $(".page_signup_form").addClass("hide");
                $("#page_signup_form_profile1").removeClass("hide");
                $("#page_signup_steps").attr("class", "step1");
                $("#signup_email").focus();
                GS.getLightbox().trackLightboxView("signup/profile1")
            },initProfile2:function() {
                this.curStage =
                        this.stages.profile2;
                $(".page_signup_form").addClass("hide");
                $("#page_signup_form_profile2").removeClass("hide");
                $("#page_signup_steps").attr("class", "step1");
                $("#signup_username").focus();
                GS.getLightbox().trackLightboxView("signup/profile2")
            },initConnect:function() {
                this.curStage = this.stages.connect;
                this.submitType = "facebook";
                $("#page_signup_steps").attr("class", "step2");
                $(".page_signup_form").addClass("hide");
                $("#page_signup_form_connect").html(this.view("connect")).removeClass("hide");
                GS.getLightbox().trackLightboxView("signup/invite")
            },
                initUpgrade:function() {
                    this.curStage = this.stages.upgrade;
                    $("#page_signup_steps").attr("class", "step3");
                    $(".page_signup_form").addClass("hide");
                    $("#page_signup_form_upgrade").html(this.view("upgrade")).removeClass("hide");
                    GS.getLightbox().trackLightboxView("signup/upgrade")
                },initComplete:function() {
                    if (GS.user.PathName || GS.user.PathNameEmpty) {
                        this.curStage = this.stages.complete;
                        this.vipPackage = GS.user.getVipPackage();
                        $("#page_signup_steps").attr("class", "hide");
                        $(".page_signup_form").addClass("hide");
                        $("#page_signup_form").html(this.view("complete")).removeClass("hide");
                        GS.resize()
                    } else GS.user.getPathName(this.callback("initComplete"));
                    GS.getLightbox().trackLightboxView("signup/complete")
                },"a.login click":function() {
                    GS.getLightbox().close();
                    GS.getLightbox().open("login")
                },"a.perks click":function() {
                    GS.getLightbox().close();
                    GS.getLightbox().open("vipPerks")
                },"button.upgrade click":function(b) {
                    b = _.orEqual($(b).attr("rel"), this.vipPackage);
                    GS.getLightbox().close();
                    GS.getLightbox().open("vipSignup",
                            {vipPackage:b,isSignup:false})
                },"button.anywhereUpgrade click":function() {
                    GS.getLightbox().open("vipSignup", {vipPackage:"anywhere"})
                },"#page_signup_form button.submit click":function(b, c) {
                    c.preventDefault();
                    this.hideErrors();
                    if (this.curStage == this.stages.profile1)this.checkProfile1() && this.initProfile2(); else if (this.curStage == this.stages.profile2)this.profileSubmit(); else if (this.curStage == this.stages.connect) {
                        this.isFacebook && GS.getLightbox().open("newFacebookUser");
                        GS.user.IsPremium ? this.initComplete() :
                                this.initUpgrade()
                    } else if (this.curStage == this.stages.upgrade)this.initComplete(); else if (this.curStage == this.stages.complete)GS.getFacebook().connected || setTimeout(this.callback(function() {
                        $.publish("gs.facebook.notification.connect", {})
                    }), 3E3);
                    GS.resize();
                    setTimeout("GS.resize()", 100);
                    return false
                },"#page_signup_form button.back click":function(b, c) {
                    c.preventDefault();
                    this.hideErrors();
                    if (this.curStage == this.stages.profile2)this.initProfile1(); else if (this.curStage == this.stages.connect)this.initProfile2();
                    else if (this.curStage == this.stages.upgrade)this.initConnect(); else this.curStage == this.stages.complete && this.initConnect();
                    GS.resize();
                    return false
                },"#signupUpgrade li.upgrade click":function(b) {
                    b = b.is(".plus") ? "plus" : "anywhere";
                    GS.getLightbox().open("vipSignup", {vipPackage:b,isSignup:true,bExtend:this.bExtend})
                },"button.service click":function(b) {
                    switch ($(b).attr("rel")) {
                        case "facebook":
                            GS.getFacebook().login(function() {
                                $(b).addClass("active")
                            }, this.callback("signupFailed", {errorCode:1024}, this.thirdPartyErrors.facebook));
                            break;
                        case "google":
                            GS.getGoogle().login(function() {
                                $(b).addClass("active")
                            }, this.callback("signupFailed", {errorCode:1024}, this.thirdPartyErrors.google));
                            break
                    }
                    return false
                },"#signup_third_parties button.facebookLogin click":function() {
                    GS.auth.loginViaFacebook(this.callback("afterSignupLogin", "facebook"), this.callback("signupFailed", {errorCode:1024}, this.thirdPartyErrors.facebook))
                },"#signup_third_parties button.googleLogin click":function() {
                    GS.auth.loginViaGoogle(this.callback("afterSignupLogin",
                            "google"), this.callback("signupFailed", {errorCode:1024}, this.thirdPartyErrors.google))
                },afterSignupLogin:function(b) {
                    switch (b) {
                        case "facebook":
                            var c = function() {
                                console.log("gotcha");
                                var g = new GS.Models.DataString;
                                g.string = $.localize.getString("NOTIF_FACEBOOK_LOGIN_LOGOUT");
                                g.data = {fullName:GS.facebook.profile.name};
                                $.publish("gs.notification", {type:"facebook",message:g.render()});
                                $.unsubscribe(["gs.facebook.profile.update",c])
                            };
                            $.subscribe("gs.facebook.profile.update", c);
                            break;
                        case "google":
                            b = new GS.Models.DataString;
                            b.string = $.localize.getString("NOTIF_GOOGLE_LOGIN_LOGOUT");
                            b.data = {fullName:GS.google.firstname + " " + GS.google.lastname};
                            $.publish("gs.notification", {type:"google",message:b.render()});
                            break
                    }
                },"#signup_username keyup":function(b) {
                    b = b.val();
                    this.hideErrors();
                    $("#page_signup_customURL_label .status").removeClass("verified error alert");
                    if (b !== "" && b.length) {
                        clearTimeout(this.checkUsernameTimer);
                        this.checkUsernameTimer = setTimeout(this.callback("checkUsername", b), 500)
                    }
                },checkUsernameTimer:null,checkUsername:function(b) {
                    var c =
                            0,g = /^([a-zA-Z0-9]+[\.\-_]?)+[a-zA-Z0-9]+$/;
                    if (b.length && (b.length < 5 || b.length > 32 || !b.match(g))) {
                        c |= 128;
                        $("#page_signup_customURL_label .status").addClass("alert").attr("title", $.localize.getString("POPUP_SIGNUP_FORM_USERNAME_INVALID"))
                    } else b.length && GS.service.getItemByPageName(b, this.callback(function(h) {
                        if (!h || h.type) {
                            c |= 4;
                            $("#page_signup_customURL_label .status").addClass("error").attr("title", $.localize.getString("POPUP_SIGNUP_FORM_USERNAME_UNAVAILABLE"))
                        } else $("#page_signup_customURL_label .status").addClass("verified").attr("title",
                                $.localize.getString("POPUP_SIGNUP_FORM_USERNAME_AVAILABLE"))
                    }), null, {async:false});
                    return c
                },"#signup_password change":function(b) {
                    var c = b.val(),g = $("#signup_password2").val();
                    this.hideErrors();
                    if (c !== "" && c.length && !(c.length < 5 || c.length > 32)) {
                        b.parents(".input_wrapper").removeClass("error").siblings("label").removeClass("error");
                        if (c === g)$("#signup_password2").parents(".input_wrapper").removeClass("error").siblings("label").removeClass("error"); else g !== "" && this.signupFailed({errorCode:16384})
                    } else {
                        b.parents(".input_wrapper").addClass("error").siblings("label").addClass("error");
                        this.signupFailed({errorCode:8})
                    }
                },"#signup_password2 change":function(b) {
                    var c = $("#signup_password").val(),g = b.val();
                    this.hideErrors();
                    if (g && c === g) {
                        b.parents(".input_wrapper").removeClass("error").siblings("label").removeClass("error");
                        $("#signup_password").change()
                    } else {
                        b.parents(".input_wrapper").addClass("error").siblings("label").addClass("error");
                        $("#signup_password").parents(".input_wrapper").addClass("error").siblings("label").addClass("error");
                        this.signupFailed({errorCode:16384})
                    }
                },"#signup_email change":function(b) {
                    var c =
                            b.val();
                    this.hideErrors();
                    if (c.match(_.emailRegex))b.parents(".input_wrapper").removeClass("error").siblings("label").removeClass("error"); else {
                        b.parents(".input_wrapper").addClass("error").siblings("label").addClass("error");
                        this.signupFailed({errorCode:256})
                    }
                },"#signup_fname change":function(b) {
                    b.val() !== "" ? b.parents(".input_wrapper").removeClass("error").siblings("label").removeClass("error") : b.parents(".input_wrapper").addClass("error").siblings("label").addClass("error")
                },"#signup_tos change":function(b) {
                    b.is(":checked") ?
                            b.parent().removeClass("error") : b.parent().addClass("error")
                },"input,select keydown":function(b, c) {
                    c.keyCode && c.keyCode == 13 && !b.is("[name*=google]") && $("#lightbox_footer li.submit:visible, #pane_footer li.submit:visible").click()
                },"select focus":function(b) {
                    b.parents(".input_wrapper").addClass("active")
                },"select blur":function(b) {
                    b.parents(".input_wrapper").removeClass("active");
                    b.change()
                },"select keydown":function(b) {
                    b.change()
                },"select.year,select.month,select.day change":function() {
                    var b = parseInt($("select[name=month]",
                            this.element).val(), 10),c = parseInt($("select[name=year]", this.element).val(), 10),g = parseInt($("select[name=day]", this.element).val(), 10),h = $("select[name=month]", this.element).find("option:selected").val(),k = $("select[name=year]", this.element).find("option:selected").val(),m = $("select[name=day]", this.element).find("option:selected").val();
                    this.hideErrors();
                    k !== "" && (!c || c < 0) ? $("select[name=year]", this.element).parents(".input_wrapper").addClass("error").parent().siblings("label").addClass("error") :
                            $("select[name=year]", this.element).parents(".input_wrapper").removeClass("error").parent().siblings("label").removeClass("error");
                    h !== "" && (!b || b < 0) ? $("select[name=month]", this.element).parents(".input_wrapper").addClass("error").parent().siblings("label").addClass("error") : $("select[name=month]", this.element).parents(".input_wrapper").removeClass("error").parent().siblings("label").removeClass("error");
                    m !== "" && (!g || g < 0) ? $("select[name=day]", this.element).parents(".input_wrapper").addClass("error").parent().siblings("label").addClass("error") :
                            $("select[name=day]", this.element).parents(".input_wrapper").removeClass("error").parent().siblings("label").removeClass("error");
                    if (c && b && g) {
                        b = new Date(c, b - 1, g);
                        b = +new Date - +b;
                        b = b / 864E5;
                        b = Math.floor(b / 365.24);
                        b < 13 ? this.signupFailed({errorCode:512}) : $(".input_wrapper.year, .input_wrapper.month, .input_wrapper.day").removeClass("error").parent().siblings("label").removeClass("error")
                    }
                },"li.sex_field label mousedown":function(b) {
                    $(b).data("previous", $("li.sex_field input[name=sex]:checked").val())
                },
                "li.sex_field label click":function(b, c) {
                    var g = $("input", b);
                    $(".page_signup_sex_option").removeClass("checked");
                    if ($(g).val() === $(b).data("previous")) {
                        $("#sex_Deselect").attr("checked", "checked");
                        c.preventDefault();
                        $(g).blur();
                        return false
                    } else $(b).addClass("checked")
                },"#page_signup_flags label click":function(b, c) {
                    var g = $("input", b);
                    c.preventDefault();
                    if (g.is(":checked")) {
                        g.attr("checked", false);
                        $(b).removeClass("checked")
                    } else {
                        g.attr("checked", "checked");
                        $(b).addClass("checked")
                    }
                    $(g).blur()
                },"#page_signup_flags input change":function(b) {
                    $(b).closest("label").toggleClass("checked",
                            $(b).is(":checked"))
                },".error.response a.toggle click":function() {
                    this.hideErrors()
                },checkProfile1:function() {
                    var b = true,c = $("#page_signup input[name=email]").val(),g = $("#page_signup input[name=fname]").val(),h = $("#page_signup input[name=password]").val(),k = $("#page_signup input[name=password2]").val(),m = $("#page_signup input[name=tos]").is(":checked"),n = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/i,o = 0;
                    GS.service.getIsUsernameEmailAvailable("", c, this.callback(function(q) {
                        if (!q.email && c.length)o |= 2
                    }),
                            null, {async:false});
                    this.hideErrors();
                    if (!c.length || !c.match(n))o |= 256;
                    g.length || (o |= 32);
                    if (!this.isFacebook && !this.isGoogle) {
                        if (h.length < 5 || h.length > 32)o |= 8;
                        if (h !== k)o |= 16384
                    }
                    m || (o |= 32768);
                    if (o > 0) {
                        this.signupFailed({errorCode:o});
                        b = false
                    } else {
                        this.hideErrors();
                        this.element.find(".intro-message.response").hide();
                        $("#signup_username").change();
                        $("#signup_email").change();
                        $("#signup_tos").change();
                        if (!this.isGoogle && !this.isFacebook) {
                            $("#signup_password").change();
                            $("#signup_password2").change()
                        }
                        if ($("#signupAccount .input_wrapper.error, #signupAccount p.tos.error").length)b =
                                false
                    }
                    return b
                },profileSubmit:function() {
                    var b = $("#page_signup input[name=username]").val(),c = $("#page_signup input[name=password]").val(),g = $("#page_signup input[name=email]").val(),h = $("#page_signup input[name=fname]").val(),k = $("#page_signup input[name=sex]:checked").val(),m = [$("#page_signup select[name=year]").val(),$("#page_signup select[name=month]").val(),$("#page_signup select[name=day]").val()].join("-"),n = $("#page_signup input[name=tos]").is(":checked"),o = $("#page_signup input[name=artist]").is(":checked") ?
                            GS.Models.User.FLAG_ISARTIST : 0,q = $("#page_signup input[name=music_business]").is(":checked") ? GS.Models.User.FLAG_MUSIC_BUSINESS : 0;
                    o = o | q;
                    var v = parseInt($("#page_signup select[name=month]", this.element).val(), 10),x = parseInt($("#page_signup select[name=year]", this.element).val(), 10),A = parseInt($("#page_signup select[name=day]", this.element).val(), 10),u = /^([a-zA-Z0-9]+[\.\-_]?)+[a-zA-Z0-9]+$/;
                    q = 0;
                    if (b.length)if (b.match(u))q = b.length < 5 || b.length > 32 ? q | 64 : q | this.checkUsername(b); else q |= 128;
                    n || (q |= 32768);
                    this.element.find(".error.response").hide();
                    $("select.year,select.month,select.day", this.element).change();
                    $("#signup_fname").change();
                    if (x && v && A) {
                        n = new Date(x, v - 1, A);
                        n = +new Date - +n;
                        n = n / 864E5;
                        n = Math.floor(n / 365.24);
                        if (n < 13)q |= 512
                    } else {
                        $(".input_wrapper.year, .input_wrapper.month, .input_wrapper.day").addClass("error").parent().siblings("label").addClass("error");
                        q |= 65536
                    }
                    k || (k = "");
                    if (q > 0 || $("#page_signup .input_wrapper.error, #signupAccount p.tos.error, #signupAccount div.field.error").length) {
                        this.signupFailed({errorCode:q});
                        return false
                    }
                    if (this.isFacebook)GS.auth.signupViaFacebook(b, h, g, k, m, o, this.fbSession, this.callback(this.signupSuccess), this.callback(this.signupFailed)); else this.isGoogle ? GS.auth.signupViaGoogle(b, h, g, k, m, o, this.callback(this.signupSuccess), this.callback(this.signupFailed)) : GS.auth.signup(b, c, h, g, k, m, o, true, this.callback(this.signupSuccess), this.callback(this.signupFailed));
                    return true
                },signupSuccess:function(b) {
                    if (b && b.userID) {
                        this.hideErrors();
                        if (this.isGoogle)GS.getGoogle().connected = true;
                        if (this.isFacebook)GS.getFacebook().connected =
                                true;
                        this.initConnect()
                    } else this.signupFailed(b)
                },signupFailed:function(b, c) {
                    var g,h,k,m = ['<ul class="errors">'];
                    k = a;
                    if (c)k = c;
                    $.each(k, function(o, q) {
                        if (b.errorCode & o) {
                            m.push("<li>" + $.localize.getString(q.message) + " </li>");
                            if (q.fields)for (g = 0; g < q.fields.length; g++)$(q.fields[g]).parents(".input_wrapper").addClass("error").siblings("label").addClass("error")
                        }
                    });
                    m.push("</ul>");
                    k = this.element.find(".error.response").show().find(".message");
                    if (b.errorCode && b.errorCode & 2 && (this.isFacebook || this.isGoogle)) {
                        var n =
                                $("#page_signup_form input[name=email]").val();
                        if (this.isGoogle) {
                            GS.getGoogle().onLoginSaveData = n;
                            h = $.localize.getString("POPUP_SIGNUP_FORM_GOOGLE_EMAIL_INUSE_LINK")
                        } else if (this.isFacebook) {
                            GS.getFacebook().onLoginSaveData = n;
                            h = $.localize.getString("POPUP_SIGNUP_FORM_FACEBOOK_EMAIL_INUSE_LINK")
                        }
                        for (g = 0; g < m.length; g++)if (m[g].match(/email\saddress/)) {
                            m[g] = m[g].replace(" </li>", h);
                            break
                        }
                    }
                    k.html("<strong>" + $.localize.getString("POPUP_SIGNUP_ERROR_MESSAGE") + "</strong> " + m.join(""));
                    this.showErrors()
                },
                hideErrors:function() {
                    this.element.find(".error.response").stop().slideUp(500, function() {
                        $(this).hide()
                    })
                },showErrors:function() {
                    this.element.find(".error.response").stop().show().css("height", "auto")
                },"#page_signup_close_errors click":function() {
                    this.hideErrors()
                },connectSubmit:function() {
                    return true
                },completeSubmit:function() {
                    return true
                },"#page_signup_error a.loginAs click":function() {
                    window.location.hash = "#";
                    var b = $("#page_signup_form input[name=email]").val();
                    if (this.isFacebook)GS.getLightbox().open("login",
                            {username:b,extraMessage:"POPUP_LOGIN_FORM_FACEBOOK_EMAIL_INUSE"}); else this.isGoogle && GS.getLightbox().open("login", {username:b,extraMessage:"POPUP_LOGIN_FORM_GOOGLE_EMAIL_INUSE"})
                }})
})();
GS.Controllers.PageController.extend("GS.Controllers.Page.PromotionController", {}, {promotion:null,type:"promotion",index:function(a) {
    this.promotion = new GS.Models.Promotion(a);
    this.playlists(a)
},playlists:function(a) {
    GS.Controllers.PageController.title("Promotional Playlists");
    this.promotion = new GS.Models.Promotion(a);
    this.element.html(this.view("playlists"));
    this.promotion.getPlaylistsForCampaign(this.callback("loadGridPlaylists"));
    $(window).resize()
},loadGridPlaylists:function() {
    var a = _.toArray(this.promotion.playlists),
            b,c;
    b = GS.store.get("gs.sort.user.playlists") || {sortCol:"TSAdded",sortDir:0,sortStoreKey:"gs.sort.user.playlists"};
    var g = this.element.find(".gs_grid.playlists").controller();
    b.disableMultiSelect = true;
    if (g) {
        b = g.dataView;
        c = g.grid;
        if (b) {
            b.beginUpdate();
            b.setItems(a, "PlaylistID");
            b.endUpdate();
            b.refresh()
        }
        c && c.onSort(g.sortCol, g.sortDir)
    } else if (a.length)this.element.find(".gs_grid.playlists").gs_grid(a, GS.Controllers.GridController.columns.playlist, b, "playlist"); else {
        this.element.find(".gs_grid.playlists").html(this.view("/shared/noResults",
                {type:"playlist"}));
        $("#searchForm input").select();
        this.addAutocomplete("user");
        GS.resize()
    }
},getSortMenu:function() {
    var a = this.setSort;
    return[
        {title:$.localize.getString("SORT_BY_DATE_ADDED"),action:{type:"fn",callback:function() {
            var b = "TSAdded";
            if (_.defined(GS.page.activePageParams.objType) && GS.page.activePageParams.objType == "subscribed")b = "TSFavorited";
            a(b, triggerElement, "SORT_BY_DATE_ADDED")
        }},customClass:"jj_menu_item_blank"},
        {title:$.localize.getString("SORT_BY_NAME"),action:{type:"fn",callback:function() {
            a("PlaylistName",
                    triggerElement, "SORT_BY_NAME")
        }},customClass:"jj_menu_item_blank"}
    ]
}});
GS.Controllers.PageController.extend("GS.Controllers.Page.FeaturesController", {}, {index:function(a) {
    this.pageType = a || "mobile";
    this.subscribe("gs.auth.update", this.callback("index", a));
    this.subscribe("gs.player.feature.change", this.callback("showExtras"));
    this.loadSection()
},loadSection:function() {
    this.user = GS.user;
    this.settings = GS.user.settings;
    this.desktopPrefs = GS.airbridge.getDesktopPreferences();
    this.element.html(this.view("index"));
    switch (this.pageType) {
        case "extras":
            GS.Controllers.PageController.title("Extras");
            this.showExtras();
            break;
        case "desktop":
            GS.Controllers.PageController.title("Desktop");
            this.showDesktop();
            break;
        case "mobile":
            GS.Controllers.PageController.title("Mobile");
            this.showMobile();
            break
    }
    GS.resize()
},showExtras:function() {
    this.element.find("#features").html(this.view("extras"))
},showDesktop:function() {
    this.element.find("#features").html(this.view("desktop"));
    swfobject.embedSWF("/webincludes/flash/InstallDesktop.swf", "installAirApp", "330", "180", "9.0.0", null, {bgcolor:"#eeeeee"}, {wmode:"window"})
},
    showMobile:function() {
        this.element.find("#features").html(this.view("mobile"))
    },".extra_feature button click":function(a) {
        var b = $(a).attr("rel");
        GS.features[b].activate(this.callback("updateButton", a))
    },updateButton:function(a) {
        var b = GS.features[$(a).attr("rel")];
        $(a).toggleClass("active", b.isActive()).find("span").html(_.printf(b.getButtonKey()))
    },"#settings_desktop submit":function(a, b) {
        b.preventDefault();
        var c = {onClose:$("#settings_desktop input[name=settings_desktop_onClose]:checked").val(),onMinimize:$("#settings_desktop input[name=settings_desktop_onMinimize]:checked").val(),
            externalControlEnabled:$("#settings_desktop_globalKeyboard").is(":checked"),notifications:{songNotifications:$("#settings_desktop_songNotifications").is(":checked"),position:parseInt($("select[name=settings_desktop_notifPosition]", a).val(), 10),duration:parseInt($("select[name=settings_desktop_notifDuration]", a).val(), 10)}};
        this.desktopPrefs = c;
        GS.airbridge.setDesktopPreferences(c);
        $("#settings_desktop .form_buttons .status").addClass("success");
        return false
    },".page_extras_devices_nav_button click":function(a) {
        GS.getGuts().handleExtrasDeviceButtonClick(a);
        $(".page_extras_device").hide();
        $(".page_extras_devices_nav_button").removeClass("active");
        $($(a).addClass("active").attr("rel")).show()
    }});
GS.Controllers.BaseController.extend("GS.Controllers.LightboxController", {onElement:"#lightbox_wrapper",isGSSingleton:true}, {priorities:{sessionBad:12,SESSION_BAD:12,maintenance:11,DOWN_FOR_MAINTENANCE:11,invalidClient:10,INVALID_CLIENT:10,badHost:8,BAD_HOST:8,interactionTime:7,INTERACTION_TIMER:7,vipRequiredLogin:5,VIP_REQUIRED_LOGIN:5,vipOnlyFeature:3,VIP_ONLY_FEATURE:3,signup:2,SIGNUP:2,vipSignup:1,VIP_SIGNUP:1,visualizer:-1},notCloseable:function() {
    return!!this.options.notCloseable
},queue:[],
    queuedOptions:{},curType:null,isOpen:false,priority:0,init:function() {
        this.subscribe("gs.app.resize", this.callback(this.positionLightbox));
        $(document).keydown(this.callback(function(a) {
            a.which == _.keys.ESC && this.isOpen && !this.notCloseable() && this.close()
        }));
        this.currentPriority = NaN;
        this._super()
    },appReady:function() {
        if (gsConfig.lightboxOnInit) {
            this.open(gsConfig.lightboxOnInit.type, gsConfig.lightboxOnInit.defaults);
            gsConfig.lightboxOnInit = false
        }
    },positionLightbox:function() {
        var a,b;
        return function() {
            if (this.isOpen) {
                b =
                        b || $("#main");
                a = a || $("#lightbox");
                var c = this.container.find("#lightbox_content");
                if (this.curType !== "signup") {
                    c.css({height:"auto"});
                    a.css({width:"auto"})
                }
                var g = Math.max(a.width(), 400),h = Math.min(Math.max(a.height(), 100), $(document.body).height() - 70);
                g = Math.round(b.width() / 2 - g / 2);
                var k = Math.max(35, Math.round(b.height() / 2 - h / 2)),m = c.height(),n = this.element.find("#lightbox_header:visible").outerHeight() + this.element.find("#lightbox_footer:visible").outerHeight(),o = 0;
                c.find(".measure").each(function() {
                    o +=
                            $(this).height()
                });
                h = Math.min(Math.max(150, parseInt(h - n, 10)));
                h < m && !c.hasClass("fixed_content") && c.height(h).find(".lightbox_pane_content").height(c.height() - c.find("#pane_footer").outerHeight() - o);
                $("#lightbox_nav").height($("#lightbox_pane").height());
                this.element.css({top:k,left:g});
                this.queuedOptions[this.curType] && this.queuedOptions[this.curType].showPlayerControls && this.overlay.height($(window).height() - $("#player").height());
                $.publish("lightbox.position")
            }
        }
    }(),getContainer:function(a) {
        var b =
                this.element.find("." + a);
        if (b.length === 0) {
            b = $('<div class="lbcontainer"/>').addClass(a);
            b.appendTo($("#lightbox"))
        }
        return b
    },open:function(a, b) {
        if (typeof a === "object") {
            b = a;
            a = "generic"
        }
        this.options = b || {};
        var c = this.queue.indexOf(a),g = _.orEqual(this.priorities[a], 0);
        if (this.curType === a)return false;
        this.queuedOptions[a] = b;
        if (!isNaN(this.currentPriority) && g < this.currentPriority)this.queue.indexOf(a) === -1 && this.queue.push(a); else {
            if (this.curType) {
                this.close(true);
                this.queue.indexOf(this.curType) === -1 &&
                this.queue.push(this.curType)
            }
            if (!(this.queue.length && c !== -1 && c > -1)) {
                this.curType = a;
                this.currentPriority = g;
                this.isOpen = true;
                this.overlay = this.overlay || $("#lightbox_overlay");
                this.overlay.height("100%");
                this.container = this.getContainer(a);
                this.notCloseable() ? $("#lightbox_close").hide() : $("#lightbox_close").show();
                $.browser.mozilla && parseInt($.browser.version) < 6 ? $("#theme_home .flash object").each(function(h, k) {
                    k.style.visibility = "hidden"
                }) : $("#theme_home .flash object").hide();
                $("div.capital iframe").hide().parent().hide();
                this.element.add(this.overlay).add(this.container).show();
                this.container[$.String.underscore("gs_lightbox_" + a)](b);
                this.positionLightbox();
                this.container.find("form input:visible").eq(0).focus();
                a === "generic" ? this.trackLightboxView(b.type) : this.trackLightboxView(a);
                if (this.element.is(":visible"))this.queue.indexOf(a) === -1 && this.queue.unshift(a); else this.queue.indexOf(a) === -1 && this.queue.push(a)
            }
        }
    },close:function(a) {
        var b;
        a = _.orEqual(a, false);
        b = this.queue.shift();
        if (_.defined(b)) {
            this.container.hide().controller().destroy();
            b !== "login" && this.element.find(".lbcontainer." + b).empty()
        }
        if (!a) {
            this.queuedOptions[b] && this.queuedOptions[b].onComplete && this.queuedOptions[b].onComplete();
            this.curType = false;
            this.currentPriority = NaN;
            if (this.queue.length > 0) {
                this.queue = this.sortQueueByPriority(this.queue);
                b = this.queue.shift();
                a = this.queuedOptions[b];
                try {
                    this.open(b, a)
                } catch(c) {
                    console.warn("error opening next lightbox", c);
                    this.curType = false;
                    this.currentPriority = NaN;
                    this.isOpen = false;
                    this.element.add(this.overlay).hide();
                    $.browser.mozilla &&
                            parseInt($.browser.version) < 6 ? $("#theme_home .flash object").each(function(g, h) {
                        h.style.visibility = "visible"
                    }) : $("#theme_home .flash object").show()
                }
            } else {
                this.curType = false;
                this.currentPriority = NaN;
                this.isOpen = false;
                this.element.add(this.overlay).hide();
                $.browser.mozilla && parseInt($.browser.version) < 6 ? $("#theme_home .flash object").each(function(g, h) {
                    h.style.visibility = "visible"
                }) : $("#theme_home .flash object").show()
            }
            $("div.capital iframe").show().parent().show()
        }
    },sortQueueByPriority:function(a) {
        a.sort(this.callback(function(b, c) {
            var g = _.orEqual(this.priorities[b], 0),h = _.orEqual(this.priorities[c], 0);
            return g == h ? 0 : g > h ? 1 : -1
        })).reverse();
        return a
    },trackLightboxView:function(a) {
        a = "#/lb/" + a;
        if (window._gaq && window._gaq.push) {
            a = encodeURI(a);
            window._gaq.push(["_trackPageview",a])
        }
    },".close click":function() {
        GS.getLightbox().close()
    },"select focus":function(a) {
        a.parents(".input_wrapper").addClass("active")
    },"select blur":function(a) {
        a.parents(".input_wrapper").removeClass("active");
        a.change()
    },"select keydown":function(a) {
        a.change()
    },
    "select change":function(a) {
        $(a).prev("span").text($(a).find("option:selected").html())
    },"input focus":function(a) {
        $(a).parent().parent().addClass("input_wrapper_active")
    },"textarea focus":function(a) {
        $(a).parent().parent().parent().addClass("textarea_wrapper_active")
    },"input blur":function(a) {
        $(a).parent().parent().removeClass("input_wrapper_active")
    },"textarea blur":function(a) {
        $(a).parent().parent().parent().removeClass("textarea_wrapper_active")
    }});
GS.Controllers.BaseController.extend("GS.Controllers.Lightbox.Generic", {onDocument:false,viewDefaults:{buttonsLeft:[],buttonsRight:[]}}, {init:function(a, b) {
    this.update(b);
    _.forEach(this.options.callbacks, function(c, g) {
        this.delegate(this.element, g, "click", c)
    }, this);
    this.delegate(this.element, ".submit", "click", function(c) {
        GS.getLightbox().close();
        c.preventDefault()
    })
},update:function(a) {
    this._super(a);
    this.options.view = $.extend(true, {}, this.options.view, GS.Controllers.Lightbox.Generic.viewDefaults);
    this.element.html(this.view("/lightbox/generic", this.options.view, {first:function(b) {
        return b === 0 ? "first" : ""
    },last:function(b, c) {
        return b === c - 1 ? "last" : ""
    },button:function(b) {
        var c = [],g = {"class":"btn btn_style4 " + (b.className || "")};
        if (b.href)g.href = b.href;
        var h = b.href ? "a" : "button";
        c.push(this.tag(h, g));
        c.push(this.tag("div"));
        b.labelHTML ? c.push(this.tag("span"), b.labelHTML, this.tagEnd("span")) : c.push(this.localeTag("span", b.label));
        c.push(this.tagEnd("div"));
        c.push(this.tagEnd(h));
        return c.join("")
    }}));
    $.isFunction(a.loadCallback) && a.loadCallback(this.element)
},"form submit":function(a, b) {
    b.preventDefault()
}});
GS.Controllers.BaseController.extend("GS.Controllers.Lightbox.LoginController", {onDocument:false}, {init:function(a, b) {
    this.update(b)
},update:function(a) {
    $("#lightbox_footer li").show();
    if (a && a.callback)this.afterLoginCallback = a.callback;
    a && a.username && $("input[name=username]", this.element).val(a.username);
    if (a && a.error)this.showError(a.error); else {
        this.element.find(".error").hide();
        a && a.message && this.showMessage(a.message)
    }
    this.showCTA = a && a.showCTA ? true : false;
    $("#login_anywhere_cta").toggleClass("hide",
            !this.showCTA);
    this.resumeRedeem = a && a.resumeRedeem ? true : false;
    this.showPreview = a && a.showPreview ? true : false;
    if (a && a.premiumRequired) {
        this.premiumRequired = true;
        $("h3", "#lightbox_header").localeDataString("POPUP_SIGNUP_LOGIN_PREMIUM_TITLE")
    } else {
        this.premiumRequired = false;
        $("h3", "#lightbox_header").localeDataString("POPUP_LOGIN_TITLE")
    }
    a && a.extraMessage ? $("#login_extra_msg").html($.localize.getString(a.extraMessage)) : $("#login_extra_msg").html("");
    $("#login_redeem_msg").toggleClass("hide", !this.resumeRedeem);
    $("#login_premium_msg").toggleClass("hide", !this.premiumRequired);
    $("#login_default_msg").toggleClass("hide", this.resumeRedeem || this.premiumRequired);
    GS.airbridge && GS.airbridge.isDesktop && $("button.exitPreview").hide();
    $("input[name=password]", this.element).val("");
    $("input[name=username]", this.element).focus()
},showError:function(a) {
    $("div.error div.message", this.element).html($.localize.getString(a));
    this.element.find(".error").show()
},showMessage:function(a) {
    $("div.positive div.message", this.element).html(a);
    this.element.find(".positive").show()
},"input focus":function(a) {
    $(a).parent().parent().addClass("active")
},"input blur":function(a) {
    $(a).parent().parent().removeClass("active")
},"a.submit click":function() {
    $("form", this.element).submit()
},"a.signup click":function() {
    GS.getLightbox().close();
    window.location.hash = "/signup"
},"a.upgrade click":function() {
    GS.getLightbox().close();
    window.location.hash = "/settings/subscriptions"
},"a.forget,a.forgot click":function() {
    GS.getLightbox().close();
    GS.getLightbox().open("forget")
},
    "button.exitPreview click":function() {
        $.cookie("use_preview", null, {domain:".grooveshark.com"});
        setTimeout(function() {
            window.location = "http://grooveshark.com"
        }, 100);
        return false
    },"form submit":function(a) {
        var b = $("input[name=username]", a).val(),c = $("input[name=password]", a).val();
        a = $("input[name=save]", a).val() ? 1 : 0;
        switch (b.toLowerCase()) {
            case "dbg:googlelogin":
                GS.getGoogle().lastError ? this.showMessage("Last Google Login Error: " + JSON.stringify(GS.getGoogle().lastError)) : this.showMessage("There does not appear to be any errors with Google Login");
                break;
            case "dbg:facebooklogin":
                GS.getFacebook().lastError ? this.showMessage("Last Facebook Login Error: " + JSON.stringify(GS.getFacebook().lastError)) : this.showMessage("There does not appear to be any errors with Facebook Login");
                break;
            default:
                GS.auth.login(b, c, a, this.callback(this.loginSuccess), this.callback(this.loginFailed));
                break
        }
    },"button.facebookLogin click":function() {
        GS.auth.loginViaFacebook(this.callback(this.loginSuccess), this.callback(this.loginFailed))
    },"button.googleLogin click":function() {
        GS.auth.loginViaGoogle(this.callback(this.loginSuccess),
                this.callback(this.loginFailed))
    },loginSuccess:function() {
        if ($.isFunction(this.afterLoginCallback))GS.auth.authUpdateCallback = this.afterLoginCallback;
        GS.getLightbox().close();
        setTimeout(this.callback(function() {
            if (this.resumeRedeem)GS.getLightbox().open("redeem", {autoSubmit:true}); else this.showPreview && GS.getNotice().showPreviewLightbox()
        }), 100)
    },loginFailed:function(a) {
        if (a.error)this.showError(a.error); else if (a && a.authType == "facebook")this.showError("POPUP_SIGNUP_LOGIN_FORM_FACEBOOK_ERROR"); else if (a &&
                a.authType == "google")this.showError("POPUP_SIGNUP_LOGIN_FORM_GOOGLE_ERROR"); else a && a.userID == 0 ? this.showError("POPUP_SIGNUP_LOGIN_FORM_AUTH_ERROR") : this.showError("POPUP_SIGNUP_LOGIN_FORM_GENERAL_ERROR");
        GS.getLightbox().positionLightbox()
    }});
(function() {
    GS.Controllers.VipInterface.extend("GS.Controllers.Lightbox.VipSignupController", {onDocument:false}, {creditCardStages:{payment:"payment",billing:"billing",confirmation:"confirmation"},paypalStages:{payment:"payment",redirect:"redirect",confirmation:"confirmation"},offersStages:{promocode:"promocode",confirmation:"confirmation"},curCreditCardStage:false,curPaypalStage:false,curOffersStage:false,vipToken:false,vipCallbackUrl:false,recurring:true,vipPackage:false,paymentType:"creditcard",
        isSignup:false,init:function(a, b) {
            this.update(b)
        },update:function(a) {
            if (GS.user.isLoggedIn) {
                this.today = new Date;
                this.months = $.localize.getString("MONTHS").split(",");
                this.expYears = [];
                this.vip = this.anywhere = 0;
                this.excludedCountries = GS.Controllers.Lightbox.VipSignupController.excludedCreditCardCountries;
                this.paymentType = "creditcard";
                this.bExtend = (this.bExtend = _.orEqual(a.bExtend, 0)) ? 1 : 0;
                this.updateCreditCard = _.orEqual(a.updateCreditCard, false);
                for (var b = (new Date).getFullYear(),c = 0; c < 10; c++)this.expYears.push(b +
                        c);
                this.vipEndpoint = gsConfig.runMode == "production" ? "https://vip.grooveshark.com/" : "https://stagingvip.grooveshark.com/";
                this.vipToken = hex_md5((new Date).getTime());
                this.vipCallbackUrl = location.protocol + "//" + location.host + "/vipCallback.php";
                if (a && a.vipPackage) {
                    this.anywhere = a.vipPackage === this.vipPackages.anywhere ? 1 : 0;
                    this.vip = a.vipPackage === this.vipPackages.vip ? 1 : 0
                }
                if (this.vip) {
                    this.monthPrice = this.vipPackagePrices.vip.month;
                    this.yearPrice = this.vipPackagePrices.vip.year
                } else if (this.anywhere) {
                    this.monthPrice =
                            this.vipPackagePrices.anywhere.month;
                    this.yearPrice = this.vipPackagePrices.anywhere.year
                } else {
                    this.monthPrice = this.vipPackagePrices.plus.month;
                    this.yearPrice = this.vipPackagePrices.plus.year
                }
                if (a && a.isSignup)this.isSignup = true;
                this.element.html(this.view("/lightbox/vipSignup"));
                if (a && a.initOffers)this.initOffersBilling(); else a && a.initPaypal ? this.initPaypalBilling() : this.initCreditCardBilling();
                GS.getLightbox().positionLightbox()
            } else _.wait(10).then(function() {
                GS.getLightbox().close();
                GS.getLightbox().open("login",
                        {callback:function() {
                            GS.getLightbox().open("vipSignup", a)
                        }})
            })
        },initCreditCardBilling:function() {
            this.paymentType = "creditcard";
            this.curCreditCardStage = this.creditCardStages.payment;
            var a = $("#creditcard_content");
            a.show().siblings().hide();
            a.find("ul.progress li.payment").addClass("active").siblings().removeClass("active progress_previousStep progress_currentStep").parent().removeClass("progress_onLast");
            a.find("ul.stages li.stage.payment").show().siblings().hide();
            $("#billing_options .creditcard.pane a").addClass("active").parent().siblings().children("a").removeClass("active");
            a.find("ul.progress li.payment").addClass("progress_currentStep").removeClass("progress_previousStep");
            a.find("ul.progress li.billing").addClass("progress_nextStep").removeClass("active progress_currentStep");
            $(".selectbox.cardType span").html($("select.cardType option:selected").html());
            $(".selectbox.expMonth span").html($("select.expMonth option:selected").html());
            $(".selectbox.expYear span").html($("select.expYear option:selected").html());
            $(".selectbox.state span").html($("select.state option:selected").html());
            $(".selectbox.country span").html($("select#ccCountry option:selected").html());
            $("#pane_footer ul.right li.next").show().siblings().hide();
            this.isSignup ? $("#pane_footer ul.left li").show() : $("#pane_footer ul.left li").hide();
            this.element.find(".error.response").hide();
            GS.getLightbox().trackLightboxView("vipSignup/creditcard1")
        },initPaypalBilling:function() {
            this.paymentType = "paypal";
            this.curPaypalStage = this.paypalStages.payment;
            var a = $("#paypal_content");
            a.show().siblings("").hide();
            a.find("ul.progress li.payment").siblings().removeClass("active progress_previousStep progress_currentStep").parent().removeClass("progress_onLast");
            a.find("ul.stages li.stage.payment").show().siblings().hide();
            $("#billing_options .paypal.pane a").addClass("active").parent().siblings().children("a").removeClass("active");
            a.find("ul.progress li.payment").addClass("progress_currentStep").removeClass("progress_previousStep");
            a.find("ul.progress li.redirect").addClass("progress_nextStep").removeClass("active progress_currentStep");
            $(".selectbox.country span").html($("select#ccCountry option:selected").html());
            $("#pane_footer ul.right li").show();
            this.isSignup ? $("#pane_footer ul.left li").show() : $("#pane_footer ul.left li").hide();
            this.element.find(".error.response").hide();
            GS.getLightbox().trackLightboxView("vipSignup/paypal1")
        },initCellPhoneBilling:function() {
            this.paymentType = "cellphone";
            var a = $("#cellphone_content");
            a.show().siblings().hide();
            a.find("ul.progress li.payment").addClass("active").siblings().removeClass("active progress_previousStep progress_currentStep").parent().removeClass("progress_onLast");
            a.find("ul.stages li.stage.promocode").show().siblings().hide();
            $("#billing_options .cellphone.pane a").addClass("active").parent().siblings().children("a").removeClass("active");
            $("#pane_footer ul.right li").show();
            this.isSignup ? $("#pane_footer ul.left li").show() : $("#pane_footer ul.left li").hide();
            this.element.find(".error.response").hide();
            GS.getLightbox().trackLightboxView("vipSignup/cellphone1")
        },initOffersBilling:function() {
            this.paymentType = "offers";
            this.curOffersStage = this.offersStages.promocode;
            this.recurring = false;
            $("#offers_content").show().siblings().hide();
            $("#billing_options .offers.pane a").addClass("active").parent().siblings().children("a").removeClass("active");
            $("#pane_footer ul.right li.next").show().siblings().hide();
            this.isSignup ? $("#pane_footer ul.left li").show() : $("#pane_footer ul.left li").hide();
            this.element.find(".error.response").hide();
            GS.getLightbox().trackLightboxView("vipSignup/offers1")
        },"#billing_options .creditcard.pane click":function(a) {
            a.is(".active") || this.initCreditCardBilling()
        },"#billing_options .paypal.pane click":function(a) {
            a.is(".active") ||
            this.initPaypalBilling()
        },"#billing_options .cellphone.pane click":function(a) {
            a.is(".active") || this.initCellPhoneBilling()
        },"#billing_options .offers.pane click":function(a) {
            a.is(".active") || this.initOffersBilling()
        },"#lightbox_footer li.submit, #pane_footer li.submit click":function(a, b) {
            b.preventDefault();
            if (this.paymentType === "creditcard")if (this.curCreditCardStage === this.creditCardStages.payment) {
                if (this.checkCreditCard1()) {
                    var c = $("#creditcard_content");
                    c.find("ul.progress li.payment").removeClass("progress_currentStep").addClass("progress_previousStep");
                    c.find("ul.progress li.billing").addClass("active progress_currentStep").removeClass("progress_nextStep");
                    c.find("ul.progress li.confirmation").addClass("progress_lastStep");
                    c.find("ul.stages li.stage.billing").show().siblings().hide();
                    c.find("ul.right li.next").show().siblings().hide();
                    c.find("ul.left li").show();
                    this.curCreditCardStage = this.creditCardStages.billing;
                    this.element.find(".error.response").hide();
                    GS.getLightbox().trackLightboxView("vipSignup/creditcard2")
                }
            } else {
                if (this.curCreditCardStage ===
                        this.creditCardStages.billing)if (this.checkCreditCard2())return this.creditCardSubmit()
            } else if (this.paymentType === "paypal")if (this.curPaypalStage === this.paypalStages.payment) {
                c = $("#paypal_content");
                c.find("ul.progress li.payment").removeClass("progress_currentStep").addClass("progress_previousStep");
                c.find("ul.progress li.redirect").addClass("active progress_currentStep").removeClass("progress_nextStep");
                c.find("ul.progress li.confirmation").addClass("progress_lastStep");
                c.find("ul.stages li.stage.redirect").show().siblings().hide();
                c.find("ul.right li.next").show().siblings().hide();
                c.find("ul.left li").show();
                this.curPaypalStage = this.paypalStages.redirect;
                this.element.find(".error.response").hide();
                GS.getLightbox().trackLightboxView("vipSignup/paypal2")
            }
            this.billingSubmit();
            return false
        },"#lightbox_footer li.back, #pane_footer li.back click":function(a, b) {
            b.preventDefault();
            if (this.paymentType === "creditcard") {
                var c = $("#creditcard_content");
                if (this.curCreditCardStage === this.creditCardStages.payment) {
                    if (this.isSignup) {
                        GS.getLightbox().close();
                        location.hash = "#/signup/upgrade"
                    }
                } else if (this.curCreditCardStage === this.creditCardStages.billing) {
                    c.find("ul.progress li.payment").addClass("progress_currentStep").removeClass("progress_previousStep");
                    c.find("ul.progress li.billing").addClass("progress_nextStep").removeClass("active progress_currentStep");
                    c.find("ul.stages li.stage.payment").show().siblings().hide();
                    c.find("ul.right li.next").show().siblings().hide();
                    this.isSignup ? c.find("ul.left li").show() : c.find("ul.left li").hide();
                    this.curCreditCardStage =
                            this.creditCardStages.payment;
                    GS.getLightbox().trackLightboxView("vipSignup/creditcard1")
                } else if (this.curCreditCardStage === this.creditCardStages.confirmation) {
                    c.find("ul.progress li.billing").addClass("progress_currentStep").removeClass("progress_previousStep").parent().removeClass("progress_onLast");
                    c.find("ul.progress li:last").removeClass("active progress_currentStep");
                    c.find("ul.stages li.stage.billing").show().siblings().hide();
                    c.find("ul.right li.next").show().siblings().hide();
                    c.find("ul.left li").show();
                    this.curCreditCardStage = this.creditCardStages.billing;
                    GS.getLightbox().trackLightboxView("vipSignup/creditcard2")
                }
            } else if (this.paymentType === "paypal")if (this.curPaypalStage === this.paypalStages.payment) {
                if (this.isSignup) {
                    GS.getLightbox().close();
                    location.hash = "#/signup/upgrade"
                }
            } else if (this.curPaypalStage === this.paypalStages.redirect) {
                c = $("#paypal_content");
                c.find("ul.progress li.payment").addClass("progress_currentStep").removeClass("progress_previousStep");
                c.find("ul.progress li.redirect").addClass("progress_nextStep").removeClass("active progress_currentStep");
                c.find("ul.stages li.stage.payment").show().siblings().hide();
                c.find("ul.right li.next").show().siblings().hide();
                this.isSignup ? c.find("ul.left li").show() : c.find("ul.left li").hide();
                this.curPaypalStage = this.paypalStages.payment;
                GS.getLightbox().trackLightboxView("vipSignup/paypal1")
            } else {
                if (this.curPaypalStage === this.paypalStages.confirmation) {
                    c = $("#paypal_content");
                    c.find("ul.progress li.redirect").addClass("progress_currentStep").removeClass("progress_previousStep").parent().removeClass("progress_onLast");
                    c.find("ul.progress li.confirmation").removeClass("active progress_currentStep");
                    c.find("ul.stages li.stage.redirect").show().siblings().hide();
                    c.find("ul.right li.next").show().siblings().hide();
                    c.find("ul.left li").show();
                    this.curPaypalStage = this.paypalStages.redirect;
                    GS.getLightbox().trackLightboxView("vipSignup/paypal2")
                }
            } else if (this.paymentType === "cellphone")return false; else if (this.paymentType === "offers")if (this.curOffersStage === this.offersStages.promocode) {
                if (this.isSignup) {
                    GS.getLightbox().close();
                    location.hash = "#/signup/upgrade"
                }
            } else {
                c = $("#offers_content");
                c.find("ul.progress li.promocode").addClass("progress_currentStep active").removeClass("progress_previousStep").parent().removeClass("progress_onLast");
                c.find("ul.progress li.confirmation").addClass("progress_nextStep").removeClass("active progress_currentStep").siblings().removeClass("progress_nextStep");
                c.find("#pane_footer ul.right li").show();
                c.find("ul.stages li.stage.promocode").show().siblings().hide();
                this.isSignup ? c.find("ul.left li").show() :
                        c.find("ul.left li").hide();
                this.curOffersStage = this.offersStages.promocode;
                GS.getLightbox().trackLightboxView("vipSignup/offers1")
            }
            return false
        },"#lightbox_footer li.close click":function() {
            GS.getLightbox().close()
        },"select#ccCountry change":function(a) {
            var b = a.find("option:selected").val();
            $(".input_wrapper_selectbox.country span").text(a.find("option:selected").html());
            b === "US" ? a.parents("ul").removeClass("showRegion", a.parents("ul")) : a.parents("ul").addClass("showRegion")
        },".vipPackage input:radio change":function(a) {
            $(".vipPackage label").removeClass("active");
            $(a).closest("label").toggleClass("active", $(a).is(":checked"))
        },billingSubmit:function() {
            if (this.paymentType === "creditcard") {
                if (this.curCreditCardStage === this.creditCardStages.confirmation)return this.creditCardConfirmSubmit()
            } else if (this.paymentType === "paypal")if (this.curPaypalStage === this.paypalStages.redirect)return this.paypalSubmit(); else {
                if (this.curPaypalStage === this.paypalStages.confirmation)return this.paypalConfirmSubmit()
            } else if (this.paymentType === "offers")if (this.curOffersStage === this.offersStages.promocode)return this.offersSubmit();
            else {
                if (this.curOffersStage === this.offersStages.confirmation)return this.offersConfirmSubmit()
            } else if (this.paymentType === "cellphone")return this.cellphoneSubmit();
            return false
        },checkCreditCard1:function() {
            var a = $("#creditcard_content"),b = [],c = /[^\d ]/,g = a.find("select[name=cardType]").val(),h = a.find("input[name=cardNumber]").val().replace(/(\s+)/g, "").replace(/(-)/g, ""),k = a.find("input[name=secCode]").val(),m = a.find("select[name=expMonth]").val(),n = a.find("select[name=expYear]").val(),o = function(v) {
                return v.parents(".input_wrapper").addClass("error").siblings("label").addClass("error")
            },
                    q = function(v) {
                        return v.parents(".input_wrapper").removeClass("error").siblings("label").removeClass("error")
                    };
            this.element.find(".error.response").hide();
            if (!g || !h || !k || !m || !n)b.push({errorID:"CC-03"});
            g ? q(a.find("select[name=cardType]")) : o(a.find("select[name=cardType]"));
            if (!h || h.length > 16 || h.length < 13 || c.test(h)) {
                b.push({message:$.localize.getString("VIP_ERROR_CARD_NUMBER")});
                o(a.find("input[name=cardNumber]"))
            } else q(a.find("input[name=cardNumber]"));
            if (!k || k.length > 4 || k.length < 3 || c.test(k)) {
                b.push({message:$.localize.getString("VIP_ERROR_INVALID_CVD")});
                o(a.find("input[name=secCode]"))
            } else q(a.find("input[name=secCode]"));
            m ? q(a.find("select[name=expMonth]")) : o(a.find("select[name=expMonth]"));
            n ? q(a.find("select[name=expYear]")) : o(a.find("select[name=expYear]"));
            if (b.length) {
                this.showVipErrors({error:b});
                return false
            }
            return true
        },checkCreditCard2:function() {
            var a = $("#creditcard_content"),b = [],c = a.find("select[name=country]").val(),g = a.find("input[name=fname]").val(),h = a.find("input[name=address1]").val(),k = a.find("input[name=city]").val(),m = a.find("input[name=zip]").val(),
                    n = function(q) {
                        return q.parents(".input_wrapper").addClass("error").siblings("label").addClass("error")
                    },o = function(q) {
                return q.parents(".input_wrapper").removeClass("error").siblings("label").removeClass("error")
            };
            this.element.find(".error.response").hide();
            if (!c || !k || !m || !h)b.push({errorID:"CC-03"});
            g || b.push({errorID:"CC-01"});
            c ? o(a.find("select[name=iso]")) : n(a.find("select[name=iso]"));
            g ? o(a.find("input[name=fname]")) : n(a.find("input[name=fname]"));
            h ? o(a.find("input[name=address1]")) : n(a.find("input[name=address1]"));
            k ? o(a.find("input[name=city]")) : n(a.find("input[name=city]"));
            m ? o(a.find("input[name=zip]")) : n(a.find("input[name=zip]"));
            if (b.length) {
                this.showVipErrors({error:b});
                return false
            }
            return true
        },creditCardSubmit:function() {
            var a = $("#creditcard_content"),b = hex_md5((new Date).getTime()),c = {vipToken:this.vipToken,callbackMethod:b,callbackUrl:this.vipCallbackUrl,vipPackage:a.find("input[name=ccPackage]:checked").val(),anywhere:this.anywhere,bExtend:this.bExtend,bCancelRecurring:1,recurring:1,iso:a.find("select[name=country]").val(),
                fName:a.find("input[name=fname]").val(),cardType:a.find("select[name=cardType]").val(),expMonth:a.find("select[name=expMonth]").val(),expYear:a.find("select[name=expYear]").val(),cardNumber:a.find("input[name=cardNumber]").val().replace(/(\s+)/g, "").replace(/(-)/g, ""),secCode:a.find("input[name=secCode]").val(),address1:a.find("input[name=address1]").val(),address2:a.find("input[name=address2]").val(),city:a.find("input[name=city]").val(),state:a.find("select[name=state]").val(),region:a.find("input[name=region]").val(),
                zip:a.find("input[name=zip]").val()};
            if (this.updateCreditCard) {
                b = c.cardNumber.replace(/[0-9]+([0-9]{4})/, "************$1");
                var g = c.cardType.toUpperCase();
                a.find(".confirmation td.credit_card").html(g + "&nbsp;&nbsp;" + b);
                a.find(".confirmation td.expiration").html(c.expMonth + "/" + c.expYear);
                a.find(".confirmation td.name").html(c.fName);
                a.find(".confirmation td.address span.street").html(c.address1 + (c.address2 ? " " + c.address2 : ""));
                a.find(".confirmation td.address span.citystate").html(c.city + ", " + c.state);
                a.find(".confirmation td.zip").html(c.zip);
                a.find(".confirmation td.country").html((c.region ? " " + c.region : "") + c.iso);
                a.find("ul.progress li.billing").addClass("progress_previousStep").removeClass("progress_currentStep");
                a.find("ul.progress li.confirmation").addClass("active progress_currentStep").parent().addClass("progress_onLast");
                a.find("ul.stages li.stage.confirmation").show().siblings().hide();
                a.find("ul.right li.update").show().siblings().hide();
                a.find("ul.left li").show();
                this.curCreditCardStage =
                        this.creditCardStages.confirmation;
                this.element.find(".error.response").hide();
                GS.getLightbox().trackLightboxView("vipSignup/creditcardConfirm")
            } else {
                window[b] = this.callback(function(h) {
                    if (h.bSuccess) {
                        this.creditCardConfirmToken = h.token;
                        a.find(".confirmation td.credit_card").html(h.credit_card);
                        a.find(".confirmation td.price").html("$" + h.amount);
                        a.find(".confirmation td.tax").html("$" + h.tax);
                        a.find(".confirmation td.total").html("$" + h.total);
                        h.bRecurring == true || h.bRecurring == "1" ? a.find(".confirmation p.recurring").html($.localize.getString("SUBSCRIPTION_RECURRING")).attr("data-translate-text",
                                "SUBSCRIPTION_RECURRING") : a.find(".confirmation p.recurring").html($.localize.getString("SUBSCRIPTION_NOT_RECURRING")).attr("data-translate-text", "SUBSCRIPTION_NOT_RECURRING");
                        a.find("ul.progress li.billing").addClass("progress_previousStep").removeClass("progress_currentStep");
                        a.find("ul.progress li.confirmation").addClass("active progress_currentStep").parent().addClass("progress_onLast");
                        a.find("ul.stages li.stage.confirmation").show().siblings().hide();
                        a.find("ul.right li.next").show().siblings().hide();
                        a.find("ul.left li").show();
                        this.curCreditCardStage = this.creditCardStages.confirmation;
                        this.element.find(".error.response").hide();
                        GS.getLightbox().trackLightboxView("vipSignup/creditcardConfirm")
                    } else this.showVipErrors(h)
                });
                GS.service.httpsFormSubmit(this.vipEndpoint + "payByCreditCard.php", c, b)
            }
            return false
        },creditCardConfirmSubmit:function() {
            if (this.updateCreditCard) {
                var a = $("#creditcard_content");
                b = "updateCreditCard.php";
                c = hex_md5((new Date).getTime());
                a = {callbackMethod:c,callbackUrl:this.vipCallbackUrl,
                    iso:a.find("select[name=country]").val(),fName:a.find("input[name=fname]").val(),cardType:a.find("select[name=cardType]").val(),expMonth:a.find("select[name=expMonth]").val(),expYear:a.find("select[name=expYear]").val(),cardNumber:a.find("input[name=cardNumber]").val().replace(/(\s+)/g, "").replace(/(-)/g, ""),secCode:a.find("input[name=secCode]").val(),address1:a.find("input[name=address1]").val(),address2:a.find("input[name=address2]").val(),city:a.find("input[name=city]").val(),state:a.find("select[name=state]").val(),
                    region:a.find("input[name=region]").val(),zip:a.find("input[name=zip]").val()}
            } else {
                var b = "payByCreditCardConfirm.php",c = hex_md5((new Date).getTime());
                a = {callbackUrl:this.vipCallbackUrl,callbackMethod:c,token:this.creditCardConfirmToken}
            }
            window[c] = this.callback(function(g) {
                var h = this.anywhere || this.vip ? this.vipPackages.anywhere : this.vipPackages.plus;
                if (g.bSuccess)if (this.updateCreditCard) {
                    $.publish("gs.notification", {message:$.localize.getString("VIP_MSG_UPDATED_CC")});
                    GS.getLightbox().close()
                } else {
                    GS.user.updateAccountType(h);
                    GS.getLightbox().trackLightboxView("vipSignup/ccSuccess");
                    GS.getLightbox().close();
                    location.hash = "#/signup/complete"
                } else this.showVipErrors(g)
            });
            GS.service.httpsFormSubmit(this.vipEndpoint + b, a, c)
        },paypalSubmit:function() {
            var a = $("#paypal_content"),b = 0,c = this.vipEndpoint + "payByPaypal.php",g = hex_md5((new Date).getTime()),h = {vipToken:this.vipToken,callbackUrl:this.vipCallbackUrl,callbackMethod:g,vipPackage:a.find("input[name=paypalPackage]:checked").val(),anywhere:this.anywhere,bExtend:this.bExtend,
                recurring:1,country:a.find("select[name=country]").val()};
            _.forEach(h, function(k, m) {
                c += b === 0 ? "?" + m + "=" + encodeURI(k) : "&" + m + "=" + encodeURI(k);
                b++
            });
            console.warn("open paypal window", c);
            h = window.open();
            h.addEventListener ? h.addEventListener("dominitialize", function() {
                var k = {};
                k[g] = window[g];
                document.getElementById("httpsIframe").contentWindow.parentSandboxBridge = k
            }) : h.attachEvent("dominitialize", function() {
                var k = {};
                k[g] = window[g];
                document.getElementById("httpsIframe").contentWindow.parentSandboxBridge =
                        k
            });
            h.document.location = c;
            a.find("p.redirectLink a").attr("href", c);
            window[g] = this.callback(function(k) {
                if (k.bSuccess) {
                    this.paypalConfirmToken = k.token;
                    a.find(".confirmation td.vipPackage").html(k.description);
                    a.find(".confirmation td.price").html("$" + k.amount);
                    a.find(".confirmation td.tax").html("$" + k.tax);
                    a.find(".confirmation td.total").html("$" + k.total);
                    k.bRecurring == true || k.bRecurring == "1" ? a.find(".confirmation p.recurring").html($.localize.getString("SUBSCRIPTION_RECURRING")).attr("data-translate-text",
                            "SUBSCRIPTION_RECURRING") : a.find(".confirmation p.recurring").html($.localize.getString("SUBSCRIPTION_NOT_RECURRING")).attr("data-translate-text", "SUBSCRIPTION_NOT_RECURRING");
                    a.find("ul.progress li.redirect").addClass("progress_previousStep").removeClass("progress_currentStep");
                    a.find("ul.progress li.confirmation").addClass("active progress_currentStep").parent().addClass("progress_onLast");
                    a.find("ul.stages li.stage.confirmation").show().siblings().hide();
                    a.find("ul.right li.next").show().siblings().hide();
                    a.find("ul.left li").show();
                    this.curPaypalStage = this.paypalStages.confirmation;
                    this.element.find(".error.response").hide();
                    GS.getLightbox().trackLightboxView("vipSignup/paypalConfirm")
                } else this.showVipErrors(k)
            });
            a.find("ul.progress li").addClass("active");
            a.find("ul.progress li:last").removeClass("active");
            a.find("ul.stages li.stage.redirect").show().siblings().hide();
            a.find("#pane_footer li").hide();
            a.find("ul.left li").show();
            this.curPaypalStage = this.paypalStages.redirect;
            return false
        },paypalConfirmSubmit:function() {
            var a =
                    hex_md5((new Date).getTime()),b = {callbackMethod:a,callbackUrl:this.vipCallbackUrl,token:this.paypalConfirmToken};
            window[a] = this.callback(function(c) {
                var g = this.anywhere || this.vip ? this.vipPackages.anywhere : this.vipPackages.plus;
                if (c.bSuccess) {
                    GS.user.updateAccountType(g);
                    GS.getLightbox().trackLightboxView("vipSignup/paypalSuccess");
                    GS.getLightbox().close();
                    location.hash = "#/signup/complete"
                } else this.showVipErrors(c)
            });
            GS.service.httpsFormSubmit(this.vipEndpoint + "payByPaypalConfirm.php", b, a);
            return false
        },
        offersSubmit:function() {
            var a = $("#signup_promocode").val();
            if (a === "")$("#signup_promocode").parent().parent().addClass("error"); else {
                $("#signup_promocode").parent().parent().removeClass("error");
                var b = hex_md5((new Date).getTime());
                a = {vipToken:this.vipToken,callbackMethod:b,callbackUrl:this.vipCallbackUrl,anywhere:this.anywhere,bExtend:this.bExtend,code:a};
                window[b] = this.callback(function(c) {
                    if (c.bSuccess) {
                        this.offersConfirmToken = c.token;
                        var g = $("#offers_content");
                        g.find(".confirmation .description").html(c.description);
                        var h = g.find(".confirmation p.recurring"),k = g.find(".confirmation p.userWarning");
                        c.bRecurring == true || c.bRecurring == "1" ? h.html($.localize.getString("SUBSCRIPTION_RECURRING")).attr("data-translate-text", "SUBSCRIPTION_RECURRING") : h.html($.localize.getString("SUBSCRIPTION_NOT_RECURRING")).attr("data-translate-text", "SUBSCRIPTION_NOT_RECURRING");
                        GS.user.IsPremium ? k.show() : k.hide();
                        g.find("ul.progress li.promocode").addClass("progress_previousStep").removeClass("progress_currentStep");
                        g.find("ul.progress li.confirmation").addClass("active progress_currentStep").parent().addClass("progress_onLast");
                        g.find("ul.stages li.stage.confirmation").show().siblings().hide();
                        g.find("ul.right li.next").show().siblings().hide();
                        g.find("ul.left li").show();
                        this.curOffersStage = this.offersStages.confirmation;
                        this.element.find(".error.response").hide();
                        GS.getLightbox().trackLightboxView("vipSignup/offersConfirm")
                    } else this.showVipErrors(c)
                });
                GS.service.httpsFormSubmit(this.vipEndpoint + "payByPromoCode.php", a, b)
            }
            return false
        },offersConfirmSubmit:function() {
            var a = hex_md5((new Date).getTime()),b = {callbackMethod:a,
                callbackUrl:this.vipCallbackUrl,token:this.offersConfirmToken};
            window[a] = this.callback(function(c) {
                var g = this.anywhere || this.vip ? this.vipPackages.anywhere : this.vipPackages.plus;
                if (c.bSuccess) {
                    GS.user.updateAccountType(g);
                    GS.getLightbox().trackLightboxView("vipSignup/offersSuccess");
                    GS.getLightbox().close();
                    location.hash = "#/signup/complete"
                } else this.showVipErrors(c)
            });
            GS.service.httpsFormSubmit(this.vipEndpoint + "payByPromoCodeConfirm.php", b, a);
            return false
        },cellphoneSubmit:function() {
            return false
        },
        cellphoneConfirmSubmit:function() {
            return false
        }})
})();
GS.Controllers.BaseController.extend("GS.Controllers.Lightbox.VipExpiresController", {onDocument:false}, {init:function(a, b) {
    this.update(b)
},update:function(a) {
    this.data = _.orEqual(a, {});
    this.daysLeft = _.orEqual(this.data.daysLeft, "days");
    this.timeframe = _.orEqual(this.data.timeframe, "twoWeeks");
    this.element.html(this.view("/lightbox/vipExpires"))
},"button.remind click":function() {
    GS.store.set("gs.vipExpire.hasSeen" + GS.user.UserID, (new Date).getTime());
    GS.getLightbox().close()
},"button.renew click":function() {
    GS.getLightbox().close();
    var a;
    a = this.data.subscriptionType.match("Anywhere") ? "anywhere" : this.data.subscriptionType.match("Plus") ? "plus" : this.data.bVip === true || this.data.bVip === 1 ? "vip" : "plus";
    if (a === "vip" || a === "anywhere")GS.getLightbox().open("vipSignup", {bExtend:1,vipPackage:this.data.bVip ? "vip" : a}); else location.hash = "#/signup/upgrade"
}});
GS.Controllers.BaseController.extend("GS.Controllers.Lightbox.VipCancelController", {onDocument:false}, {init:function() {
    this.update()
},update:function() {
    this.element.html(this.view("/lightbox/vipCancel"))
},"form submit":function(a, b) {
    b.preventDefault();
    var c = hex_md5((new Date).getTime()),g = gsConfig.runMode == "production" ? "https://vip.grooveshark.com/" : "https://stagingvip.grooveshark.com/",h = {callbackMethod:c,callbackUrl:location.protocol + "//" + location.host + "/vipCallback.php"};
    window[c] = this.callback(function() {
        GS.getLightbox().close();
        location.hash = "/settings/subscriptions?r=" + (new Date).getTime()
    });
    GS.service.httpsFormSubmit(g + "disableRecurring.php", h, c);
    return false
}});
GS.Controllers.BaseController.extend("GS.Controllers.Lightbox.ThemesController", {onDocument:false}, {category:"all",slickbox:null,init:function() {
    this.update()
},update:function() {
    this.list = GS.Controllers.ThemeController.sortOrder;
    this.element.html(this.view("/lightbox/themes"));
    this.renderThemes(this.list)
},renderThemes:function(a) {
    this.slickbox = $("#lightbox_pane.themes").slickbox({itemRenderer:this.themeItem,itemWidth:128,itemHeight:112,padding:10,verticalGap:2}, a);
    $(window).resize()
},themeItem:function(a) {
    a =
            GS.Controllers.ThemeController.themes[a];
    var b = gsConfig.assetHost + "/themes/" + a.location + "/preview.jpg",c = "",g = GS.theme.currentTheme && GS.theme.currentTheme.themeID == a.themeID ? "active" : "";
    if (a.premium)c = '<span class="isPremium"></span>';
    return['<a class="theme ' + g + '" rel="',a.themeID,'"><img src="',b,'"><span class="title ellipsis" title="',a.title,'">',a.title,'</span><span class="author">by ',a.author,"</span></a>",c].join("")
},"#theme_options a click":function(a) {
    $("#theme_options a").removeClass("active");
    $(a).addClass("active");
    switch ($(a).attr("rel")) {
        case "plus":
            this.slickbox.setItems(GS.Controllers.ThemeController.plusThemes);
            break;
        case "artists":
            this.slickbox.setItems(GS.Controllers.ThemeController.artistThemes);
            break;
        case "all":
        default:
            this.slickbox.setItems(GS.Controllers.ThemeController.sortOrder);
            break
    }
    GS.resize()
},"a.theme click":function(a) {
    var b = _.defined($(a).attr("rel")) ? parseInt($(a).attr("rel"), 10) : 4,c = GS.Controllers.ThemeController.themes[b],g = $(".title", a).text();
    if (c && (GS.user.IsPremium ||
            !c.premium)) {
        c.premium ? GS.theme.setCurrentTheme(b, true) : GS.theme.loadFromDFPManual(c.themeID);
        $("a.theme").removeClass("active");
        $(a).addClass("active");
        GS.getLightbox().trackLightboxView("themes/" + g);
        GS.getGuts().gaTrackEvent("themes", "userChange", b);
        GS.getGuts().logEvent("themeChangePerformed", {theme:g,id:b})
    } else if (c) {
        GS.getLightbox().close();
        GS.getLightbox().open("vipOnlyFeature", {callback:function() {
            c.premium ? GS.theme.setCurrentTheme(b, true) : GS.theme.loadFromDFPManual(c.themeID)
        }})
    }
}});
(function() {
    GS.Controllers.BaseController.extend("GS.Controllers.Lightbox.ShareController", {onDocument:false,allowed:{album:["email","facebook","stumbleupon","twitter","widget"],playlist:["email","facebook","stumbleupon","twitter","reddit","widget"],song:["email","facebook","stumbleupon","twitter","reddit","widget"],manySongs:["widget"]}}, {service:"email",type:null,id:0,ids:[],idsUrl:"",metadata:null,userInfo:{},gutsShareState:{},MAX_TWEET_LENGTH:140,width:250,height:250,widget:{},playOnLoad:0,baseColor:false,
        primaryColor:false,secondaryColor:false,colorParams:"",theme:"metal",swf:"songWidget",seoText:null,facebookLoaded:false,init:function(a, b) {
            this.update(b);
            this.subscribe("lightbox.position", this.callback(this._repositionClips));
            this.subscribe("gs.facebook.profile.update", this.callback("onFacebookUpdate"))
        },destroy:function(a) {
            this.clipHandler && this.clipHandler.hide();
            this.widgetClipHandler && this.widgetClipHandler.hide();
            this._super(a)
        },"#share_content .textboxlist-bit-editable-input keydown":function(a, b) {
            if (b.keyCode == 188) {
                b.preventDefault();
                var c = jQuery.Event("keydown");
                c.which = 13;
                a.trigger(c)
            }
        },"#share_message.twitter keyup":function(a) {
            var b = $(a).val();
            b.length <= this.MAX_TWEET_LENGTH ? $("#twitter_counter").html(b.length) : $(a).val(b.substring(0, this.MAX_TWEET_LENGTH))
        },update:function(a) {
            var b = this;
            this.service = a.service;
            this.type = a.type;
            this.id = a.id;
            this.userInfo = {};
            this.width = 250;
            this.height = 40;
            this.playOnLoad = 0;
            this.swf = "songWidget";
            this.theme = "metal";
            switch (a.type) {
                case "album":
                    GS.Models.Album.getAlbum(this.id,
                            this.callback(function(c) {
                                this.metadata = c;
                                this.metadata.name = c.AlbumName;
                                this.metadata.by = c.ArtistName;
                                this.metadata.url = "http://grooveshark.com/" + c.toUrl().replace("#/", "");
                                this.widgetID = "gsAlbum" + this.id + Math.floor(Math.random() * 101);
                                b.loadService()
                            }));
                    break;
                case "artist":
                    GS.Models.Artist.getArtist(this.id, this.callback(function(c) {
                        this.metadata = c;
                        this.metadata.name = c.ArtistName;
                        this.metadata.url = "http://grooveshark.com/" + c.toUrl().replace("#/", "");
                        this.widgetID = "gsArtist" + this.id + Math.floor(Math.random() *
                                101);
                        b.loadService()
                    }));
                    break;
                case "playlist":
                    this.height = 250;
                    this.swf = "widget";
                    GS.Models.Playlist.getPlaylist(this.id, this.callback(function(c) {
                        this.metadata = c;
                        this.metadata.name = c.PlaylistName;
                        this.metadata.by = c.UserName;
                        this.metadata.url = "http://grooveshark.com/" + c.toUrl().replace("#/", "");
                        this.widgetID = "gsPlaylist" + this.id + Math.floor(Math.random() * 101);
                        this.loadService()
                    }));
                    break;
                case "song":
                    GS.Models.Song.getSong(this.id, this.callback(function(c) {
                        this.metadata = c;
                        this.metadata.name = c.SongName;
                        this.metadata.by = c.ArtistName;
                        this.metadata.url = "http://grooveshark.com/" + c.toUrl().replace("#/", "");
                        this.idsUrl = c.SongID;
                        this.widgetID = "gsSong" + this.id + Math.floor(Math.random() * 101);
                        this.loadService()
                    }));
                    break;
                case "manySongs":
                    this.idsUrl = this.id.join(",");
                    this.height = 250;
                    this.swf = "widget";
                    this.metadata = {url:null,name:null};
                    this.widgetID = "gsManySongs" + this.id.slice(0, 2).join("") + Math.floor(Math.random() * 101);
                    this.loadService();
                    break
            }
        },loadService:function() {
            this.submitKey = "SHARE";
            this.showSubmit =
                    true;
            switch (this.service) {
                case "facebook":
                    if (GS.getFacebook().connected) {
                        this.facebookLoaded = false;
                        this.renderService();
                        GS.getFacebook().checkUserPermissions(GS.getFacebook().PUBLISH_PERMISSION, this.callback(function(b) {
                            if (b)GS.getFacebook().getFriends(this.callback(function(c) {
                                if (this.service === "facebook") {
                                    this.facebookFriends = c || [];
                                    this.submitKey = c ? "SHARE_FACEBOOK_WALL" : "SHARE";
                                    this.facebookLoaded = true;
                                    this.renderService();
                                    if (c) {
                                        var g = [];
                                        $.each(this.facebookFriends, this.callback(function(h, k) {
                                            g.push([k.id,
                                                k.name,k.name])
                                        }));
                                        c = new $.TextboxList("#facebook_share_to", {addOnBlur:true,bitsOptions:{editable:{growing:true,growingOptions:{maxWidth:335}}},plugins:{autocomplete:{placeholder:$.localize.getString("SHARE_FACEBOOK_PLACEHOLDER")}},encode:this.callback(function(h) {
                                            var k = [];
                                            if (h.length) {
                                                for (var m = 0; m < h.length; m++)h[m][0] && k.push(h[m][0]);
                                                this.element.find(".submit span").attr("data-translate-text", "SEND_INVITE").html($.localize.getString("SHARE_FACEBOOK_FRIENDS"))
                                            } else this.element.find(".submit span").attr("data-translate-text",
                                                    "POST_TO_PROFILE").html($.localize.getString("SHARE_FACEBOOK_WALL"));
                                            return k.join(",")
                                        })});
                                        c.plugins.autocomplete.setValues(g);
                                        c.addEvent("bitAdd", this.callback(function(h) {
                                            this.element.find(".error").hide();
                                            if (h.getValue()[1] === "")h.hide(); else {
                                                var k = $("#facebook_share_to").val().split(",");
                                                if (k) {
                                                    var m = k.indexOf(h.getValue()[0]);
                                                    h.getValue()[0] && m >= 0 && m != k.length - 1 && h.hide();
                                                    if (h.getValue()[0])GS.getFacebook().canPostToFriend(h.getValue()[0], this.callback(function(n) {
                                                        if (!n) {
                                                            n = h.getValue()[1];
                                                            var o =
                                                                    $.localize.getString("POPUP_SHARE_ERROR_FACEBOOK_CANTPOST");
                                                            o = o.replace("{name}", n);
                                                            this.element.find(".error").show().find(".message").html(o);
                                                            h.hide();
                                                            if (k.length == 1) {
                                                                this.submitKey = "SHARE_FACEBOOK_WALL";
                                                                this.element.find(".submit span").html($.localize.getString(this.submitKey))
                                                            }
                                                            GS.getLightbox().positionLightbox()
                                                        }
                                                    })); else {
                                                        h.hide();
                                                        if (k.length == 1) {
                                                            this.submitKey = "SHARE_FACEBOOK_WALL";
                                                            this.element.find(".submit span").html($.localize.getString(this.submitKey))
                                                        }
                                                    }
                                                }
                                            }
                                        }));
                                        c.fireEvent("focus")
                                    } else {
                                        this.element.find("#fbConnected").hide();
                                        this.element.find("#fbNotConnected").show();
                                        this.element.find(".error").show().find(".message").html($.localize.getString("POPUP_SHARE_FACEBOOK_ERROR_FRIENDS"));
                                        GS.getLightbox().positionLightbox()
                                    }
                                }
                            })); else {
                                this.submitKey = "SHARE";
                                this.facebookLoaded = true;
                                this.renderService();
                                this.element.find("#fbConnected").hide();
                                this.element.find("#fbNotConnected").show();
                                this.element.find(".error").show().find(".message").html($.localize.getString("POPUP_SHARE_FACEBOOK_ERROR_NO_PERMS"));
                                GS.getLightbox().positionLightbox()
                            }
                        }),
                                this.callback(function() {
                                    this.submitKey = "SHARE";
                                    this.facebookLoaded = true;
                                    this.renderService();
                                    this.element.find("#fbConnected").hide();
                                    this.element.find("#fbNotConnected").show();
                                    this.element.find(".error").show().find(".message").html($.localize.getString("POPUP_SHARE_FACEBOOK_ERROR_FRIENDS"));
                                    GS.getLightbox().positionLightbox()
                                }))
                    } else {
                        this.facebookFriends = [];
                        this.submitKey = "SHARE";
                        this.facebookLoaded = true;
                        this.renderService();
                        if (GS.getFacebook().facebookUserID && GS.getFacebook().loggedIntoFacebook) {
                            this.element.find(".error").show().find(".message").html($.localize.getString("FACEBOOK_PROBLEM_WRONG_USER"));
                            GS.getLightbox().positionLightbox()
                        } else if (GS.getFacebook().facebookUserID) {
                            this.element.find(".error").show().find(".message").html($.localize.getString("FACEBOOK_PROBLEM_NO_LOGIN"));
                            GS.getLightbox().positionLightbox()
                        }
                    }
                    GS.getLightbox().trackLightboxView("share/facebook");
                    break;
                case "email":
                    this.renderService();
                    GS.user.UserID > 0 && GS.service.getContactInfoForFollowers(this.callback(function(b) {
                        var c = [];
                        $.each(b, this.callback(function(g, h) {
                            c.push([h.UserID,h.FName + " " + h.Email,h.FName,h.FName]);
                            this.userInfo[h.UserID] =
                                    h;
                            this.userInfo[h.Email] = h
                        }));
                        b = new $.TextboxList("#share_to", {addOnBlur:true,bitsOptions:{editable:{growing:true,growingOptions:{maxWidth:335}}},plugins:{autocomplete:{placeholder:$.localize.getString("SHARE_EMAIL_PLACEHOLDER")}},encode:this.callback(function(g) {
                            for (var h = [],k = 0; k < g.length; k++)if (g[k][0])h.push(g[k][0]); else g[k][1] && h.push(g[k][1]);
                            return h.join(",")
                        })});
                        b.plugins.autocomplete.setValues(c);
                        b.addEvent("bitAdd", function(g) {
                            g.getValue()[1] === "" && g.hide()
                        });
                        b.fireEvent("focus")
                    }), this.callback(function(b) {
                        console.warn("failed grabbing contact info for followers",
                                autocompleteTerms, b);
                        $.publish("gs.notification", {type:"error",message:$.localize.getString("POPUP_FAIL_FANS_EMAIL_ONLY")})
                    }), {async:false});
                    GS.getLightbox().trackLightboxView("share/email");
                    setTimeout(function() {
                        $("#share_content .textboxlist-bit-editable-input").focus()
                    }, 0);
                    break;
                case "twitter":
                    var a = "http://grooveshark.com/" + this.metadata.toUrl().replace("#/", "");
                    GS.getTwitter().getTwitterShareMessage(this.type, this.metadata, a, this.callback(function(b, c) {
                        this.tinysong = {tinySongURL:c};
                        this.shareMessage =
                                b + " " + c;
                        this.submitKey = "SHARE_TWITTER_TWEET";
                        this.renderService()
                    }));
                    GS.getLightbox().trackLightboxView("share/twitter");
                    break;
                case "stumbleupon":
                    this.submitKey = "SHARE_STUMBLE";
                    this.renderService();
                    GS.getLightbox().trackLightboxView("share/stumbleupon");
                    break;
                case "reddit":
                    this.submitKey = "SHARE_REDDIT";
                    this.renderService();
                    GS.getLightbox().trackLightboxView("share/reddit");
                    break;
                case "widget":
                    if (this.type == "song")this.seoText = this.metadata.name + ' by <a href="' + ("http://grooveshark.com/" + _.cleanUrl(this.metadata.ArtistName,
                            this.metadata.ArtistID, "artist").replace("#/", "")) + '" title="' + this.metadata.ArtistName + '">' + this.metadata.ArtistName + "</a> on Grooveshark"; else if (this.metadata.url) {
                        a = this.metadata.name + (this.metadata.by ? " by " + this.metadata.by : "") + " on Grooveshark";
                        this.seoText = '<a href="' + this.metadata.url + '" title="' + a + '">' + a + "</a>"
                    }
                    if (this.widget.colorMap) {
                        this.renderService();
                        this.initColorPicker();
                        GS.getLightbox().trackLightboxView("share/widget")
                    } else $.ajax({url:"/webincludes/json/widgetColors.json",success:this.callback(function(b) {
                        try {
                            this.widget =
                                    JSON.parse(b)
                        } catch(c) {
                            this.renderService();
                            this.element.find(".error").show().find(".message").html($.localize.getString("POPUP_SHARE_FAILED_WIDGET_COLORS"));
                            GS.getLightbox().positionLightbox();
                            return
                        }
                        this.colorMap = this.widget.colorMap;
                        this.paramMap = this.widget.paramMap;
                        this.defaultColors = this.widget.defaultColors;
                        this.featuredColors = this.widget.featuredColors;
                        this.baseColor = this.defaultColors[this.colorMap.baseColors[0]];
                        this.primaryColor = this.defaultColors[this.colorMap.primaryColors[0]];
                        this.secondaryColor =
                                this.defaultColors[this.colorMap.secondaryColors[0]];
                        this.updateWidgetColorParams();
                        this.renderService();
                        this.initColorPicker();
                        GS.getLightbox().trackLightboxView("share/widget")
                    }),error:function() {
                        this.renderService();
                        this.element.find(".error").show().find(".message").html($.localize.getString("POPUP_SHARE_FAILED_WIDGET_COLORS"));
                        GS.getLightbox().positionLightbox()
                    }});
                    break;
                default:
                    this.showSubmit = false;
                    this.renderService();
                    GS.getLightbox().trackLightboxView("share/default");
                    break
            }
        },makeBaseGutsLogState:function() {
            var a =
            {type:this.type,service:this.service};
            switch (this.type) {
                case "playlist":
                    a.PlaylistID = this.metadata.PlaylistID;
                    break;
                case "song":
                    a.SongID = this.metadata.SongID;
                    break;
                case "album":
                    a.AlbumID = this.metadata.AlbumID;
                    break
            }
            this.gutsShareState = a
        },renderService:function() {
            this.element.html(this.view("/lightbox/share/index"));
            GS.theme.currentTheme.sections.indexOf("#theme_share_header") >= 0 ? GS.theme.renderSection("#theme_share_header") : $("#theme_share_header").hide();
            GS.getLightbox().positionLightbox()
        },_repositionClips:function() {
            var a;
            a = $("#lightbox button.share_btn.copy");
            if (a.length) {
                if (GS.getLightbox().clipHandler) {
                    this.clipHandler = GS.getLightbox().clipHandler;
                    this.clipHandler.reposition(a.get(0))
                } else {
                    this.clipHandler = GS.getLightbox().clipHandler = new ZeroClipboard.Client;
                    this.clipHandler.setHandCursor(true);
                    this.clipHandler.setCSSEffects(true);
                    this.clipHandler.glue(a.get(0));
                    this.clipHandler.addEventListener("complete", function() {
                        $("#lightbox button.share_btn.copy").addClass("copied").find("span").html($.localize.getString("SHARE_COPIED"))
                    })
                }
                this.clipHandler.setText(this.metadata.url);
                a.removeClass("copied").find("span").html($.localize.getString("SHARE_COPY"))
            }
            if (this.service == "widget") {
                a = $("#widget_copy");
                if (a.length) {
                    if (GS.getLightbox().widgetClipHandler) {
                        this.widgetClipHandler = GS.getLightbox().widgetClipHandler;
                        this.widgetClipHandler.reposition(a.get(0))
                    } else {
                        this.widgetClipHandler = GS.getLightbox().widgetClipHandler = new ZeroClipboard.Client;
                        this.widgetClipHandler.setHandCursor(true);
                        this.widgetClipHandler.setCSSEffects(true);
                        this.widgetClipHandler.glue(a.get(0));
                        this.widgetClipHandler.addEventListener("complete",
                                function() {
                                    $("#widget_copy").addClass("copied").find("a span").html($.localize.getString("SHARE_COPIED_TO_CLIPBOARD"))
                                })
                    }
                    this.widgetClipHandler.setText($("#share_message").val());
                    a.removeClass("copied").find("a span").html($.localize.getString("SHARE_COPY_TO_CLIPBOARD"))
                }
            }
        },"a.submit, button.submit click":function(a, b) {
            $("form", this.element).submit();
            b.preventDefault();
            b.stopPropagation()
        },"form submit":function(a, b) {
            b.preventDefault();
            b.stopPropagation();
            this.makeBaseGutsLogState();
            switch (this.service) {
                case "email":
                    this.broadcastEmail(a,
                            b);
                    break;
                case "stumbleupon":
                case "reddit":
                    window.open(_.makeUrlForShare(this.service, this.type, this.metadata), "_blank");
                    break;
                case "twitter":
                    var c = $("textarea[name=share_message]", this.element).val();
                    c = c.replace(" " + this.tinysong.tinySongURL, "");
                    window.open("http://twitter.com/share?related=grooveshark&via=grooveshark&url=" + encodeURIComponent(this.tinysong.tinySongURL) + "&text=" + encodeURIComponent(c), "_blank");
                    GS.getLightbox().close();
                    break;
                case "facebook":
                    var g = "http://grooveshark.com/" + this.metadata.toUrl().replace("#/",
                            "");
                    if (GS.getFacebook().connected && window.FB && FB.getAccessToken()) {
                        c = $("#facebook_share_to").val() == "" ? [] : $("#facebook_share_to").val().split(",");
                        this.gutsShareState.ids = "[" + c.join(",") + "]";
                        var h = $("textarea[name=facebookMessage]", a).val();
                        c.length ? _.forEach(c, this.callback(function(k) {
                            GS.getFacebook().postToFeed(k, g, h, this.type, this.type + "Share", this.callback("facebookSuccess"), this.callback("facebookFailed"))
                        })) : GS.getFacebook().postToFeed("me", g, h, this.type, this.type + "Share", this.callback("facebookSuccess"),
                                this.callback("facebookFailed"))
                    } else if (GS.getFacebook().facebookLoaded && GS.getFacebook().connected)this.facebookFailed(); else {
                        window.open("http://facebook.com/share.php?u=" + encodeURIComponent(g) + "&ref=" + this.type + "Share", "_blank");
                        GS.getLightbox().close()
                    }
                    break
            }
            GS.getGuts().forceLogEvent("share", this.gutsShareState);
            this.gutsShareState = {};
            return false
        },broadcastEmail:function(a) {
            var b = ($("input[name=to]", a).val() || "").split(","),c = $("textarea[name=message]", a).val(),g = [],h = $("#share_to").siblings(".textboxlist").find(".textboxlist-bit").not(".textboxlist-bit-box-deletable").filter(":last").text();
            a = $("input[name=privacy]", a).is(":checked");
            _.forEach(b, function(k) {
                if (this.userInfo[k])g.push({userID:this.userInfo[k].UserID,userName:this.userInfo[k].Name,email:this.userInfo[k].Email}); else k && g.push({email:k})
            }, this);
            this.gutsShareState.people = JSON.stringify(g);
            h && g.push({email:h});
            g.length ? GS.service.sendShare(this.type, this.id, g, true, c, a, this.callback("broadcastEmailSuccess"), this.callback("broadcastEmailFailed")) : this.broadcastEmailFailed()
        },broadcastEmailSuccess:function(a) {
            var b = [];
            if (!a)return this.broadcastEmailFailed(a);
            if (a.Result && a.Result.emailsFailed && a.Result.emailsFailed.length > 0) {
                _.forEach(a.Result.emailsFailed, function(c) {
                    switch (c.failReason) {
                        case 1:
                            b.push("<li>" + (new GS.Models.DataString($.localize.getString("POPUP_SHARE_ERROR_ALREADY_MESSAGED"), {emailAddresses:c.person.email})).render() + "</li>");
                            break
                    }
                });
                if (b.length) {
                    a = "<ul>" + b.join("") + "</ul>";
                    this.element.find(".error").show().find(".message").html(a)
                }
            } else {
                GS.getLightbox().close();
                $.publish("gs.notification", {message:$.localize.getString("NOTIF_FACEBOOK_SHARE_" +
                        this.type.toUpperCase())})
            }
        },broadcastEmailFailed:function() {
            this.element.find(".error").show().find(".message").html($.localize.getString("POPUP_FAIL_SHARING_FANS"));
            GS.getLightbox().positionLightbox()
        },facebookSuccess:function() {
            GS.getLightbox().close()
        },facebookFailed:function() {
            this.element.find(".error").show().find(".message").html($.localize.getString("POPUP_SHARE_FACEBOOK_ERROR"));
            GS.getLightbox().positionLightbox()
        },"#fbConnect-btn.fbConnect click":function() {
            var a = GS.getFacebook().flags;
            GS.getFacebook().logout(this.callback(function() {
                GS.getFacebook().login(null, this.callback(function(b) {
                    b && b.error ? this.element.find(".error").show().find(".message").html($.localize.getString(b.error)) : this.element.find(".error").show().find(".message").html($.localize.getString("FACEBOOK_PROBLEM_CONNECTING_ERROR_MSG"));
                    GS.getLightbox().positionLightbox()
                }), a)
            }))
        },"#fbConnect-btn.fbLogin click":function() {
            GS.getFacebook().login(null, this.callback(function(a) {
                a && a.error ? this.element.find(".error").show().find(".message").html($.localize.getString(a.error)) :
                        this.element.find(".error").show().find(".message").html($.localize.getString("FACEBOOK_PROBLEM_CONNECTING_ERROR_MSG"));
                GS.getLightbox().positionLightbox()
            }))
        },"#lightbox .error .message .resetPerms click":function(a, b) {
            b.preventDefault();
            var c = GS.getFacebook().flags;
            GS.getFacebook().logout(function() {
                GS.getFacebook().login(function() {
                    $("#lightbox").find(".error").hide()
                }, this.callback(function() {
                    error && error.error ? this.element.find(".error").show().find(".message").html($.localize.getString(error.error)) :
                            this.element.find(".error").show().find(".message").html($.localize.getString("FACEBOOK_PROBLEM_CONNECTING_ERROR_MSG"));
                    GS.getLightbox().positionLightbox()
                }), c)
            })
        },onFacebookUpdate:function() {
            this.service == "facebook" && this.loadService()
        },"#share_options .email click":function() {
            this.service = "email";
            this.loadService()
        },"#share_options .facebook click":function() {
            this.service = "facebook";
            this.loadService()
        },"#share_options .stumble click":function() {
            this.service = "stumbleupon";
            this.loadService()
        },"#share_options .twitter click":function() {
            this.service =
                    "twitter";
            this.loadService()
        },"#share_options .reddit click":function() {
            this.service = "reddit";
            this.loadService()
        },"#share_options .widget click":function() {
            this.service = "widget";
            this.loadService()
        },"button.widgetPreview click":function(a) {
            $("#share_lightbox_wrapper").height();
            var b;
            b = this.type == "manySongs" ? this.view("/shared/widgetEmbed", $.extend(this, {width:250,height:200})) : this.view("/shared/widgetEmbed", $.extend(this, {width:250}));
            $("#share_lightbox_wrapper .container").html(b).css({width:this.width,
                height:this.height});
            $("#share_lightbox_overlay,#share_lightbox_wrapper").show();
            GS.getLightbox().positionLightbox();
            a.parent().hide().siblings().show();
            this.widgetClipHandler.reposition("widget_copy");
            GS.getLightbox().trackLightboxView("share/widget/preview")
        },"button.widgetCustomize click":function(a) {
            $("#share_lightbox_overlay,#share_lightbox_wrapper").hide();
            GS.getLightbox().positionLightbox();
            a.parent().hide().siblings().show();
            this.widgetClipHandler.reposition("widget_copy");
            GS.getLightbox().trackLightboxView("share/widget/customize")
        },
        "#share_lightbox_wrapper .widgetPreviewClose click":function() {
            $("button.widgetCustomize", this.element).click()
        },updateWidgetTextarea:function() {
            this.updateWidgetColorParams();
            $("#widget_embed textarea").val(this.view("/shared/widgetEmbed"));
            this.widgetClipHandler.setText($("#share_message").val())
        },updateWidgetColorParams:function() {
            for (var a = [],b = 0; b < this.colorMap.baseColors.length; b++)a.push(this.paramMap[this.colorMap.baseColors[b]] + "=" + this.baseColor);
            for (b = 0; b < this.colorMap.primaryColors.length; b++)a.push(this.paramMap[this.colorMap.primaryColors[b]] +
                    "=" + this.primaryColor);
            for (b = 0; b < this.colorMap.secondaryColors.length; b++)a.push(this.paramMap[this.colorMap.secondaryColors[b]] + "=" + this.secondaryColor);
            this.colorParams = a.join("&")
        },".widgetPanes input change":function(a) {
            if (a.attr("type") == "checkbox")this[a.attr("name")] = a.is(":checked") ? 1 : 0; else this[a.attr("name")] = a.val();
            this.updateWidgetTextarea()
        },".widgetPanes ul.themes li click":function(a) {
            a.addClass("active").siblings().removeClass("active")
        },".widgetPanes select.colorScheme blur":function(a) {
            a.change()
        },
        ".widgetPanes select.colorScheme change":function(a) {
            var b = this.featuredColors[a.val()],c = this.colorMap.baseColors,g = this.colorMap.primaryColors,h = this.colorMap.secondaryColors;
            $("#baseColorInput").val(b[c[0]]).siblings(".colorEx").css("backgroundColor", "#" + b[c[0]]);
            $("#primaryColorInput").val(b[g[0]]).siblings(".colorEx").css("backgroundColor", "#" + b[g[0]]);
            $("#secondaryColorInput").val(b[h[0]]).siblings(".colorEx").css("backgroundColor", "#" + b[h[0]]);
            a.siblings("span").html(a.find("option:selected").html());
            this.baseColor = b[c[0]];
            this.primaryColor = b[g[0]];
            this.secondaryColor = b[h[0]];
            this.updateWidgetTextarea()
        },initColorPicker:function() {
            var a = null,b = false;
            $("button.colorPicker", this.element).each(function() {
                var c = $(this);
                c.ColorPicker({onHide:function(g) {
                    b && a.removeClass("isopen");
                    c.removeClass("active");
                    $(g).slideUp(500);
                    return b = false
                },onShow:function(g) {
                    a && a != c && a.removeClass("isopen");
                    if ($(g).is(":visible")) {
                        c.removeClass("isopen");
                        a.removeClass("isopen");
                        $(g).hide();
                        a = null;
                        b = false
                    } else {
                        $(g).slideDown(500);
                        c.addClass("active").addClass("isopen");
                        a = c;
                        b = true
                    }
                    return false
                },onBeforeShow:function() {
                    $(this).ColorPickerSetColor($(this).siblings("input").attr("value"));
                    return false
                },onChange:function(g, h) {
                    c.siblings(".colorEx").css("backgroundColor", "#" + h);
                    c.siblings("input").attr("value", h);
                    c.siblings("input").change()
                }})
            })
        }})
})();
GS.Controllers.BaseController.extend("GS.Controllers.Lightbox.ForgetController", {onDocument:false}, {MIN_USERPASS_LENGTH:5,MAX_USERPASS_LENGTH:32,init:function(a, b) {
    this.update(b)
},update:function(a) {
    if (a && _.defined(a.resetCode)) {
        this.reset = true;
        this.resetCode = a.resetCode
    } else this.resetCode = this.reset = false;
    this.element.html(this.view("/lightbox/forget"))
},showError:function(a) {
    $("div.message", this.element).html($.localize.getString(a));
    this.element.find(".error").show();
    GS.getLightbox().positionLightbox()
},
    "a.login click":function() {
        GS.getLightbox().close();
        GS.getLightbox().open("login", {premiumRequired:gsConfig.isPreview,notCloseable:gsConfig.isPreview})
    },"a.submit click":function() {
        $("form", this.element).submit()
    },"form submit":function(a, b) {
        b.preventDefault();
        var c = $("input[name=username]", a).val();
        if (this.reset) {
            var g = $("input[name=newPassword]", a).val(),h = $("input[name=confirmPassword]", a).val();
            g == h && g.length && g.length >= this.MIN_USERPASS_LENGTH && g.length <= this.MAX_USERPASS_LENGTH ? GS.service.resetPassword(c,
                    this.resetCode, g, this.callback(this.resetSuccess, c, g), this.callback(this.resetFailed)) : this.showError("POPUP_SIGNUP_FORM_PASSWORD_INVALID_NO_MATCH")
        } else GS.service.userForgotPassword(c, this.callback(this.serviceSuccess), this.callback(this.serviceFailed));
        return false
    },serviceSuccess:function(a) {
        if (a && a.userID == 0 || !a)return this.serviceFailed(a);
        GS.getLightbox().close();
        $.publish("gs.notification", {message:$.localize.getString("POPUP_RESET_PASSWORD_SUCCESS")})
    },serviceFailed:function() {
        this.showError("POPUP_SIGNUP_FORGOT_FORM_RESPONSE_ERROR")
    },
    resetSuccess:function(a, b, c) {
        if (!c || c.success != 1)return this.resetFailed(c);
        GS.getLightbox().close();
        GS.auth.login(a, b)
    },resetFailed:function(a) {
        if (_.defined(a.success))a.success == 0 ? this.showError("POPUP_FORGET_RESET_ERROR_BADUSER") : this.showError("POPUP_FORGET_RESET_ERROR_BADCODE"); else this.showError("POPUP_FORGET_RESET_ERROR_UNKNOWN")
    }});
GS.Controllers.BaseController.extend("GS.Controllers.Lightbox.FeedbackController", {onDocument:false}, {home_devices:["Grooveshark Web","Grooveshark Desktop","Preview"],mobile_devices:["iPhone","Android","Blackberry","Nokia","webOS"],init:function(a) {
    this.update();
    this.options = a
},update:function() {
    this.user = GS.user;
    this.feelings = $.localize.getString("POPUP_FEEDBACK_FEELINGS").split(",");
    this.isDesktop = GS.airbridge ? GS.airbridge.isDesktop : false;
    this.element.html(this.view("/lightbox/feedback"))
},"a.submit, button.submit click":function() {
    $("form",
            this.element).submit()
},"#feedback_feeling change":function(a) {
    $(a).siblings("span").text($(a).val())
},"form submit":function(a, b) {
    b.preventDefault();
    if ($("input[name=feedbackType]", a).val() === "preview") {
        var c = $("input[name=email]", a).val(),g = $("input:radio[name=grade]:checked", a).val(),h = $("textarea[name=feedback]", a).val();
        if ((h.length || g) && c.length) {
            h = "#feedbackType:preview\nUser email address: " + c + "\nGrade: " + g + "\nFeedback report:\n" + h;
            this.element.find(".error").hide();
            GS.service.provideVIPFeedback(c,
                    h, this.callback(this.feedbackSuccess), this.callback(this.feedbackFailed))
        } else this.element.find(".error").show().find(".message").html($.localize.getString("POPUP_FEEDBACK_ERROR_FEEDBACK"))
    } else {
        c = $("input[name=email]", a).val();
        g = $("select[name=feeling]", a).val();
        var k = $("select[name=device]", a).val();
        h = $("textarea[name=feedback]", a).val();
        if (h.length && c.length) {
            h = "User email address: " + c + "\nMood: " + g + "\nDevice: " + k + "\nFeedback report:\n" + h;
            this.element.find(".error").hide();
            GS.service.provideVIPFeedback(c,
                    h, this.callback(this.feedbackSuccess), this.callback(this.feedbackFailed))
        } else if (h.length)c.length || this.element.find(".error").show().find(".message").html($.localize.getString("POPUP_FEEDBACK_ERROR_FEEDBACK")); else this.element.find(".error").show().find(".message").html($.localize.getString("POPUP_FEEDBACK_ERROR_FEEDBACK"))
    }
    return false
},feedbackSuccess:function(a) {
    if (a && a.Success == 0 || !a)return this.feedbackFailed(a);
    GS.getLightbox().close();
    $.publish("gs.user.feedback", a);
    $.publish("gs.notification",
            {type:"info",message:$.localize.getString("NOTIF_FEEDBACK_SUCCESS")})
},feedbackFailed:function() {
    this.element.find(".error").show().find(".message").html($.localize.getString("POPUP_FEEDBACK_ERROR"));
    GS.getLightbox().close()
}});
GS.Controllers.BaseController.extend("GS.Controllers.Lightbox.InteractionTimeController", {onDocument:false}, {init:function() {
    this.update()
},update:function() {
    GS.player.pauseNextSong();
    GS.Controllers.Lightbox.Generic.prototype.update.call(this, {view:{bigHeader:"POPUP_INTERACTION_TITLE",message:"POPUP_INTERACTION_MSG",buttonsRight:[
        {label:"POPUP_INTERACTION_HERE",className:"submit"}
    ]}});
    this.subscribe("gs.player.paused", this.callback("onSongPause"))
},onSongPause:function() {
    $("#lb_interacation_message").attr("data-translate-text",
            "POPUP_INTERACTION_MSG_PAUSED").html($.localize.getString("POPUP_INTERACTION_MSG_PAUSED"));
    $("#lb_interacation_submit").attr("data-translate-text", "POPUP_INTERACTION_RESUME").html($.localize.getString("POPUP_INTERACTION_RESUME"))
},"#lightbox a.upgrade click":function() {
    GS.player.pauseNextQueueSongID = false;
    GS.player.resumeSong();
    GS.getLightbox().close()
},"#lightbox a.submit click":function() {
    $("form", this.element).submit()
},"#lightbox a.close click":function() {
    $("form", this.element).submit()
},"form submit":function(a, b) {
    b.preventDefault();
    GS.player.pauseNextQueueSongID = false;
    GS.player.resumeSong();
    GS.getLightbox().close();
    return false
}});
GS.Controllers.InviteInterface.extend("GS.Controllers.Lightbox.InviteController", {onDocument:false}, {userInfo:{},googleContacts:null,facebookFriends:[],fbIDs:{},slickbox:false,init:function(a, b) {
    this.update(b);
    this.subscribe("gs.facebook.profile.update", this.callback(function() {
        $("#lightbox_pane", this.element).html(this.view("/lightbox/invite/facebook"));
        this.element.find(".error").hide();
        GS.getLightbox().positionLightbox();
        this.updateFacebook()
    }))
},update:function(a) {
    a = _.orEqual(a, {});
    this.submitType =
            "facebook";
    this.friendsLoaded = this.facebookLoaded = false;
    this.element.html(this.view("/lightbox/invite/invite"));
    $("#lightbox_pane").html(this.view("/lightbox/invite/facebook"));
    GS.getLightbox().positionLightbox();
    if (GS.getFacebook().connected)this.updateFacebook(); else if (GS.getFacebook().facebookUserID && GS.getFacebook().loggedIntoFacebook) {
        this.element.find(".error").show().find(".message").html($.localize.getString("FACEBOOK_PROBLEM_WRONG_USER"));
        GS.getLightbox().positionLightbox()
    } else if (GS.getFacebook().facebookUserID) {
        this.element.find(".error").show().find(".message").html($.localize.getString("FACEBOOK_PROBLEM_NO_LOGIN"));
        GS.getLightbox().positionLightbox()
    }
    if (a.gotoFacebook)$("#invite_options a.facebook_service").click(); else a.gotoGoogle && $("#invite_options a.google_service").click()
},"a.submit click":function() {
    $("form", this.element).submit()
},"form submit":function(a, b) {
    b.preventDefault();
    this.element.find(".error").hide();
    this.formSubmit();
    return false
},sendInviteSuccessCallback:function() {
    GS.getLightbox().close()
},googContactsSuccessCallback:function() {
    this.submitType = "googleContacts";
    $("#lightbox_pane", this.element).html(this.view("/lightbox/invite/googleContacts"));
    $("ul.google_contacts", this.element).html(this.view("/shared/googleContacts")).show();
    GS.getLightbox().positionLightbox();
    $("ul.google_contacts li:even").addClass("even contactRow_even");
    $("ul.google_contacts li:odd").addClass("odd contactRow_odd")
},facebookSuccessCallback:function() {
    GS.getLightbox().close()
},"#invite_options a click":function(a, b) {
    b.preventDefault();
    if (!$(a).is(".active")) {
        $("#invite_options a.active").removeClass("active");
        $(a).addClass("active");
        switch ($(a).attr("name")) {
            case "email":
                this.submitType =
                        "email";
                $("#lightbox_pane", this.element).html(this.view("/lightbox/invite/email"));
                new $.TextboxList("#emails", {addOnBlur:true,bitsOptions:{editable:{growing:true,growingOptions:{maxWidth:$("#emails").innerWidth() - 10}}}});
                break;
            case "google":
                this.submitType = "googleLogin";
                $("#lightbox_pane", this.element).html(this.view("/lightbox/invite/googleLogin"));
                GS.getLightbox().positionLightbox();
                $("input[name=google_username]", this.element).focus();
                break;
            case "facebook":
                this.submitType = "facebook";
                this.facebookLoaded =
                        !GS.getFacebook().connected;
                this.friendsLoaded = false;
                $("#lightbox_pane", this.element).html(this.view("/lightbox/invite/facebook"));
                GS.getLightbox().positionLightbox();
                if (GS.getFacebook().connected)this.updateFacebook(); else if (GS.getFacebook().facebookUserID && GS.getFacebook().loggedIntoFacebook) {
                    this.element.find(".error").show().find(".message").html($.localize.getString("FACEBOOK_PROBLEM_WRONG_USER"));
                    GS.getLightbox().positionLightbox()
                } else if (GS.getFacebook().facebookUserID) {
                    this.element.find(".error").show().find(".message").html($.localize.getString("FACEBOOK_PROBLEM_NO_LOGIN"));
                    GS.getLightbox().positionLightbox()
                }
                break
        }
    }
    GS.getLightbox().positionLightbox();
    return false
},updateFacebook:function() {
    GS.getFacebook().checkUserPermissions(GS.getFacebook().PUBLISH_PERMISSION, this.callback(function(a) {
        if (a)GS.getFacebook().getFriends(this.callback("onFacebookFriends"), this.callback("onFacebookFriends", [])); else {
            this.facebookLoaded = true;
            $("#lightbox_pane", this.element).html(this.view("/lightbox/invite/facebook"));
            this.element.find("#fbConnected").hide();
            this.element.find("#fbNotConnected").show();
            this.element.find(".error").show().find(".message").html($.localize.getString("POPUP_SHARE_FACEBOOK_ERROR_NO_PERMS"));
            GS.getLightbox().positionLightbox()
        }
    }), this.callback("onFacebookFriends", []))
}});
GS.Controllers.BaseController.extend("GS.Controllers.Lightbox.LocaleController", {onDocument:false}, {init:function() {
    this.update()
},update:function() {
    this.languages = [
        {locale:"ca",name:"Catal\u00e0"},
        {locale:"cs",name:"\u010ce\u0161tina"},
        {locale:"cy",name:"Cymraeg"},
        {locale:"da",name:"Dansk"},
        {locale:"de",name:"Deutsch"},
        {locale:"el",name:"\u0395\u03bb\u03bb\u03b7\u03bd\u03b9\u03ba\u03ac"},
        {locale:"en",name:"English"},
        {locale:"es",name:"Espa\u00f1ol"},
        {locale:"et",name:"Eesti"},
        {locale:"eu",name:"Euskara"},
        {locale:"fr",name:"Fran\u00e7ais"},
        {locale:"gl",name:"Galego"},
        {locale:"ko",name:"\ud55c\uad6d\uc5b4"},
        {locale:"nl",name:"Nederlands"},
        {locale:"lt",name:"Lietuvi\u0173"},
        {locale:"pl",name:"Polski"},
        {locale:"pt",name:"Portugu\u00eas"},
        {locale:"ru",name:"\u0420\u0443\u0441\u0441\u043a\u0438\u0439"},
        {locale:"sk",name:"Sloven\u010dina"},
        {locale:"fi",name:"Suomi"},
        {locale:"sv",name:"Svenska"},
        {locale:"tr",name:"T\u00fcrk\u00e7e"},
        {locale:"uk",name:"Y\u043a\u0440\u0430\u0457\u0301\u043d\u0441\u044c\u043a\u0430"},
        {locale:"zh",name:"\u4e2d\u6587"},
        {locale:"bg",name:"\u0411\u044a\u043b\u0433\u0430\u0440\u0441\u043a\u0438"},
        {locale:"it",name:"Italiano"},
        {locale:"ja",name:"\u65e5\u672c\u8a9e"},
        {locale:"nb",name:"Norsk "},
        {locale:"ro",name:"Rom\u00e2n\u0103"},
        {locale:"sl",name:"Sloven\u0161\u010dina"}
    ];
    this.languages.sort(function(a, b) {
        return a.name > b.name ? 1 : -1
    });
    this.element.html(this.view("/lightbox/locale"))
},"a.language click":function(a) {
    $.publish("gs.locale.update", $(a).attr("rel"));
    a = $(a).attr("rel");
    GS.getGuts().logEvent("localeChangePerformed",
            {locale:a});
    GS.getGuts().beginContext({locale:a});
    GS.getLightbox().close()
}});
GS.Controllers.BaseController.extend("GS.Controllers.Lightbox.VIPOnlyFeatureController", {onDocument:false}, {init:function(a, b) {
    this.update(b)
},update:function(a) {
    if (a && a.callback)GS.auth.vipUpdateCallback = a.callback;
    GS.Controllers.Lightbox.Generic.prototype.update.call(this, {view:{header:"POPUP_VIP_ONLY_TITLE",bigHeader:"POPUP_VIP_ONLY_SUBTITLE",message:"POPUP_VIP_ONLY_MSG",buttonsRight:[
        {label:GS.user.UserID > 0 ? "POPUP_REDEEM_LEARN_MORE" : "SIGNUP",className:"submit"}
    ],buttonsLeft:[
        {label:GS.user.UserID >
                0 ? "CLOSE" : "LOGIN",className:GS.user.UserID > 0 ? "close" : "login_button"}
    ]}})
},"button.submit click":function() {
    GS.getLightbox().close();
    if (GS.user.UserID > 0)GS.getLightbox().open("vipPerks"); else location.hash = "#/signup"
},"button.login_button click":function() {
    GS.getLightbox().close();
    GS.user.UserID > 0 ? GS.getLightbox().open("vipPerks") : GS.getLightbox().open("login")
}});
(function() {
    GS.Controllers.VipInterface.extend("GS.Controllers.Lightbox.VipPerksController", {onDocument:false}, {tourStep:0,vipPackage:null,PLUS_STEPS:5,ANYWHERE_STEPS:7,STEP_WIDTH:648,STEP_TRANSITION:600,init:function(a, b) {
        this.update(b)
    },update:function() {
        this.element.html(this.view("/lightbox/perks/index"));
        GS.getLightbox().positionLightbox();
        GS.getLightbox().trackLightboxView("/lightbox/perks")
    },"button.upgrade click":function(a) {
        a = _.orEqual($(a).attr("rel"), this.vipPackage);
        GS.getLightbox().close();
        GS.getLightbox().open("vipSignup", {vipPackage:a,isSignup:false})
    },"a.takeTour click":function(a) {
        $("#intro_tour").hide();
        if ($(a).attr("rel") == "plus") {
            this.vipPackage = "plus";
            $("#perks_title").text("Grooveshark Plus");
            $("#anywhere_tour").hide();
            $("#plus_tour").show().scrollLeft(0);
            $("#plus_tour_steps").css("left", 0)
        } else {
            this.vipPackage = "anywhere";
            $("#perks_title").text("Grooveshark Anywhere");
            $("#plus_tour").hide();
            $("#anywhere_tour").show().scrollLeft(0);
            $("#anywhere_tour_steps").css("left", 0)
        }
        this.tourStep =
                0;
        $(".vipPerks #lightbox_footer").show();
        this.updateNavigation();
        GS.getLightbox().positionLightbox()
    },"button.intro click":function() {
        $("#intro_tour").show();
        $("#lightbox_footer, #plus_tour, #anywhere_tour").hide();
        $("#perks_title").text($.localize.getString("POPUP_PERKS_TITLE"));
        GS.getLightbox().positionLightbox()
    },"a.gotoStep click":function(a) {
        this.tourStep = _.defined($(a).attr("rel")) ? parseInt($(a).attr("rel")) : 0;
        this.animateToStep();
        this.updateNavigation()
    },"button.next click":function() {
        this.tourStep++;
        this.animateToStep();
        this.updateNavigation()
    },"button.back click":function() {
        if (this.tourStep > 0) {
            this.tourStep--;
            this.animateToStep();
            this.updateNavigation()
        }
    },updateNavigation:function() {
        if (this.tourStep == 0) {
            $("#lightbox_footer .intro").show();
            $("#lightbox_footer .back").hide();
            $("#lightbox_footer .next").show();
            $("#lightbox_footer .finish").hide()
        } else if (this.vipPackage == "plus" && this.tourStep + 1 == this.PLUS_STEPS || this.vipPackage == "anywhere" && this.tourStep + 1 == this.ANYWHERE_STEPS) {
            $("#lightbox_footer .intro").hide();
            $("#lightbox_footer .back").show();
            $("#lightbox_footer .next").hide();
            $("#lightbox_footer .finish").show()
        } else {
            $("#lightbox_footer .intro").hide();
            $("#lightbox_footer .back").show();
            $("#lightbox_footer .next").show();
            $("#lightbox_footer .finish").hide()
        }
        var a = this.vipPackage == "plus" ? this.PLUS_STEPS : this.ANYWHERE_STEPS;
        a = $(".tour_steps_nav", this.element).html(this.view("/lightbox/perks/stepProgress", {steps:a,index:this.tourStep}));
        a.css("marginLeft", a.width() / 2 * -1);
        GS.getLightbox().trackLightboxView("lightbox/perks/" +
                this.vipPackage + "/step" + this.tourStep)
    },animateToStep:function() {
        if (this.vipPackage == "plus" && this.tourStep < this.PLUS_STEPS)$.browser.msie ? $("#plus_tour_steps").stop().animate({left:-(this.STEP_WIDTH * this.tourStep)}, this.STEP_TRANSITION) : $("#plus_tour").stop().animate({scrollLeft:this.STEP_WIDTH * this.tourStep}, this.STEP_TRANSITION); else if (this.vipPackage == "anywhere" && this.tourStep < this.ANYWHERE_STEPS)$.browser.msie ? $("#anywhere_tour_steps").stop().animate({left:-(this.STEP_WIDTH * this.tourStep)}, this.STEP_TRANSITION) :
                $("#anywhere_tour").stop().animate({scrollLeft:this.STEP_WIDTH * this.tourStep}, this.STEP_TRANSITION)
    }})
})();
(function() {
    GS.Controllers.VipInterface.extend("GS.Controllers.Lightbox.PreviewController", {onDocument:false}, {tourStep:0,STEPS:6,STEP_WIDTH:648,STEP_TRANSITION:600,init:function(a, b) {
        this.update(b);
        $(".tour_steps_nav").css("marginLeft", 0);
        tourStep = 0
    },update:function() {
        this.element.html(this.view("/lightbox/perks/preview"));
        this.updateNavigation();
        GS.getLightbox().positionLightbox()
    },"a.gotoStep click":function(a) {
        this.tourStep = _.defined($(a).attr("rel")) ? parseInt($(a).attr("rel")) : 0;
        this.animateToStep();
        this.updateNavigation()
    },"button.next click":function() {
        this.tourStep++;
        this.animateToStep();
        this.updateNavigation()
    },"button.back click":function() {
        if (this.tourStep > 0) {
            this.tourStep--;
            this.animateToStep();
            this.updateNavigation()
        }
    },"button.close click":function() {
        GS.getLightbox().close()
    },updateNavigation:function() {
        if (this.tourStep == 0) {
            $("#lightbox_footer .back").hide();
            $("#lightbox_footer .next").show();
            $("#lightbox_footer .finish").hide()
        } else if (this.tourStep + 1 == this.STEPS) {
            $("#lightbox_footer .back").show();
            $("#lightbox_footer .next").hide();
            $("#lightbox_footer .finish").show()
        } else {
            $("#lightbox_footer .back").show();
            $("#lightbox_footer .next").show();
            $("#lightbox_footer .finish").hide()
        }
        var a = this.STEPS;
        $(".tour_steps_nav", this.element).html(this.view("/lightbox/perks/stepProgress", {steps:a,index:this.tourStep}));
        GS.getLightbox().positionLightbox();
        GS.getLightbox().trackLightboxView("lightbox/perks/step" + this.tourStep)
    },animateToStep:function() {
        if (this.tourStep < this.STEPS)$.browser.msie ? $("#preview_tour_steps").stop().animate({left:-(this.STEP_WIDTH *
                this.tourStep)}, this.STEP_TRANSITION) : $("#preview_tour").stop().animate({scrollLeft:this.STEP_WIDTH * this.tourStep}, this.STEP_TRANSITION)
    }})
})();
GS.Controllers.BaseController.extend("GS.Controllers.Lightbox.NewPlaylistController", {onDocument:false}, {init:function(a, b) {
    this.update(b);
    $("#newPlaylistForm input[name=name]").select()
},update:function(a) {
    this.songIDs = $.makeArray(a);
    this.overrideDupe = false;
    this.element.html(this.view("/lightbox/newPlaylist"))
},"a.submit click":function() {
    $("form", this.element).submit()
},"#newPlaylistForm input[name=name] change":function() {
    this.overrideDupe = false
},saveToSidebar:false,"form submit":function(a) {
    var b =
            $("input[name=name]", a).val(),c = $("textarea[name=description]", a).val();
    this.saveToSidebar = $("input[name=save]", a).is(":checked");
    if (b.length)if (this.overrideDupe || GS.user.isPlaylistNameAvailable(b))GS.user.createPlaylist(b, this.songIDs, c, this.callback("createSuccess"), this.callback("createFailed")); else {
        this.overrideDupe = true;
        $("div.error .message", this.element).text(_.getString("POPUP_PLAYLIST_METADATA_DUPLICATE_NAME_ERROR", {name:b}));
        $("div.error", this.element).show()
    } else {
        $("div.error .message",
                this.element).text($.localize.getString("POPUP_PLAYLIST_METADATA_ENTER_NAME_ERROR"));
        $("div.error", this.element).show()
    }
    return false
},createSuccess:function(a) {
    this.playlist = a;
    $("div.error", this.element).hide();
    this.saveToSidebar && GS.user.addToShortcuts("playlist", this.playlist.PlaylistID, this.playlist.PlaylistName, false);
    GS.getLightbox().close()
},createFailed:function(a) {
    console.error("playlist.new failed", a);
    $("div.error .message", this.element).text($.localize.getString("POPUP_PLAYLIST_METADATA_ERROR"));
    $("div.error", this.element).show()
}});
GS.Controllers.BaseController.extend("GS.Controllers.Lightbox.RenamePlaylistController", {onDocument:false}, {init:function(a, b) {
    this.update(b)
},update:function(a) {
    this.playlistID = a;
    this.playlist = GS.Models.Playlist.getOneFromCache(a);
    this.element.html(this.view("/lightbox/renamePlaylist"))
},"a.submit click":function() {
    $("form", this.element).submit()
},"form submit":function(a, b) {
    b.preventDefault();
    this.name = $("input[name=name]", a).val();
    this.description = $("textarea[name=description]", a).val();
    this.counter =
            0;
    if (this.name.length) {
        this.playlist.rename(this.name, this.callback(this.renameSuccess), this.callback(this.renameFailed));
        this.playlist.changeDescription(this.description, this.callback(this.renameSuccess), this.callback(this.renameFailed))
    } else {
        $("div.error .message", this.element).text($.localize.getString("POPUP_PLAYLIST_METADATA_ENTER_NAME_ERROR")).show();
        $("div.error", this.element).show()
    }
    return false
},renameSuccess:function() {
    this.counter++;
    if (this.counter === 2) {
        GS.getLightbox().close();
        location.hash =
                this.playlist.toUrl()
    }
},renameFailed:function() {
    $("div.error .message", this.element).text($.localize.getString("POPUP_PLAYLIST_META_TITLE_ERROR")).show();
    $("div.error", this.element).show()
}});
GS.Controllers.BaseController.extend("GS.Controllers.Lightbox.AddSongsToPlaylistController", {onDocument:false}, {init:function(a, b) {
    this.update(b)
},update:function(a) {
    this.songIDs = a;
    this.playlists = GS.Models.Playlist.getPlaylistsOrdered("PlaylistName");
    this.element.html(this.view("/lightbox/addSongsToPlaylist"))
},"input.playlist click":function(a) {
    $(a).is(":checked") ? $(a).closest("li.playlist").addClass("selected") : $(a).closest("li.playlist").removeClass("selected")
},"a.submit click":function() {
    $("form",
            this.element).submit()
},"form submit":function(a, b) {
    b.preventDefault();
    var c,g,h = this,k = false;
    $("input:checked", this.element).each(function() {
        c = this.value;
        if (g = GS.Models.Playlist.getOneFromCache(c)) {
            k = true;
            g.addSongs(h.songIDs, null, true)
        }
    });
    k && GS.getLightbox().close();
    return false
}});
GS.Controllers.BaseController.extend("GS.Controllers.Lightbox.BuySongController", {onDocument:false}, {init:function(a, b) {
    this.update(b)
},update:function(a) {
    this.songID = a;
    (this.song = GS.Models.Song.getOneFromCache(this.songID)) ? GS.service.getAffiliateDownloadURLs(this.song.SongName, this.song.ArtistName, this.callback("urlsSuccess"), this.callback("urlsFailed")) : this.urlsFailed();
    this.element.html(this.view("/lightbox/buySong"))
},urlsSuccess:function(a) {
    var b = false,c = false;
    if (a.amazon && a.amazon.url)$("a.amazon",
            this.element).attr("href", a.amazon.url).show(); else b = true;
    if (a.iTunes && a.iTunes.url)$("a.itunes", this.element).attr("href", a.iTunes.url).show(); else c = true;
    b && c && this.urlsFailed()
},urlsFailed:function() {
    $(".error", this.element).show()
},"a click":function() {
    GS.getLightbox().close()
}});
GS.Controllers.BaseController.extend("GS.Controllers.Lightbox.UnsupportedBrowserController", {onDocument:false}, {init:function(a, b) {
    this.update(b)
},update:function(a) {
    this.isChromeFrame = _.orEqual(a.isChromeFrame, false);
    this.element.html(this.view("/lightbox/unsupportedBrowser"))
},"#lightbox_content a.browser-chrome-name click":function(a, b) {
    b.preventDefault();
    if (this.upgraded) {
        self.close();
        window.open(window.location.href)
    } else {
        window.open("http://www.google.com/chromeframe?quickenable=true");
        $("#lightbox_content p.chrome-msg").text($.localize.getString("POPUP_CHROME_FRAME_BACK_MSG"));
        $("#lightbox_content a.browser-chrome-name").text($.localize.getString("POPUP_RELOAD_GROOVESHARK_NEW_WINDOW"));
        this.upgraded = true
    }
}});
GS.Controllers.BaseController.extend("GS.Controllers.Lightbox.VideoController", {onDocument:false}, {embed:null,wasPlaying:false,isVideoMode:false,showPlayerControls:false,autoSkipToNextVideo:true,player:null,video:null,videos:null,onDestroy:null,init:function(a, b) {
    this.update(b);
    this.subscribe("gs.video.playing", this.callback("setVideo"));
    this.subscribe("gs.video.player.ready", this.callback("setVideos"));
    this.subscribe("gs.video.player.loadSong", this.callback("loadVideoFromSong"));
    this.subscribe("gs.player.streamserver",
            this.callback("onStreamServer"))
},update:function(a) {
    this.options = a;
    if (a.video || a.videos) {
        this.video = a.video;
        if ((this.videos = _.orEqual(a.videos, [this.video])) && this.videos.length == 1) {
            this.video = this.options.video = this.videos[0];
            this.videos = this.options.videos = null
        } else if (!this.video)this.video = a.index ? this.videos[a.index] : this.videos[0]
    }
    var b = _.orEqual(a.renderSection, true);
    this.onDestroy = _.orEqual(a.onDestroy, null);
    if (!a.index && this.video && this.videos)_.forEach(this.videos, this.callback(function(c, g) {
        if (c === this.video)this.startIndex = this.currentIndex = g
    })); else this.startIndex = this.currentIndex = _.orEqual(a.index, 0);
    this.element.html(this.view("/lightbox/video"));
    this.wasPlaying = GS.player.isPlaying;
    GS.player.pauseSong();
    if (a.isVideoMode) {
        this.isVideoMode = true;
        if (!(a.video || a.videos) && a.song) {
            a.song.getVideos(this.callback(function(c) {
                c = c.splice(0, 6);
                GS.player.videoModeEnabled = true;
                this.update({videos:c,showVideoControls:true,isVideoMode:true,renderSection:false});
                GS.getLightbox().positionLightbox()
            }),
                    this.callback("searchFailed"));
            return
        }
    }
    this.autoSkipToNextVideo = _.orEqual(a.autoSkipToNextVideo, !this.isVideoMode);
    if (GS.theme.currentTheme.sections.indexOf("#theme_lightbox_header") >= 0)if (b) {
        $("#theme_lightbox_header").show();
        GS.theme.renderSection("#theme_lightbox_header")
    }
    if (this.videos && this.videos.length) {
        this.element.addClass("videos").css("width", "").find(".lightbox_content_video").css("width", "");
        this.video.flashvars.index = this.startIndex
    } else {
        this.element.removeClass("videos");
        if (this.options.video &&
                this.options.video.width && this.options.video.width > 480) {
            a = this.options.video.width + 30;
            this.element.css("width", a).find(".lightbox_content_video").css("width", a)
        } else this.element.css("width", "").find(".lightbox_content_video").css("width", "")
    }
    this.video && setTimeout(this.callback("embedVideo"), 50)
},searchFailed:function(a) {
    console.warn("youtubeError", a);
    if (this.youtubeRetries >= 3) {
        this.nextSongInVideoMode();
        console.warn("youtube error, try next video, but if maxRetries (3), go to next song")
    } else {
        a =
                $("#lightbox .gs_lightbox_video #lightbox_nav .videos a.video.active").parent();
        if (a.length && a.next().length) {
            self.youtubeRetries++;
            a.next().children("a").click()
        } else this.nextSongInVideoMode()
    }
},embedVideo:function() {
    if (this.video && this.video.type) {
        switch (this.video.type) {
            case "iframe":
                if (!$("#videoPlayer") || !$("#videoPlayer").length)$(".content", this.element).html('<div id="videoPlayer"></div>');
                this.player = this.video.embed("videoPlayer", this.callback(function(a) {
                    this.autoSkipToNextVideo && a.addEvent("finish",
                            this.callback(function() {
                                this.setNextVideo()
                            }))
                }));
                break;
            case "youtube":
                if (!$("#videoPlayer") || !$("#videoPlayer").length)$(".content", this.element).html('<div id="videoPlayer"></div>');
                this.video.embed("videoPlayer", this.callback(function(a) {
                    this.player = a;
                    if (this.autoSkipToNextVideo)this.player.addEvent("onStateChange", this.callback(function(b) {
                        b === 0 && this.setNextVideo()
                    })); else this.isVideoMode && this.player.addEvent("onStateChange", function(b) {
                        switch (b) {
                            case 0:
                                GS.player.videoModeEnabled && $("#lightbox .gs_lightbox_video").controller().nextSongInVideoMode();
                                break;
                            case 5:
                                $("#lightbox .gs_lightbox_video").controller().player.play();
                                break;
                            case 1:
                                if (GS.player.powerModeEnabled) {
                                    clearInterval(GS.player.powerModeInterval);
                                    GS.player.powerModeInterval = setInterval($("#lightbox .gs_lightbox_video").controller().callback("powerHourCheckVideoMode"), 1E3)
                                }
                                break
                        }
                    });
                    GS.getLightbox().positionLightbox()
                }));
                break;
            case "flash":
            default:
                if (document.videoPlayer && document.videoPlayer.setVideo)document.videoPlayer.setVideo(this.currentIndex); else this.embed = this.options.video.embed("videoPlayer");
                GS.getLightbox().positionLightbox();
                break
        }
        this.video.title ? $("#lightbox_header .title").text(this.video.title) : $("#lightbox_header .title").text("");
        GS.getLightbox().positionLightbox()
    }
},powerHourCheckVideoMode:function() {
    this.player && this.player.getCurrentTime() > 60 && this.nextSongInVideoMode()
},onStreamServer:function(a) {
    document.videoPlayer && document.videoPlayer.loadCrossdomain && document.videoPlayer.loadCrossdomain(a.streamServer)
},currentIndex:0,setNextVideo:function() {
    if (this.videos && this.videos.length) {
        var a =
                this.currentIndex + 1;
        if (a >= this.videos.length)a = 0;
        this.currentIndex = a;
        $("a.video").removeClass("active");
        $($("a.video").get(this.currentIndex)).addClass("active");
        this.video = this.videos[this.currentIndex];
        this.embedVideo()
    }
},nextSongInVideoMode:function() {
    GS.player.nextSong()
},loadVideoFromSong:function(a) {
    this.player && this.player.loadVideoById && a.getVideos(this.callback(function(b) {
        this.videos = b.splice(0, 6);
        this.video = this.videos[0];
        this.youtubeRetries = 0;
        this.player.loadVideoById(this.video.VideoID);
        $("#lightbox .gs_lightbox_video #lightbox_header h3.title").text(this.video.title);
        $("#lightbox_nav .videos", this.element).html(this.view("/shared/videos"));
        this.startIndex = 0;
        GS.getLightbox().positionLightbox()
    }), this.callback("searchFailed"))
},setVideo:function(a) {
    $("a.video").removeClass("active");
    $($("a.video").get(a.index)).addClass("active")
},setVideos:function() {
    if (this.options.video && !this.options.videos)document.videoPlayer.setVideos([this.options.video]); else if (document.videoPlayer && document.videoPlayer.setVideos) {
        for (var a =
                [],b,c = 0; c < this.options.videos.length; c++) {
            b = this.options.videos[c];
            a.push({author:b.author,height:b.height,src:b.src,thumbnail:b.thumbnail,thumbTracking:b.thumbTracking,title:b.title,width:b.width,duration:b.duration,originalWidth:b.originalWidth,originalHeight:b.originalHeight})
        }
        document.videoPlayer.setVideos(a)
    }
    GS.getLightbox().positionLightbox()
},detach:function() {
    GS.player.enableVideoMode && GS.player.disableVideoMode()
},destroy:function() {
    GS.player.videoModeEnabled && this.isVideoMode && GS.player.disableVideoMode();
    $("#videoPlayer").remove();
    delete this.player;
    this.wasPlaying && GS.player.resumeSong();
    $.isFunction(this.onDestroy) && setTimeout(this.onDestroy, 50);
    this._super()
},"a.video click":function(a) {
    $("a.video").removeClass("active");
    $(a).addClass("active");
    a = _.orEqual(parseInt($(a).attr("data-video-index"), 10), 0);
    this.video = this.videos[a];
    this.currentIndex = a;
    this.embedVideo();
    GS.theme.loadTracking([this.video.thumbTracking])
},"#videoPlayerPrev click":function() {
    GS.player.previousSong()
},"#videoPlayerNext click":function() {
    GS.player.nextSong()
}});
(function() {
    GS.Controllers.BaseController.extend("GS.Controllers.Lightbox.VisualizerController", {onDocument:false}, {embed:null,wasPlaying:false,visualizers:[
        {src:gsConfig.assetHost + "/webincludes/visualizers/LineNoFourier.swf",title:"Amped",thumbnail:gsConfig.assetHost + "/webincludes/images/lightbox/visualizer/linenofourier_thumb.png",width:480,height:270},
        {src:gsConfig.assetHost + "/webincludes/visualizers/LineWorm.swf",title:"Worms",thumbnail:gsConfig.assetHost + "/webincludes/images/lightbox/visualizer/lineworm_thumb.png",
            width:480,height:270},
        {src:gsConfig.assetHost + "/webincludes/visualizers/Tunnel.swf",title:"Tunnel",thumbnail:gsConfig.assetHost + "/webincludes/images/lightbox/visualizer/tunnel_thumb.png",width:480,height:270},
        {src:gsConfig.assetHost + "/webincludes/visualizers/LineSmooth.swf",title:"Linear",thumbnail:gsConfig.assetHost + "/webincludes/images/lightbox/visualizer/linesmooth_thumb.png",width:480,height:270},
        {src:gsConfig.assetHost + "/webincludes/visualizers/Explosion.swf",title:"Explosion",thumbnail:gsConfig.assetHost +
                "/webincludes/images/lightbox/visualizer/explosion_thumb.png",width:480,height:270}
    ],init:function(a, b) {
        for (var c = _.orEqual(b.index, 0),g = 0; g < this.visualizers.length; g++)this.visualizers[g] = new GS.Models.Visualizer(this.visualizers[g]);
        this.subscribe("gs.visualizer.playing", this.callback("setVisualizer"));
        this.subscribe("gs.visualizer.player.ready", this.callback("setVisualizers"));
        this.subscribe("gs.player.streamserver", this.callback(this.onStreamServer));
        this.update({visualizer:this.visualizers[c],
            visualizers:this.visualizers,index:c})
    },update:function(a) {
        this.options = a;
        this.element.html(this.view("/lightbox/visualizer"));
        if (this.options.visualizers && this.options.visualizers.length)this.options.visualizer.flashvars.index = this.options.index;
        this.options.visualizer && setTimeout(this.callback("embedVisualizer"), 50);
        $(window).resize()
    },embedVisualizer:function() {
        this.embed = this.options.visualizer.embed("visualizerPlayer")
    },onStreamServer:function(a) {
        document.visualizerPlayer && document.visualizerPlayer.loadCrossdomain &&
        document.visualizerPlayer.loadCrossdomain(a.streamServer)
    },setVisualizer:function(a) {
        $("a.visualizer").removeClass("active");
        $($("a.visualizer").get(a.index)).addClass("active")
    },setVisualizers:function() {
        if (document.visualizerPlayer && document.visualizerPlayer.setVisualizers) {
            for (var a = [],b,c = 0; c < this.options.visualizers.length; c++) {
                b = this.options.visualizers[c];
                a.push({author:b.author,height:b.height,src:b.src,thumbnail:b.thumbnail,title:b.title,width:b.width})
            }
            document.visualizerPlayer.setVisualizers(a)
        }
    },
        "a.visualizer click":function(a) {
            if (document.visualizerPlayer.setVisualizer) {
                var b = parseInt($(a).attr("data-visualizer-index"));
                $("a.visualizer").removeClass("active");
                $(a).addClass("active");
                $("#visualizer_title").html(this.visualizers[b].title);
                document.visualizerPlayer.setVisualizer(b)
            }
        }})
})();
GS.Controllers.BaseController.extend("GS.Controllers.Lightbox.SwfTimeoutController", {onDocument:false}, {init:function() {
    this.update()
},update:function() {
    GS.Controllers.Lightbox.Generic.prototype.update.call(this, {view:{header:"POPUP_SWF_TIMEOUT_TITLE",message:"POPUP_SWF_TIMEOUT_MESSAGE",buttonsLeft:[
        {label:"POPUP_SWF_TIMEOUT_RELOAD",className:"reload"}
    ]}});
    this.checkPlayer()
},checkPlayerTimeout:false,checkPlayerWait:1E3,checkPlayerCount:0,checkPlayerMaxTries:60,checkPlayer:function() {
    console.log("player exists?",
            GS.player.player);
    if (GS.player.player) {
        GS.getLightbox().trackLightboxView("swfTimeout/autoClosed");
        setTimeout(function() {
            GS.getLightbox().close()
        }, 10)
    } else if (this.checkPlayerCount < this.checkPlayerMaxTries) {
        this.checkPlayerCount++;
        setTimeout(this.callback(this.checkPlayer), this.checkPlayerWait)
    }
},"button.reload click":function() {
    window.location.reload(true)
}});
GS.Controllers.BaseController.extend("GS.Controllers.Lightbox.DeactivateAccountController", {onDocument:false}, {init:function() {
    this.update()
},update:function() {
    this.element.html(this.view("/lightbox/deactivateAccount"))
},"a.submit, button.submit click":function() {
    $("form", this.element).submit()
},"form submit":function(a, b) {
    b.preventDefault();
    var c = parseInt($("input[name=deactivate_reason]:checked", a).val(), 10),g = $("textarea[name=deactivate_other_details]", a).val(),h = parseInt($("input[name=deactive_contact]:checked",
            a).val(), 10),k = $("input[name=deactivate_confirm]", a).val();
    if (c && k.length) {
        this.element.find(".error").hide();
        GS.service.userDisableAccount(k, c, g, h, this.callback(this.disableSuccess), this.callback(this.disableFailed))
    } else if (c)k.length || this.element.find(".error").show().find(".message").html($.localize.getString("POPUP_DEACTIVATE_ERROR_PASSWORD")); else this.element.find(".error").show().find(".message").html($.localize.getString("POPUP_DEACTIVATE_ERROR_REASON"));
    return false
},"input[name=deactivate_reason] change":function() {
    parseInt($("#deactivateAccountForm input[name=deactivate_reason]:checked").val(),
            10)
},"textarea[name=deactivate_other_details] click":function() {
    $("#deactivate_reason_other").attr("checked", true);
    $("#deactivateAccountForm textarea[name=deactivate_other_details]").focus()
},disableSuccess:function(a) {
    if (!a)return this.disableFailed(a);
    GS.auth.logout();
    GS.getLightbox().close()
},disableFailed:function() {
    this.element.find(".error").show().find(".message").html($.localize.getString("POPUP_DEACTIVATE_ERROR"))
}});
GS.Controllers.BaseController.extend("GS.Controllers.Lightbox.PromotionController", {onDocument:false,PROMOTION_PENDING:"pending",PROMOTION_COMPLETE:"complete"}, {theme:null,promptOnLogin:false,type:"link",state:"pending",formHandler:null,init:function(a, b) {
    this.update(b);
    this.subscribe("lightbox.close.click", this.callback(this.onClose));
    this.subscribe("gs.auth.playlists.update", this.callback(this.render))
},update:function(a) {
    this.options = a;
    this.theme = _.orEqual(a.theme, "");
    this.render()
},render:function() {
    if (this.element) {
        this.element.html(this.view("themes/" +
                this.theme.location + "/promotion"));
        $(window).resize()
    }
},"button.promo_login click":function() {
    GS.theme.promptOnLogin = true;
    GS.theme.lastDFPChange = (new Date).getTime() + 6E5;
    GS.getLightbox().close();
    GS.getLightbox().open("login")
},"button.promo_signup click":function() {
    GS.theme.promptOnLogin = true;
    GS.theme.lastDFPChange = (new Date).getTime() + 6E5;
    GS.getLightbox().close();
    location.hash = "#/signup"
},"div.promo_login click":function() {
    GS.theme.promptOnLogin = true;
    GS.theme.lastDFPChange = (new Date).getTime() + 6E5;
    GS.getLightbox().close();
    GS.getLightbox().open("login")
},"div.promo_signup click":function() {
    GS.theme.promptOnLogin = true;
    GS.theme.lastDFPChange = (new Date).getTime() + 6E5;
    GS.getLightbox().close();
    location.hash = "#/signup"
},"div.promo_login click":function() {
    GS.theme.promptOnLogin = true;
    GS.theme.lastDFPChange = (new Date).getTime() + 6E5;
    GS.getLightbox().close();
    GS.getLightbox().open("login")
},"div.promo_signup click":function() {
    GS.theme.promptOnLogin = true;
    GS.theme.lastDFPChange = (new Date).getTime() + 6E5;
    GS.getLightbox().close();
    location.hash = "#/signup"
},"a.switchUser click":function() {
    GS.theme.promptOnLogin = true;
    GS.theme.lastDFPChange = (new Date).getTime() + 6E5;
    GS.getLightbox().close();
    GS.auth.logout();
    setTimeout(GS.getLightbox().open("login"), 0)
},"a.submit click":function(a, b) {
    GS.theme.currentTheme.handleClick(b);
    GS.getLightbox().close();
    GS.theme.promptOnLogin = false
},"button.submit click":function() {
    this.element.find("form").submit()
},"form submit":function(a, b) {
    b.stopImmediatePropagation();
    switch ($(a).attr("rel")) {
        case "playlist":
            this.playlistSubmission(a);
            break;
        case "songVote":
            this.songVoteSubmission(a);
            break
    }
    return false
},playlistSubmission:function(a) {
    var b = $(a).find("input[name=campaignID]").val();
    a = $(a).find("input[name=playlistID]:checked").val();
    b && a && GS.Models.Promotion.submitPlaylistForCampaign(a, b, this.callback("playlistSuccess"), this.callback("playlistFailure"))
},playlistSuccess:function(a) {
    if (a == 1) {
        this.state = GS.Controllers.Lightbox.PromotionController.PROMOTION_COMPLETE;
        this.element.html(this.view("themes/" + this.theme.location + "/promotion"));
        $(window).resize()
    } else console.warn("result", a)
},playlistFailure:function() {
},songVoteSubmission:function(a) {
    var b = $(a).find("input[name=campaignID]").val();
    a = $(a).find("input[name=songID]:checked").val();
    b && a && GS.Models.Promotion.submitSongVoteForCampaign(a, b, this.callback("songVoteSuccess"), this.callback("songVoteFailure"))
},songVoteSuccess:function(a) {
    if (a == 1) {
        this.state = GS.Controllers.Lightbox.PromotionController.PROMOTION_COMPLETE;
        this.element.html(this.view("themes/" + this.theme.location + "/promotion"));
        $(window).resize()
    } else console.warn("result", a)
},songVoteFailure:function() {
},onClose:function() {
    GS.theme.promptOnLogin = false
}});
GS.Controllers.BaseController.extend("GS.Controllers.Lightbox.ConfirmPasswordProfileController", {onDocument:false}, {profileParams:null,serviceCallback:null,serviceErrback:null,init:function(a, b) {
    this.update(b)
},update:function(a) {
    this.profileParams = a.params;
    this.serviceCallback = a.callback;
    this.serviceErrback = a.errback;
    this.element.html(this.view("/lightbox/confirmPasswordProfile"))
},"form submit":function(a, b) {
    b.preventDefault();
    var c = $("input[name=confirmPassword]", a).val();
    if (c) {
        this.profileParams.password =
                c;
        GS.user.settings.updateProfile(this.profileParams, this.serviceCallback, this.serviceErrback);
        GS.getLightbox().close()
    } else {
        $("div.message", this.element).html($.localize.getString("POPUP_CONFIRM_EMAIL_ERROR_NOPW"));
        this.element.find(".error").show()
    }
    return false
}});
(function() {
    GS.Controllers.VipInterface.extend("GS.Controllers.Lightbox.RedeemController", {onDocument:false}, {type:"",promoCode:"",threeDays:2592E5,anywhere:false,vip:false,init:function(a, b) {
        this.update(b)
    },update:function(a) {
        a = _.orEqual(a, {});
        this.type = _.orEqual(a.type, "");
        this.vipEndpoint = gsConfig.runMode == "production" ? "https://vip.grooveshark.com/" : "https://stagingvip.grooveshark.com/";
        this.vipToken = hex_md5((new Date).getTime());
        this.vipCallbackUrl = location.protocol + "//" + location.host + "/vipCallback.php";
        var b = (new Date).getTime();
        redeemInfo = GS.store.get("lastRedeemCode");
        this.promoCode = "";
        if (redeemInfo && redeemInfo.promoCode && redeemInfo.expires >= b) {
            this.type = _.orEqual(redeemInfo.type, this.type);
            this.promoCode = redeemInfo.promoCode
        }
        this.element.html(this.view("/lightbox/redeem/index"));
        if (a && a.autoSubmit && this.promoCode)GS.user.isLoggedIn ? this.redeemFormSubmit() : this.subscribe("gs.auth.update", this.callback(function() {
            this.redeemFormSubmit()
        }));
        GS.getLightbox().trackLightboxView("redeem")
    },"#redeem_promocode focus":function(a) {
        a.val() ==
                $.localize.getString("POPUP_REDEEM_ENTER_CODE") && a.val("");
        $("#redeem_invalid_code").hide()
    },"#redeem_promocode keyup":function() {
        $("#redeem_invalid_code").hide()
    },"#redeem_promocode blur":function(a) {
        a.val() == "" && a.val($.localize.getString("POPUP_REDEEM_ENTER_CODE"))
    },"#redeemForm submit":function(a, b) {
        b.preventDefault();
        this.redeemFormSubmit();
        return false
    },redeemFormSubmit:function() {
        var a,b = $("#redeem_promocode").val();
        if (b === "")$("#redeem_promocode").parent().parent().addClass("error"); else if (GS.user.isLoggedIn) {
            $("#redeem_promocode").parent().parent().removeClass("error");
            a = hex_md5((new Date).getTime());
            b = {vipToken:this.vipToken,callbackMethod:a,callbackUrl:this.vipCallbackUrl,code:b};
            window[a] = this.callback(function(c) {
                if (c.bSuccess) {
                    this.element.find(".error.response").hide();
                    GS.getLightbox().trackLightboxView("redeem/offersConfirm");
                    var g = hex_md5((new Date).getTime()),h = {callbackMethod:g,callbackUrl:this.vipCallbackUrl,token:c.token};
                    if (c.description.match(/anywhere/i))this.anywhere = true; else if (c.description.match(/vip/i))this.vip = true;
                    window[g] = this.callback(function(k) {
                        var m =
                                this.anywhere || this.vip ? this.vipPackages.anywhere : this.vipPackages.plus;
                        if (k.bSuccess) {
                            GS.user.updateAccountType(m);
                            this.element.html(this.view("/lightbox/redeem/success"));
                            GS.getLightbox().trackLightboxView("redeem/success")
                        } else this.showVipErrors(k)
                    });
                    GS.service.httpsFormSubmit(this.vipEndpoint + "payByPromoCodeConfirm.php", h, g)
                } else this.showVipErrors(c)
            });
            GS.service.httpsFormSubmit(this.vipEndpoint + "payByPromoCode.php", b, a)
        } else {
            a = (new Date).getTime() + this.threeDays;
            GS.store.set("lastRedeemCode",
                    {promoCode:b,expires:a,type:this.type});
            GS.getLightbox().close();
            GS.getLightbox().open("login", {showCTA:true,resumeRedeem:true,requiredPremium:gsConfig.isPreview})
        }
    }})
})();
GS.Controllers.BaseController.extend("GS.Controllers.Lightbox.StartSurveyController", {onDocument:false}, {init:function(a, b) {
    this.update(b)
},update:function(a) {
    this.survey = _.orEqual(a.survey, {});
    this.clearvoiceToGroovesharkConversion = GS.Models.Clearvoice.CLEARVOICE_TO_GROOVESHARK_CONVERSION;
    this.element.html(this.view("/lightbox/startSurvey"))
},"button.survey click":function(a, b) {
    b.preventDefault();
    window.open(this.survey.SurveyUrl);
    return false
}});
GS.Controllers.BaseController.extend("GS.Controllers.Lightbox.ClearvoiceSignupController", {onDocument:false}, {init:function(a, b) {
    this.update(b)
},update:function() {
    this.user = GS.user;
    this.email = GS.user.Email;
    this.fname = this.user.Name;
    this.lname = "";
    this.gender = _.orEqual(this.user.Sex, "");
    this.zip = _.orEqual(this.user.Zip, "");
    this.day = this.month = this.year = "";
    var a = this.fname.split(" ");
    dobParts = (this.user.TSDOB || "").split("-");
    if (this.lname.length === 0 && a.length > 1) {
        this.fname = a[0];
        this.lname = a[1]
    }
    if (dobParts.length ===
            3) {
        this.year = dobParts[0];
        this.month = dobParts[1];
        this.day = dobParts[2]
    }
    this.today = new Date;
    this.months = $.localize.getString("MONTHS").split(",");
    this.expYears = [];
    a = (new Date).getFullYear();
    for (var b = 0; b < 5; b++)this.expYears.push(a + b);
    this.formLock = false;
    this.element.html(this.view("/lightbox/clearvoiceSignup"));
    $("input,select", this.element).change()
},"select focus":function(a) {
    a.parents(".input_wrapper").addClass("active");
    a.change()
},"select blur":function(a) {
    a.parents(".input_wrapper").removeClass("active");
    a.change()
},"select keydown":function(a) {
    a.change()
},"select change":function(a) {
    a.siblings("span").html(a.find("option:selected").html())
},"select focus":function(a) {
    a.parents(".input_wrapper").addClass("active");
    a.change()
},"select blur":function(a) {
    a.parents(".input_wrapper").removeClass("active");
    a.change()
},"select keydown":function(a) {
    a.change()
},"select change":function(a) {
    a.siblings("span").html(a.find("option:selected").html())
},formLock:false,"form submit":function(a, b) {
    b.preventDefault();
    if (this.formLock)return false;
    this.formLock = true;
    var c = $("input[name=email]", this.element).val(),g = $("input[name=fname]", this.element).val(),h = $("input[name=lname]", this.element).val(),k = $("select[name=gender]", this.element).val(),m = $("input[name=zip]", this.element).val(),n = $("select[name=month]", this.element).val(),o = $("select[name=day]", this.element).val(),q = $("select[name=year]", this.element).val(),v = [q,n,o].join("-"),x = $("input[name=tos]", this.element).is(":checked");
    this.email = c;
    this.fname = g;
    this.lname = h;
    this.gender = k;
    this.zip = m;
    this.month = n;
    this.day = o;
    this.year = q;
    this.dob = v = n !== "" && o !== "" && q !== "" ? v : "";
    $("li.error", a).removeClass("error");
    $("li .input_wrapper, li label", a).removeClass("error");
    if (x && c && g && h && k && m && v) {
        $(".error.message").hide();
        $(".loading", this.element).show().siblings().hide();
        GS.getLightbox().positionLightbox();
        GS.Models.Clearvoice.createMember(c, g, h, k, m, v, this.callback("createSuccess"), this.callback("createFail"))
    } else {
        $(".loading", this.element).hide().siblings().show();
        this.formLock = false;
        n = ['<ul class="errors">'];
        if (!g) {
            $("li.fname .input_wrapper, li.fname label", this.element).addClass("error");
            n.push("<li>" + $.localize.getString("SURVEY_CLEARVOICE_SIGNUP_NAME_ERROR") + "</li>")
        }
        if (!h) {
            $("li.lname .input_wrapper, li.lname label", this.element).addClass("error");
            n.push("<li>" + $.localize.getString("SURVEY_CLEARVOICE_SIGNUP_NAME_ERROR") + "</li>")
        }
        if (!c) {
            $("li.email .input_wrapper, li.email label", this.element).addClass("error");
            n.push("<li>" + $.localize.getString("SURVEY_CLEARVOICE_SIGNUP_EMAIL_ERROR") +
                    "</li>")
        }
        if (!k) {
            $("li.gender .input_wrapper, li.gender label", this.element).addClass("error");
            n.push("<li>" + $.localize.getString("SURVEY_CLEARVOICE_SIGNUP_GENDER_ERROR") + "</li>")
        }
        if (!m) {
            $("li.zip .input_wrapper, li.zip label", this.element).addClass("error");
            n.push("<li>" + $.localize.getString("SURVEY_CLEARVOICE_SIGNUP_ZIP_ERROR") + "</li>")
        }
        if (!v) {
            $("li.dob .input_wrapper, li.dob label", this.element).addClass("error");
            n.push("<li>" + $.localize.getString("SURVEY_CLEARVOICE_SIGNUP_DOB_ERROR") + "</li>")
        }
        if (!x) {
            $("li.tos label",
                    a).addClass("error");
            n.push("<li>" + $.localize.getString("SURVEY_CLEARVOICE_SIGNUP_TOS_ERROR") + "</li>")
        }
        n.push("</ul>");
        $(".error .message", this.element).html("<strong>" + $.localize.getString("POPUP_SIGNUP_ERROR_MESSAGE") + "</strong> " + n.join("")).parent().show();
        GS.getLightbox().positionLightbox()
    }
    return false
},createSuccess:function() {
    this.formLock = false;
    $(".loading", this.element).hide().siblings().show();
    GS.getLightbox().positionLightbox();
    this.element.html(this.view("/lightbox/clearvoiceSignupSuccess"));
    GS.getLightbox().trackLightboxView("clearvoiceSignup/success");
    location.hash = "/surveys/profiler"
},createFail:function(a, b) {
    this.formLock = false;
    $(".loading", this.element).hide().siblings().show();
    console.log("create user fail", a);
    GS.getLightbox().trackLightboxView("clearvoiceSignup/fail");
    if (a && a.HasError && a.ExceptionMessage) {
        console.log("err message", $(".error.message", this.element));
        var c = a.ExceptionMessage;
        if (c.match(/email/i)) {
            $("li.email .input_wrapper, li.email label", this.element).addClass("error");
            c.match(/exists/i) ? $(".error .message", this.element).text($.localize.getString("SURVEY_CLEARVOICE_SIGNUP_EMAIL_UNIQUE_ERROR")).parent().show() : $(".error .message", this.element).text($.localize.getString("SURVEY_CLEARVOICE_SIGNUP_EMAIL_ERROR")).parent().show()
        } else if (c.match(/firstname/i)) {
            $("li.fname .input_wrapper, li.fname label", this.element).addClass("error");
            $(".error .message", this.element).text($.localize.getString("SURVEY_CLEARVOICE_SIGNUP_NAME_ERROR")).parent().show()
        } else if (c.match(/lastname/i)) {
            $("li.lname .input_wrapper, li.lname label",
                    this.element).addClass("error");
            $(".error .message", this.element).text($.localize.getString("SURVEY_CLEARVOICE_SIGNUP_NAME_ERROR")).parent().show()
        }
    } else if (a == false)$(".error .message", this.element).text($.localize.getString("SURVEY_CLEARVOICE_SIGNUP_SAVE_ERROR")).parent().show(); else {
        c = JSON.stringify(a);
        var g = _.orEqual(JSON.stringify(b), "");
        c = (new GS.Models.DataString($.localize.getString("SURVEY_CLEARVOICE_SIGNUP_ALREADY_TAKEN_ERROR"), {dataInfo:c,memberInfo:g,username:GS.user.Name})).render();
        $(".error .message", this.element).html(c).parent().show()
    }
    $(window).resize()
}});
GS.Controllers.VipInterface.extend("GS.Controllers.Lightbox.RedeemPointsController", {onDocument:false}, {init:function(a, b) {
    this.update(b)
},update:function(a) {
    this.vipPackage = a.type == "plus" ? "plus" : "anywhere";
    if (this.vipPackage == "plus") {
        this.points = GS.Models.Clearvoice.numPointsForPlus;
        this.packageName = "Grooveshark Plus"
    } else {
        this.points = GS.Models.Clearvoice.numPointsForAnywhere;
        this.packageName = "Grooveshark Anywhere"
    }
    GS.user.getPoints(this.callback("pointsSuccess"), this.callback("pointsFail"))
},pointsSuccess:function(a) {
    if (a <
            this.points) {
        this.points = a;
        this.element.html(this.view("/lightbox/redeemPointsNotEnough"))
    } else this.element.html(this.view("/lightbox/redeemPoints"))
},pointsFail:function(a) {
    console.warn("userGetPoints bad points", a);
    this.element.html(this.view("/lightbox/redeemPoints"))
},"button.submit click":function(a, b) {
    b.preventDefault();
    var c = hex_md5((new Date).getTime()),g = gsConfig.runMode == "production" ? "https://vip.grooveshark.com/" : "https://stagingvip.grooveshark.com/",h = {callbackMethod:c,callbackUrl:location.protocol +
            "//" + location.host + "/vipCallback.php",bExtend:GS.user.IsPremium ? 1 : 0,anywhere:this.vipPackage == "plus" ? 0 : 1};
    window[c] = this.callback(function(k) {
        if (k.bSuccess && k.token) {
            var m = hex_md5((new Date).getTime()),n = k.description.match(/anywhere/i) ? "anywhere" : "plus",o = gsConfig.runMode == "production" ? "https://vip.grooveshark.com/" : "https://stagingvip.grooveshark.com/";
            k = {callbackMethod:m,callbackUrl:location.protocol + "//" + location.host + "/vipCallback.php",token:k.token};
            window[m] = this.callback(function(q) {
                if (q.bSuccess) {
                    GS.user.updateAccountType(n);
                    GS.user.invalidatePoints();
                    if (location.hash.substring(2).match(/^survey/i))location.hash += " ";
                    GS.getLightbox().close();
                    location.hash = "#/signup/complete"
                } else {
                    console.warn("redeemPointsConfirm error", q);
                    this.showVipErrors(q)
                }
            });
            GS.service.httpsFormSubmit(o + "payByPointsConfirm.php", k, m)
        } else {
            console.warn("redeemPoints error", k);
            this.showVipErrors(k)
        }
    });
    GS.service.httpsFormSubmit(g + "payByPoints.php", h, c);
    return false
}});
GS.Controllers.BaseController.extend("GS.Controllers.Lightbox.SurveyResultController", {onDocument:false}, {init:function(a, b) {
    this.update(b)
},update:function(a) {
    this.result = _.orEqual(a, {});
    this.element.html(this.view("/lightbox/surveyResult"))
}});
GS.Controllers.BaseController.extend("GS.Controllers.Lightbox.TunipopController", {onDocument:false}, {init:function(a, b) {
    this.update(b)
},update:function(a) {
    this.defaults = a;
    this.element.html(this.view("/lightbox/tunipop"));
    if (this.defaults.tunipopID && this.defaults.tunipopID > 0)this.loadTunipop(this.defaults.tunipopID); else {
        if (this.defaults.artistID)this.artist = GS.Models.Artist.getOneFromCache(this.defaults.artistID); else if (this.defaults.songID) {
            this.song = GS.Models.Song.getOneFromCache(this.defaults.songID);
            this.artist = GS.Models.Artist.getOneFromCache(this.song.ArtistID);
            if (!this.artist && this.song)this.artist = GS.Models.Artist.wrap({ArtistID:this.song.ArtistID,ArtistName:this.song.ArtistName}, false)
        }
        this.artist ? this.artist.getTunipopID().then(this.callback("loadTunipop"), this.callback("loadTunipop")) : this.loadTunipop(0)
    }
},loadTunipop:function(a) {
    if (a && a > 0) {
        this.tunipopID = parseInt(a, 10);
        a = $('<iframe id="tunipopFrame" name="tunipopFrame" scrolling="no" width="100%" height="480px"></iframe>');
        a.attr("src",
                "https://app.tunipop.net/ui/TunipopWidget.php?brandid=" + this.tunipopID + "&rid=7300")
    } else {
        this.tunipopID = 0;
        a = $(this.view("/lightbox/noResults"))
    }
    $("#tunipopForm #lightbox_content").html(a)
}});
GS.Controllers.BaseController.extend("GS.Controllers.Lightbox.gsUsersFromThirdPartyController", {onDocument:false}, {gsUsers:[],slickbox:false,selected:{},isFacebook:true,isTwitter:false,isLastfm:false,init:function(a, b) {
    this.gsUsers = b.users;
    $.each(b.users, this.callback(function(c, g) {
        b.users[c].selected = true;
        this.selected[g.UserID] = g.UserID
    }));
    if (b.isTwitter) {
        this.isFacebook = false;
        this.isTwitter = true
    }
    if (b.isLastfm) {
        this.isFacebook = false;
        this.isLastfm = true
    }
    this.update()
},update:function() {
    this.element.html(this.view("/lightbox/gsUsersFromThirdParty"));
    var a = "facebook_contacts";
    if (this.isTwitter)a = "twitter_contacts"; else if (this.isLastfm)a = "lastfm_contacts";
    this.slickbox = $(".gsusers.contactsContainer", this.element).html("").show().slickbox({itemRenderer:this.userItemRenderer,itemClass:this.userItemClass,itemWidth:181,itemHeight:47,verticalGap:5,horizontalGap:8,hidePositionInfo:true,listClass:"contacts thirdparty_contacts " + a}, this.gsUsers)
},userItemClass:function() {
    return"contact clear"
},userItemRenderer:function(a) {
    return a.TwitterProfile ? ['<label class="',
        a.selected ? "selected" : "",'"><img src="',a.TwitterProfile.profile_image_url,'" /><a class="groovesharkUser" type="checkbox" rel="',a.UserID,'" ',a.selected ? "checked" : "",' /></a><span class="thirdpartyUsername twitterUsername">',a.TwitterProfile.screen_name,"</span></label>"].join("") : a.LastfmProfile ? ['<label class="',a.selected ? "selected" : "",'"><img src="',a.LastfmProfile.image,'" /><a class="groovesharkUser hide" type="checkbox" rel="',a.UserID,'" ',a.selected ? "checked" : "",' /></a><span class="thirdpartyUsername lastfmUsername">',
        a.LastfmProfile.name,"</span></label>"].join("") : ['<label class="',a.selected ? "selected" : "",'"><img src="http://graph.facebook.com/',a.FacebookUserID,'/picture" /><a class="groovesharkUser" type="checkbox" rel="',a.UserID,'" ',a.selected ? "checked" : "",' /></a><span class="thirdpartyUsername facebookUsername">',a.FacebookName,"</span></label>"].join("")
},"a.groovesharkUser click":function(a) {
    if ($(a).parent().hasClass("selected")) {
        $(a).parent().removeClass("selected");
        delete this.selected[a.attr("rel")];
        this.gsUsers[parseInt(a.parents("li.contact").attr("rel"), 10)].selected = false
    } else {
        $(a).parent().addClass("selected");
        this.selected[a.attr("rel")] = a.attr("rel");
        this.gsUsers[parseInt(a.parents("li.contact").attr("rel"), 10)].selected = true
    }
    this.slickbox.setItems(this.gsUsers)
},"button.uncheckAll click":function() {
    _.forEach(this.gsUsers, function(a, b) {
        this.gsUsers[b].selected = false
    }, this);
    this.selected = {};
    this.slickbox.setItems(this.gsUsers)
},"button.checkAll click":function() {
    _.forEach(this.gsUsers,
            function(a, b) {
                this.gsUsers[b].selected = true;
                this.selected[a.UserID] = a.UserID
            }, this);
    this.slickbox.setItems(this.gsUsers)
},"#lightbox button.submit click":function() {
    var a = 0,b = 0,c = true;
    $.each(this.selected, this.callback(function(g) {
        a++;
        GS.Models.User.getUser(g, this.callback(function(h) {
            GS.user.addToUserFavorites(h.UserID, false);
            a--;
            b++;
            !c && a == 0 && b > 0 && $.publish("gs.notification.favorite.user", this.selected)
        }), this.callback(function() {
            a--;
            !c && a == 0 && b > 0 && $.publish("gs.notification.favorite.user", this.selected)
        }),
                false)
    }));
    c = false;
    !c && a == 0 && b > 0 && $.publish("gs.notification.favorite.user", this.selected);
    GS.getLightbox().close()
}});
GS.Controllers.BaseController.extend("GS.Controllers.Lightbox.BillingHistoryController", {onDocument:false}, {init:function() {
    this.update()
},update:function() {
    GS.service.getSubscriptionHistory(this.callback("onSubscription"), this.callback("onFailure"));
    this.element.html(this.view("/lightbox/billing_history"))
},onSubscription:function(a) {
    console.warn(a);
    $("#billing_history_table", this.element).html(this.view("/lightbox/billing_history_table"))
},onFailure:function() {
    $("#billing_history_table", this.element).html("")
}});
GS.Controllers.BaseController.extend("GS.Controllers.Lightbox.FeatureController", {onDocument:false}, {feature:"boxee",init:function(a) {
    this.feature = _.orEqual(a.feature, "boxee");
    this.update()
},update:function() {
    this.user = GS.user;
    GS.user.promotions[this.feature] = true;
    this.element.html(this.view("/lightbox/feature/" + this.feature))
},"a.signup click":function() {
    GS.getLightbox().close();
    return true
},"a.perks_anywhere click":function() {
    GS.getLightbox().close();
    GS.getLightbox().open("vipPerks");
    return false
},
    "button.upgrade click":function() {
        GS.getLightbox().close();
        GS.getLightbox().open("vipSignup", {vipPackage:"anywhere"});
        return false
    }});
GS.Controllers.BaseController.extend("GS.Controllers.Lightbox.AboutController", {onDocument:false}, {init:function() {
    this.update()
},update:function() {
    this.element.html(this.view("/lightbox/about"))
}});
GS.Controllers.BaseController.extend("GS.Controllers.Lightbox.IE9PromotionController", {onDocument:false}, {init:function() {
    this.update()
},update:function() {
    this.element.html(this.view("/lightbox/ie9Promotion"))
},"div.promo_login click":function() {
    GS.theme.lastDFPChange = (new Date).getTime() + 6E5;
    GS.getLightbox().close();
    GS.getLightbox().open("login")
},"div.promo_signup click":function() {
    GS.theme.lastDFPChange = (new Date).getTime() + 6E5;
    GS.getLightbox().close();
    location.hash = "#/signup"
},"a.promo_download click":function(a, b) {
    GS.theme.lastDFPChange = (new Date).getTime() + 6E5;
    var c = $(b.target).attr("data-lb-download-ctp"),g = $(b.target).attr("data-theme-id");
    GS.service.logThemeOutboundLinkClick(parseInt(g), 500);
    GS.theme.loadTracking(c.split(","))
},"img.promo_drag mousedown":function(a, b) {
    GS.theme.lastDFPChange = (new Date).getTime() + 6E5;
    var c = $(b.target).attr("data-lb-pin-ctp"),g = $(b.target).attr("data-theme-id");
    GS.service.logThemeOutboundLinkClick(parseInt(g), 503);
    GS.theme.loadTracking(c.split(","))
},"div.download_promo_watch click":function(a, b) {
    GS.theme.lastDFPChange = (new Date).getTime() + 6E5;
    var c = $(b.target).attr("data-lb-watch-ctp"),g = $(b.target).attr("data-theme-id");
    GS.service.logThemeOutboundLinkClick(parseInt(g), 501);
    GS.theme.loadTracking(c.split(","));
    GS.getLightbox().close();
    video = GS.Models.Video.wrapYoutube({VideoID:"ruV0KbU1tsA",type:"youtube",title:"Sites you love - Grooveshark - one click away in Internet Explorer 9",length:15});
    GS.getLightbox().open("video", {video:video,renderSection:true,onDestroy:this.callback(function() {
        $("#theme_lightbox_header").removeClass("ie9");
        $("#theme_lightbox_header").hide();
        GS.getLightbox().open("ie9Promotion", this.options)
    })});
    $("#theme_lightbox_header").show();
    $("#theme_lightbox_header").addClass("ie9");
    $("#theme_lightbox_header").html('<a id="lightbox_microsoftIE9_background" target="_blank" href="http://www.beautyoftheweb.com/#/holiday"></a>')
},"a.promo_freeStuff click":function(a, b) {
    var c = $(a).attr("data-href"),g = $(b.target).attr("data-theme-id");
    GS.service.logThemeOutboundLinkClick(parseInt(g), 504);
    window.open(c, "_blank")
},"div.pin_promo_watch click":function(a, b) {
    GS.theme.lastDFPChange = (new Date).getTime() + 6E5;
    var c = $(b.target).attr("data-lb-watch-ctp"),g = $(b.target).attr("data-theme-id");
    GS.service.logThemeOutboundLinkClick(parseInt(g), 502);
    GS.theme.loadTracking(c.split(","));
    GS.getLightbox().close();
    video = GS.Models.Video.wrapYoutube({VideoID:"ruV0KbU1tsA",type:"youtube",title:"Sites you love - Grooveshark - one click away in Internet Explorer 9",length:15});
    GS.getLightbox().open("video", {video:video,renderSection:true,onDestroy:this.callback(function() {
        $("#theme_lightbox_header").removeClass("ie9");
        $("#theme_lightbox_header").hide();
        GS.getLightbox().open("ie9Promotion", this.options)
    })});
    $("#theme_lightbox_header").show();
    $("#theme_lightbox_header").addClass("ie9");
    $("#theme_lightbox_header").html('<a id="lightbox_microsoftIE9_background" target="_blank" href="http://www.beautyoftheweb.com/#/holiday"></a>')
}});
GS.Controllers.BaseController.extend("GS.Controllers.Lightbox.ResetPasswordController", {onDocument:false}, {init:function(a, b) {
    this.removeCallback = b;
    this.update()
},update:function() {
    GS.Controllers.Lightbox.Generic.prototype.update.call(this, {view:{header:"POPUP_RESET_PASSWORD_TITLE",message:"POPUP_RESET_PASSWORD_MESSAGE",buttonsRight:[
        {label:"POPUP_RESET_PASSWORD_TITLE",className:"submit"}
    ],buttonsLeft:[
        {label:"CANCEL",className:"close"}
    ]}})
},showError:function(a) {
    $("div.message", this.element).html($.localize.getString(a));
    this.element.find(".error").show();
    GS.getLightbox().positionLightbox()
},".submit click":function(a, b) {
    b.preventDefault();
    GS.user.Email ? GS.service.userForgotPassword(GS.user.Email, this.callback(this.serviceSuccess), this.callback(this.serviceFailed)) : this.showError("POPUP_SIGNUP_FORGOT_FORM_RESPONSE_ERROR")
},".close click":function(a, b) {
    b.preventDefault();
    GS.getLightbox().close()
},serviceSuccess:function(a) {
    if (a && a.userID == 0 || !a)return this.serviceFailed(a);
    this.removeCallback(function() {
        GS.getLightbox().close();
        $.publish("gs.notification", {message:$.localize.getString("POPUP_RESET_PASSWORD_SUCCESS")})
    })
},serviceFailed:function() {
    this.showError("POPUP_SIGNUP_FORGOT_FORM_RESPONSE_ERROR")
}});
GS.Controllers.BaseController.extend("GS.Controllers.Lightbox.BroadcastController", {onDocument:false}, {type:null,id:0,userLookup:{},autocompleteData:[],metadata:null,init:function(a, b) {
    this.update(b)
},update:function(a) {
    this.type = a.type;
    this.id = a.id;
    this.autocompleteData = [];
    this.userLookup = {};
    this.metadata = null;
    switch (a.type) {
        case "album":
            GS.Models.Album.getAlbum(this.id, this.callback(function(b) {
                this.metadata = b;
                this.metadata.name = b.AlbumName;
                this.metadata.by = b.ArtistName
            }), null, false);
            break;
        case "artist":
            GS.Models.Artist.getArtist(this.id,
                    this.callback(function(b) {
                        this.metadata = b;
                        this.metadata.name = b.ArtistName
                    }), null, false);
            break;
        case "playlist":
            GS.Models.Playlist.getPlaylist(this.id, this.callback(function(b) {
                this.metadata = b;
                this.metadata.name = b.PlaylistName;
                this.metadata.by = b.UserName
            }), null, false);
            break;
        case "song":
            GS.Models.Song.getSong(this.id, this.callback(function(b) {
                this.metadata = b;
                this.metadata.name = b.SongName;
                this.metadata.by = b.ArtistName
            }), null, false);
            break;
        default:
            GS.getLightbox().close();
            return
    }
    this.element.html(this.view("/lightbox/broadcast"));
    this.element.find("input:first").focus();
    GS.getLightbox().positionLightbox();
    $("#broadcastUsers").hide();
    this.getFavorites()
},getFavorites:function() {
    GS.user.getFavoritesByType("Users", this.callback(this._favLoaded), this.callback(this._favFailed))
},_favLoaded:function(a) {
    _.forEach(a, function(b) {
        this.autocompleteData.push([b.UserID,b.FName,b.FName]);
        this.userLookup[b.UserID] = b
    }, this);
    this.getFans()
},_favFailed:function() {
    this.getFans()
},getFans:function() {
    if (!GS.user.fanbase)GS.user.fanbase = GS.Models.Fanbase.wrap({objectID:GS.user.UserID,
        objectType:"user"});
    GS.user.fanbase.getFans(this.callback(this._fansLoaded), this.callback(this._fansFailed), false)
},_fansLoaded:function(a) {
    _.forEach(a, function(b) {
        if (!_.defined(this.userLookup[b.UserID])) {
            this.autocompleteData.push([b.UserID,b.FName,b.FName]);
            this.userLookup[b.UserID] = b
        }
    }, this);
    this._setupAutocomplete()
},_fansFailed:function() {
    this._setupAutocomplete()
},_setupAutocomplete:function() {
    if (this.autocompleteData.length) {
        $("#broadcastUsers").show();
        var a = new $.TextboxList("#broadcast_to",
                {addOnBlur:true,bitsOptions:{editable:{growing:true,growingOptions:{maxWidth:335}}},plugins:{autocomplete:{placeholder:$.localize.getString("BROADCAST_NAME_PLACEHOLDER")}},encode:function(b) {
                    for (var c = [],g = 0; g < b.length; g++)b[g][0] && c.push(b[g][0]);
                    return c.join(",")
                }});
        a.plugins.autocomplete.setValues(this.autocompleteData);
        a.addEvent("bitAdd", function(b) {
            b.getValue()[0] || b.hide()
        });
        a.fireEvent("focus");
        $(".textboxlist-bit-editable-input", this.element).focus();
        GS.getLightbox().positionLightbox()
    }
},
    render:function() {
        this.element.html(this.view("/lightbox/broadcast"));
        GS.getLightbox().positionLightbox()
    },"a.submit, button.submit click":function(a, b) {
        $("form", this.element).submit();
        b.preventDefault();
        b.stopPropagation()
    },"form submit":function(a, b) {
        b.preventDefault();
        b.stopPropagation();
        var c = ($("input[name=to]", a).val() || "").split(","),g = $("textarea[name=message]", a).val(),h = [];
        _.forEach(c, function(k) {
            this.userLookup[k] && h.push(this.userLookup[k].getDetailsForFeeds())
        }, this);
        GS.service.sendFeedBroadcast(this.type,
                this.id, h, g, this.callback("broadcastSuccess"), this.callback("broadcastFailed"));
        return false
    },broadcastSuccess:function(a) {
        if (!a || !a.Success)return this.broadcastEmailFailed(a);
        GS.getLightbox().close();
        $.publish("gs.notification", {type:"notice",message:_.getString("NOTIFICATION_BROADCAST_SUCCESS", {type:this.type,item:this.metadata.name})})
    },broadcastFailed:function() {
        this.element.find(".error").show().find(".message").html(_.getString("BROADCAST_ERROR", {type:this.type}));
        GS.getLightbox().positionLightbox()
    }});
GS.Controllers.BaseController.extend("GS.Controllers.Lightbox.newFacebookUserController", {onDocument:false}, {init:function() {
    this.subscribe("gs.facebook.profile.update", this.callback("update"));
    this.update()
},update:function() {
    this.element.html(this.view("/lightbox/newFacebookUser"));
    $(".checkbox_list", this.element).html(this.view("/shared/facebookSettings"))
},"form submit":function() {
    var a = 0;
    $(".checkbox_list input:checkbox:checked", this.element).each(function(b, c) {
        a |= $(c).val()
    });
    if (a != GS.getFacebook().flags)GS.getFacebook().save(a,
            function() {
                GS.getLightbox().close();
                setTimeout(function() {
                    $.publish("gs.facebook.notification.findFriends", "NOTIF_FACEBOOK_FINDFRIENDS")
                }, 2E3)
            }, function() {
                $(".error").show()
            }); else {
        GS.getLightbox().close();
        setTimeout(function() {
            $.publish("gs.facebook.notification.findFriends", "NOTIF_FACEBOOK_FINDFRIENDS")
        }, 2E3)
    }
    return false
}});
(function(a) {
    function b(o) {
        if (_.defined(o.inviteCode)) {
            gsConfig.inviteCode = o.inviteCode;
            var q = (new Date).valueOf() + 12096E5;
            try {
                GS.store.set("lastInviteCode", {inviteCode:o.inviteCode,expires:q})
            } catch(v) {
            }
        }
        if (o.hasOwnProperty("password")) {
            q = {};
            if (o.hasOwnProperty("code"))q.resetCode = o.code;
            GS.getLightbox().open("forget", q)
        }
        o.hasOwnProperty("invite") && GS.getLightbox().open("invite");
        o.hasOwnProperty("signup") && GS.getLightbox().open("signup");
        if (o.hasOwnProperty("login"))if (!GS.user || !GS.user.isLoggedIn)GS.getLightbox().open("login");
        if (o.hasOwnProperty("testAds"))GS.getAd().useTestAds = true;
        o.hasOwnProperty("unsubscribeClearvoiceEmail") && GS.getLightbox().open("surveyResult", {gsResult:-999,ResultCode:"Unsub"});
        o.hasOwnProperty("activateClearvoiceEmail") && GS.getLightbox().open("surveyResult", {gsResult:-999,ResultCode:"Activate"});
        if (o.hasOwnProperty("measurePerformance")) {
            var x = false,A = function() {
                if (a("#grid ul.options").length) {
                    top.hasLoaded("search");
                    GS.player.addSongsToQueueAt([a("#grid ul.options:first").attr("rel")], -1, true);
                    setTimeout(u, 1)
                } else setTimeout(A, 1)
            },u = function() {
                if (GS.player.isPlaying && !GS.player.isLoading && !x) {
                    x = true;
                    top.hasLoaded("play")
                } else setTimeout(u, 1)
            };
            if (window.top && window != top && a.isFunction(top.hasLoaded)) {
                top.hasLoaded("page");
                setTimeout(A, 1);
                location.hash = "/search?q=eminem"
            }
        }
    }

    function c(o) {
        o = _.defined(o.search);
        GS.router.page.activate("home", null).index(o);
        GS.getGuts().handlePageLoad("home", {})
    }

    function g(o) {
        o = new m(o.splat, "login", "id", "section", "subpage", "objType");
        var q;
        if (o.section == "playlists") {
            o.objType =
                    o.subpage;
            o.subpage = o.section;
            o.section = "music";
            o.length = o.objType ? 5 : 4
        }
        if (o.section == "music") {
            q = GS.router.page.activate("music", o.id, o);
            switch (o.length) {
                case 3:
                    q.index(o.id, "");
                    break;
                case 4:
                    q[o.subpage](o.id);
                    break;
                case 5:
                    q[o.subpage](o.id, o.objType);
                    break;
                default:
                    GS.router.notFound()
            }
        } else {
            q = GS.router.page.activate("user", o.id, o);
            switch (o.length) {
                case 2:
                    q.index(o.id);
                    break;
                case 3:
                    q[o.section](o.id, "");
                    break;
                case 4:
                    q[o.section](o.id, o.subpage);
                    break;
                default:
                    GS.router.notFound()
            }
        }
        GS.getGuts().handlePageLoad("user",
                o)
    }

    function h(o) {
        var q = o.splat.shift(),v = new m(o.splat, "name", "id", "subpage"),x = GS.router.page.activate(q, v.id);
        switch (v.length) {
            case 2:
            case 3:
                x.index(v.id, v.subpage, o.play);
                break;
            default:
                this.notFound()
        }
        GS.getGuts().handlePageLoad(q, v)
    }

    function k(o, q) {
        var v = o.indexOf("/");
        return v !== -1 ? o.substring(0, v) + "/" + q + o.substring(v) : o + "/" + q
    }

    function m() {
        var o = a.makeArray(arguments),q = o.shift()[0],v = this;
        if (_.isEmpty(q))v.length = 0; else {
            q = q.replace(/\/$/, "").split("/");
            v.length = q.length;
            var x;
            _.forEach(q, function(A, u) {
                x = o[u];
                v[x] = A
            })
        }
    }

    if (typeof window._comscore != "object")window._comscore = [];
    GS.router = new (function() {
        var o = this;
        this._routes = [];
        this._history = [];
        this._nextHashShift = this._historyIndex = 0;
        this._pageNameCache = {};
        this.hasForward = this.hasBack = false;
        this.get = function(q, v, x) {
            x = _.orEqual(x, this);
            if (!(q instanceof RegExp) && !_.isString(q))console.error("invalid route, must be String or RegExp"); else {
                if (_.isString(q))q = RegExp("^" + q + "$");
                this._routes.push({path:q,callback:v,context:x})
            }
        };
        this.notFound = function() {
            window.location.replace(window.location.protocol +
                    "//" + window.location.hostname + "/#/notFound")
        };
        this.back = function() {
            this.navHistory(-1)
        };
        this.forward = function() {
            this.navHistory(1)
        };
        this.navHistory = function(q) {
            var v = this._historyIndex + q;
            if (v >= 0 && v < this._history.length) {
                this._nextHashShift = q;
                window.location.hash = this._history[v]
            }
        };
        this.performSearch = function(q, v) {
            v = v.toString();
            if (v.indexOf("http://") == 0 && v.indexOf("tinysong") == -1) {
                v = v.substring(7);
                var x = v.indexOf("#");
                if (x != -1)window.location.hash = v.substring(x); else {
                    x = v.indexOf("/");
                    window.location.hash =
                            "#" + v.substring(x)
                }
            } else {
                q = q.toLowerCase();
                v = encodeURIComponent(v);
                v = v.replace(/%20/g, "+");
                window.location.hash = q ? "#/search/" + q + "?q=" + v : "#/search?q=" + v
            }
        };
        this.cachePageName = function(q, v, x) {
            this._pageNameCache[q] = {type:v,id:x}
        };
        this.run = function() {
            this.page = GS.Controllers.PageController;
            this.before = this.page.checkLock;
            a(window).hashchange(function() {
                var q = location.hash;
                if (q && q.length)q = location.href.substring(location.href.indexOf("#"));
                o._onHashChange(q)
            });
            a(window).trigger("hashchange")
        };
        this._onHashChange =
                function(q) {
                    if (a.isFunction(this.before))if (!this.before())return;
                    window._gaq && _gaq.push && _gaq.push(["_trackPageview",q]);
                    var v = {c1:2,c2:"8187464",c4:(location.protocol + "//" + location.host + "/" + q).replace("#/", "")};
                    window.COMSCORE && COMSCORE.beacon ? COMSCORE.beacon(v) : window._comscore.push(v);
                    if (this._nextHashShift != 0) {
                        v = this._historyIndex + this._nextHashShift;
                        if (v >= 0 && v < this._history.length && this._history[v] == q)this._historyIndex = v; else this._nextHashShift = 0
                    }
                    if (this._nextHashShift == 0) {
                        this._history = this._history.slice(0,
                                this._historyIndex + 1);
                        q && this._history.push(q);
                        this._historyIndex = this._history.length - 1
                    }
                    this._nextHashShift = 0;
                    v = this._parseQueryString(q);
                    var x = q.replace(n, "");
                    if (q = this._getRouteForPath(x)) {
                        x = x.match(q.path);
                        x.shift();
                        v.splat = x;
                        if (a.isFunction(q.callback)) {
                            q.callback.call(q.context, v);
                            b(v)
                        }
                        this.hasBack = this._history.length && this._historyIndex > 0;
                        this.hasForward = this._history.length && this._historyIndex < this._history.length - 1;
                        a.publish("gs.router.history.change")
                    } else this.notFound()
                };
        this._getRouteForPath =
                function(q) {
                    var v,x,A;
                    x = 0;
                    for (A = this._routes.length; x < A; x++)if (this._routes[x].path.test(q)) {
                        v = this._routes[x];
                        break
                    }
                    return v
                };
        this._parseQueryString = function(q) {
            var v = {},x = /\+/g,A,u,C;
            if (q = q.match(n)) {
                q = q[1].split("&");
                u = 0;
                for (C = q.length; u < C; u++) {
                    A = q[u].split("=");
                    if (A[0] === "q" || A[0] === "query")A[1] = A[1].replace(x, "%20");
                    v = this._parseParamPair(v, decodeURIComponent(A[0]), decodeURIComponent(A[1]))
                }
            }
            return v
        };
        this._parseParamPair = function(q, v, x) {
            if (q[v])if (_isArray(q[v]))q[v].push(x); else q[v] = [q[v],
                x]; else q[v] = x;
            return q
        };
        this._getTypeIDForPageName = function(q) {
            var v = a.Deferred(),x,A,u;
            _.defined(this._pageNameCache[q]) ? v.resolve(this._pageNameCache[q]) : GS.service.getItemByPageName(q, function(C) {
                if (C && C.type)if (u = C[C.type]) {
                    u.PageName = q;
                    switch (C.type) {
                        case "user":
                            x = GS.Models.User.wrap(u);
                            A = x.UserID;
                            break;
                        case "artist":
                            x = GS.Models.Artist.wrap(u);
                            A = x.ArtistID;
                            break;
                        case "album":
                            x = GS.Models.Album.wrap(u);
                            A = x.AlbumID;
                            break;
                        case "theme":
                            A = u.themeID;
                            break;
                        default:
                            console.warn("unknown type for PageName",
                                    C.type, q);
                            v.reject(C);
                            return
                    }
                    o._pageNameCache[q] = {type:C.type,id:A};
                    v.resolve(o._pageNameCache[q])
                } else v.reject(C); else v.reject(C)
            }, function(C) {
                v.reject(C)
            });
            return v.promise()
        }
    });
    GS.router.get("", function(o) {
        c(o)
    });
    GS.router.get("#/", function(o) {
        c(o)
    });
    GS.router.get("#/notFound", function(o) {
        this.page.activate("home", null).notFound();
        GS.getGuts().handlePageLoad("notFound", o)
    });
    GS.router.get(/^#\/user\/(.*)\/?$/, g);
    GS.router.get(/^#\/playlist\/(.*)\/?/, function(o) {
        var q = new m(o.splat, "name", "id",
                "subpage"),v = this.page.activate("playlist", q.id, q);
        switch (q.length) {
            case 2:
            case 3:
                var x = _.orEqual(q.subpage, "music");
                v.index(q.id, x, o.play);
                q.subpage = x;
                break;
            default:
                this.notFound()
        }
        GS.getGuts().handlePageLoad("playlist", q)
    });
    GS.router.get(/^#\/s(?:ong)?\/(.*)\/?/, function(o) {
        var q = new m(o.splat, "name", "token", "subpage");
        if (o.fbComment && GS.page.activePage && GS.page.activePage.token === q.token)return false;
        o = this.page.activate("song", q.token, q);
        switch (q.length) {
            case 2:
            case 3:
                var v = _.orEqual(q.subpage,
                        "overview");
                o.index(q.token, v);
                break;
            default:
                this.notFound()
        }
        q.subpage = v;
        GS.getGuts().handlePageLoad("song", q)
    });
    GS.router.get(/^#\/(album|artist|promotion)\/(.*)\/?/, h);
    GS.router.get(/^#\/redeem\/?(.*)\/?/, function(o) {
        o = new m(o.splat, "type");
        o.redeemingPromoCard = true;
        GS.getGuts().handlePageLoad("home", o);
        this.page.activate("home", null, o).index();
        GS.getLightbox().open("redeem", {type:o.type})
    });
    GS.router.get(/^#\/login(?:$|\/(.*)\/?)/, function(o) {
        o = new m(o.splat, "type");
        GS.getGuts().handlePageLoad("home",
                o);
        this.page.activate("home", null, o).index();
        GS.getLightbox().open("login", {type:o.type})
    });
    GS.router.get(/^#\/themes(?:$|\/(.*)\/?)/, function(o) {
        o = new m(o.splat, "type");
        GS.getGuts().handlePageLoad("home", o);
        this.page.activate("home", null, o).index();
        GS.getLightbox().open("themes", {type:o.type})
    });
    GS.router.get(/^#\/(theme)\/(.*)\/?/, function(o) {
        o.splat.shift();
        var q = new m(o.splat, "name", "themeid", "type");
        GS.theme.loadFromDFPManual(q.themeid);
        GS.getGuts().handlePageLoad("home", o);
        this.page.activate("home",
                null, q).index()
    });
    GS.router.get(/^#\/boxee(?:$|\/(.*)\/?)/, function(o) {
        o = new m(o.splat, "type");
        GS.getGuts().handlePageLoad("home", o);
        this.page.activate("home", null, o).index();
        GS.getLightbox().open("feature", {feature:"boxee"})
    });
    GS.router.get(/^#\/perks(?:$|\/(.*)\/?)/, function(o) {
        o = new m(o.splat, "type");
        GS.getGuts().handlePageLoad("home", o);
        this.page.activate("home", null, o).index();
        GS.theme.setCurrentTheme(163, true);
        GS.getLightbox().open("vipPerks")
    });
    GS.router.get(/^#\/(sessions)/, function() {
        GS.theme.setCurrentTheme(247,
                true);
        this.page.activate("home", null, parse).index()
    });
    GS.router.get(/^#\/search(?:$|\/(.*)\/?)/, function(o) {
        var q = new m(o.splat, "type");
        this.page.activate("search", (q.type || "everything") + (o.q || o.query), q).index(q.type, o.q || o.query);
        if (q.type)q.subpage = q.type; else q.type = "everything"
    });
    GS.router.get(/^#\/surveys(?:$|\/(.*)\/?|\/(.*)\/(.*)\/?)/, function(o) {
        var q = this.page.activate("surveys");
        o = new m(o.splat, "subpage", "id");
        if (!o.subpage)o.subpage = "index";
        if (!o.id)o.id = false;
        q.index(o.subpage, o.id);
        GS.getGuts().handlePageLoad("surveys", o)
    });
    GS.router.get(/^#\/explore(?:$|\/(.*)\/?)/, function(o) {
        var q = this.page.activate("explore");
        o = new m(o.splat, "subpage", "type");
        if (!o.type)o.type = false;
        q.index(o.subpage, o.type);
        GS.getGuts().handlePageLoad("explore", o)
    });
    GS.router.get(/^#\/(.*)\/?$/, function(o) {
        var q = new m(o.splat, "page", "subpage", "type"),v = this.page.activate(q.page, null, q),x = this;
        if (q.page == "popular") {
            window.location.replace(window.location.protocol + "//" + window.location.hostname + "/#/explore/popular");
            q.page = "explore";
            q.subpage = "popular";
            v = this.page.activate("explore")
        }
        _.defined(v) ? v.index(q.subpage) : this._getTypeIDForPageName(q.page).done(
                function(A) {
                    switch (A.type) {
                        case "user":
                            o.splat[0] = k(o.splat[0], A.id);
                            g(o);
                            break;
                        case "artist":
                        case "album":
                            o.splat[1] = k(o.splat[0], A.id);
                            o.splat[0] = A.type;
                            h(o);
                            break;
                        default:
                            console.warn("cant handle pageName type", A);
                            x.notFound();
                            break
                    }
                }).fail(function() {
                    x.notFound()
                })
    });
    GS.router.get(/^#(?:[a-z0-9A-Z])/, function() {
        if (GS.page.activePage)if (GS.page.activePage) {
            var o =
                    GS.page.activePage.url;
            o = o.replace(/(&|\?)fb_comment_id=([a-zA-Z0-9\_\-]+)/, "$1fbComment");
            var q = GS.page.activePage.element.controller();
            q.scrollToFBComment && q.scrollToFBComment();
            location.replace(o)
        }
    });
    var n = /\?([^#]*)$/
})(jQuery);
(function(a) {
    function b() {
        if (!arguments.callee.prototype.locked) {
            var x = a("#application").width(),A = a("#header"),u = a("#footer"),C = a("#previewNotification"),F = a("#page"),H = a("#page_wrapper"),G = a("#page_sidebar"),D = a("#page_header"),w = a("#page_content"),y = a(".page_controls"),I = a(".page_controls .sticky");
            a("#content").add("#sidebar").add(H).css({height:k.height() - A.height() - u.height() - C.outerHeight()});
            a("#sidebar_pinboard").css({height:a("#sidebar").height() - a("#sidebar_music_navigation").height() -
                    a("#sidebar_pinboard_header").height() - 1});
            H.css({width:x - a("#sidebar").width()});
            F.css({height:H.height() - a("#page_footer").height() - a("#theme_page_header.measure").height(),width:H.width() - G.width()});
            I.width(y.width());
            A = {all:F.find(".noResults"),panes:F.find(".noResults_pane")};
            A.panes.css({height:a("#page.gs_page_search").length > 0 ? 250 : w.height()});
            a(".noResults_block_column").removeClass("js-center").css({margin:0});
            a(".noResults_block_center").removeClass("hide");
            if (A.all.width() <= 550) {
                a(".noResults_block_center").addClass("hide");
                a(".noResults_block_column").addClass("js-center")
            }
            A.all.css({top:Math.max((A.panes.height() - A.all.height()) / 2, 0)});
            if (w.hasClass("scrollable") || w.hasClass("grid"))w.css({height:F.height() - D.outerHeight()});
            w.find(".page_column_fluid").each(function() {
                var p = 0,r = w.width();
                a(this).siblings(".page_column").each(function() {
                    var s = a(this);
                    s.height(w.height());
                    if (s.hasClass("page_filter")) {
                        if (!s.hasClass("suppressAutoCollapse"))if (x < m && !s.hasClass("manualOpen"))s.addClass("collapsed"); else if (x < n && p > 0 &&
                                !s.hasClass("manualOpen"))s.addClass("collapsed"); else s.hasClass("manualCollapse") || s.removeClass("collapsed");
                        s.removeClass("suppressAutoCollapse");
                        if (s.hasClass("collapsed")) {
                            var t = s.find(".gs_grid").controller();
                            t && t.grid && s.width(t.grid.getScrollWidth())
                        } else s.width(175)
                    }
                    p += s.outerWidth()
                });
                a(this).css({width:r - p,height:w.height()})
            });
            a(".js-center").each(function() {
                var p = a(this);
                p.css({marginLeft:Math.max(0, (p.parent().width() - p.outerWidth()) / 2)})
            });
            arguments.callee.prototype.locked = true;
            a.publish("gs.app.resize");
            a(".gs_grid").each(function(p, r) {
                r = a(r);
                if (a.isFunction(r.controller)) {
                    var s = r.controller();
                    s && a.isFunction(s.resizeSelf) && r.controller().resizeSelf()
                }
            });
            arguments.callee.prototype.locked = false
        }
    }

    function c(x) {
        if (x)switch (x.type) {
            case "keydown":
                if (x.keyCode == "13" || x.ctrlKey && x.keyCode == "37" || x.ctrlKey && x.keyCode == "38" || x.ctrlKey && x.keyCode == "39" || x.ctrlKey && x.keyCode == "40")GS.getAd().adAction(x);
                break;
            default:
                GS.getAd().adAction(x);
                break
        }
    }

    function g() {
        var x = document.title || "";
        if (x.indexOf("#") != -1)x =
                x.substring(0, x.indexOf("#"));
        if (document.title != x && x !== "")document.title = x
    }

    function h() {
        a("head").pinify({applicationName:"Grooveshark",favIcon:"/webincludes/images/favicon64.ico",navColor:"#f77f00",startUrl:"http://" + window.location.host,tooltip:"Launch Grooveshark",window:"width=100%;height=100%"});
        var x = [
            {name:"Explore",url:"/#/explore",icon:gsConfig.assetHost + "/webincludes/images/pinned/explore.ico"},
            {name:"Search",url:"/#",icon:gsConfig.assetHost + "/webincludes/images/pinned/search.ico"}
        ],A =
                function() {
                    u({title:GS.user && GS.user.isLoggedIn ? GS.user.Name : "Grooveshark",items:[
                        {name:"My Profile",url:GS.user.toUrl(),icon:gsConfig.assetHost + "/webincludes/images/pinned/profile.ico"},
                        {name:"My Music",url:GS.user.toUrl("music"),icon:gsConfig.assetHost + "/webincludes/images/pinned/music.ico"},
                        {name:"Community",url:GS.user.toUrl("communuity"),icon:gsConfig.assetHost + "/webincludes/images/pinned/community.ico"}
                    ].concat(x)})
                },u = function(p) {
            window.external.msSiteModeClearJumplist();
            window.external.msSiteModeCreateJumplist(p.title);
            a.each(p.items, function(r, s) {
                window.external.msSiteModeAddJumpListItem(s.name, s.url, s.icon, s.target || "self")
            });
            window.external.msSiteModeShowJumplist()
        };
        a.subscribe("gs.auth.update", A);
        A();
        var C = {previous:1,play:2,next:3,library:4,radio:5,smile:6,frown:7};
        a.pinify.createThumbbarButtons({buttons:[
            {icon:gsConfig.assetHost + "/webincludes/images/pinned/previous.ico",name:"Previous",click:function() {
                GS.player && GS.player.previousSong()
            }},
            {icon:gsConfig.assetHost + "/webincludes/images/pinned/play.ico",name:"Play",
                click:function() {
                    if (GS.player)if (GS.player.isPaused) {
                        GS.player.resumeSong();
                        setTimeout(function() {
                            window.external.msSiteModeShowButtonStyle(C.play, 0)
                        }, 5)
                    } else if (GS.player.isPlaying || GS.player.isLoading) {
                        GS.player.pauseSong();
                        setTimeout(function() {
                            window.external.msSiteModeShowButtonStyle(C.play, 1)
                        }, 5)
                    } else {
                        GS.player.queue.activeSong && GS.player.playSong(GS.player.queue.activeSong.queueSongID);
                        setTimeout(function() {
                            window.external.msSiteModeShowButtonStyle(C.play, 0)
                        }, 5)
                    }
                },alternateStyle:{icon:gsConfig.assetHost +
                    "/webincludes/images/pinned/pause.ico",name:"Pause"}},
            {icon:gsConfig.assetHost + "/webincludes/images/pinned/next.ico",name:"Next",click:function() {
                GS.player && GS.player.nextSong()
            }},
            {icon:gsConfig.assetHost + "/webincludes/images/pinned/mymusic_add.ico",name:"Add to My Music",click:function() {
                GS.player.queue.activeSong && GS.user.library && GS.user.library.songs && GS.user.library.songs[GS.player.queue.activeSong.SongID] ? GS.user.removeFromLibrary(GS.player.queue.activeSong.SongID) : GS.user.addToLibrary([GS.player.queue.activeSong.SongID])
            },
                alternateStyle:{icon:gsConfig.assetHost + "/webincludes/images/pinned/mymusic_remove.ico",name:"Remove from My Music"}},
            {icon:gsConfig.assetHost + "/webincludes/images/pinned/radio_off.ico",name:"Start Radio",click:function() {
                var p = GS.player.queue.autoplayEnabled;
                GS.player.setAutoplay(!GS.player.queue.autoplayEnabled);
                p || setTimeout(function() {
                    window.external.msSiteModeShowButtonStyle(C.radio, 0)
                }, 5)
            },alternateStyle:{icon:gsConfig.assetHost + "/webincludes/images/pinned/radio_on.ico",name:"Stop Radio"}}
        ]});
        var F = {},H = function(p, r, s) {
            if (F[p] === undefined || F[p] !== s) {
                window.external.msSiteModeUpdateThumbBarButton(p, true, s);
                F[p] = s
            }
        },G = 0;
        a.subscribe("gs.player.playstatus", function(p) {
            if (p.status != G) {
                switch (p.status) {
                    case GS.player.PLAY_STATUS_INITIALIZING:
                    case GS.player.PLAY_STATUS_LOADING:
                    case GS.player.PLAY_STATUS_PLAYING:
                        setTimeout(function() {
                            window.external.msSiteModeShowButtonStyle(C.play, 1)
                        }, 10);
                        break;
                    case GS.player.PLAY_STATUS_COMPLETED:
                    case GS.player.PLAY_STATUS_PAUSED:
                    case GS.player.PLAY_STATUS_NONE:
                    case GS.player.PLAY_STATUS_FAILED:
                        setTimeout(function() {
                            window.external.msSiteModeShowButtonStyle(C.play,
                                    0)
                        }, 10);
                        break
                }
                G = p.status
            }
        });
        var D = function(p) {
            if (p) {
                window.external.msSiteModeShowButtonStyle(C.radio, 1);
                w = true
            } else {
                window.external.msSiteModeShowButtonStyle(C.radio, 0);
                w = false
            }
        },w = false;
        a.subscribe("gs.player.autoplay.update", function() {
            if (GS.player.queue)if (GS.player.queue.autoplayEnabled && GS.player.queue.autoplayEnabled != w)D(true); else GS.player.queue.autoplayEnabled != w && D(false)
        });
        H(C.previous, true, true);
        window.external.msSiteModeShowButtonStyle(C.play, 0);
        H(C.play, true, true);
        H(C.next, true, true);
        window.external.msSiteModeShowButtonStyle(C.library, 0);
        H(C.library, true, false);
        window.external.msSiteModeShowButtonStyle(C.radio, 0);
        H(C.radio, true, true);
        a.subscribe("gs.player.currentSong", function(p) {
            if (p) {
                typeof GS.player.queue.autoplayEnabled !== "undefined" && GS.player.queue.autoplayEnabled != w && D(GS.player.queue.autoplayEnabled);
                GS.player.queue.activeSong && GS.user.library && GS.user.library.songs && GS.user.library.songs[GS.player.queue.activeSong.SongID] ? window.external.msSiteModeShowButtonStyle(C.library,
                        1) : window.external.msSiteModeShowButtonStyle(C.library, 0);
                H(C.library, true, true)
            } else {
                window.external.msSiteModeShowButtonStyle(C.library, 0);
                H(C.library, true, false)
            }
        });
        if (GS.IE.firstPin && !GS.store.get("ie9Pinned")) {
            var y = function() {
                GS.service.giveFreePlusForPinningIE9(function(p) {
                    if (p) {
                        GS.user.updateAccountType("plus");
                        GS.getLightbox().close();
                        setTimeout(function() {
                            GS.getLightbox().open("ie9Promotion", {state:"success"})
                        }, 300);
                        if (gsConfig.runMode == "production") {
                            GS.getGuts().forceLogEvent("gotFreePlusForPinningIE9",
                                    {gotUpgrade:true});
                            GS.getGuts().gaTrackEvent("ie9Plus", "gotPlus")
                        }
                    } else if (gsConfig.runMode == "production") {
                        GS.getGuts().forceLogEvent("failedFreePlusForPinningIE9", {gotUpgrade:false});
                        GS.getGuts().gaTrackEvent("ie9Plus", "failedPlus")
                    }
                }, function() {
                    if (gsConfig.runMode == "production") {
                        GS.getGuts().forceLogEvent("failedFreePlusForPinningIE9", {gotUpgrade:false});
                        GS.getGuts().gaTrackEvent("ie9Plus", "failedPlus")
                    }
                });
                GS.store.set("ie9Pinned", "mission accomplished")
            };
            if (GS.user.isLoggedIn && !GS.user.IsPremium)GS.theme.themeIsReady ?
                    setTimeout(y, 200) : a.subscribe("gs.theme.set", function() {
                setTimeout(y, 200);
                a.unsubscribe(["gs.theme.set",y])
            }); else if (!GS.user.IsPremium) {
                a.subscribe("gs.auth.update", function() {
                    GS.user.isLoggedIn && !GS.store.get("ie9Pinned") && !GS.user.IsPremium && y()
                });
                A = a("#lightbox_wrapper .lbcontainer.gs_lightbox_login:visible");
                if (A.length)A.controller().showMessage(a.localize.getString("POPUP_LOGIN_CLAIM_FREE_VIP")); else {
                    var I = function() {
                        GS.getLightbox().open("ie9Promotion", {state:"login"})
                    };
                    GS.theme.themeIsReady ?
                            setTimeout(I, 200) : a.subscribe("gs.theme.set", function() {
                        setTimeout(I, 200);
                        a.unsubscribe(["gs.theme.set",I])
                    })
                }
            }
            if (gsConfig.runMode == "production") {
                GS.getGuts().forceLogEvent("userFirstPinnedIE9", {firstPin:true});
                GS.getGuts().gaTrackEvent("ie9Pinned", "firstPinned")
            }
        } else if (GS.IE.firstPin && gsConfig.runMode == "production") {
            GS.getGuts().forceLogEvent("userFirstPinnedIE9", {firstPin:true});
            GS.getGuts().gaTrackEvent("ie9Pinned", "firstPinned");
            GS.getGuts().forceLogEvent("failedFreePlusForPinningIE9", {gotUpgrade:false});
            GS.getGuts().gaTrackEvent("ie9Plus", "failedPlus")
        }
        if (GS.IE.isPinned && gsConfig.runMode == "production")GS.getGuts().gaTrackEvent("ie9Pinned", "isPinned"); else GS.IE.canPin && gsConfig.runMode == "production" && GS.getGuts().gaTrackEvent("ie9Pinned", "notPinned")
    }

    var k = a(window),m = 844,n = 1060;
    k.resize(b);
    if (a.browser.msie)window.onbeforeunload = function() {
        GS.user.isLoggedIn && GS.user.storeData();
        GS.theme && GS.theme.savePreferences();
        GS.getNotice && GS.getNotice().saveSeenPromoNotifications()
    }; else k.bind("unload",
            function() {
                GS.user.isLoggedIn && GS.user.storeData();
                GS.theme && GS.theme.savePreferences();
                GS.getNotice && GS.getNotice().saveSeenPromoNotifications()
            });
    a("body").konami(function() {
        a.publish("gs.playlist.play", {playlistID:40563861,playOnAdd:true})
    });
    a("body").bind("mousedown", c);
    a("body").bind("keydown", c);
    a.browser.msie && a(document).bind("propertychange", function() {
        event.propertyName == "title" && g()
    });
    GS.windowResizeTimeout = null;
    GS.windowResizeWait = 10;
    k.resize();
    if (window.gsViewBundles)GS.Controllers.BaseController.viewBundles =
            window.gsViewBundles;
    if (window.gsBundleVersions)GS.Controllers.BaseController.bundleVersions = window.gsBundleVersions;
    if (window.gsPageBundle && a.isPlainObject(gsPageBundle))for (var o in gsPageBundle)if (gsPageBundle.hasOwnProperty(o))a.View.preCached[o] = gsPageBundle[o];
    window.reportUploadComplete = window.uploadComplete = function() {
        window.GS && GS.user && GS.user.uploadComplete()
    };
    GS.airbridge = GS.Controllers.AirbridgeController.instance();
    o = function(x) {
        return function() {
            var A = arguments.callee.prototype.inst;
            if (A)return A;
            arguments.callee.prototype.inst = true;
            arguments.callee.prototype.inst = A = GS.Controllers[x].instance();
            A.appReady && a.isReady && A.appReady();
            A.commReady && GS.service.currentToken && A.commReady();
            return A
        }
    };
    GS.service = GS.Controllers.ServiceController.instance();
    GS.auth = GS.Controllers.AuthController.instance();
    GS.getLightbox = o("LightboxController");
    GS.getNotice = o("NotificationsController");
    GS.header = GS.Controllers.HeaderController.instance();
    GS.getSidebar = o("SidebarController");
    GS.theme = GS.Controllers.ThemeController.instance();
    GS.player = GS.Controllers.PlayerController.instance();
    GS.getYoutube = o("YoutubeController");
    GS.getVimeo = o("VimeoController");
    GS.getAd = o("AdController");
    GS.getGuts = o("GUTSController");
    GS.getLocale = o("LocaleController");
    GS.getFacebook = o("FacebookController");
    GS.getLastfm = o("LastfmController");
    GS.getGoogle = o("GoogleController");
    GS.getTwitter = o("TwitterController");
    GS.getRapleaf = o("RapLeafController");
    GS.getKrux = o("KruxController");
    GS.page = GS.Controllers.PageController;
    GS.features = GS.Models.Feature.Features;
    GS.search = {search:"",type:"",lastSearch:"",lastType:"",version:""};
    GS.resize = b;
    GS.gotoUpgradePage = function() {
        location.hash = "/settings/subscriptions"
    };
    window.Grooveshark = GS.Controllers.ApiController.instance();
    a(document).bind("keydown", "ctrl+a", function(x) {
        var A = [],u = a(".gs_grid:last").controller();
        if (!a(x.target).is("input,select,textarea") && u) {
            for (x = 0; x < u.dataView.rows.length; x++) {
                A.push(x);
                u.selectedRowIDs.push(u.dataView.rows[x].id)
            }
            u.grid.setSelectedRows(A);
            u.grid.onSelectedRowsChanged();
            return false
        }
    });
    (function() {
        var x = new a.Event("remove"),A = a.fn.remove;
        a.fn.remove = function() {
            a(this).trigger(x);
            A.apply(this, arguments)
        }
    })();
    o = true;
    var q = _.browserDetect();
    switch (q.browser) {
        case "chrome":
            if (q.version >= 6)o = false;
            break;
        case "safari":
            if (q.version >= 5)o = false;
            break;
        case "msie":
            if (q.version >= 7 && q.version <= 9)o = false;
            if (q.version <= 6) {
                GS.getLightbox().open("unsupportedBrowser", {isChromeFrame:true});
                o = false
            }
            break;
        case "firefox":
            if (q.version >= 3)o = false;
            break;
        case "mozilla":
            if (q.version >= 1.9)o = false;
            break;
        case "opera":
            if (q.version >=
                    11)o = false;
            break;
        case "adobeair":
            o = false;
            break
    }
    o && GS.getLightbox().open("unsupportedBrowser", {browser:q});
    window.playSongFromAd = function(x) {
        try {
            x = x || [];
            typeof x == "object" && x.constructor == Array || (x = [x]);
            GS.player.addSongsToQueueAt(x, null, true)
        } catch(A) {
        }
    };
    a(function() {
        function x() {
            var u = "";
            try {
                if (window.getSelection)u = window.getSelection(); else if (document.getSelection)u = document.getSelection(); else if (document.selection)u = document.selection.createRange().text; else return""
            } catch(C) {
                console.log("getText failed:",
                        C);
                return""
            }
            return u.toString()
        }

        var A = null;
        a("body").mouseup(function() {
            A = x();
            f = A.length;
            var u = 0,C = A.replace(/\s/g, " ");
            C = C.split(" ");
            for (z = 0; z < C.length; z++)C[z].length > 0 && u++;
            d = u;
            A !== null && d < 60 && f > 3 && _gaq.push(["_trackEvent","user","copyText",A])
        })
    });
    o = function() {
        var x = {canPin:false,isPinned:false,firstPin:false,firstVisit:false};
        try {
            if ("external"in window && "msIsSiteMode"in window.external) {
                x.canPin = true;
                if (window.external.msIsSiteMode()) {
                    x.isPinned = true;
                    if ("msIsSiteModeFirstRun"in window.external &&
                            window.external.msIsSiteModeFirstRun(true) !== 0)x.firstPin = true; else x.firstVisit = GS.store.get("visitedIE9") || a.cookie("visitedIE9") ? false : true
                }
            }
        } catch(A) {
        }
        return x
    }();
    var v = true;
    o.canPin && a.subscribe("gs.app.ready", function() {
        var x = document.createElement("script");
        x.type = "text/javascript";
        x.async = true;
        x.src = gsConfig.assetHost + "/gs/resources/jquery.pinify.min.js";
        x.onload = x.onreadystatechange = function() {
            if (this.readyState && (this.readyState == "complete" || this.readyState !== "loaded") && v) {
                setTimeout(function() {
                            h(GS.IE)
                        },
                        100);
                v = false
            }
        };
        document.body.appendChild(x)
    });
    GS.IE = o;
    a(document).ready(function() {
        a("*").scrollTop(0);
        document.body.scroll = "no";
        a("body,#main,#page_wrapper,#mainContainer").scroll(function(x) {
            if (a(this).scrollTop() > 0) {
                console.warn("Fixing Scroll", x.target);
                a(this).scrollTop(0)
            }
            return false
        });
        a.browser.msie && g();
        a.drop({mode:"mouse"});
        gsConfig.isUkulele = true;
        a.publish("gs.app.ready");
        GS.router.run()
    })
})(jQuery);
var oldUnload = false;
if (window.onbeforeunload)oldUnload = window.onbeforeunload;
window.onbeforeunload = function(a) {
    GS.player.storeQueue();
    GS.getGuts().forceSend();
    var b;
    a = a || window.event;
    if (!GS.user.isLoggedIn && GS.user.isDirty) {
        b = $.localize.getString("ONCLOSE_PROMPT_LOGIN");
        GS.getLightbox().open("login", {extraMessage:"ONCLOSE_PROMPT_LOGIN"})
    }
    if (GS.player.isPlaying)b = $.localize.getString("ONCLOSE_PLAYING");
    if (!GS.Controllers.PageController.ALLOW_LOAD)b = GS.Controllers.PageController.confirmMessage;
    if (oldUnload) {
        var c = oldUnload;
        oldUnload = false;
        c()
    }
    if (b) {
        if (a)a.returnValue = b;
        return b
    }
};
