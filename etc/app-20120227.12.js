$.Model.extend("GS.Models.Base", {cache:{}, getOneFromCache:function (b, a) {
    return this.addLibraryFavoriteFlags(this.cache[_.orEqual(a, "") + b])
}, addLibraryFavoriteFlags:function (b) {
    var a = this.shortName.toLowerCase() + "s";
    if (b && GS.user) {
        var c = b[b.Class.id];
        if (GS.user.favorites[a])b.isFavorite = _.defined(GS.user.favorites[a][c]) ? 1 : 0;
        if (a == "songs" && GS.user.library.songs)b.fromLibrary = _.defined(GS.user.library.songs[c]) ? 1 : 0
    }
    return b
}, getManyFromCache:function (b, a) {
    for (var c = [], h = 0, g = b.length; h < g; h++)c.push(this.getOneFromCache(b[h],
            a));
    return c
}, wrap:function (b, a, c) {
    var h = this.id, g = b[h];
    a = _.orEqual(a, true);
    c = _.orEqual(c, "");
    if (g && a)if (g = this.getOneFromCache(g, c))return g;
    b = this.addLibraryFavoriteFlags(this._super(b));
    if (a && b[h]) {
        this.cache[c + b[h]] = b;
        b.cachePrefix = c
    }
    return b
}, wrapCollection:function (b, a, c, h, g, k) {
    var m, n, o = [], r, A;
    a = _.orEqual(a, null);
    c = _.orEqual(c, false);
    h = _.orEqual(h, false);
    g = _.orEqual(g, true);
    k = _.orEqual(k, "");
    for (m in b)if (b.hasOwnProperty(m)) {
        r = b[m];
        A = this.wrap(r, g, k).dupe();
        if (c)for (n in r) {
            if (r.hasOwnProperty(n))A[n] =
                    r[n]
        } else if (a)for (n in a)if (a.hasOwnProperty(n))if (n === "USE_INDEX")A[a[n]] = parseInt(m, 10) + 1; else A[n] = _.orEqual(r[n], a[n]);
        if (!h || !$.isFunction(A.validate) || A.validate())o.push(A)
    }
    o._use_call = true;
    return o
}, wrapCollectionInObject:function (b, a, c, h, g, k) {
    var m, n, o, r, A;
    m = {};
    a = _.orEqual(a, null);
    c = _.orEqual(c, false);
    h = _.orEqual(h, false);
    g = _.orEqual(g, true);
    k = _.orEqual(k, "");
    for (n in b)if (b.hasOwnProperty(n)) {
        r = b[n];
        (A = this.getOneFromCache(r[this.id], k)) || (A = this.wrap(r, g, k).dupe());
        if (c)for (o in r) {
            if (r.hasOwnProperty(o))A[o] =
                    r[o]
        } else if (a)for (o in a)if (a.hasOwnProperty(o))A[o] = _.orEqual(r[o], a[o]);
        if (!h || !$.isFunction(A.validate) || A.validate())m[r[this.id]] = A
    }
    return m
}}, {songs:{}, albums:{}, cachePrefix:"", dupe:function () {
    return new this.Class(this.attrs())
}, wrapSongCollection:function (b, a, c) {
    a = GS.Models.Song.wrapCollection(b.Songs || b.songs || b.result || b, a, c, true);
    for (c = 0; c < a.length; c++) {
        this.songs[a[c].SongID] = a[c];
        if (a[c].AlbumName && a[c].AlbumName.length) {
            if (this.albums[a[c].AlbumID]) {
                if (this.albums[a[c].AlbumID].ArtistName !=
                        a[c].ArtistName)this.albums[a[c].AlbumID].ArtistName = "Various Artists"
            } else {
                album = GS.Models.Album.wrap({AlbumName:a[c].AlbumName, AlbumID:a[c].AlbumID, ArtistName:a[c].ArtistName, ArtistID:a[c].ArtistID, CoverArtFilename:a[c].CoverArtFilename, IsVerified:a[c].IsVerified}, true, "s_");
                this.albums[a[c].AlbumID] = album
            }
            this.albums[a[c].AlbumID].songs[a[c].SongID] = a[c]
        }
    }
    if (b && b.hasMore)this.currentPage++; else this.songsLoaded = true;
    return a
}, playSongs:function (b) {
    var a = _.orEqual(b.index, -1), c = _.orEqual(b.playOnAdd,
            false), h = _.orEqual(b.shuffle, false), g = _.orEqual(b.sort, false), k = _.orEqual(b.numericSort, false), m = new GS.Models.PlayContext((this.shortName || "").toLowerCase(), this);
    b.verified && _.isEmpty(this.songs) && this.getSongs(this.callback("playSongs", {index:a, playOnAdd:c, sort:"TrackNum", numericSort:true, verified:false}), null, false);
    a = [];
    var n = [];
    _.forEach(this.songs, function (o) {
        n.push(o)
    });
    if (h)n = n.shuffle(); else if (g)n = n.sort(function (o, r) {
        if (o.hasOwnProperty(g) && r.hasOwnProperty(g)) {
            var A = o[g], w = r[g];
            if (k) {
                A =
                        parseFloat(A, 10);
                if (isNaN(A))A = 0;
                w = parseFloat(w, 10);
                if (isNaN(w))w = 0;
                return A - w
            }
            if (A > w)return 1; else if (A < w)return-1;
            return 0
        } else if (o.hasOwnProperty(g))return 1;
        return 0
    });
    for (h = 0; h < n.length; h++)a.push(n[h].SongID);
    GS.player.addSongsToQueueAt(a, b.index, b.playOnAdd, m)
}, getClipboardAction:function (b, a) {
    if (!window.contextMenuClipboards)window.contextMenuClipboards = [];
    return this.callback(function () {
        if (ZeroClipboard && b) {
            var c = $("div[id^=jjmenu_main_sub]");
            $.each(b, function (h, g) {
                var k = $(g.selector, c);
                if (window.contextMenuClipboards[h])window.contextMenuClipboards[h].reposition(k.get(0)); else {
                    window.contextMenuClipboards[h] = new ZeroClipboard.Client(k.get(0));
                    window.contextMenuClipboards[h].addEventListener("complete", function (m, n) {
                        console.log("copied: ", n);
                        $("div[id^=jjmenu]").remove();
                        var o = $("#grid").controller();
                        if (o) {
                            var r = GS.getGuts().extractSongItemInfo(o);
                            if (r) {
                                var A = n.substr(7).split("/");
                                r = GS.getGuts().extractSongItemInfo(o);
                                if (A[1] == "album")GS.getGuts().onContextMenuClick("contextCopyAlbumURL",
                                        a, false, r); else if (A[1] == "artist")GS.getGuts().onContextMenuClick("contextCopyArtistURL", a, false, r); else if (A[1] == "song" || A[1] == "s")GS.getGuts().onContextMenuClick("contextCopySongURL", a, false, r)
                            }
                        }
                    })
                }
                window.contextMenuClipboards[h].setText(g.text);
                k.bind("remove", function () {
                    try {
                        $.each(window.contextMenuClipboards, function (n, o) {
                            o.hide()
                        })
                    } catch (m) {
                    }
                })
            })
        }
    })
}});
(function (b) {
    GS.Models.Base.extend("GS.Models.Song", {id:"SongID", cache:{}, artPath:"http://images.grooveshark.com/static/albums/", defaults:{AlbumID:null, AlbumName:"", ArtistID:null, ArtistName:"", CoverArtFilename:"", EstimateDuration:0, Flags:0, IsLowBitrateAvailable:0, Popularity:"0", SongID:null, SongName:"", TrackNum:"0", Year:"0", fromLibrary:0, isFavorite:0, IsVerified:0, TSAdded:"", TSFavorited:"", _token:null, tokenFailed:false}, songsLoaded:false, songsUnverifiedLoaded:false, getSong:function (a, c, h) {
        var g = this.getOneFromCache(a),
                k = {};
        if (g)b.isFunction(c) && c(g); else GS.service.getQueueSongListFromSongIDs([a], this.callback(["wrapSingleSongFromIDs", c]), h, k)
    }, getOneSynchronous:function (a) {
        var c = this.getOneFromCache(a);
        if (c)return c; else {
            GS.service.getQueueSongListFromSongIDs([a], this.callback(this.wrapSingleSongFromIDs), null, {async:false});
            return this.getOneFromCache(a)
        }
    }, getSongFromToken:function (a, c, h) {
        var g = this.getOneFromCache(a);
        g ? c(g) : GS.service.getSongFromToken(a, this.callback("wrapSongFromToken", a, c), h)
    }, getVerifiedDivider:function () {
        var a =
                this.wrap({SongID:-1, SongName:"", ArtistName:"", ArtistID:0, AlbumName:"", AlbumID:0, CoverArtFilename:""}, false);
        a.IsVerified = 0.5;
        return a
    }, wrap:function (a, c) {
        a = _.orEqual(a, {});
        var h = _.orEqualEx(a.TrackNum, a.trackNum, "0").toString(), g = this._super({AlbumID:_.orEqualEx(a.AlbumID, a.albumID, 0), AlbumName:_.cleanText(_.orEqual(a.AlbumName, a.albumName)) || "Unknown Album", ArtistID:_.orEqualEx(a.ArtistID, a.artistID, 0), ArtistName:_.cleanText(_.orEqual(a.ArtistName, a.artistName)) || "Unknown Artist", CoverArtFilename:_.orEqualEx(a.CoverArtFilename,
                        a.artFilename, ""), EstimateDuration:_.orEqualEx(a.EstimateDuration, a.estimateDuration, 0), Flags:_.orEqualEx(a.Flags, a.flags, 0), IsLowBitrateAvailable:_.orEqualEx(a.IsLowBitrateAvailable, 0), SongID:_.orEqualEx(a.SongID, a.songID, 0), SongName:_.cleanText(_.orEqualEx(a.SongName, a.songName, a.Name)) || "Unknown Title", TrackNum:h, Year:_.cleanText(_.orEqualEx(a.Year, a.year, "0")), Popularity:_.orEqualEx(a.Popularity, a.popularity, 0), IsVerified:_.orEqual(parseFloat(a.IsVerified, 10), 0), _token:_.orEqualEx(a._token, null)},
                c);
        if (g.TrackNum !== h && h !== "0")g.TrackNum = h;
        if (g.CoverArtFilename == "default.png")g.CoverArtFilename = null;
        return g
    }, wrapQueue:function (a) {
        return this.wrapCollection(a, {Flags:0, EstimateDuration:0, autoplayVote:0, parentQueueID:0, queueSongID:0, source:"", index:-1, context:null, sponsoredAutoplayID:0}, false, true, true)
    }, wrapSingleSongFromIDs:function (a) {
        a = this.wrapCollection(a);
        if (a.length)return a[0]
    }, wrapSongFromToken:function (a, c, h) {
        if (b.isArray(h))h = {};
        h = this.wrap(h);
        h.validate() && h.checkToken({Token:a});
        b.isFunction(c) && c(h);
        return h
    }, archive:function (a) {
        return{A:a.AlbumID, B:a.AlbumName, C:a.ArtistID, D:a.ArtistName, E:a.CoverArtFilename, F:a.EstimateDuration, G:a.Flags, H:a.Popularity, I:a.SongID, J:a.SongName, K:a.TSAdded, L:a.TrackNum, M:a.Year, N:a.isFavorite}
    }, unarchive:function (a) {
        return{AlbumID:a.A, AlbumName:a.B, ArtistID:a.C, ArtistName:a.D, CoverArtFilename:a.E, EstimateDuration:a.F, Flags:a.G, Popularity:a.H, SongID:a.I, SongName:a.J, TSAdded:a.K, TrackNum:isNaN(a.L) ? "0" : a.L, Year:isNaN(a.M) ? "0" : a.M, isFavorite:a.N}
    },
        itemRenderer:function (a) {
            var c = "" + ('<a class="name ellipsis" href="' + a.toUrl() + '">' + a.SongName + "</a>");
            ['<a href="', a.toUrl(), '">', a.SongName, "</a>"].join("");
            var h = ['<a href="', a.toArtistUrl(), '">', a.ArtistName, "</a>"].join("");
            h = b("<span></span>").localeDataString("BY_ARTIST", {artist:h});
            var g = ['<img width="70" height="70" src="', a.getImageURL(70), '"/>'].join("");
            return['<a href="', a.toUrl(), '" class="albumImage">', g, '<span class="playBtn" data-albumid="', a.AlbumID, '"></span></a><div class="meta">',
                c, '<span class="by">', h.render(), "</span></div>"].join("")
        }, matchFilter:function (a, c) {
            c = _.orEqual(c, false);
            var h;
            if (c) {
                h = RegExp("^" + a, "i");
                return function (g) {
                    g.SongName.match(h)
                }
            } else {
                h = RegExp(a, "gi");
                return function (g) {
                    return g.SongName.match(h) || g.ArtistName.match(h) || g.AlbumName.match(h)
                }
            }
        }}, {validate:function () {
        if (this.SongID > 0 && this.ArtistID > 0 && this.AlbumID > 0)return true;
        return false
    }, init:function (a) {
        if (a) {
            this._super(a);
            this.SongName = _.orEqual(a.SongName, a.Name) || "Unknown Title";
            this.AlbumName =
                    a.AlbumName || "Unknown Album";
            this.ArtistName = a.ArtistName || "Unknown Artist";
            this.searchText = [this.SongName, this.ArtistName, this.AlbumName].join(" ").toLowerCase();
            this.fanbase = false;
            this.songs = {};
            delete this.Name
        }
    }, toUrl:function (a) {
        if (this._token)return _.cleanUrl(this.SongName, this.SongID, "s", this._token, a); else if (this.tokenFailed)return _.generate404(); else {
            this.getToken();
            return this._token ? _.cleanUrl(this.SongName, this.SongID, "s", this._token, a) : _.generate404()
        }
    }, toArtistUrl:function (a) {
        return _.cleanUrl(this.ArtistName,
                this.ArtistID, "artist", null, a)
    }, toAlbumUrl:function (a) {
        return _.cleanUrl(this.AlbumName, this.AlbumID, "album", null, a)
    }, getToken:function () {
        if (this._token)return this._token; else if (this.tokenFailed)return null; else {
            GS.service.getTokenForSong(this.SongID, this.callback(this.checkToken), this.callback(this.tokenCallFail), {async:false});
            return this._token
        }
    }, checkToken:function (a) {
        if (a.Token) {
            this._token = a.Token;
            GS.Models.Song.cache[this._token] = this;
            GS.Models.Song.getOneFromCache(this.SongID)._token = this._token
        } else this.tokenFailed =
                true
    }, tokenCallFail:function () {
        this._token = null
    }, getImageURL:function (a) {
        a = _.orEqual(a, 70);
        var c = GS.Models.Song.artPath + a + "_album.png";
        if (this.CoverArtFilename && this.CoverArtFilename.indexOf("default") == -1)c = GS.Models.Song.artPath + a + "_" + this.CoverArtFilename;
        return c
    }, getDetailsForFeeds:function () {
        return{songID:this.SongID, songName:this.SongName, albumID:this.AlbumID, albumName:this.AlbumName, artistID:this.ArtistID, artistName:this.ArtistName, artFilename:this.CoverArtFilename, track:this.TrackNum}
    }, getRelatedSongs:function (a, c, h) {
        h = _.orEqual(h, true);
        this.album ? this.album.getSongs(a, c, h) : GS.Models.Album.getAlbum(this.AlbumID, this.callback(function (g) {
            this.album = g;
            g.getSongs(a, c, h)
        }), c, false)
    }, getAffiliateDownloadURLs:function (a) {
        var c;
        if (_.isEmpty(this.affiliateDownloadURLs))c = this; else return this.affiliateDownloadURLs;
        var h = [];
        GS.service.getAffiliateDownloadURLs(this.SongName, this.ArtistName, function (g) {
                    b.each(g, function (k, m) {
                        if (k === "amazon")k = "Amazon";
                        h.push({name:k, url:m.url})
                    });
                    c.affiliateDownloadURLs = h;
                    a(c.affiliateDownloadURLs)
                },
                function () {
                    a({})
                })
    }, getContextMenu:function (a) {
        a = _.orEqual(a, {});
        var c;
        if (a)c = _.orEqual(a.menuType, "");
        var h = GS.getGuts().extractSongItemInfo(a.gridController), g = [], k = {menuType:c, multiClick:false, gridController:a.gridController};
        GS.user.library.songs[this.SongID] ? g.push({title:b.localize.getString("CONTEXT_REMOVE_FROM_LIBRARY"), customClass:"last jj_menu_item_hasIcon jj_menu_item_remove_music", action:{type:"fn", callback:this.callback(function () {
            GS.user.removeFromLibrary(this.SongID)
        }), log:this.callback(function () {
            GS.getGuts().onContextMenuClick("contextRemoveFromLibrary",
                    c, false, h)
        })}}) : g.push({title:b.localize.getString("CONTEXT_ADD_TO_LIBRARY"), customClass:"last jj_menu_item_hasIcon jj_menu_item_music", action:{type:"fn", callback:this.callback(function () {
            GS.user.addToLibrary(this.SongID)
        }), log:this.callback(function () {
            GS.getGuts().onContextMenuClick("contextAddToLibrary", c, false, h)
        })}});
        GS.user.favorites.songs[this.SongID] ? g.push({title:b.localize.getString("CONTEXT_REMOVE_FROM_FAVORITES"), customClass:"last jj_menu_item_hasIcon jj_menu_item_remove_favorite", action:{type:"fn",
            callback:this.callback(function () {
                GS.user.removeFromSongFavorites(this.SongID)
            }), log:this.callback(function () {
                GS.getGuts().onContextMenuClick("contextRemoveFromFavorites", c, false, h)
            })}}) : g.push({title:b.localize.getString("CONTEXT_ADD_TO_FAVORITES"), customClass:"last jj_menu_item_hasIcon jj_menu_item_favorites", action:{type:"fn", callback:this.callback(function () {
            GS.user.addToSongFavorites(this.SongID)
        }), log:this.callback(function () {
            GS.getGuts().onContextMenuClick("contextAddToFavorites", c, false, h)
        })}});
        GS.user.getIsShortcut("song", this.SongID) ? g.push({title:b.localize.getString("CONTEXT_REMOVE_FROM_PINBOARD"), customClass:"last jj_menu_item_hasIcon jj_menu_item_remove_music", action:{type:"fn", callback:this.callback(function () {
            GS.user.removeFromShortcuts("song", this.SongID)
        }), log:this.callback(function () {
            GS.getGuts().onContextMenuClick("contextRemoveFromPinboard", c, false, h)
        })}}) : g.push({title:b.localize.getString("CONTEXT_ADD_TO_PINBOARD"), customClass:"last jj_menu_item_hasIcon jj_menu_item_pinboard",
            action:{type:"fn", callback:this.callback(function () {
                GS.user.addToShortcuts("song", this.SongID, this.SongName)
            }), log:this.callback(function () {
                GS.getGuts().onContextMenuClick("contextAddToPinboard", c, false, h)
            })}});
        g.push({customClass:"separator"});
        _.isEmpty(GS.user.playlists) ? g.push({title:b.localize.getString("CONTEXT_NEW_PLAYLIST"), customClass:"jj_menu_item_hasIcon jj_menu_item_new_playlist", action:{type:"fn", callback:this.callback(function () {
            console.log("this.songID", this.SongID, this);
            GS.getLightbox().open("newPlaylist",
                    this.SongID)
        })}}) : g.push({title:b.localize.getString("CONTEXT_ADD_TO_PLAYLIST"), type:"sub", customClass:"jj_menu_item_hasIcon jj_menu_item_playlists", src:GS.Models.Playlist.getPlaylistsMenu(this.SongID, this.callback(function (m) {
            m.addSongs([this.SongID], null, true)
        }), null, null, k)});
        g.push({customClass:"separator"});
        g = g.concat([
            {title:b.localize.getString("CONTEXT_SHARE_SONG"), customClass:"jj_menu_item_hasIcon jj_menu_item_share", action:{type:"fn", callback:this.callback(function () {
                GS.getLightbox().open("share",
                        {type:"song", id:this.SongID});
                GS.getGuts().onContextMenuClick("contextShareSong", c, false, h)
            })}},
            {title:b.localize.getString("COPY_URL"), type:"sub", action:{type:"fn", callback:this.callback(function () {
                this.getClipboardAction([
                    {text:"http://grooveshark.com/" + this.toUrl().replace("#!/", ""), selector:"div.songUrl"},
                    {text:"http://grooveshark.com/" + _.cleanUrl(this.AlbumName, this.AlbumID, "album").replace("#!/", ""), selector:"div.albumUrl"},
                    {text:"http://grooveshark.com/" + _.cleanUrl(this.ArtistName, this.ArtistID,
                            "artist").replace("#!/", ""), selector:"div.artistUrl"}
                ], c)();
                b("div[name$=Url]", elem).show()
            })}, customClass:"last copyUrl jj_menu_item_hasIcon jj_menu_item_copy", src:[
                {title:b.localize.getString("SONG_URL"), customClass:"songUrl jj_menu_item_hasIcon jj_menu_item_copy"},
                {title:b.localize.getString("ALBUM_URL"), customClass:"albumUrl jj_menu_item_hasIcon jj_menu_item_copy"},
                {title:b.localize.getString("ARTIST_URL"), customClass:" artistUrl jj_menu_item_hasIcon jj_menu_item_copy"}
            ]},
            {customClass:"separator"},
            {title:b.localize.getString("CONTEXT_BUY_SONG"), customClass:"last jj_menu_item_hasIcon jj_menu_item_download", action:{type:"fn", callback:this.callback(function () {
                GS.getLightbox().open("buySong", this.SongID)
            }), log:this.callback(function () {
                GS.getGuts().onContextMenuClick("contextBuySong", c, false, h)
            })}}
        ]);
        a.isQueue = _.orEqual(a.isQueue, false);
        if (a.isQueue) {
            g.push({customClass:"separator"}, {title:b.localize.getString("CONTEXT_FLAG_SONG"), customClass:"last jj_menu_item_hasIcon jj_menu_item_flag", type:"sub",
                src:[
                    {title:b.localize.getString("CONTEXT_FLAG_BAD_SONG"), customClass:"last jj_menu_item_hasIcon jj_menu_item_flag", action:{type:"fn", callback:function () {
                        a.flagSongCallback(1)
                    }}},
                    {title:b.localize.getString("CONTEXT_FLAG_BAD_METADATA"), customClass:"last jj_menu_item_hasIcon jj_menu_item_flag", action:{type:"fn", callback:function () {
                        a.flagSongCallback(4)
                    }}}
                ]});
            (k = GS.player.getCurrentQueue()) && k.autoplayEnabled && g.push({customClass:"separator"}, {title:b.localize.getString("QUEUE_ITEM_SMILE"), customClass:"last jj_menu_item_hasIcon jj_menu_item_smile",
                action:{type:"fn", callback:function () {
                    a.voteSongCallback(1)
                }}}, {title:b.localize.getString("QUEUE_ITEM_FROWN"), customClass:"last jj_menu_item_hasIcon jj_menu_item_frown", action:{type:"fn", callback:function () {
                a.voteSongCallback(-1)
            }}})
        }
        return g
    }, getTitle:function () {
        return['"', this.SongName, '" by ', this.ArtistName, ' on "', this.AlbumName, '"'].join("")
    }, getVideos:function (a, c, h) {
        h = _.orEqual(h, 5);
        GS.getYoutube().search("", h, this.callback(function (g) {
            var k = [];
            if (g && g[0] && g[0].VideoID) {
                for (var m = 0; m < g.length; m++) {
                    g[m].title =
                            this.ArtistName + " - " + this.SongName;
                    k.push(g[m])
                }
                a(k)
            } else {
                console.warn("bad youtube search items", g);
                c([])
            }
        }), c, this)
    }, toProxyLabel:function () {
        return _.getString("SELECTION_SONG_SINGLE", {SongName:_.cleanText(this.SongName), ArtistName:_.cleanText(this.ArtistName)})
    }, toString:function (a) {
        return(a = _.orEqual(a, false)) ? ["Song. sid:", this.SongID, ", name:", this.SongName, ", aid:", this.ArtistID, ", arname: ", this.ArtistName, ", alid: ", this.AlbumID, ", alname:", this.AlbumName, ", track: ", this.TrackNum, ", verified: ",
            this.IsVerified].join("") : _.getString("SELECTION_SONG_SINGLE", {SongName:_.cleanText(this.SongName), ArtistName:_.cleanText(this.ArtistName)})
    }})
})(jQuery);
(function (b) {
    GS.Models.Base.extend("GS.Models.Album", {id:"AlbumID", cache:{}, artPath:"http://images.grooveshark.com/static/albums/", smallAlbum:5, defaults:{AlbumName:"", AlbumID:null, ArtistName:"", ArtistID:null, CoverArtFilename:"", Year:"", IsVerified:0, PathName:false, PathNameEmpty:false, isFavorite:0, songsLoaded:false, songsUnverifiedLoaded:false, fanbase:null}, getAlbum:function (a, c, h) {
        var g = this.getOneFromCache(a);
        if (g)b.isFunction(c) && c(g); else GS.service.getAlbumByID(a, this.callback(["wrap", c]), h)
    }, getOneSynchronous:function (a) {
        var c =
                this.getOneFromCache(a);
        if (c)return c; else {
            GS.service.getAlbumByID(a, this.callback(this.wrap), null, {async:false});
            return this.getOneFromCache(a)
        }
    }, getFilterAll:function (a) {
        return this.wrap({AlbumID:-1, AlbumName:b.localize.getString("ALL_ALBUMS"), ArtistName:a || "", ArtistID:-1, IsVerified:2, isFilterAll:1}, false)
    }, defaultSongSort:function (a, c) {
        var h = parseFloat(_.orEqual(a.TrackNum, 0), 10), g = parseFloat(_.orEqual(c.TrackNum, 0), 10);
        if (isNaN(h))h = 0;
        if (isNaN(g))g = 0;
        if (h !== 0 && g === 0)return-1;
        if (g !== 0 && h === 0)return 1;
        return h - g
    }, prettySort:function (a, c) {
        return a.IsVerified && a.CoverArtFilename || a.IsVerified && !c.CoverArtFilename ? -1 : c.IsVerified && c.CoverArtFilename ? 1 : 0
    }, itemRenderer:function (a) {
        var c = "" + ('<a class="name ellipsis" href="' + a.toUrl() + '">' + a.AlbumName + "</a>"), h = ['<a href="', a.toArtistUrl(), '">', a.ArtistName, "</a>"].join("");
        h = b("<span></span>").localeDataString("BY_ARTIST", {artist:h});
        var g = ['<img width="70" height="70" src="', a.getImageURL(70), '"/>'].join(""), k = _.count(a.songs);
        k = k > 0 ? '<p class="numSongs">' +
                _.printf("NUM_SONGS", {numSongs:k}) + "</p>" : "";
        return['<a href="', a.toUrl(), '" class="albumImage insetBorder height70">', g, '<span class="playBtn" data-albumid="', a.AlbumID, '"></span></a><div class="meta">', c, '<span class="by">', h.render(), "</span>", k, "</div>"].join("")
    }, exploreItemRenderer:function (a) {
        var c = "" + ('<a class="name ellipsis" href="' + a.toUrl() + '">' + a.AlbumName + "</a>"), h = ['<a href="', a.toArtistUrl(), '">', a.ArtistName, "</a>"].join("");
        h = b("<span></span>").localeDataString("BY_ARTIST", {artist:h});
        var g = ['<img height="120" src="', a.getImageURL(120), '"/>'].join(""), k = a.tags ? '<div class="tags"><span class="icon"></span><span class="label ellipsis">' + a.tags + "</span></div>" : "";
        return['<div class="tooltip" data-tip-type="album" data-albumid="', a.AlbumID, '" data-cachePrefix="', a.cachePrefix, '"><a href="', a.toUrl(), '" class="albumImage insetBorder height120" >', g, '<span class="playBtn" data-albumid="', a.AlbumID, '"></span></a><div class="meta">', c, '<span class="by ellipsis">', h.render(), "</span>",
            k, "</div></div>"].join("")
    }, wrap:function (a, c) {
        a = _.orEqual(a, {});
        a.ArtistName = _.cleanText(a.ArtistName) || "Unknown Artist";
        a.AlbumName = _.cleanText(_.orEqual(a.AlbumName, a.Name)) || "Unknown Album";
        return this._super(a, c)
    }, matchFilter:function (a) {
        var c = RegExp(a, "gi");
        return function (h) {
            return h.ArtistName.match(c) || h.AlbumName.match(c)
        }
    }, filterVerified:function (a) {
        var c = {};
        _.forEach(a, function (h) {
            if (h.IsVerified == 1)c[h.SongID] = h
        });
        return c
    }}, {getSongs:function (a, c, h) {
        var g = arguments[arguments.length -
                1] === h ? {} : arguments[arguments.length - 1];
        h = _.orEqual(h, true);
        if (this.songsLoaded) {
            g = this.songs;
            if (h)g = GS.Models.Album.filterVerified(g);
            g = this._wrapManySongs(g);
            b.isFunction(a) && a(g)
        } else GS.service.albumGetAllSongs(this.AlbumID, this.callback("_loadAndProcessSongs", h, a), c, g)
    }, _loadAndProcessSongs:function (a, c, h) {
        this.hasVerified = false;
        var g, k, m, n = {}, o = {}, r = [], A = {}, w = {};
        for (g in h)if (h.hasOwnProperty(g)) {
            k = h[g];
            k = GS.Models.Song.wrap(k);
            k.AlbumName = this.AlbumName;
            k.AlbumID = this.AlbumID;
            k.CoverArtFilename =
                    this.CoverArtFilename;
            A[k.SongID] = k.IsVerified === 1;
            k.IsVerified = 0;
            n[k.SongID] = k;
            m = parseInt(k.TrackNum, 10);
            m = isNaN(m) ? 0 : m;
            if (r[m])r[m].push(k); else r[m] = [k];
            m = this._reduceTitle(k);
            if (o.hasOwnProperty(m))o[m].push(k); else o[m] = [k]
        }
        for (g = 1; g < r.length; g++) {
            h = r[g];
            if (k = this._pickBestSong(h, A, w, false)) {
                m = this._reduceTitle(k);
                if (w[m]) {
                    o = w[m];
                    if (A[o.SongID] || !A[k.SongID]) {
                        if (k = this._pickBestSong(h, A, w, true)) {
                            k.IsVerified = 1;
                            m = this._reduceTitle(k);
                            w[m] = k
                        }
                    } else {
                        o.IsVerified = 0;
                        k.IsVerified = 1;
                        w[m] = k;
                        if (k = this._pickBestSong(r[o.TrackNum],
                                A, w, true)) {
                            k.IsVerified = 1;
                            w[this._reduceTitle(k.SongName)] = k
                        }
                    }
                } else {
                    this.hasVerified = true;
                    k.IsVerified = 1;
                    w[m] = k
                }
            }
        }
        this.songs = n;
        this.songsLoaded = true;
        if (b.isFunction(c))a ? c(this._wrapManySongs(GS.Models.Album.filterVerified(n))) : c(this._wrapManySongs(n));
        return n
    }, _cleanTitleForReduce:/\s|\-|\:|\(|\)|\[|\]/g, _reduceTitle:function (a) {
        var c = a.SongName;
        c = c.toLowerCase();
        a = c.replace(a.ArtistName.toLowerCase(), "").replace(this._cleanTitleForReduce, "");
        return c = a.length ? a : c.replace(this._cleanTitleForReduce,
                "")
    }, _isGrossTitle:/\(|\)|\[|\]|live|feat|\sft|remix|demo/i, _pickBestSong:function (a, c, h, g) {
        var k;
        if (!b.isArray(a) || a.length === 0)return false;
        if (a.length === 1) {
            c = a[0];
            k = this._reduceTitle(c);
            if (g && h[k])return false;
            return c
        }
        var m = this;
        a = a.sort(function (o, r) {
            if (o.IsVerified !== r.IsVerified)return r.IsVerified - o.IsVerified;
            var A = m._isGrossTitle.test(o.SongName), w = m._isGrossTitle.test(r.SongName);
            if (A === w)return 0;
            return A && !w ? 1 : -1
        });
        for (var n = 0; n < a.length; n++) {
            c = a[n];
            k = this._reduceTitle(c);
            if (!h[k])return c
        }
        return g ?
                false : a[0]
    }, _wrapManySongs:function (a) {
        return this.wrapSongCollection(a, {IsVerified:0, TrackNum:0, AlbumName:this.AlbumName, AlbumID:this.AlbumID, CoverArtFilename:this.CoverArtFilename, Popularity:"0"})
    }, play:function (a, c, h, g) {
        _.orEqual(g, true);
        this.getSongs(this.callback("playSongs", {index:a, playOnAdd:c, sort:"TrackNum", numericSort:true, verified:g, shuffle:h}))
    }, validate:function () {
        if (this.AlbumID > 0 && this.ArtistID > 0)return true;
        return false
    }, init:function (a) {
        this._super(a);
        this.AlbumName = _.cleanText(_.orEqual(a.AlbumName,
                a.Name) || "Unknown Album");
        if (!this.isFilterAll)this.ArtistName = _.cleanText(a.ArtistName || "Unknown Artist");
        this.fanbase = false;
        this.songs = {};
        this.songsUnverifiedLoaded = this.songsLoaded = false;
        this.searchText = [this.AlbumName, this.ArtistName].join(" ").toLowerCase()
    }, getDetailsForFeeds:function () {
        return{albumID:this.AlbumID, albumName:this.AlbumName, artistID:this.ArtistID, artistName:this.ArtistName, artFilename:this.ArtFilename}
    }, toUrl:function (a) {
        return this.PathName ? _.makeUrlFromPathName(this.PathName,
                a) : _.cleanUrl(this.AlbumName, this.AlbumID, "album", null, a)
    }, toArtistUrl:function (a) {
        return _.cleanUrl(this.ArtistName, this.ArtistID, "artist", null, a)
    }, _onPathNameSuccess:function (a, c) {
        if (c.name)this.PathName = c.name; else {
            this.PathName = "";
            this.PathNameEmpty = true
        }
        b.isFunction(a) && a(this.PathName)
    }, _onPathNameFailed:function (a) {
        this.PathName = "";
        this.PathNameEmpty = true;
        b.isFunction(a) && a(this.PathName)
    }, getImageURL:function (a) {
        a = _.orEqual(a, 70);
        var c = GS.Models.Album.artPath + a + "_album.png";
        if (this.CoverArtFilename &&
                this.CoverArtFilename.indexOf("default") == -1)return GS.Models.Album.artPath + a + "_" + this.CoverArtFilename;
        return c
    }, getTitle:function () {
        return['"', this.AlbumName, '" by ', this.ArtistName].join("")
    }, getContextMenu:function () {
        new GS.Models.PlayContext(GS.player.PLAY_CONTEXT_ALBUM, this);
        var a = [
            {title:b.localize.getString("CONTEXT_PLAY_ALBUM"), action:{type:"fn", callback:this.callback(function () {
                this.play(GS.player.INDEX_DEFAULT, true)
            })}, customClass:"jj_menu_item_hasIcon jj_menu_item_play"},
            {title:b.localize.getString("CONTEXT_PLAY_ALBUM_NEXT"),
                action:{type:"fn", callback:this.callback(function () {
                    this.play(GS.player.INDEX_NEXT, false)
                })}, customClass:"jj_menu_item_hasIcon jj_menu_item_play_next"},
            {title:b.localize.getString("CONTEXT_PLAY_ALBUM_LAST"), action:{type:"fn", callback:this.callback(function () {
                this.play(GS.player.INDEX_LAST, false)
            })}, customClass:"jj_menu_item_hasIcon jj_menu_item_play_last"},
            {customClass:"separator"},
            {title:b.localize.getString("CONTEXT_REPLACE_ALL_SONGS"), action:{type:"fn", callback:this.callback(function () {
                this.play(GS.player.INDEX_REPLACE,
                        GS.player.isPlaying)
            })}, customClass:"jj_menu_item_hasIcon jj_menu_item_replace_playlist"},
            {customClass:"separator"}
        ];
        a = a.concat([
            {title:b.localize.getString("SHARE_ALBUM"), customClass:"jj_menu_item_hasIcon jj_menu_item_share", action:{type:"fn", callback:this.callback(function () {
                GS.getLightbox().open("share", {type:"album", id:this.AlbumID})
            })}},
            {customClass:"separator"}
        ]);
        GS.user.getIsShortcut("album", this.AlbumID) ? a.push({title:b.localize.getString("CONTEXT_REMOVE_FROM_PINBOARD"), customClass:"last jj_menu_item_hasIcon jj_menu_item_remove_pinboard",
            action:{type:"fn", callback:this.callback(function () {
                GS.user.removeFromShortcuts("album", this.AlbumID)
            })}}) : a.push({title:b.localize.getString("CONTEXT_ADD_TO_PINBOARD"), customClass:"last jj_menu_item_hasIcon jj_menu_item_pinboard", action:{type:"fn", callback:this.callback(function () {
            GS.user.addToShortcuts("album", this.AlbumID, this.AlbumName)
        })}});
        return a
    }, toProxyLabel:function () {
        return _.getString(this.ArtistName ? "SELECTION_ALBUM_SINGLE" : "SELECTION_ALBUM_SINGLE_NO_ARTIST", {AlbumName:_.cleanText(this.AlbumName),
            ArtistName:_.cleanText(this.ArtistName)})
    }, toString:function (a) {
        a = _.orEqual(a, false);
        var c = this.ArtistName ? "SELECTION_ALBUM_SINGLE" : "SELECTION_ALBUM_SINGLE_NO_ARTIST";
        return a ? ["Album. alid: ", this.AlbumID, ", alname:", this.AlbumName, ", aid:", this.ArtistID, ", arname: ", this.ArtistName, ", verified: ", this.IsVerified].join("") : _.getString(c, {AlbumName:_.cleanText(this.AlbumName), ArtistName:_.cleanText(this.ArtistName)})
    }})
})(jQuery);
(function (b) {
    GS.Models.Base.extend("GS.Models.Artist", {id:"ArtistID", cache:{}, artPath:"http://images.grooveshark.com/static/artists/", defaults:{ArtistName:"", ArtistID:null, CoverArtFilename:"", PathName:null, PathNameEmpty:false, isFavorite:0, songsLoaded:false, eventsLoaded:false, eventIDs:[], fanbase:null, tunipopID:NaN, lastFMInfo:{}}, getArtist:function (a, c, h) {
        var g = this.getOneFromCache(a);
        if (g)b.isFunction(c) && c(g); else GS.service.getArtistByID(a, this.callback(["wrap", c]), h)
    }, getOneSynchronous:function (a) {
        var c =
                this.getOneFromCache(a);
        if (c)return c; else {
            GS.service.getArtistByID(a, this.callback(this.wrap), null, {async:false});
            return this.getOneFromCache(a)
        }
    }, getFilterAll:function () {
        return this.wrap({ArtistID:-1, ArtistName:b.localize.getString("ALL_ARTISTS"), IsVerified:2, isFilterAll:1}, false)
    }, defaultSongSort:function (a, c) {
        var h = _.orEqual(a.AlbumName, ""), g = _.orEqual(a.AlbumName, "");
        if (h > g)return 1; else if (h < g)return-1;
        return GS.Models.Album.defaultSongSort(a, c)
    }, itemRenderer:function (a) {
        var c = "", h = "ARTIST_FOLLOW";
        if (a.isFavorite) {
            c = "following";
            h = "ARTIST_FOLLOWING"
        }
        var g = ['<a class="name ellipsis" href="', a.toUrl(), '">', a.ArtistName, "</a>"].join("");
        ['<a href="', a.toUrl(), '">', a.ArtistName, "</a>"].join("");
        var k = ['<img width="70" height="70" src="', a.getImageURL(), '"/>'].join("");
        c = ['<button class="btn button_style2 followArtist artistID', a.ArtistID, " ", c, '" data-artistid="', a.ArtistID, '"><div><span class="icon"></span><span class="label" data-translate-text="', h, '">', b.localize.getString(h), "</span></div></button>"].join("");
        return['<a href="', a.toUrl(), '" class="artistImage insetBorder height70">', k, '</a><div class="meta">', g, c, "</div>"].join("")
    }, exploreItemRenderer:function (a) {
        var c = "", h = "";
        if (a.isFavorite) {
            c = "following";
            h = b.localize.getString("UNFOLLOW")
        }
        var g = ['<a class="name ellipsis" href="', a.toUrl(), '">', a.ArtistName, "</a>"].join("");
        ['<a href="', a.toUrl(), '">', a.ArtistName, "</a>"].join("");
        var k = ['<img src="', a.getImageURL(120), '"/>'].join("");
        c = ['<button class="followArtist artistID', a.ArtistID, " ", c, '"data-artistid="',
            a.ArtistID, '" title="', h, '" data-cachePrefix="' + a.cachePrefix + '"><div><span class="icon"></span></div></button>'].join("");
        h = a.tags ? '<div class="tags"><span class="icon"></span><span class="label ellipsis">' + a.tags + "</span></div>" : "";
        return['<div class="tooltip" data-tip-type="artist" data-artistid="', a.ArtistID, '" data-cachePrefix="', a.cachePrefix, '"><a href="', a.toUrl(), '" class="artistImage insetBorder height120">', k, "</a>", c, '<div class="meta">', g, h, "</div></div>"].join("")
    }, matchFilter:function (a) {
        var c =
                RegExp(a, "gi");
        return function (h) {
            return h.ArtistName.match(c) || h.AlbumName.match(c)
        }
    }}, {smallCollection:10, artistFeed:null, init:function (a) {
        this._super(a);
        this.ArtistName = _.cleanText(_.orEqual(a.ArtistName, a.Name) || "Unknown Artist");
        this.CoverArtFilename = _.orEqual(a.ArtistCoverArtFilename, a.CoverArtFilename);
        this.fanbase = false;
        this.songs = {};
        this.albums = {};
        this.songsUnverifiedLoaded = this.songsLoaded = false;
        this.eventIDs = [];
        this.eventsLoaded = false;
        this.searchText = this.ArtistName.toLowerCase();
        this.feed =
                false
    }, loadSongs:function (a, c) {
        this.allSongs ? a(this.allSongs) : GS.service.artistGetAllSongs(this.ArtistID, this.callback(function (h) {
            this.allSongs = h;
            a(h)
        }), c, {})
    }, getSongs:function (a, c, h) {
        this.loadSongs(this.callback(function (g) {
            g = this._returnFreshSongCollection(g, c);
            a(g)
        }), h)
    }, getAlbums:function (a, c, h) {
        this.loadSongs(this.callback(function (g) {
            var k = [], m = {}, n, o, r;
            o = 0;
            for (r = g.length; o < r; o++) {
                n = g[o];
                if (!m[n.AlbumID] && n.AlbumID) {
                    k.push({AlbumName:n.AlbumName, AlbumID:n.AlbumID, ArtistName:n.ArtistName, ArtistID:n.ArtistID,
                        CoverArtFilename:_.orEqualEx(n.CoverArtFilename, n.artFilename, ""), IsVerified:_.orEqual(parseFloat(n.IsVerified, 10), 0)});
                    m[n.AlbumID] = true
                }
            }
            k = k.sort(function (A, w) {
                return parseFloat(A.AlbumID, 10) <= parseFloat(w.AlbumID, 10) ? -1 : 1
            });
            k = c(k);
            o = 0;
            for (r = k.length; o < r; o++)k[o] = GS.Models.Album.wrap(k[o], false);
            a(k)
        }), h)
    }, wrap:function (a, c) {
        a = _.orEqual(a, {});
        try {
            delete a.AlbumID
        } catch (h) {
        }
        a.ArtistName = _.cleanText(a.ArtistName) || "Unknown Artist";
        a.CoverArtFilename = _.orEqual(a.ArtistCoverArtFilename, a.CoverArtFilename);
        return this._super(a, c)
    }, _returnFreshSongCollection:function (a, c) {
        if (typeof c === "function") {
            a = c(a);
            this.songsLoaded = false
        } else this.songsLoaded = true;
        return this.wrapSongCollection(a, {Popularity:"0"})
    }, getEvent:function (a, c) {
        var h = {};
        if (this.eventsLoaded) {
            h = GS.Models.Event.getManyFromCache(this.eventIDs);
            a(h)
        } else GS.service.artistGetEvents(this.ArtistID, this.ArtistName, this.callback([GS.Models.Event.wrapMany, a]), c, h)
    }, cacheAndReturnEvents:function (a) {
        for (var c = GS.Models.User.wrapMany(a.Users || a.Return.fans ||
                a.Return), h = 0; h < c.length; h++) {
            var g = c[h];
            this.userIDs.push(g.UserID);
            GS.Models.User.cache[g.UserID] = g
        }
        if (_.defined(a.hasMore) && a.hasMore)this.currentPage++; else this.fansLoaded = true;
        return c
    }, _tunipopDeferred:null, getTunipopID:function () {
        if (!this._tunipopDeferred) {
            this._tunipopDeferred = b.Deferred();
            GS.service.getTunipopID(this.ArtistName, false, this.callback(this._tunipopSuccess), this.callback(this._tunipopFailed))
        }
        return this._tunipopDeferred.promise()
    }, _tunipopSuccess:function (a) {
        a = parseInt(a, 10);
        if (isNaN(a))a = 0;
        this.tunipopID = a;
        this._tunipopDeferred.resolve(this.tunipopID)
    }, _tunipopFailed:function (a) {
        console.warn("tunipop failed", this.ArtistName, a.details);
        this.tunipopID = 0;
        this._tunipopDeferred.resolve(this.tunipopID)
    }, validate:function () {
        if (this.ArtistID > 0)return true;
        return false
    }, getDetailsForFeeds:function () {
        return{artistID:this.ArtistID, artistName:this.ArtistName, artFilename:this.CoverArtFilename}
    }, toUrl:function (a) {
        return this.PathName ? _.makeUrlFromPathName(this.PathName, a) : _.cleanUrl(this.ArtistName,
                this.ArtistID, "artist", null, a)
    }, getPathName:function (a) {
        if (this.PathName || this.PathNameEmpty)b.isFunction(a) && a(this.PathName); else GS.service.getPageNameByIDType(this.ArtistID, "artist", this.callback(this._onPathNameSuccess, a), this.callback(this._onPathNameFailed, a))
    }, _onPathNameSuccess:function (a, c) {
        if (c.name)this.PathName = c.name; else {
            this.PathName = "";
            this.PathNameEmpty = true
        }
        b.isFunction(a) && a(this.PathName)
    }, _onPathNameFailed:function (a) {
        this.PathName = "";
        this.PathNameEmpty = true;
        b.isFunction(a) &&
        a(this.PathName)
    }, getImageURL:function (a) {
        a = _.orEqual(a, 70);
        if (this.CoverArtFilename)return GS.Models.Artist.artPath + a + "_" + this.CoverArtFilename;
        return GS.Models.Artist.artPath + a + "_artist.png"
    }, getTitle:function () {
        return this.ArtistName
    }, play:function (a, c, h) {
        this.getSongs(this.callback("playSongs", {index:a, playOnAdd:c, verified:true, shuffle:h}))
    }, getArtAttribution:function (a) {
        if (this.artAttribution)b.isFunction(a) && a(this.artAttribution); else GS.service.artistGetArtAttribution(this.ArtistID, this.callback(function (c) {
            this.artAttribution =
                    c;
            b.isFunction(a) && a(c)
        }))
    }, getContextMenu:function () {
        new GS.Models.PlayContext(GS.player.PLAY_CONTEXT_ARTIST, this);
        var a = [
            {title:b.localize.getString("CONTEXT_PLAY_ARTIST"), action:{type:"fn", callback:this.callback(function () {
                this.play(GS.player.INDEX_DEFAULT, true)
            })}, customClass:"jj_menu_item_hasIcon jj_menu_item_play"},
            {title:b.localize.getString("CONTEXT_PLAY_ARTIST_NEXT"), action:{type:"fn", callback:this.callback(function () {
                this.play(GS.player.INDEX_NEXT, false)
            })}, customClass:"jj_menu_item_hasIcon jj_menu_item_play_next"},
            {title:b.localize.getString("CONTEXT_PLAY_ARTIST_LAST"), action:{type:"fn", callback:this.callback(function () {
                this.play(GS.player.INDEX_LAST, false)
            })}, customClass:"jj_menu_item_hasIcon jj_menu_item_play_last"},
            {customClass:"separator"},
            {title:b.localize.getString("CONTEXT_REPLACE_ALL_SONGS"), action:{type:"fn", callback:this.callback(function () {
                this.play(GS.player.INDEX_REPLACE, GS.player.isPlaying)
            })}, customClass:"jj_menu_item_hasIcon jj_menu_item_replace_playlist"},
            {customClass:"separator"}
        ];
        a = a.concat([
            {title:b.localize.getString("SHARE_ARTIST"),
                customClass:"jj_menu_item_hasIcon jj_menu_item_share", action:{type:"fn", callback:this.callback(function () {
                GS.getLightbox().open("share", {type:"artist", id:this.ArtistID})
            })}},
            {customClass:"separator"}
        ]);
        GS.user.getIsShortcut("artist", this.ArtistID) ? a.push({title:b.localize.getString("CONTEXT_REMOVE_FROM_PINBOARD"), customClass:"last jj_menu_item_hasIcon jj_menu_item_remove_pinboard", action:{type:"fn", callback:this.callback(function () {
            GS.user.removeFromShortcuts("artist", this.ArtistID)
        })}}) : a.push({title:b.localize.getString("CONTEXT_ADD_TO_PINBOARD"),
            customClass:"last jj_menu_item_hasIcon jj_menu_item_pinboard", action:{type:"fn", callback:this.callback(function () {
                GS.user.addToShortcuts("artist", this.ArtistID, this.ArtistName)
            })}});
        return a
    }, getShareMenu:function () {
        var a = [], c = this.ArtistID;
        a.push({title:b.localize.getString("SHARE_FACEBOOK"), action:{type:"fn", callback:function () {
            GS.getLightbox().open("share", {service:"facebook", type:"artist", id:c})
        }}, customClass:"jj_menu_item_hasIcon jj_menu_item_share_facebook"}, {title:b.localize.getString("SHARE_TWITTER"),
            action:{type:"fn", callback:function () {
                GS.getLightbox().open("share", {service:"twitter", type:"artist", id:c})
            }}, customClass:"jj_menu_item_hasIcon jj_menu_item_share_twitter"}, {title:b.localize.getString("SHARE_STUMBLE"), action:{type:"fn", callback:this.callback(function () {
            window.open(_.makeUrlForShare("stumbleupon", "artist", this), "_blank");
            b("div[id^=jjmenu]").remove()
        })}, customClass:"jj_menu_item_hasIcon jj_menu_item_share_stumbleupon"}, {title:b.localize.getString("SHARE_REDDIT"), action:{type:"fn",
            callback:this.callback(function () {
                window.open(_.makeUrlForShare("reddit", "artist", this), "_blank");
                b("div[id^=jjmenu]").remove()
            })}, customClass:"jj_menu_item_hasIcon jj_menu_item_share_reddit"}, {title:b.localize.getString("ARTIST_URL"), customClass:"artistUrl jj_menu_item_hasIcon jj_menu_item_copy"});
        return a
    }, toProxyLabel:function () {
        return _.cleanText(this.ArtistName)
    }, toString:function (a) {
        return(a = _.orEqual(a, false)) ? ["Artist. aid:", this.ArtistID, ", arname: ", this.ArtistName].join("") : _.cleanText(this.ArtistName)
    }})
})(jQuery);
(function (b) {
    GS.Models.Base.extend("GS.Models.Playlist", {SAVE_DELAY:1E3, id:"PlaylistID", cache:{}, artPath:"http://images.grooveshark.com/static/playlists/", defaults:{PlaylistID:0, PlaylistName:"", UserID:0, Username:"", UserName:"", FName:"", LName:"", Description:"", NumSongs:0, Picture:"", Sort:null, Collaborative:false, Collaborators:null, isFavorite:0, songs:[], originalOrder:[], songsLoaded:false, hasUnsavedChanges:false, searchText:"", fanbase:null, gridKey:1, gridKeyLookup:{}, songIDLookup:{}, changeLog:[], isDeleted:false},
        playlistsLoaded:false, playlistIDs:[], getPlaylist:function (a, c, h) {
            var g = this.getOneFromCache(a);
            if (g)b.isFunction(c) && c(g); else GS.service.getPlaylistByID(a, this.callback(["wrap", c]), h, {async:false})
        }, getOneSynchronous:function (a) {
            var c = this.getOneFromCache(a);
            if (c)return c; else {
                GS.service.getPlaylistByID(a, this.callback(this.wrap), null, {async:false});
                return this.getOneFromCache(a)
            }
        }, getPlaylistsOrdered:function (a, c) {
            c = _.orEqual(c, false);
            a = _.orEqual(a, "PlaylistName");
            var h = [];
            b.each(c === false ? GS.user.playlists :
                    GS.user.favorites.playlists, function (g, k) {
                k = GS.Models.Playlist.getOneFromCache(k.PlaylistID);
                if (c)k.TSAdded = k.TSFavorited;
                h.push(k)
            });
            h.sort(function (g, k) {
                var m, n;
                try {
                    m = g[a].toString().toLowerCase();
                    n = k[a].toString().toLowerCase()
                } catch (o) {
                    console.warn("playlistOrdered error: " + o, a, g[a], k[a]);
                    return 0
                }
                return m == n ? 0 : m > n ? 1 : -1
            });
            return h
        }, getPlaylistsMenu:function (a, c, h, g, k) {
            a = b.makeArray(a);
            var m = "", n = "", o = null;
            if (k) {
                m = k.menuType;
                n = k.multiClick;
                o = k.gridController
            }
            var r = {};
            r = n ? GS.getGuts().extractMultiSongInfo(o,
                    a) : GS.getGuts().extractSongItemInfo(o);
            h = _.orEqual(h, false);
            g = _.orEqual(g, true);
            var A;
            A = [];
            if (g) {
                A.push({title:b.localize.getString("CONTEXT_NEW_PLAYLIST"), customClass:"jj_menu_item_hasIcon jj_menu_item_new_playlist", action:{type:"fn", callback:function () {
                    GS.getLightbox().open("newPlaylist", a)
                }, log:function () {
                    GS.getGuts().onContextMenuClick("contextNewPlaylist", m, n, r)
                }}});
                _.isEmpty(GS.user.playlists) || A.push({customClass:"separator"})
            }
            b.each(this.getPlaylistsOrdered("PlaylistName"), function (w, B) {
                A.push({title:B.PlaylistName,
                    customClass:"jj_menu_item_hasIcon jj_menu_item_playlist", action:{type:"fn", callback:function () {
                        c(B);
                        return true
                    }, log:function () {
                        GS.getGuts().onContextMenuClick("contextAddToExistingPlaylist", m, n, r, B.PlaylistID)
                    }}})
            });
            h && b.each(this.getPlaylistsOrdered("PlaylistName", true), function (w, B) {
                A.push({title:B.PlaylistName, customClass:"jj_menu_item_hasIcon jj_menu_item_playlist_subscribed", action:{type:"fn", callback:function () {
                    c(B)
                }}})
            });
            return A
        }, itemRenderer:function (a) {
            var c = "", h = "PLAYLIST_SUBSCRIBE";
            if (a.isFavorite) {
                c =
                        "subscribed";
                h = "PLAYLIST_UNSUBSCRIBE"
            }
            var g = ['<a href="', a.toUserUrl(), '">', a.UserName, "</a>"].join("");
            g = b("<span></span>").localeDataString("BY_ARTIST", {artist:g});
            var k = ['<span class="lineHeight"><a class="name ellipsis" href="', a.toUrl(), '">' + a.PlaylistName + "</a></span>"].join(""), m = ['<a href="', a.toUrl(), '"class="playlistImage insetBorder height70"><img width="70" height="70" src="', a.getImageURL(), '"/></a>'].join("");
            a = a.UserID === GS.user.UserID ? "" : ['<button class="btn button_style2 ', c, '" data-follow-userid="',
                a.UserID, '" ><div><span class="label" data-translate-text="', h, '">', b.localize.getString(h), "</span></div></button>"].join("");
            return[m, '<div class="meta">', k, '<span class="ellipsis by">', g.render(), "</span>", a, "</div>"].join("")
        }, exploreItemRenderer:function (a) {
            var c = "" + ('<a class="name ellipsis" href="' + a.toUrl() + '">' + a.PlaylistName + "</a>"), h;
            h = a.uri && a.uri.length > 6 && a.uri !== "" ? a.uri.indexOf("grooveshark.com") == -1 ? _.printf("BY_USER", {user:'<a href="' + a.uri + '" target="_blank">' + a.attributor + "</a>"}) :
                    _.printf("BY_USER", {user:'<a href="' + a.uri + '">' + a.attributor + "</a>"}) : _.printf("BY_USER", {user:a.attributor});
            var g = ['<img height="120" src="', a.hasCustomImage ? GS.Models.Explore.IMG_PATH + "120_" + a.Picture : a.getImageURL(200), '"/>'].join(""), k = a.tags ? '<div class="tags"> <span class="icon"></span> <span class="label ellipsis" title="' + a.tags + '">' + a.tags + "</span></div>" : "";
            return['<div class="tooltip" data-tip-type="playlist" data-playlistID="', a.PlaylistID, '" data-cachePrefix="', a.cachePrefix, '"><a href="',
                a.toUrl(), '" class="playlistImage insetBorder height120">', g, '<span class="playBtn" data-playlistid="', a.PlaylistID, '"></span></a><div class="meta">', c, '<span class="by ellipsis">', h, "</span>", k, "</div></div>"].join("")
        }, prettySort:function (a, c) {
            return a.Picture || !c.Picture ? -1 : c.Picture ? 1 : 0
        }, matchFilter:function (a) {
            var c = RegExp(a, "gi");
            return function (h) {
                return h.PlaylistName.match(c) || h.UserName.match(c)
            }
        }}, {init:function (a) {
        this._super(a);
        this.PlaylistName = _.defined(a.PlaylistName) ? _.cleanText(a.PlaylistName) :
                _.cleanText(a.Name);
        this.Description = _.orEqual(a.Description, a.About || "");
        this.Username = this.Username && this.Username.length ? this.Username : a.Username;
        this.UserName = _.cleanText(b.trim(this.FName + (this.LName && this.LName.length ? " " + this.LName : "")));
        this.Collaborative = _.orEqual(a.Collaborative, false);
        this.Collaborators = a.Collaborators ? GS.Models.User.wrapCollectionInObject(a.Collaborators) : {};
        this.fanbase = false;
        this.searchText = [this.PlaylistName, this.FName, this.Description].join(" ").toLowerCase();
        this.songs =
                [];
        this.albums = {};
        this.originalOrder = [];
        this.images = [];
        this.songsLoaded = _.orEqual(a.songsLoaded, false);
        this.changeLog = [];
        this.hasUnsavedChanges = false;
        delete this.Name;
        delete this.About
    }, getSongs:function (a, c) {
        var h = arguments[arguments.length - 1] === c ? {} : arguments[arguments.length - 1];
        if (this.songsLoaded) {
            this._updateSongs();
            a(this.songs)
        } else GS.service.playlistGetSongs(this.PlaylistID, this.callback(["wrapManySongs", a]), c, h)
    }, validate:function () {
        if (this.PlaylistID > 0)return true;
        return false
    }, wrapManySongs:function (a) {
        var c =
                [];
        if (this.hasUnsavedChanges)c = this.songs;
        var h = a.Songs || a.songs || a.result || a;
        this.songs = [];
        this.gridKeyLookup = {};
        this.songIDLookup = {};
        var g, k;
        h.sort(function (n, o) {
            return parseFloat(n.Sort, 10) - parseFloat(o.Sort, 10)
        });
        var m;
        g = 0;
        for (k = h.length; g < k; g++) {
            a = GS.Models.Song.wrap(h[g]).dupe();
            a.Sort = g;
            a.GridKey = this.gridKey;
            if (!this.albums[a.AlbumID]) {
                m = GS.Models.Album.wrap({AlbumName:a.AlbumName, AlbumID:a.AlbumID, ArtistName:a.ArtistName, ArtistID:a.ArtistID, CoverArtFilename:a.CoverArtFilename, IsVerified:a.IsVerified},
                        false);
                this.albums[a.AlbumID] = m
            }
            this.songs.push(a);
            this.gridKeyLookup[a.GridKey] = a;
            this.songIDLookup[a.SongID] = a;
            this.gridKey++
        }
        h = 0;
        for (k = c.length; h < k; h++) {
            a = c[h];
            a.Sort = h + g;
            a.GridKey = this.gridKey;
            c[h] = a;
            this.gridKeyLookup[a.GridKey] = a;
            this.songIDLookup[a.SongID] = a;
            this.gridKey++
        }
        this.originalOrder = this.songs.concat();
        this.songs = this.songs.concat(c);
        this.songsLoaded = true;
        b.publish("gs.playlist.songs.update", this);
        b.publish("gs.playlist.view.update", this);
        this.songs._use_call = true;
        return this.songs
    },
        updateFromBroadcast:function (a) {
            var c;
            if (a.data.songs)c = GS.Models.Song.wrapCollection(a.data.songs);
            var h = this.Collaborators[a.data.userID];
            (h = h && h.Name ? _.printf("PLAYLIST_UPDATED_BY", {collaborator:h.Name}) : _.printf("PLAYLIST_UPDATED_UNKNOWN")) && h.length && b("#playlistNotice").html(h).stop().show().animate({color:"#f77f00"}, 200).delay(200).animate({color:"#222"}, 200).delay(3E3).fadeOut();
            switch (a.action) {
                case "rename":
                    this.TSModified = a.time;
                    this._renameSuccess(_.cleanText(a.data.name));
                    break;
                case "description":
                    this.Description =
                            a.data.description;
                    this.TSModified = a.time;
                    b.publish("gs.playlist.view.update", this);
                    break;
                case "append":
                    this.TSModified = a.time;
                    this.addSongsUpdate(c, -1, false);
                    b.publish("gs.playlist.view.update", this);
                    break;
                case "overwrite":
                    this.songs = [];
                    this.songs._use_call = true;
                    this.albums = {};
                    this.gridKeyLookup = {};
                    this.songIDLookup = {};
                    this.TSModified = a.time;
                    this.addSongsUpdate(c, -1, false);
                    b.publish("gs.playlist.view.update", this);
                    break
            }
        }, _updateSongs:function () {
            var a, c, h = GS.Models.Song;
            for (a = 0; a < this.songs.length; a++) {
                c =
                        h.getOneFromCache(this.songs[a].SongID);
                this.songs[a].isFavorite = c.isFavorite;
                this.songs[a].fromLibrary = c.fromLibrary
            }
        }, reapplySorts:function () {
            for (var a = 0, c = this.songs.length; a < c; a++)this.songs[a].Sort = a
        }, play:function (a, c, h) {
            this.getSongs(this.callback("playSongs", {index:a, playOnAdd:c, shuffle:h}), null)
        }, playSongs:function (a) {
            var c = _.orEqual(a.shuffle, false), h = new GS.Models.PlayContext(GS.player.PLAY_CONTEXT_PLAYLIST, this), g = [];
            if (c) {
                var k = this.songs.shuffle();
                for (c = 0; c < k.length; c++)g.push(k[c].SongID)
            } else for (c =
                                0; c < this.songs.length; c++)g.push(this.songs[c].SongID);
            GS.player.addSongsToQueueAt(g, a.index, a.playOnAdd, h)
        }, getImageURL:function (a) {
            a = _.orEqual(a, 200);
            var c = GS.Models.Playlist.artPath + a + "_playlist.png";
            if (this.Picture)c = GS.Models.Playlist.artPath + a + "_" + this.Picture;
            return c
        }, getDefaultImageUrl:function (a) {
            return GS.Models.Playlist.artPath + a + "_playlist.png"
        }, getPlaylistArt:function (a) {
            a = _.orEqual(a, 200);
            if (this.Picture)return[GS.Models.Playlist.artPath + a + "_" + this.Picture];
            var c = [], h = {}, g = [];
            _.forEach(this.songs,
                    function (m) {
                        if (m.CoverArtFilename)if (h.hasOwnProperty(m.AlbumID))h[m.AlbumID].weight++; else h[m.AlbumID] = {CoverArtFilename:m.CoverArtFilename, weight:1}
                    });
            for (var k in h)h.hasOwnProperty(k) && g.push([k, h[k]]);
            g = g.sort(
                    function (m, n) {
                        return n[1].weight - m[1].weight
                    }).slice(0, 4);
            if (g.length >= 4)a = 70;
            for (k = 0; k < g.length && k < 4; ++k)c.push(GS.Models.Album.artPath + a + "_" + g[k][1].CoverArtFilename);
            return c.length ? c : [this.getDefaultImageUrl(a)]
        }, _addSongAtEnd:function (a) {
            this.hasUnsavedChanges && this.addSongs([a],
                    this.songs.length, true);
            if (!this.isEditable(GS.user.UserID))return false;
            if (!(a <= 0)) {
                var c = GS.Models.Song.getOneFromCache(a).dupe();
                if (this.songsLoaded) {
                    this.hasUnsavedChanges = true;
                    GS.Controllers.PageController.ALLOW_LOAD = false;
                    this.addSongsUpdate([c], -1, true);
                    GS.user.isLoggedIn ? GS.service.playlistAddSongToExisting(this.PlaylistID, a, c.getDetailsForFeeds(), this.callback("saveSuccess", true), this.callback("saveFailed")) : this.saveSuccess(true);
                    b.publish("gs.playlist.view.update", this)
                } else if (GS.user.isLoggedIn)GS.service.playlistAddSongToExisting(this.PlaylistID,
                        a, c.getDetailsForFeeds(), this.callback("addSongSuccess"), this.callback("saveFailed")); else return false
            }
        }, addSongsUpdate:function (a, c, h) {
            var g = [], k = a.length && _.isObject(a[0]), m, n, o, r;
            o = 0;
            for (r = a.length; o < r; o++) {
                if (k)n = a[o].dupe(); else {
                    if (a[o] <= 0)continue;
                    n = GS.Models.Song.getOneFromCache(a[o]).dupe()
                }
                n.GridKey = this.gridKey;
                this.gridKeyLookup[n.GridKey] = n;
                this.songIDLookup[n.SongID] = n;
                this.gridKey++;
                g.push(n);
                if (!this.albums[n.AlbumID]) {
                    m = GS.Models.Album.wrap({AlbumName:n.AlbumName, AlbumID:n.AlbumID,
                        ArtistName:n.ArtistName, ArtistID:n.ArtistID, CoverArtFilename:n.CoverArtFilename, IsVerified:n.IsVerified}, false);
                    this.albums[n.AlbumID] = m
                }
                typeof h != "undefined" && h && GS.getGuts().logEvent("songAddedToPlaylist", {songID:n.SongID})
            }
            c == -1 ? this.songs.push.apply(this.songs, g) : this.songs.splice.apply(this.songs, [c, 0].concat(g));
            this.reapplySorts()
        }, addSongs:function (a, c, h) {
            c = _.orEqual(c, this.songs.length);
            h = _.orEqual(h, false);
            if (this.songsLoaded && a.length + this.songs.length > 2500) {
                a = (new GS.Models.DataString(b.localize.getString("POPUP_FAIL_ADD_PLAYLIST_TOO_MANY_MSG"),
                        {playlist:this.PlaylistName, numSongs:a.length})).render();
                b.publish("gs.notification", {type:"error", message:a})
            } else if (a.length == 1 && !this.hasUnsavedChanges && h && c == this.songs.length)this._addSongAtEnd(a[0]); else {
                if (!this.isEditable(GS.user.UserID))return false;
                this.hasUnsavedChanges = true;
                GS.Controllers.PageController.ALLOW_LOAD = false;
                this.addSongsUpdate(a, c, true);
                h && this.save();
                b.publish("gs.playlist.view.update", this)
            }
        }, removeSongs:function (a, c) {
            if (!this.isEditable(GS.user.UserID))return false;
            c =
                    _.orEqual(c, false);
            this.hasUnsavedChanges = true;
            GS.Controllers.PageController.ALLOW_LOAD = false;
            for (var h, g = 0; g < a.length; g++)if (h = this.songs[a[g]])h.isDeleted = true;
            this.reapplySorts();
            c ? this.save() : this.saveLater();
            b.publish("gs.playlist.view.update", this)
        }, overwriteWithSongs:function (a, c) {
            if (!this.isEditable(GS.user.UserID))return false;
            c = _.orEqual(c, false);
            this.songs = [];
            for (var h, g = 0; g < a.length; g++)if (!(a[g] <= 0)) {
                h = GS.Models.Song.getOneFromCache(a[g]).dupe();
                h.GridKey = this.gridKey;
                this.gridKeyLookup[h.GridKey] =
                        h;
                this.songIDLookup[h.SongID] = h;
                this.gridKey++;
                this.songs.push(h)
            }
            this.reapplySorts();
            this.hasUnsavedChanges = this.songsLoaded = true;
            GS.Controllers.PageController.ALLOW_LOAD = false;
            c && this.save();
            b.publish("gs.playlist.view.update", this)
        }, moveSongsTo:function (a, c, h) {
            if (!this.isEditable(GS.user.UserID))return false;
            h = _.orEqual(h, false);
            this.hasUnsavedChanges = true;
            GS.Controllers.PageController.ALLOW_LOAD = false;
            var g, k = [];
            for (g = 0; g < a.length; g++)k.push(this.songs[a[g]]);
            for (g = 0; g < k.length; g++) {
                a = this.songs.indexOf(k[g]);
                this.songs.splice(a, 1);
                a < c && c--
            }
            this.songs.splice.apply(this.songs, [c, 0].concat(k));
            this.reapplySorts();
            h ? this.save() : this.saveLater();
            b.publish("gs.playlist.view.update", this)
        }, saveTimer:null, saveLater:function (a) {
            a = _.orEqual(a, true);
            this.saveTimer && clearTimeout(this.saveTimer);
            this.saveTimer = setTimeout(this.callback("save", a), GS.Models.Playlist.SAVE_DELAY)
        }, save:function (a) {
            if (this.songsLoaded) {
                var c, h, g = [], k = [], m = [];
                for (c = 0; h = this.songs[c]; c++)if (h.isDeleted)GS.getGuts().logEvent("songRemovedFromPlaylist",
                        {songID:h.SongID}); else {
                    g.push(h.SongID);
                    m.push(h.getDetailsForFeeds())
                }
                for (c = 0; c < this.originalOrder.length; c++)k.push(this.originalOrder[c].SongID);
                if (g.join(".") == k.join(".")) {
                    this.originalOrder = this.songs.concat();
                    this.hasUnsavedChanges = false;
                    GS.Controllers.PageController.ALLOW_LOAD = true;
                    b.publish("gs.playlist.view.update", this)
                } else {
                    GS.user.isLoggedIn ? GS.service.overwritePlaylist(this.PlaylistID, this.PlaylistName, g, m, this.callback("saveSuccess", a), this.callback("saveFailed")) : this.saveSuccess();
                    GS.getGuts().gaTrackEvent("playlist", "savePlaylist")
                }
            } else this.getSongs(this.callback("save"), this.callback("saveFailed"), false)
        }, saveHistory:function (a) {
            this.changeLog.push(a);
            this.changeLog.length > 10 && this.changeLog.shift()
        }, saveSuccess:function (a) {
            for (var c = [], h = 0; h < this.songs.length; h++)this.songs[h].isDeleted || c.push(this.songs[h]);
            (a = _.orEqual(a, true)) && this.saveHistory(this.originalOrder);
            this.songsLoaded = true;
            this.songs = c;
            this.originalOrder = this.songs.concat();
            this.hasUnsavedChanges = false;
            this.TSModified = (new Date).getTime();
            GS.Controllers.PageController.ALLOW_LOAD = true;
            a = (new GS.Models.DataString(b.localize.getString("POPUP_SAVE_PLAYLIST_MSG"), {playlist:this.PlaylistName, playlistID:this.PlaylistID})).render();
            b.publish("gs.notification", {type:"notice", message:a});
            b.publish("gs.playlist.songs.update", this);
            b.publish("gs.playlist.view.update", this)
        }, addSongSuccess:function () {
            var a = (new GS.Models.DataString(b.localize.getString("POPUP_SAVE_PLAYLIST_MSG"), {playlist:this.PlaylistName,
                playlistID:this.PlaylistID})).render();
            b.publish("gs.notification", {type:"notice", message:a});
            b.publish("gs.playlist.songs.update", this);
            b.publish("gs.playlist.view.update", this)
        }, saveFailed:function () {
            b.publish("gs.notification", {type:"error", message:b.localize.getString("POPUP_FAIL_SAVE_PLAYLIST_MSG")})
        }, remove:function (a) {
            GS.user.deletePlaylist(this.PlaylistID, a);
            GS.getGuts().logEvent("playlistDeleted", {playlistID:this.PlaylistID})
        }, restore:function (a) {
            GS.user.restorePlaylist(this.PlaylistID, a)
        },
        setCollaborative:function (a) {
            GS.user.UserID > 0 && GS.user.UserID == this.UserID && GS.service.playlistSetCollaboration(this.PlaylistID, a, this.callback("_setCollaborate", a))
        }, _setCollaborate:function (a) {
            this.Collaborative = a;
            b.publish("gs.playlist.view.update", this)
        }, setCollaborativePermissions:function (a, c) {
            GS.user.UserID > 0 && GS.user.UserID == this.UserID && GS.service.playlistSetUserPermissions(this.PlaylistID, a, c, this.callback("_setUserPermissions", a, c))
        }, isCollaborator:function (a) {
            return this.Collaborators &&
                    this.Collaborators.hasOwnProperty(a)
        }, isEditable:function (a) {
            return a == this.UserID || this.Collaborative && this.isCollaborator(a)
        }, _setUserPermissions:function (a, c) {
            var h = GS.Models.User.getOneFromCache(a);
            if (h) {
                if (c >= 0) {
                    this.Collaborative = true;
                    this.Collaborators[h.UserID] = h
                } else delete this.Collaborators[a];
                b.publish("gs.playlist.view.update", this)
            }
        }, undo:function () {
            if (this.hasUnsavedChanges) {
                this.songs = this.originalOrder.concat();
                for (var a = 0; a < this.songs.length; a++)this.songs[a].isDeleted = false;
                this.hasUnsavedChanges =
                        false;
                GS.Controllers.PageController.ALLOW_LOAD = true
            } else if (this.changeLog.length) {
                this.songs = this.changeLog.pop();
                for (a = 0; a < this.songs.length; a++)this.songs[a].isDeleted = false;
                this.save(false)
            }
            this.reapplySorts();
            b.publish("gs.playlist.songs.update", this);
            b.publish("gs.playlist.view.update", this)
        }, rename:function (a, c, h) {
            GS.service.renamePlaylist(this.PlaylistID, a, this.Collaborative, this.callback([this._renameSuccess, c], a), this.callback([this._renameFailed, h]))
        }, _renameSuccess:function (a, c) {
            this.PlaylistName =
                    a;
            var h = this.Class.getOneFromCache(this.PlaylistID);
            if (h)h.PlaylistName = a;
            if (h = GS.user.playlists[this.PlaylistID])h.PlaylistName = a;
            b.publish("gs.playlist.view.update", this);
            b.publish("gs.auth.playlists.update", this);
            return c
        }, _renameFailed:function (a) {
            return a
        }, changeDescription:function (a, c, h) {
            GS.service.setPlaylistAbout(this.PlaylistID, a, this.Collaborative, this.callback([this._changeDescSuccess, c], a), this.callback([this._changeDescFailed, h]))
        }, _changeDescSuccess:function (a, c) {
            this.Description = a;
            var h = this.Class.getOneFromCache(this.PlaylistID);
            if (h)h.Description = a;
            if (h = GS.user.playlists[this.PlaylistID])h.Description = a;
            b.publish("gs.playlist.view.update", this);
            return c
        }, _changeDescFailed:function (a) {
            return a
        }, getDetailsForFeeds:function () {
            var a = {playlistID:this.PlaylistID, playlistName:this.PlaylistName, userID:this.UserID, displayName:this.FName + (this.LName && this.LName.length ? " " + this.LName : ""), artFilename:this.Picture};
            if (this.songs) {
                a.songs = [];
                for (var c = 0; c < a.songs; c++)a.songs.push(this.songs[c].getDetailsForFeeds())
            }
            return a
        },
        getTitle:function () {
            return['"', this.PlaylistName, '" by ', this.UserName].join("")
        }, isSubscribed:function () {
            return GS.user.UserID != this.UserID && this.isFavorite || !_.isEmpty(GS.user.favorites.playlists[this.PlaylistID])
        }, subscribe:function () {
            GS.user.addToPlaylistFavorites(this.PlaylistID)
        }, unsubscribe:function () {
            GS.user.removeFromPlaylistFavorites(this.PlaylistID)
        }, getContextMenu:function () {
            var a = new GS.Models.PlayContext(GS.player.PLAY_CONTEXT_PLAYLIST, this), c = [
                {title:b.localize.getString("CONTEXT_PLAY_PLAYLIST"),
                    customClass:"last jj_menu_item_hasIcon jj_menu_item_play", action:{type:"fn", callback:this.callback(function () {
                    this.getSongs(function (h) {
                        var g = [];
                        b.each(h, function (k, m) {
                            g.push(m.SongID)
                        });
                        GS.player.addSongsToQueueAt(g, GS.player.INDEX_DEFAULT, true, a)
                    }, null)
                })}},
                {title:b.localize.getString("CONTEXT_PLAY_PLAYLIST_NEXT"), customClass:"last jj_menu_item_hasIcon jj_menu_item_play_next", action:{type:"fn", callback:this.callback(function () {
                    this.getSongs(function (h) {
                        var g = [];
                        b.each(h, function (k, m) {
                            g.push(m.SongID)
                        });
                        GS.player.addSongsToQueueAt(g, GS.player.INDEX_NEXT, false, a)
                    }, null)
                })}},
                {title:b.localize.getString("CONTEXT_PLAY_PLAYLIST_LAST"), customClass:"last jj_menu_item_hasIcon jj_menu_item_play_last", action:{type:"fn", callback:this.callback(function () {
                    this.getSongs(function (h) {
                        var g = [];
                        b.each(h, function (k, m) {
                            g.push(m.SongID)
                        });
                        GS.player.addSongsToQueueAt(g, GS.player.INDEX_LAST, false, a)
                    }, null)
                })}},
                {customClass:"separator"}
            ];
            if (this.PlaylistID > 0)c = c.concat([
                {title:b.localize.getString("SHARE_PLAYLIST"), customClass:"jj_menu_item_hasIcon jj_menu_item_share",
                    action:{type:"fn", callback:this.callback(function () {
                        GS.getLightbox().open("share", {type:"playlist", id:this.PlaylistID})
                    })}},
                {customClass:"separator"}
            ]);
            c = c.concat([
                {title:b.localize.getString("CONTEXT_REPLACE_ALL_SONGS"), customClass:"last jj_menu_item_hasIcon jj_menu_item_now_playing", action:{type:"fn", callback:this.callback(function () {
                    this.getSongs(function (h) {
                        var g = [], k = GS.player.isPlaying;
                        b.each(h, function (m, n) {
                            g.push(n.SongID)
                        });
                        GS.player.addSongsToQueueAt(g, GS.player.INDEX_REPLACE, k, a)
                    }, null)
                })}},
                {customClass:"separator"}
            ]);
            GS.user.getIsShortcut("playlist", this.PlaylistID) ? c.push({title:b.localize.getString("CONTEXT_REMOVE_FROM_PINBOARD"), customClass:"last jj_menu_item_hasIcon jj_menu_item_remove_pinboard", action:{type:"fn", callback:this.callback(function () {
                GS.user.removeFromShortcuts("playlist", this.PlaylistID)
            })}}) : c.push({title:b.localize.getString("CONTEXT_ADD_TO_PINBOARD"), customClass:"last jj_menu_item_hasIcon jj_menu_item_pinboard", action:{type:"fn", callback:this.callback(function () {
                GS.user.addToShortcuts("playlist",
                        this.PlaylistID, this.PlaylistName)
            })}});
            return c
        }, getShareMenu:function () {
            var a = [];
            GS.user.isLoggedIn && a.push({title:b.localize.getString("SHARE_EMAIL"), customClass:"jj_menu_item_hasIcon jj_menu_item_share_email", action:{type:"fn", callback:this.callback(function () {
                GS.getLightbox().open("share", {service:"email", type:"playlist", id:this.PlaylistID})
            })}});
            return a = a.concat([
                {title:b.localize.getString("SHARE_FACEBOOK"), customClass:"jj_menu_item_hasIcon jj_menu_item_share_facebook", action:{type:"fn", callback:this.callback(function () {
                    GS.getLightbox().open("share",
                            {service:"facebook", type:"playlist", id:this.PlaylistID})
                })}},
                {title:b.localize.getString("SHARE_TWITTER"), customClass:"jj_menu_item_hasIcon jj_menu_item_share_twitter", action:{type:"fn", callback:this.callback(function () {
                    GS.getLightbox().open("share", {service:"twitter", type:"playlist", id:this.PlaylistID})
                })}},
                {title:b.localize.getString("SHARE_STUMBLE"), customClass:"jj_menu_item_hasIcon jj_menu_item_share_stumbleupon", action:{type:"fn", callback:this.callback(function () {
                    window.open(_.makeUrlForShare("stumbleupon",
                            "playlist", this), "_blank");
                    b("div[id^=jjmenu]").remove()
                })}},
                {title:b.localize.getString("SHARE_REDDIT"), customClass:"jj_menu_item_hasIcon jj_menu_item_share jj_menu_item_share_reddit", action:{type:"fn", callback:this.callback(function () {
                    window.open(_.makeUrlForShare("reddit", "playlist", this), "_blank");
                    b("div[id^=jjmenu]").remove()
                })}},
                {title:b.localize.getString("SHARE_WIDGET"), customClass:"jj_menu_item_hasIcon jj_menu_item_share_widget", action:{type:"fn", callback:this.callback(function () {
                    GS.getLightbox().open("share",
                            {service:"widget", type:"playlist", id:this.PlaylistID})
                })}},
                {title:b.localize.getString("PLAYLIST_URL"), customClass:"playlistUrl jj_menu_item_hasIcon jj_menu_item_copy"}
            ])
        }, toUrl:function (a) {
            return _.cleanUrl(this.PlaylistName, this.PlaylistID, "playlist", null, a)
        }, toUserUrl:function (a) {
            return _.cleanUrl(this.UserName, this.UserID, "user", null, a)
        }, toProxyLabel:function () {
            return _.getString("SELECTION_PLAYLIST_SINGLE", {PlaylistName:_.cleanText(this.PlaylistName), Username:_.cleanText(this.UserName)})
        }, partyUrls:{},
        getPartyUrl:function (a, c, h) {
            this.partyUrls[a] ? c(this.partyUrls[a]) : GS.service.getPlaylist3DES(this.PlaylistID, a, this.callback(["savePartyUrl", c], a), h)
        }, savePartyUrl:function (a, c) {
            if (c && c.length) {
                this.partyUrls[a] = GS.Controllers.PartyController.partyPath + c;
                return this.partyUrls[a]
            }
        }, toString:function (a) {
            return(a = _.orEqual(a, false)) ? ["Playlist. pid: ", this.PlaylistID, ", pname:", this.PlaylistName, ", uid:", this.UserID, ", uname: ", this.UserName].join("") : _.getString("SELECTION_PLAYLIST_SINGLE", {PlaylistName:_.cleanText(this.PlaylistName),
                Username:_.cleanText(this.UserName)})
        }})
})(jQuery);
(function () {
    GS.Models.Base.extend("GS.Models.Explore", {IMG_PATH:"http://images.grooveshark.com/static/featured/", cache:{}, getType:function (b) {
                var a = this.getOneFromCache(b);
                if (!a) {
                    a = this.wrap({type:b});
                    this.cache[b] = a
                }
                return a
            }, slideProxyRenderer:function (b, a, c) {
                if (b.PlaylistID)return GS.Models.Playlist.slideItemRenderer(b, a, c); else if (b.SongID)return GS.Models.Song.slideItemRenderer(b, a, c); else if (b.AlbumID)return GS.Models.Album.slideItemRenderer(b, a, c); else if (b.ArtistID)return GS.Models.Artist.slideItemRenderer(b,
                        a, c); else console.warn("Wrong type of object for featured itemrenderers")
            }, proxyRenderer:function (b, a, c) {
                if (b.PlaylistID)return GS.Models.Playlist.exploreItemRenderer(b, a, c); else if (b.VideoID)return GS.Models.Video.exploreItemRenderer(b, a, c); else if (b.SongID)return GS.Models.Song.exploreItemRenderer(b, a, c); else if (b.AlbumID)return GS.Models.Album.exploreItemRenderer(b, a, c); else if (b.ArtistID)return GS.Models.Artist.exploreItemRenderer(b, a, c); else console.warn("Wrong type of object for featured itemrenderers")
            }},
            {type:null, songsLoaded:false, featuredData:null, featuredPlaylists:[], featuredVideos:[], videoGroups:{}, init:function (b) {
                this._super(b);
                this.songsLoaded = false;
                this.songs = []
            }, getFeaturedData:function (b, a) {
                this.featuredData ? b(this.featuredData) : GS.service.featuredGetCurrentFeatured(null, this.callback(["wrapFeatured", b]), a)
            }, wrapFeatured:function (b) {
                this.featuredPlaylists = [];
                this.featuredData = b;
                i = 0;
                for (l = this.featuredData.Contents.length; i < l; i++) {
                    j = 0;
                    for (l2 = this.featuredData.Contents[i].items.length; j <
                            l2; j++)if (this.featuredData.Contents[i].items[j].PlaylistID)this.featuredData.Contents[i].items[j] = GS.Models.Playlist.wrap(this.featuredData.Contents[i].items[j], true, "featured"); else if (this.featuredData.Contents[i].items[j].VideoID) {
                        this.featuredData.Contents[i].items[j] = GS.Models.Video.wrap(this.featuredData.Contents[i].items[j], true, "featured");
                        b = this.featuredData.Contents[i].items[j];
                        if (this.videoGroups[b.set])this.videoGroups[b.set].push(b); else this.videoGroups[b.set] = [b]
                    } else if (this.featuredData.Contents[i].items[j].SongID)this.featuredData.Contents[i].items[j] =
                            GS.Models.Song.wrap(this.featuredData.Contents[i].items[j], true, "featured"); else if (this.featuredData.Contents[i].items[j].AlbumID)this.featuredData.Contents[i].items[j] = GS.Models.Album.wrap(this.featuredData.Contents[i].items[j], true, "featured"); else if (this.featuredData.Contents[i].items[j].ArtistID)this.featuredData.Contents[i].items[j] = GS.Models.Artist.wrap(this.featuredData.Contents[i].items[j], true, "featured");
                    if (this.featuredData.Contents[i].items[0].PlaylistID)this.featuredPlaylists.push(this.featuredData.Contents[i]);
                    else this.featuredData.Contents[i].items[0].VideoID && this.featuredVideos.push(this.featuredData.Contents[i])
                }
            }, getPopularSongs:function (b, a) {
                if (this.songsLoaded) {
                    this.songs = this.wrapSongCollection(this.songs, {Popularity:0, Weight:"", NumPlays:""});
                    b(this.songs)
                } else GS.service.popularGetSongs(this.type, this.callback(["wrapManySongs", b]), a)
            }, wrapManySongs:function (b) {
                b.Songs && b.Songs.reverse();
                return this.wrapSongCollection(b, {USE_INDEX:"Popularity", Weight:"", NumPlays:""})
            }})
})(jQuery);
(function (b) {
    GS.Models.Base.extend("GS.Models.User", {id:"UserID", cache:{}, usersLoaded:false, userIDs:[], artPath:"http://images.grooveshark.com/static/users/", defaults:{UserID:0, Username:"", Name:"", FName:"", LName:"", Picture:"", IsPremium:0, SignupDate:null, Location:"", Sex:"", FollowingFlags:0, Flags:0, PathName:null, PathNameEmpty:false, isFavorite:0, library:{}, favorites:{songs:{}, albums:{}, artists:{}, playlists:{}, users:{}}, fanbase:null, playlists:{}, profileFeed:{}, communityFeed:{}, mentionsFeed:{}}, getUser:function (a, c, h) {
        var g = this.getOneFromCache(a);
        g ? c(g) : GS.service.getUserByID(a, this.callback(["wrapProxy", c]), h)
    }, itemRenderer:function (a) {
        var c = GS.user.favorites.users && GS.user.favorites.users[a.UserID] ? " following" : "", h = GS.user.favorites.users && GS.user.favorites.users[a.UserID] ? "FOLLOWING" : "FOLLOW", g = "" + ('<a class="name ellipsis capitalize" href="' + _.cleanUrl(a.UserID, a.Name, "user") + '">' + a.Name + "</a>"), k = a.City && a.State && a.Country ? a.Location : a.Country ? a.Country : "";
        k = ['<span class="location ellipsis', k.length ?
                "" : " emphasis", '">', k.length ? k : b.localize.getString("USER_NO_LOCATION"), "</span>"].join("");
        var m = a.getImageURL(70);
        m = ['<img src="', m, '"/>'].join("");
        c = a.UserID === GS.user.UserID ? "" : ['<button class="follow btn button_style2 ', c, '" data-follow-userid="', a.UserID, '" ><div><span class="icon"></span><span class="label" data-translate-text="', h, '">', b.localize.getString(h), "</span></div></button>"].join("");
        return['<a href="', _.cleanUrl(a.UserID, a.Name, "user"), '" class="userImage insetBorder height70"><div class="status ',
            a.getVipPackage(), '"></div>', m, '</a><div class="meta">', g, k, c, "</div>"].join("")
    }, sliderRenderer:function (a) {
        var c = '<div class="page_content_slide subcontent-item fans"><a href="' + a.toUrl() + '" class="image"><img src="' + a.getImageURL() + '"></a><a class="title" href="' + a.toUrl() + '">' + (a.FName || a.Name) + '</a><span class="duration">';
        a = a.getAccountDuration();
        c += b("<span></span>").localeDataString(a.key, a).render();
        c += "</span></div>";
        return c
    }, matchFilter:function (a) {
        var c = RegExp(a, "gi");
        return function (h) {
            return h.Name ?
                    h.Name.match(c) : false
        }
    }, wrapProxy:function (a) {
        return this.wrap(a.User || a)
    }, FLAG_PLUS:1, FLAG_LASTFM:2, FLAG_FACEBOOK:4, FLAG_FACEBOOKUSER:16, FLAG_GOOGLEUSER:32, FLAG_GOOGLE:64, FLAG_ANYWHERE:128, FLAG_ISARTIST:256, FLAG_MUSIC_BUSINESS:1024, FLAG_LITE:32768, FLAG_KINESIS:16384}, {validate:function () {
        if (this.UserID > 0)return true;
        return false
    }, init:function (a) {
        this._super(a);
        var c = _.orEqual(this.City, "");
        c += this.State && c.length ? ", " + this.State : _.orEqual(this.State, "");
        c += this.Country && c.length ? ", " + this.Country :
                _.orEqual(this.Country, "");
        this.Name = _.defined(this.displayName) ? this.displayName : _.cleanText(this.FName) + (this.LName && this.LName.length ? " " + _.cleanText(this.LName) : "");
        this.Username = this.UserID > 0 ? this.Username && this.Username.length ? this.Username : this.Name : "New User";
        this.Location = c;
        this.IsPremium = this.IsPremium == 1 ? 1 : 0;
        this.library = this.isAuth ? {} : false;
        this.communityFeed = this.profileFeed = this.fanbase = false;
        this.mentionsFeed = GS.Models.MentionsFeed.wrap({user:this});
        this.searchText = [this.Locale, this.FName,
            this.LName].join(" ").toLowerCase();
        this.playlists = {};
        this.favorites = {songs:{}, albums:{}, artists:{}, playlists:{}, users:{}};
        this.TSAdded = _.orEqual(a.TSAdded, false)
    }, autocompleteFavoriteUsers:function () {
        var a = [];
        b.each(this.favorites.users, function (c, h) {
            b.each(h.searchText.trim().split(), function (g, k) {
                a.push([k.trim(), h.UserID])
            })
        });
        return a
    }, getFavoritesByType:function (a, c, h) {
        var g = arguments[arguments.length - 1] === h ? {} : arguments[arguments.length - 1], k = a.toLowerCase();
        if (_.isEmpty(this.favorites[k]))GS.service.getFavorites(this.UserID,
                a, !this.isAuth, this.callback(["load" + a + "Favorites", c]), h, g); else {
            g = this.favorites[k];
            this.favorites[k] = GS.Models[a.substring(0, a.length - 1)].wrapCollectionInObject(g, {TSFavorited:"", TSAdded:""});
            c(this.favorites[k])
        }
    }, loadAlbumsFavorites:function (a) {
        var c = {};
        for (var h in a)if (a.hasOwnProperty(h)) {
            a[h].TSAdded = a[h].TSFavorited;
            c[a[h].AlbumID] = a[h];
            if (this.isAuth)a[h].isFavorite = 1
        }
        this.favorites.albums = GS.Models.Album.wrapCollectionInObject(c, {TSFavorited:"", TSAdded:""});
        return this.favorites.albums
    },
        loadArtistsFavorites:function (a) {
            var c = {};
            for (var h in a)if (a.hasOwnProperty(h)) {
                a[h].TSAdded = a[h].TSFavorited;
                c[a[h].ArtistID] = a[h];
                if (this.isAuth)a[h].isFavorite = 1
            }
            this.favorites.artists = GS.Models.Artist.wrapCollectionInObject(c, {TSFavorited:"", TSAdded:""});
            return this.favorites.artists
        }, loadPlaylistsFavorites:function (a) {
            var c = {};
            for (var h in a)if (a.hasOwnProperty(h)) {
                a[h].TSAdded = a[h].TSFavorited;
                c[a[h].PlaylistID] = a[h];
                if (this.isAuth)a[h].isFavorite = 1
            }
            this.favorites.playlists = GS.Models.Playlist.wrapCollectionInObject(c,
                    {TSFavorited:"", TSAdded:""});
            return this.favorites.playlists
        }, loadSongsFavorites:function (a) {
            var c = {};
            for (var h in a)if (a.hasOwnProperty(h)) {
                a[h].TSAdded = a[h].TSFavorited;
                c[a[h].SongID] = a[h]
            }
            this.favorites.songs = GS.Models.Song.wrapCollectionInObject(c, {TSFavorited:"", TSAdded:""});
            if (!this.library)this.library = GS.Models.Library.wrap({userID:this.UserID});
            for (h in this.favorites.songs)if (this.favorites.songs.hasOwnProperty(h)) {
                a = this.favorites.songs[h];
                if (this.isAuth) {
                    a.isFavorite = 1;
                    a.fromLibrary = 1
                }
                this.library.songs[a.SongID] =
                        a.dupe()
            }
            return this.favorites.songs
        }, loadUsersFavorites:function (a) {
            var c = {};
            for (var h in a)if (a.hasOwnProperty(h)) {
                a[h].FollowingFlags = parseInt(a[h].FollowingFlags, 10);
                c[a[h].UserID] = a[h];
                if (this.isAuth)a[h].isFavorite = 1
            }
            this.favorites.users = GS.Models.User.wrapCollectionInObject(c, {TSFavorited:"", TSAdded:"", FollowingFlags:0});
            return this.favorites.users
        }, getShortName:function () {
            var a = "";
            if (this.Name.length > 12) {
                for (var c = this.Name.split(" "), h = 0; h < c.length; h++)if (a.length == 0 || c[h].length < 10 && a.length <
                        12) {
                    if (a.length)a += " ";
                    a += c[h]
                } else return a;
                if (a > 12)return a.substr(0, 12) + "&hellip;";
                return a
            }
            return this.Name
        }, getPlaylists:function (a, c) {
            if (_.isEmpty(this.playlists))GS.service.userGetPlaylists(this.UserID, !this.isAuth, this.callback(["cachePlaylists", a]), c); else b.isFunction(a) && a()
        }, cachePlaylists:function (a) {
            var c = {};
            a = a.Playlists;
            for (var h in a)if (a.hasOwnProperty(h)) {
                a[h].UserName = this.Name;
                a[h].FName = this.FName;
                a[h].LName = this.LName;
                a[h].UserID = this.UserID;
                c[a[h].PlaylistID] = a[h]
            }
            h = this.playlists;
            this.playlists = GS.Models.Playlist.wrapCollectionInObject(c);
            if (this.isAuth) {
                _.forEach(h, function (g) {
                    _.defined(this.playlists[g.PlaylistID]) || (this.playlists[g.PlaylistID] = g)
                }, this);
                b.publish("gs.auth.playlists.update")
            }
        }, getProfileFeed:function (a, c) {
            if (!this.profileFeed)this.profileFeed = GS.Models.ProfileFeed.wrap({user:this});
            this.profileFeed.getFeed(this.callback(a), c)
        }, getCommunityExceptions:function () {
            return this.isAuth ? this.filterFriends(1) : this.favorites.users
        }, getCommunityFeed:function (a, c) {
            var h =
                    [];
            if (!this.communityFeed)this.communityFeed = GS.Models.CommunityFeed.wrap({user:user});
            if (this.isAuth)h = _.toArrayID(this.getCommunityExceptions());
            if (this.UserID > 0) {
                this.communityFeed.userIDs = h;
                this.communityFeed.getFeed(this.callback(a), c)
            }
        }, playUserRadio:function () {
        }, filterFriends:function (a, c) {
            var h = {};
            if (c)for (var g in this.favorites.users)this.favorites.users[g].FollowingFlags & a || (h[g] = this.favorites.users[g]); else for (g in this.favorites.users)if (this.favorites.users[g].FollowingFlags & a)h[g] =
                    this.favorites.users[g];
            return h
        }, getRecentlyActiveUsersFeed:function (a, c) {
            this.recentActiveUsersFeed.getFeed(this.callback(a), c)
        }, getVipPackage:function () {
            var a = "";
            if (this.Flags & GS.Models.User.FLAG_ANYWHERE)a = "anywhere"; else if (this.Flags & GS.Models.User.FLAG_PLUS)a = "plus"; else if (this.Flags & GS.Models.User.FLAG_LITE)a = "lite";
            return a
        }, getAccountDuration:function () {
            var a = {};
            if (this.TSAdded) {
                var c = this.TSAdded.split(" ");
                if (c) {
                    c = c[0].split("-");
                    var h = new Date;
                    a = parseInt(h.getFullYear() - parseInt(c[0]));
                    c = parseInt(h.getMonth() - parseInt(c[1]) + 1);
                    if (c < 0) {
                        a--;
                        c = 12 + parseInt(c)
                    }
                    a = {months:c, years:a};
                    a.key = a.years > 0 ? a.years == 1 ? "USER_MEMBER_FOR_YEAR" : "USER_MEMBER_FOR_YEARS" : a.months < 1 ? "USER_MEMBER_LESS_THAN_MONTH" : a.months == 1 ? "USER_MEMBER_FOR_MONTH" : "USER_MEMBER_FOR_MONTHS"
                }
            }
            return a
        }, toUrl:function (a) {
            return this.PathName ? _.makeUrlFromPathName(this.PathName, a) : _.cleanUrl(this.UserID ? this.Name : "New User", this.UserID, "user", null, a)
        }, getPathName:function (a) {
            if (this.PathName || this.PathNameEmpty)b.isFunction(a) &&
            a(this.PathName); else this.UserID > 0 && GS.service.getPageNameByIDType(this.UserID, "user", this.callback(this._onPathNameSuccess, a), this.callback(this._onPathNameFailed, a))
        }, _onPathNameSuccess:function (a, c) {
            if (c.name)this.PathName = c.name; else {
                this.PathName = "";
                this.PathNameEmpty = true
            }
            b.isFunction(a) && a(this.PathName);
            this.UserID == GS.user.UserID && b.publish("gs.auth.user.pathName")
        }, _onPathNameFailed:function (a) {
            this.PathName = "";
            this.PathNameEmpty = true;
            b.isFunction(a) && a(this.PathName)
        }, getImageURL:function (a) {
            a =
                    _.orEqual(a, 70);
            var c = GS.Models.User.artPath + a + "_user.png";
            if (this.Picture)c = GS.Models.User.artPath + a + "_" + this.Picture;
            return c
        }, getDetailsForFeeds:function () {
            return{userID:this.UserID, userName:this.Name, isPremium:this.IsPremium, location:this.location, picture:this.Picture}
        }, getTitle:function () {
            return this.Name
        }, getIsFavorite:function (a, c) {
            if (!c || !a)return false;
            a = a.toLowerCase();
            c = c.toString();
            switch (a) {
                case "playlist":
                    return Boolean(this.favorites.playlists[c]);
                case "song":
                    return Boolean(this.favorites.songs[c]);
                case "artist":
                    return Boolean(this.favorites.artists[c]);
                case "user":
                    return Boolean(this.favorites.users[c])
            }
            return false
        }, getContextMenu:function () {
            var a = [];
            if (GS.user.UserID != this.UserID)GS.user.getIsFavorite("user", this.UserID) ? a.push({title:b.localize.getString("CONTEXT_UNFOLLOW"), customClass:"last jj_menu_item_hasIcon jj_menu_item_unfollow", action:{type:"fn", callback:this.callback(function () {
                GS.user.removeFromUserFavorites(this.UserID)
            })}}) : a.push({title:b.localize.getString("CONTEXT_FOLLOW"),
                customClass:"last jj_menu_item_hasIcon jj_menu_item_follow", action:{type:"fn", callback:this.callback(function () {
                    GS.user.addToUserFavorites(this.UserID, true)
                })}});
            return a
        }, toString:function (a) {
            return(a = _.orEqual(a, false)) ? ["User. uid: ", this.UserID, ", uname:", this.Name].join("") : _.cleanText(this.Name)
        }})
})(jQuery);
(function () {
    GS.Models.Base.extend("GS.Models.Library", {}, {currentPage:0, userID:null, lastModified:0, songsLoaded:false, init:function (b) {
        this._super(b);
        this.songsLoaded = false;
        this.lastModified = this.currentPage = 0;
        this.songs = {}
    }, getSongs:function (b, a) {
        if (this.songsLoaded) {
            this.songs = this.wrapSongCollection(this.songs, {TSAdded:"", TSFavorited:""});
            b(this.songs)
        } else GS.service.userGetSongsInLibrary(this.userID, this.currentPage, !(GS.user && GS.user.UserID === this.userID), this.callback(["saveLastModified", "loadSongs",
            b]), a)
    }, reloadLibrary:function (b, a) {
        this.songsLoaded = false;
        this.lastModified = this.currentPage = 0;
        this.songs = {};
        this.getSongs(b, a)
    }, loadSongs:function (b) {
        return this.wrapSongCollection(b, {TSAdded:"", TSFavorited:"", fromLibrary:GS.user.UserID == this.userID ? 1 : 0})
    }, saveLastModified:function (b) {
        this.lastModified = b.TSModified;
        return b
    }, refreshLibrary:function (b) {
        b.TSModified > this.lastModified && this.reloadLibrary(null, null, false)
    }})
})(jQuery);
(function (b) {
    GS.Models.Base.extend("GS.Models.Station", {id:"StationID", TAG_STATIONS:[
        {StationID:136, StationTitle:"STATION_INDIE", TagID:136},
        {StationID:67, StationTitle:"STATION_ELECTRONICA", TagID:67},
        {StationID:750, StationTitle:"STATION_CLASSICAL", TagID:750},
        {StationID:56, StationTitle:"STATION_POP", TagID:56},
        {StationID:3, StationTitle:"STATION_RAP", TagID:3},
        {StationID:80, StationTitle:"STATION_COUNTRY", TagID:80},
        {StationID:13, StationTitle:"STATION_ALTERNATIVE", TagID:13},
        {StationID:29, StationTitle:"STATION_HIP_HOP",
            TagID:29},
        {StationID:3529, StationTitle:"STATION_CLASSIC_ROCK", TagID:3529},
        {StationID:75, StationTitle:"STATION_AMBIENT", TagID:75},
        {StationID:111, StationTitle:"STATION_PUNK", TagID:111},
        {StationID:9, StationTitle:"STATION_90S_ALT_ROCK", TagID:9},
        {StationID:230, StationTitle:"STATION_BLUES", TagID:230},
        {StationID:12, StationTitle:"STATION_ROCK", TagID:12},
        {StationID:43, StationTitle:"STATION_JAZZ", TagID:43},
        {StationID:4, StationTitle:"STATION_RNB", TagID:4},
        {StationID:122, StationTitle:"STATION_FOLK", TagID:122},
        {StationID:2563, StationTitle:"STATION_DUBSTEP", TagID:2563},
        {StationID:55, StationTitle:"STATION_80s", TagID:55},
        {StationID:69, StationTitle:"STATION_TRANCE", TagID:69},
        {StationID:96, StationTitle:"STATION_BLUEGRASS", TagID:96},
        {StationID:160, StationTitle:"STATION_REGGAE", TagID:160},
        {StationID:17, StationTitle:"STATION_METAL", TagID:17},
        {StationID:102, StationTitle:"STATION_OLDIES", TagID:102},
        {StationID:191, StationTitle:"STATION_EXPERIMENTAL", TagID:191},
        {StationID:528, StationTitle:"STATION_LATIN", TagID:528}
    ],
        tagStations:[], extraStations:{}, stationsByName:{}, getStationsStartMenu:function () {
            for (var a = [], c, h = function (k) {
                return function () {
                    GS.player.setAutoplay(true, k)
                }
            }, g = 0; g < GS.Models.Station.tagStations.length; g++) {
                c = GS.Models.Station.tagStations[g];
                a.push({title:b.localize.getString(c.StationTitle), customClass:"jj_menu_item_hasIcon jj_menu_item_station", action:{type:"fn", callback:h(c.TagID)}})
            }
            a.sort(function (k, m) {
                var n = k.title.toLowerCase(), o = m.title.toLowerCase();
                return n == o ? 0 : n > o ? 1 : -1
            });
            return a
        }, getStationsStartMenuForPinboard:function () {
            for (var a =
                    [], c, h = function (k) {
                return function () {
                    GS.user.addToShortcuts("station", k, true)
                }
            }, g = 0; g < GS.Models.Station.tagStations.length; g++) {
                c = GS.Models.Station.tagStations[g];
                GS.user.getIsShortcut("station", c.TagID) || a.push({title:b.localize.getString(c.StationTitle), customClass:"jj_menu_item_hasIcon jj_menu_item_station", action:{type:"fn", callback:h(c.TagID)}})
            }
            a.sort(function (k, m) {
                var n = k.title.toLowerCase(), o = m.title.toLowerCase();
                return n == o ? 0 : n > o ? 1 : -1
            });
            return a
        }, getStationByName:function (a) {
            if (b.localize.ready &&
                    GS.getLocale && GS.Models.Station.stationsByName.locale != GS.getLocale().locale) {
                GS.Models.Station.stationsByName = {};
                _.forEach(GS.Models.Station.TAG_STATIONS, function (c) {
                    var h = b.localize.getString(c.StationTitle).toLowerCase();
                    GS.Models.Station.stationsByName[h] = c
                }, this);
                GS.Models.Station.stationsByName.locale = GS.getLocale().locale
            }
            if (GS.Models.Station.stationsByName[a])return GS.Models.Station.stationsByName[a];
            return false
        }, FeedStation:null, lastHeardFeedEvent:0, init:function () {
            b.subscribe("gs.player.nowplaying",
                    this.callback("onSongPlay"));
            b.subscribe("gs.app.ready", this.callback(function () {
                _.forEach(GS.Models.Station.TAG_STATIONS, function (a) {
                    GS.Models.Station.tagStations.push(GS.Models.Station.wrap(a))
                }, this)
            }))
        }, setFeedStation:function (a) {
            if (a && this.Station !== a) {
                this.lastHeardFeedEvent = 0;
                a.playSongs(-1, true)
            }
            GS.Models.Station.FeedStation = a
        }, onSongPlay:function () {
            if (this.Station) {
                GS.Models.Feed.Station.play(-1, false, GS.Models.Feed.lastHeardFeedEvent);
                GS.Models.Feed.lastHeardFeedEvent = GS.Models.Feed.Station.newestTime
            }
        },
        itemRenderer:function (a, c) {
            return c = ['<a class="name ellipsis" href="#!/station/-/', a, '">', c, "</a>"].join("")
        }, makeChristmasHappen:function () {
            GS.player.setAutoplay(true, 703)
        }}, {StationID:0, TagID:0, StationTitle:"", StationName:"", Artists:[], init:function (a) {
        this._super(a);
        this.StationName = b.localize.getString(a.StationTitle);
        if (!this.StationName)this.StationName = this.StationTitle
    }, toProxyLabel:function () {
        return _.cleanText(b.localize.getString(this.StationTitle))
    }, getContextMenu:function () {
        var a = [];
        a.push({title:b.localize.getString("CONTEXT_START_STATION"), customClass:"jj_menu_item_hasIcon jj_menu_item_station", action:{type:"fn", callback:this.callback(function () {
            GS.player.setAutoplay(true, this.TagID)
        })}});
        a.push({title:b.localize.getString("CONTEXT_ADD_TO_PINBOARD"), customClass:"jj_menu_item_hasIcon jj_menu_item_pinboard", action:{type:"fn", callback:this.callback(function () {
            GS.user.addToShortcuts("station", this.StationID, true)
        })}});
        return a
    }})
})(jQuery);
(function (b) {
    b.Model.extend("GS.Models.PlayContext", {}, {type:null, data:null, init:function (a, c) {
        this.type = _.orEqual(a, "unknown");
        this.data = _.orEqual(c, {});
        var h;
        if (this.type === "album" && this.data.hasOwnProperty("CoverArtFilename"))h = this.data.CoverArtFilename;
        if (b.isFunction(this.data.getDetailsForFeeds))this.data = this.data.getDetailsForFeeds();
        if (h)this.data.CoverArtFilename = h
    }})
})(jQuery);
(function (b) {
    b.fn.dataString = function () {
        if (arguments.length === 0)return _.orEqual(this.data("DataString"), null);
        var a = new GS.Models.DataString(arguments[0], arguments[1]);
        a.hookup(this);
        return a
    };
    b.fn.localeDataString = function (a, c, h) {
        a = _.orEqual(a, "");
        c = _.orEqual(c, {});
        h = _.orEqual(h, false);
        var g = b(this).dataString();
        if (!g) {
            g = new GS.Models.DataString;
            g.hookup(this)
        }
        g.string = b.localize.getString(a);
        g.data = c;
        h ? b(this).attr("data-translate-title", a).attr("title", g.render()) : b(this).attr("data-translate-text",
                a).html(g.render());
        return g
    };
    b.Model.extend("GS.Models.DataString", {dateString:function (a) {
        var c, h = {};
        c = new Date;
        var g = c.getTime() - a.getTime(), k = GS.getLocale();
        if (g < 6E4)c = b.localize.getString("SECONDS_AGO"); else if (g < 36E5) {
            c = b.localize.getString("MINUTES_AGO");
            h = {minutes:Math.ceil(g / 6E4)}
        } else if (g < 432E5 || c.getDate() == a.getDate() && g < 6048E5) {
            c = b.localize.getString("HOURS_AGO");
            h = {hours:Math.ceil(g / 36E5)}
        } else if (c.getDate() - 1 == a.getDate() && g < 6048E5) {
            c = b.localize.getString("YESTERDAY_AGO");
            h = {time:a.format("g:i a")}
        } else if (g <
                6048E5) {
            c = b.localize.getString("DAY_AGO");
            h = {day:k.daysOfWeek[a.getDay()], time:a.format("g:i a")}
        } else {
            c = b.localize.getString("OVER_A_WEEK_AGO");
            h = {day:k.daysOfWeek[a.getDay()], date:a.format("F jS")}
        }
        return new GS.Models.DataString(c, h)
    }}, {string:null, data:null, element:null, init:function (a, c) {
        this.string = _.orEqual(a, "");
        this.data = _.orEqual(c, {})
    }, setString:function (a) {
        if (this.string !== a) {
            this.string = a;
            this.render()
        }
    }, setData:function (a, c) {
        if (this.data[a] !== c) {
            this.data[a] = c;
            this.render()
        }
    }, hookup:function (a) {
        this.element =
                b(a);
        this.element.data("DataString", this)
    }, render:function () {
        for (var a = this.string, c = [], h, g = /^[^\{]+/, k = /^\{(.*?)\}/, m = this.data; a;) {
            if (h = g.exec(a))c.push(h[0]); else if (h = k.exec(a)) {
                var n = h[1];
                m[n] ? c.push(m[n]) : c.push(h[0])
            } else throw"Error rendering data object";
            a = a.substring(h[0].length)
        }
        a = c.join("");
        if (this.element && this.element.length)this.element[0].tagName == "INPUT" ? this.element.val(a) : this.element.html(a);
        return a
    }})
})(jQuery);
(function (b) {
    GS.Models.User.extend("GS.Models.AuthUser", {id:"AuthUserID", cache:{}, loggedOutPlaylistCount:0, wrap:function (a) {
        return this._super(a, false)
    }, wrapFromService:function (a) {
        return this.wrap(b.extend({}, a, {Email:a.Email || a.email, Sex:a.Sex || a.sex, UserID:a.UserID || a.userID, IsPremium:a.IsPremium || a.isPremium, FName:a.FName || a.fName, LName:a.LName || a.lName, TSDOB:a.TSDOB || a.tsDOB, Flags:a.Flags || a.flags, Username:a.Username || a.username, Privacy:_.orEqualEx(a.Privacy, a.privacy, 0)}))
    }}, {authRealm:1, authToken:"",
        autoAutoplay:false, badAuthToken:false, favoritesLimit:500, librarySizeLimit:5E3, themeID:"", uploadsEnabled:0, UserID:-1, Username:"", Email:"", City:"", Country:"", State:"", TSDOB:"", Privacy:0, Flags:0, Points:0, settings:null, isLoggedIn:false, isAuth:true, artistsPlayed:[], defaultStations:["750", "12", "136", "3", "56", "67"], defaultFromService:null, searchVersion:"", promotions:{}, userFavoritesLoaded:false, userTrackingID:0, songPlays:0, notificationsFeed:null, init:function (a) {
            this._super(a);
            this.defaultFromService = {};
            this.refreshLibraryStatic = this.callback(this.refreshLibrary);
            this.library.songs = {};
            this.playlists = {};
            this.favorites = {songs:{}, albums:{}, artists:{}, playlists:{}, users:{}};
            this.sidebarLoaded = false;
            this.sidebar = {playlists:[], stations:[], subscribedPlaylists:[], songs:[], artists:[], albums:[], meta:{playlists:{}, stations:{}, subscribedPlaylists:{}, songs:{}, artists:{}, albums:{}}};
            this.settings = GS.Models.UserSettings.wrap({UserID:this.UserID});
            this._pointsDirty = true;
            this.Points = 0;
            if (this.UserID > 0) {
                this.isLoggedIn =
                        true;
                this.getPlaylists();
                this.getFavorites();
                this.getSidebar();
                this.getLibrary();
                this.handleLiveRamp();
                this.notificationsFeed = GS.Models.NotificationsFeed.wrap({user:this})
            } else {
                this.isDirty = this.isLoggedIn = false;
                this.sidebarLoaded = true;
                this.sidebar.stations = this.defaultStations.concat()
            }
            this.artistsPlayed = GS.store.get("artistsPlayed" + this.UserID) || [];
            b.subscribe("gs.player.nowplaying", this.callback(this.onSongPlay));
            setTimeout(function () {
                b.publish("gs.auth.stations.update")
            }, 10);
            var c = 0;
            if (this.Flags &
                    GS.Models.User.FLAG_ANYWHERE)c = 8; else if (this.Flags & GS.Models.User.FLAG_PLUS)c = 6; else if (this.Flags & GS.Models.User.FLAG_LITE)c = 21; else if (this.IsPremium)c = 8;
            this.subscription = new GS.Models.Subscription({SubscriptionTypeID:c});
            setTimeout(this.callback(function () {
                GS.user.UserID === a.UserID && this.checkVipExpiring()
            }), 54E4);
            this.searchVersion = ""
        }, uploadComplete:function () {
            var a = this.toUrl("music");
            this.library.reloadLibrary(function () {
                GS.router.setHash(a)
            })
        }, getNotifications:function (a, c) {
            this.UserID >
                    0 && this.notificationsFeed.getFeed(a, c)
        }, setLastSeenNotification:function () {
            store.set(this.UserID + "_notificationTimestamp", this.notificationsFeed.events[0] ? this.notificationsFeed.events[0].timestamp : 0)
        }, getLastSeenNotification:function () {
            return store.get(this.UserID + "_notificationTimestamp")
        }, onSongPlay:function (a) {
            if (this === GS.user) {
                if (a && a.ArtistID) {
                    var c = this.artistsPlayed.indexOf(a.ArtistID);
                    c != -1 && this.artistsPlayed.splice(c, 1);
                    this.artistsPlayed.unshift(a.ArtistID);
                    this.artistsPlayed.splice(999,
                            1)
                }
                this.songPlays++;
                this.songPlays == 10 && this.UserID <= 0 && GS.getLightbox().open("signupNow")
            }
        }, storeData:function () {
            var a;
            if (_.isEmpty(this.library.songs))a = null; else {
                a = {currentPage:this.library.currentPage, songsLoaded:this.library.songsLoaded, userID:this.library.userID, lastModified:this.library.lastModified, songs:{}};
                for (var c in this.library.songs)if (this.library.songs.hasOwnProperty(c))a.songs[c] = GS.Models.Song.archive(this.library.songs[c])
            }
            this.settings.changeLocalSettings({});
            GS.store.set("artistsPlayed" +
                    this.UserID, this.artistsPlayed);
            GS.store.set("library" + this.UserID, a)
        }, clearData:function () {
            GS.store.remove("library" + this.UserID)
        }, createPlaylist:function (a, c, h, g, k, m) {
            m = _.orEqual(m, true);
            c = _.orEqual(c, []);
            if (this.isLoggedIn)GS.service.createPlaylist(a, c, h, this.callback(["createPlaylistSuccess"], {callback:g, name:a, songIDs:c, description:h, notify:m}), k); else {
                GS.Models.AuthUser.loggedOutPlaylistCount++;
                h = GS.Models.Playlist.wrap({PlaylistID:-GS.Models.AuthUser.loggedOutPlaylistCount, PlaylistName:a, UserName:this.Name,
                    UserID:this.UserID, songsLoaded:true, TSAdded:(new Date).format("Y-m-d G:i:s"), Description:h});
                h.addSongs(c, 0, true);
                this.playlists[h.PlaylistID] = h;
                this.isDirty = true;
                b.publish("gs.auth.playlists.update");
                b.publish("gs.auth.playlists.add", h);
                m && b.publish("gs.notification.playlist.create", h);
                g(h)
            }
            GS.getGuts().logEvent("playlistCreated", {playlistName:a});
            GS.getGuts().gaTrackEvent("user", "newPlaylist")
        }, createPlaylistSuccess:function (a, c) {
            var h = GS.Models.Playlist.wrap({PlaylistID:c, PlaylistName:a.name, Description:a.description,
                UserID:this.UserID, UserName:this.Name, FName:this.Name, TSAdded:(new Date).format("Y-m-d G:i:s"), NumSongs:a.songIDs.length});
            this.playlists[h.PlaylistID] = h;
            b.publish("gs.auth.playlists.update");
            a.notify && b.publish("gs.notification.playlist.create", h);
            a.callback(h)
        }, deletePlaylist:function (a, c) {
            var h = GS.Models.Playlist.getOneFromCache(a);
            if (h && h.UserID === this.UserID) {
                c = _.orEqual(c, true);
                if (this.isLoggedIn)GS.service.deletePlaylist(h.PlaylistID, h.PlaylistName, this.callback(function () {
                    h.isDeleted = true;
                    this.removeFromShortcuts("playlist", h.PlaylistID, false);
                    delete this.playlists[h.PlaylistID];
                    b.publish("gs.playlist.view.update", h);
                    b.publish("gs.auth.playlists.update");
                    b.publish("gs.user.playlist.remove");
                    if (c) {
                        var g = (new GS.Models.DataString(b.localize.getString("POPUP_DELETE_PLAYLIST_MSG"), {playlist:h.PlaylistName})).render();
                        b.publish("gs.notification", {type:"notice", message:g})
                    }
                }), this.callback(function () {
                    h.isDeleted = false;
                    if (c) {
                        var g = (new GS.Models.DataString(b.localize.getString("POPUP_FAIL_DELETE_PLAYLIST_MSG"),
                                {playlist:h.PlaylistName})).render();
                        b.publish("gs.notification", {type:"error", message:g})
                    }
                })); else {
                    h.isDeleted = true;
                    this.removeFromShortcuts("playlist", h.PlaylistID, false);
                    delete this.playlists[h.PlaylistID];
                    b.publish("gs.playlist.view.update", h);
                    b.publish("gs.auth.playlists.update");
                    b.publish("gs.user.playlist.remove");
                    c && b.publish("gs.notification", {type:"notice", message:b.localize.getString("NOTIFICATION_PLAYLIST_DELETED")})
                }
            }
            GS.getGuts().gaTrackEvent("user", "deletePlaylist")
        }, restorePlaylist:function (a, c) {
            var h = GS.Models.Playlist.getOneFromCache(a);
            if (h && h.UserID === this.UserID) {
                c = _.orEqual(c, true);
                if (this.isLoggedIn)GS.service.playlistUndelete(h.PlaylistID, this.callback(function () {
                    h.isDeleted = false;
                    this.playlists[h.PlaylistID] = h;
                    b.publish("gs.playlist.view.update", h);
                    c && b.publish("gs.notification", {type:"notice", message:b.localize.getString("NOTIFICATION_PLAYLIST_RESTORED")})
                }), function () {
                    c && b.publish("gs.notification", {type:"error", message:b.localize.getString("NOTIFICATION_PLAYLIST_RESTORE_FAIL")})
                });
                else {
                    h.isDeleted = false;
                    this.playlists[h.PlaylistID] = h;
                    b.publish("gs.playlist.view.update", h);
                    c && b.publish("gs.notification", {type:"notice", message:b.localize.getString("NOTIFICATION_PLAYLIST_RESTORED")})
                }
            }
            GS.getGuts().gaTrackEvent("user", "restorePlaylist")
        }, getSidebar:function () {
            GS.service.getUserSidebar(this.callback("loadSidebar"))
        }, loadSidebar:function (a) {
            this.sidebarLoaded = true;
            if (b.isArray(a.meta))a.meta = {};
            this.sidebar = b.extend(true, this.sidebar, a);
            b.publish("gs.auth.sidebar.loaded");
            if (this.sidebar.stations.length ===
                    0) {
                var c = this;
                _.forEach(this.defaultStations, function (h) {
                    c.addToShortcuts("station", h, "", false)
                })
            }
        }, getFavorites:function () {
            var a = this;
            _.forEach(["Albums", "Artists", "Playlists", "Songs", "Users"], function (c) {
                GS.service.getFavorites(a.UserID, c, false, a.callback("load" + c + "Favorites"))
            })
        }, loadAlbumsFavorites:function (a) {
            _.forEach(this.favorites.albums, function (c) {
                a.push(c)
            });
            this._super(a);
            b.publish("gs.auth.favorites.albums.update")
        }, loadArtistsFavorites:function (a) {
            _.forEach(this.favorites.artists, function (c) {
                a.push(c)
            });
            this._super(a);
            b.publish("gs.auth.favorites.artists.update")
        }, loadPlaylistsFavorites:function (a) {
            _.forEach(this.favorites.playlists, function (c) {
                a.push(c)
            });
            this._super(a);
            b.publish("gs.auth.favorites.playlists.update")
        }, loadSongsFavorites:function (a) {
            _.forEach(this.favorites.songs, function (c) {
                a.push(c)
            });
            this._super(a);
            b.publish("gs.auth.favorites.songs.update")
        }, loadUsersFavorites:function (a) {
            _.forEach(this.favorites.users, function (c) {
                a.push(c)
            });
            this._super(a);
            this.userFavoritesLoaded = true;
            b.publish("gs.auth.favorites.users.update")
        },
        getLibrary:function () {
            var a = GS.store.get("library" + this.UserID);
            if (a) {
                var c = a.songs;
                delete a.songs;
                this.library = GS.Models.Library.wrap(a);
                for (var h in c)if (c.hasOwnProperty(h)) {
                    c[h] = GS.Models.Song.unarchive(c[h]);
                    c[h].fromLibrary = 1
                }
                a = this.library.songs;
                this.library.songs = GS.Models.Song.wrapCollectionInObject(c, {TSAdded:"", TSFavorited:""});
                _.forEach(a, function (g) {
                    _.defined(this.library.songs[g.SongID]) || (this.library.songs[g.SongID] = g)
                }, this);
                GS.service.userGetLibraryTSModified(this.UserID, this.callback("refreshLibrary"))
            } else {
                this.library =
                        GS.Models.Library.wrap({userID:this.UserID});
                this.library.getSongs(this.callback("loadLibrary"), false)
            }
        }, refreshLibrary:function (a) {
            if (a.TSModified > this.library.lastModified) {
                this.library.currentPage = 0;
                this.library.songsLoaded = false;
                this.library.getSongs(this.callback("loadLibrary"), false)
            } else b.publish("gs.auth.library.update")
        }, loadLibrary:function (a) {
            for (var c = 0; c < a.length; c++)this.library.songs[a[c].SongID] = a[c];
            b.publish("gs.auth.library.update");
            this.library.songsLoaded || this.library.getSongs(this.callback("loadLibrary"),
                    false)
        }, addToSongFavorites:function (a, c) {
            c = _.orEqual(c, true);
            if (!this.favorites.songs[a]) {
                var h = GS.Models.Song.getOneFromCache(a);
                if (!h)throw"AUTH.ADDTOSONGFAVES. SONGID NOT IN CACHE: " + a;
                h = h.dupe();
                h.isFavorite = 1;
                h.fromLibrary = 1;
                h.TSFavorited = (new Date).format("Y-m-d G:i:s");
                if (!_.defined(h.TSAdded) || h.TSAdded === "")h.TSAdded = h.TSFavorited;
                if (this.library.songs[a])this.library.songs[a] = h; else {
                    this.library.songs[a] = h;
                    b.publish("gs.auth.library.add", h)
                }
                this.favorites.songs[a] = h.dupe();
                GS.getGuts().logEvent("objectFavorited",
                        {type:"song", id:a});
                b.publish("gs.auth.song.update", h);
                b.publish("gs.auth.favorites.songs.add", h);
                c && b.publish("gs.notification.favorite.song", h);
                if (this.isLoggedIn)GS.service.favorite("Song", h.SongID, h.getDetailsForFeeds(), null, this.callback(this._favoriteFail, "Song", h)); else this.isDirty = true;
                GS.getGuts().gaTrackEvent("user", "favoriteSong")
            }
        }, addToPlaylistFavorites:function (a, c) {
            c = _.orEqual(c, true);
            if (!this.favorites.playlists[a]) {
                var h = GS.Models.Playlist.getOneFromCache(a);
                if (!h)throw"AUTH.ADDTOPLAYLISTFAVES. PLAYLISTID NOT IN CACHE: " +
                        a;
                h.isFavorite = 1;
                h.TSFavorited = (new Date).format("Y-m-d G:i:s");
                this.favorites.playlists[a] = h;
                GS.getGuts().logEvent("objectFavorited", {type:"playlist", id:a});
                this.addToShortcuts("playlist", a, h.PlaylistName, false);
                b.publish("gs.auth.favorites.playlists.update");
                b.publish("gs.auth.playlist.update", h);
                b.publish("gs.auth.favorite.playlist", h);
                b.publish("gs.playlist.view.update", this);
                c && b.publish("gs.notification.favorite.playlist", h);
                if (this.isLoggedIn)GS.service.favorite("Playlist", h.PlaylistID, h.getDetailsForFeeds(),
                        null, this.callback(this._favoriteFail, "Playlist", h)); else this.isDirty = true;
                GS.getGuts().gaTrackEvent("user", "favoritePlaylist")
            }
        }, removeFromPlaylistFavorites:function (a, c) {
            c = _.orEqual(c, true);
            var h = GS.Models.Playlist.getOneFromCache(a);
            if (h) {
                this.removeFromShortcuts("playlist", h.PlaylistID, false);
                h.isFavorite = 0;
                GS.Models.Playlist.cache[a] = h;
                delete this.favorites.playlists[a];
                GS.getGuts().logEvent("objectUnfavorited", {type:"playlist", id:a});
                b.publish("gs.auth.favorites.playlists.update");
                b.publish("gs.auth.playlist.update",
                        h);
                b.publish("gs.playlist.view.update", this);
                this.isLoggedIn && GS.service.unfavorite("Playlist", a);
                c && b.publish("gs.notification", {type:"notify", message:_.printf("NOTIFICATION_PLAYLIST_UNSUBSCRIBED", {playlist:h.PlaylistName})});
                GS.getGuts().gaTrackEvent("user", "unfavoritePlaylist")
            }
        }, addToArtistFavorites:function (a, c) {
            c = _.orEqual(c, true);
            if (!this.favorites.artists[a]) {
                var h = GS.Models.Artist.getOneFromCache(a);
                if (!h)throw"AUTH.ADDTOARTSTTFAVES. ARTISTID NOT IN CACHE: " + a;
                h.isFavorite = 1;
                h.TSFavorited =
                        (new Date).format("Y-m-d G:i:s");
                this.favorites.artists[a] = h;
                GS.getGuts().logEvent("objectFavorited", {type:"artist", id:a});
                b.publish("gs.auth.favorites.artists.update");
                c && b.publish("gs.notification.favorite.artist", h);
                if (this.isLoggedIn)GS.service.favorite("Artist", h.ArtistID, h.getDetailsForFeeds(), null, this.callback(this._favoriteFail, "Artist", h)); else this.isDirty = true;
                GS.getGuts().gaTrackEvent("user", "favoriteArtist")
            }
        }, removeFromArtistFavorites:function (a, c) {
            c = _.orEqual(c, true);
            var h = GS.Models.Artist.getOneFromCache(a);
            if (h) {
                h.isFavorite = 0;
                GS.Models.Artist.cache[a] = h;
                delete this.favorites.artists[a];
                GS.getGuts().logEvent("objectUnfavorited", {type:"artist", id:a});
                b.publish("gs.auth.favorites.artists.update");
                this.isLoggedIn && GS.service.unfavorite("Artist", a);
                c && b.publish("gs.notification", {type:"notify", message:b.localize.getString("NOTIFICATION_ARTIST_UNSUBSCRIBED")});
                GS.getGuts().gaTrackEvent("user", "unfavoriteArtist")
            }
        }, removeFromSongFavorites:function (a, c) {
            c = _.orEqual(c, true);
            var h = this.favorites.songs[a];
            if (h) {
                h.isFavorite =
                        0;
                delete this.favorites.songs[a];
                GS.getGuts().logEvent("objectUnfavorited", {type:"song", id:a});
                this.library.songs[a] = h.dupe();
                b.publish("gs.auth.song.update", h);
                b.publish("gs.auth.favorites.songs.remove", h);
                this.isLoggedIn && GS.service.unfavorite("Song", h.SongID);
                if (c) {
                    h = {songLink:"<a class='songLink' rel='" + h.SongID + "'>" + h.SongName + "</a>", artistLink:"<a href='" + _.cleanUrl(h.ArtistName, h.ArtistID, "artist", null, null) + "'>" + h.ArtistName + "</a>"};
                    b.publish("gs.notification", {type:"notify", message:(new GS.Models.DataString(b.localize.getString("NOTIF_UNFAVORITED_SONG"),
                            h)).render()})
                }
                GS.getGuts().gaTrackEvent("user", "unfavoriteSong")
            }
        }, addToUserFavorites:function (a, c) {
            c = _.orEqual(c, true);
            if (!(!a || this.favorites.users[a])) {
                var h = GS.Models.User.getOneFromCache(a);
                if (!h || this.UserID === h.UserID)this._favoriteFail("User", null); else {
                    h.isFavorite = 1;
                    this.favorites.users[a] = h;
                    GS.getGuts().logEvent("objectFavorited", {type:"user", id:a});
                    b.publish("gs.auth.favorites.users.update");
                    b.publish("gs.auth.user.update", h);
                    b.publish("gs.auth.favorite.user", h);
                    c && b.publish("gs.notification.favorite.user",
                            h);
                    if (this.isLoggedIn)GS.service.favorite("User", h.UserID, h.getDetailsForFeeds(), null, this.callback(this._favoriteFail, "User", h)); else this.isDirty = true;
                    this.communityFeed.isDirty = true;
                    GS.getGuts().gaTrackEvent("user", "followUser")
                }
            }
        }, removeFromUserFavorites:function (a) {
            var c = GS.Models.User.getOneFromCache(a);
            if (!(!c || this.UserID === c.UserID)) {
                c.isFavorite = 0;
                GS.Models.User.cache[a] = c;
                delete this.favorites.users[a];
                GS.getGuts().logEvent("objectUnfavorited", {type:"user", id:a});
                b.publish("gs.auth.favorites.users.update");
                b.publish("gs.auth.user.update", c);
                this.communityFeed.isDirty = true;
                this.isLoggedIn && GS.service.unfavorite("User", c.UserID);
                GS.getGuts().gaTrackEvent("user", "unfollowUser")
            }
        }, changeFollowFlags:function (a) {
            if (this.isLoggedIn) {
                var c = false;
                for (var h in a)if (a.hasOwnProperty(h))if (!this.favorites.users[a[h].userID] || this.favorites.users[a[h].userID].FollowingFlags !== a[h].flags) {
                    c = true;
                    break
                }
                c ? GS.service.changeFollowFlags(a, this.callback("changeFollowFlagsSuccess", a), this.callback("changeFollowFlagsFail")) :
                        this.changeFollowFlagsSuccess(a, {success:true})
            } else this.changeFollowFlagsFail()
        }, changeFollowFlagsSuccess:function (a, c) {
            if (c.success) {
                for (var h in a)if (a.hasOwnProperty(h))if (this.favorites.users[a[h].userID])this.favorites.users[a[h].userID].FollowingFlags = a[h].flags;
                this.communityFeed.isDirty = true;
                b.publish("gs.auth.favorites.users.update")
            } else this.changeFollowFlagsFail()
        }, changeFollowFlagsFail:function () {
            b.publish("gs.notification", {message:b.localize.getString("SETTINGS_USER_HIDE_FAIL")})
        },
        addToLibrary:function (a, c) {
            c = _.orEqual(c, true);
            var h = [];
            a = b.makeArray(a);
            for (var g = 0; g < a.length; g++) {
                var k = a[g];
                if (!this.library.songs[k]) {
                    var m = GS.Models.Song.getOneFromCache(k);
                    if (m) {
                        m = m.dupe();
                        m.fromLibrary = 1;
                        if (this.favorites.songs[k])m.isFavorite = 1;
                        if (!_.defined(m.TSAdded) || m.TSAdded === "")m.TSAdded = (new Date).format("Y-m-d G:i:s");
                        this.library.songs[k] = m;
                        GS.getGuts().logEvent("songAddedToLibrary", {id:k});
                        b.publish("gs.auth.library.add", m);
                        b.publish("gs.auth.song.update", m);
                        h.push(m.getDetailsForFeeds())
                    }
                }
            }
            if (!_.isEmpty(h)) {
                if (this.isLoggedIn)GS.service.userAddSongsToLibrary(h,
                        this.callback("addToLibrarySuccess", c, h), this.callback("addtoLibraryFailed")); else {
                    this.isDirty = true;
                    this.addToLibrarySuccess(c, h)
                }
                GS.getGuts().gaTrackEvent("user", "addLibrarySong")
            }
        }, addToLibrarySuccess:function (a, c, h) {
            a && b.publish("gs.auth.library.songsAdded", {songs:c});
            if (h) {
                tsAdded = parseInt(h.Timestamps.newTSModified, 10);
                parseInt(h.Timestamps.oldTSModified, 10) > this.library.lastModified && this.library.getSongs(this.callback("loadLibrary"), false)
            } else tsAdded = _.unixTime();
            this.library.lastModified =
                    tsAdded;
            a = (new Date(tsAdded * 1E3)).format("Y-m-d G:i:s");
            for (h = 0; h < c.length; h++)this.library.songs[c[h].songID].TSAdded = a
        }, _favoriteFail:function (a, c) {
            var h = "NOTIFICATION_LIBRARY_ADD_FAIL", g = {};
            if (c)switch (a) {
                case "Song":
                    h += "_SONG";
                    g.name = c.SongName;
                    break;
                case "Playlist":
                    h += "_PLAYLIST";
                    g.name = c.PlaylistName;
                    break;
                case "User":
                    h += "_USER";
                    g.name = c.Name;
                    break
            }
            b.publish("gs.notification", {type:"error", message:(new GS.Models.DataString(b.localize.getString(h), g)).render()})
        }, addToLibraryFailed:function () {
            var a =
            {numSongs:songIDsToAdd.length};
            b.publish("gs.notification", {type:"error", message:(new GS.Models.DataString(b.localize.getString(songIDsToAdd.length > 1 ? "NOTIFICATION_LIBRARY_ADD_SONGS_FAIL" : "NOTIFICATION_LIBRARY_ADD_SONG_FAIL"), a)).render()})
        }, removeFromLibrary:function (a, c) {
            c = _.orEqual(c, true);
            a = b.makeArray(a);
            for (var h = [], g = [], k = [], m = 0; m < a.length; m++) {
                var n = a[m], o = this.library.songs[n];
                if (o) {
                    delete this.library.songs[n];
                    GS.getGuts().logEvent("songRemovedFromLibrary", {id:n});
                    delete this.favorites.songs[n];
                    o.fromLibrary = 0;
                    o.isFavorite = 0;
                    GS.Models.Song.cache[o.SongID] = o;
                    b.publish("gs.auth.library.remove", o);
                    b.publish("gs.auth.song.update", o);
                    h.push(o.SongID);
                    g.push(o.ArtistID);
                    k.push(o.AlbumID)
                } else console.warn("removing song not in library!", n)
            }
            if (!_.isEmpty(h)) {
                if (this.isLoggedIn) {
                    GS.service.userRemoveSongsFromLibrary(this.UserID, h, k, g, this.callback("removeFromLibrarySuccess", c, h), this.callback("removeFromLibraryFailed", o));
                    GS.service.unfavorite("Song", o.SongID)
                } else this.removeFromLibrarySuccess(c,
                        h);
                GS.getGuts().gaTrackEvent("user", "removeLibrarySong")
            }
        }, removeFromLibrarySuccess:function (a, c, h) {
            if (h)if (parseInt(h.Timestamps.oldTSModified, 10) > this.library.lastModified)this.library.getSongs(this.callback("loadLibrary"), false); else this.library.lastModified = parseInt(h.Timestamps.newTSModified, 10);
            if (a) {
                a = GS.Models.Song.getOneFromCache(c[0]);
                !a || !a.SongName || c.length > 1 ? b.publish("gs.notification", {message:_.getString("NOTIFICATION_LIBRARY_REMOVE_SONGS", {numSongs:c.length})}) : b.publish("gs.notification",
                        {message:_.getString("NOTIFICATION_LIBRARY_REMOVE_SONG", {song:a.SongName})})
            }
        }, removeFromLibraryFailed:function () {
            b.publish("gs.notification", {type:"error", message:b.localize.getString("NOTIFICATION_LIBRARY_REMOVE_FAIL")})
        }, getIsShortcut:function (a, c) {
            if (!c || !a)return false;
            a = a.toLowerCase();
            c = c.toString();
            switch (a) {
                case "playlist":
                    return this.sidebar.playlists.indexOf(c) > -1 || this.sidebar.subscribedPlaylists.indexOf(c) > -1;
                case "station":
                    return this.sidebar.stations.indexOf(c) > -1;
                case "song":
                    return this.sidebar.songs.indexOf(c) >
                            -1;
                case "artist":
                    return this.sidebar.artists.indexOf(c) > -1;
                case "album":
                    return this.sidebar.albums.indexOf(c) > -1
            }
            return false
        }, addToShortcuts:function (a, c, h, g) {
            g = _.orEqual(g, true);
            a = a.toLowerCase();
            var k = c.toString();
            switch (a) {
                case "playlist":
                    a = GS.Models.Playlist.getOneFromCache(c);
                    if (!a)return;
                    a = a.UserID === this.UserID ? "playlists" : "subscribedPlaylists";
                    break;
                case "station":
                case "song":
                case "artist":
                case "album":
                    a = a + "s";
                    break;
                default:
                    return
            }
            if (this.sidebar[a].indexOf(k) === -1) {
                this.sidebar[a].unshift(k);
                this.sidebar.meta[a][c] = h;
                b.publish("gs.auth.pinboard.update", {type:a});
                if (this.isLoggedIn)GS.service.addShortcutToUserSidebar(a, c, h, this.callback(this._addShortcutSuccess, a, c, g), this.callback(this._addShortcutFailed, a, c, g)); else {
                    this.isDirty = true;
                    this._addShortcutSuccess(a, c, g, {})
                }
                GS.getGuts().gaTrackEvent("user", "addShortcut")
            }
        }, _addShortcutSuccess:function (a, c, h) {
            var g, k = {};
            switch (a) {
                case "playlists":
                case "subscribedPlaylists":
                    if (a = GS.Models.Playlist.getOneFromCache(c)) {
                        g = "NOTIFICATION_PLAYLIST_PINBOARD_ADD_SUCCESS";
                        k.playlist = a.PlaylistName;
                        b.publish("gs.playlist.view.update", a)
                    }
                    break;
                case "stations":
                    a = GS.Models.Station.getOneFromCache(c);
                    g = "NOTIFICATION_STATION_PINBOARD_ADD_SUCCESS";
                    k.station = b.localize.getString(a.StationTitle);
                    break;
                case "songs":
                    if (a = GS.Models.Song.getOneFromCache(c)) {
                        g = "NOTIFICATION_SONG_PINBOARD_ADD_SUCCESS";
                        k.song = a.SongName
                    }
                    break;
                case "artists":
                    if (a = GS.Models.Artist.getOneFromCache(c)) {
                        g = "NOTIFICATION_ARTIST_PINBOARD_ADD_SUCCESS";
                        k.artist = a.ArtistName
                    }
                    break;
                case "albums":
                    if (a = GS.Models.Album.getOneFromCache(c)) {
                        g =
                                "NOTIFICATION_ALBUM_PINBOARD_ADD_SUCCESS";
                        k.album = a.AlbumName
                    }
                    break
            }
            if (h && g) {
                h = new GS.Models.DataString(b.localize.getString(g), k);
                b.publish("gs.notification", {type:"notice", message:h.render()})
            }
        }, _addShortcutFailed:function (a, c, h) {
            var g, k = {}, m = this.sidebar[a].indexOf(c.toString());
            if (m != -1) {
                this.sidebar[a].splice(m, 1);
                b.publish("gs.auth.pinboard.update", {type:a})
            }
            switch (a) {
                case "playlists":
                case "subscribedPlaylists":
                    if (a = GS.Models.Playlist.getOneFromCache(c)) {
                        g = "NOTIFICATION_PLAYLIST_PINBOARD_ADD_FAILED";
                        k.playlist = a.PlaylistName;
                        b.publish("gs.playlist.view.update", a)
                    }
                    break;
                case "stations":
                    a = GS.Models.Station.getOneFromCache(c);
                    g = "NOTIFICATION_STATION_PINBOARD_ADD_FAILED";
                    k.station = b.localize.getString(a.StationTitle);
                    break;
                case "songs":
                    if (a = GS.Models.Song.getOneFromCache(c)) {
                        g = "NOTIFICATION_SONG_PINBOARD_ADD_FAILED";
                        k.song = a.SongName
                    }
                    break;
                case "artists":
                    if (a = GS.Models.Artist.getOneFromCache(c)) {
                        g = "NOTIFICATION_ARTIST_PINBOARD_ADD_FAILED";
                        k.artist = a.ArtistName
                    }
                    break;
                case "albums":
                    if (a = GS.Models.Album.getOneFromCache(c)) {
                        g =
                                "NOTIFICATION_ALBUM_PINBOARD_ADD_FAILED";
                        k.album = a.AlbumName
                    }
                    break
            }
            if (h && g) {
                h = new GS.Models.DataString(b.localize.getString(g), k);
                b.publish("gs.notification", {type:"error", message:h.render()})
            }
        }, removeFromShortcuts:function (a, c, h) {
            h = _.orEqual(h, true);
            switch (a) {
                case "playlist":
                    a = GS.Models.Playlist.getOneFromCache(c);
                    if (!a)return;
                    a = a.UserID === this.UserID ? "playlists" : "subscribedPlaylists";
                    break;
                case "station":
                case "song":
                case "artist":
                case "album":
                    a = a + "s";
                    break;
                default:
                    return
            }
            var g = this.sidebar[a].indexOf(c.toString());
            if (g != -1) {
                this.sidebar[a].splice(g, 1);
                b.publish("gs.auth.pinboard.update", {type:a});
                if (this.isLoggedIn)GS.service.removeShortcutFromUserSidebar(a, c, this.callback(this._removeShortcutSuccess, a, c, h), this.callback(this._removeShortcutFailed, a, c, g, h)); else {
                    this.isDirty = true;
                    this._removeShortcutSuccess(a, c, h, {})
                }
                GS.getGuts().gaTrackEvent("user", "removeShortcut")
            }
        }, _removeShortcutSuccess:function (a, c, h) {
            var g, k = {};
            switch (a) {
                case "playlists":
                case "subscribedPlaylists":
                    if (a = GS.Models.Playlist.getOneFromCache(c)) {
                        g =
                                "NOTIFICATION_PLAYLIST_PINBOARD_REMOVE_SUCCESS";
                        k.playlist = a.PlaylistName;
                        b.publish("gs.playlist.view.update", a)
                    }
                    break;
                case "stations":
                    a = GS.Models.Station.getOneFromCache(c);
                    g = "NOTIFICATION_STATION_PINBOARD_REMOVE_SUCCESS";
                    k.station = b.localize.getString(a.StationTitle);
                    break;
                case "songs":
                    if (a = GS.Models.Song.getOneFromCache(c)) {
                        g = "NOTIFICATION_SONG_PINBOARD_REMOVE_SUCCESS";
                        k.song = a.SongName
                    }
                    break;
                case "artists":
                    if (a = GS.Models.Artist.getOneFromCache(c)) {
                        g = "NOTIFICATION_ARTIST_PINBOARD_REMOVE_SUCCESS";
                        k.artist = a.ArtistName
                    }
                    break;
                case "albums":
                    if (a = GS.Models.Album.getOneFromCache(c)) {
                        g = "NOTIFICATION_ALBUM_PINBOARD_REMOVE_SUCCESS";
                        k.album = a.AlbumName
                    }
                    break
            }
            if (h && g) {
                h = new GS.Models.DataString(b.localize.getString(g), k);
                b.publish("gs.notification", {type:"notice", message:h.render()})
            }
        }, _removeShortcutFailed:function (a, c, h, g) {
            var k, m, n = {};
            if (h < 0)h = 0;
            switch (a) {
                case "playlists":
                case "subscribedPlaylists":
                    if (k = GS.Models.Playlist.getOneFromCache(c)) {
                        m = "NOTIFICATION_PLAYLIST_PINBOARD_REMOVE_FAILED";
                        n.playlist =
                                k.PlaylistName;
                        b.publish("gs.playlist.view.update", k)
                    }
                    break;
                case "stations":
                    k = GS.Models.Station.getOneFromCache(c);
                    m = "NOTIFICATION_STATION_PINBOARD_REMOVE_FAILED";
                    n.station = b.localize.getString(k.StationTitle);
                    break;
                case "songs":
                    if (k = GS.Models.Song.getOneFromCache(c)) {
                        m = "NOTIFICATION_SONG_PINBOARD_REMOVE_FAILED";
                        n.song = k.SongName
                    }
                    break;
                case "artists":
                    if (k = GS.Models.Artist.getOneFromCache(c)) {
                        m = "NOTIFICATION_ARTIST_PINBOARD_REMOVE_FAILED";
                        n.artist = k.ArtistName
                    }
                    break;
                case "albums":
                    if (k = GS.Models.Album.getOneFromCache(c)) {
                        m =
                                "NOTIFICATION_ALBUM_PINBOARD_REMOVE_FAILED";
                        n.album = k.AlbumName
                    }
                    break
            }
            if (h != -1) {
                this.sidebar[a].splice(h, 0, c.toString());
                b.publish("gs.auth.pinboard.update", {type:a})
            }
            if (g && m) {
                a = new GS.Models.DataString(b.localize.getString(m), n);
                b.publish("gs.notification", {type:"error", message:a.render()})
            }
        }, changePassword:function (a, c, h, g) {
            this.isLoggedIn ? GS.service.changePassword(a, c, this.callback(this._passwordSuccess, h, g), this.callback(this._passwordFailed, g)) : this._passwordFailed(g);
            GS.getGuts().gaTrackEvent("user",
                    "changePassword")
        }, _passwordSuccess:function (a, c, h) {
            if (h && h.statusCode === 1)b.isFunction(a) && a(h); else this._passwordFailed(c, h)
        }, _passwordFailed:function (a, c) {
            b.isFunction(a) && a(c)
        }, updateAccountType:function (a) {
            a = a.toLowerCase();
            switch (a) {
                case "plus":
                    this.IsPremium = 1;
                    this.Flags |= 1;
                    break;
                case "anywhere":
                    this.IsPremium = 1;
                    this.Flags |= 128;
                    break;
                case "lite":
                case "liteEx":
                    this.IsPremium = 1;
                    this.Flags |= 32768;
                    break;
                default:
                    this.IsPremium = 0;
                    this.Flags &= -2;
                    this.Flags &= -129;
                    this.Flags &= -32769;
                    break
            }
            b.publish("gs.auth.update");
            this.checkVipExpiring();
            GS.getGuts().gaTrackEvent("user", "updateAccount", a)
        }, checkVipExpiring:function () {
            this.IsPremium && GS.service.getSubscriptionDetails(this.callback("checkVipExpiringCallback"), this.callback("checkVipExpiringCallback"))
        }, checkVipExpiringCallback:function (a) {
            var c = new Date, h;
            if (!(a.fault || a.code)) {
                this.subscription = GS.Models.Subscription.getSubscriptionFromDetails(a, this);
                if (!(this.subscription.recurring || this.subscription.isSpecial()))if (h = this.subscription.endDate) {
                    a = _.orEqual(GS.store.get("gs.vipExpire.hasSeen" +
                            this.UserID), 0);
                    a = c.getTime() - a;
                    c = h.getTime() - c.getTime();
                    h = Math.max(0, Math.ceil(c / 864E5));
                    h += h == 1 ? " day" : " days";
                    h = c <= 0 ? (new GS.Models.DataString(b.localize.getString("POPUP_VIP_EXPIRES_NO_DAYS"), {vipPackage:this.subscription.getTypeName()})).render() : (new GS.Models.DataString(b.localize.getString("POPUP_VIP_EXPIRES_DAYS_LEFT"), {daysLeft:h, vipPackage:this.subscription.getTypeName()})).render();
                    this.subscription.daysLeft = h;
                    if (a >= 1728E5)if (c < 864E5) {
                        this.subscription.timeframe = "oneDay";
                        GS.getLightbox().open("vipExpires",
                                this.subscription)
                    } else if (c < 1728E5) {
                        this.subscription.timeframe = "twoDays";
                        GS.getLightbox().open("vipExpires", this.subscription)
                    } else if (c < 12096E5) {
                        this.subscription.timeframe = "twoWeeks";
                        GS.getLightbox().open("vipExpires", this.subscription)
                    } else if (c <= 0 && Math.abs(c) <= 6048E5) {
                        this.subscription.timeframe = "expired";
                        GS.getLightbox().open("vipExpires", this.subscription)
                    }
                    setTimeout(this.callback("checkVipExpiring"), 1728E5)
                }
            }
        }, isVip:function () {
            return this.subscription.vip
        }, getAutoNewPlaylistName:function () {
            var a,
                    c, h, g = [];
            h = this.Name && this.Name.length ? this.Name + "'s Playlist " : "Playlist ";
            _.forEach(this.playlists, function (k) {
                a = k.PlaylistName.indexOf(h);
                if (a != -1)(c = parseInt(k.PlaylistName.substring(a + h.length), 10)) && g.push(c)
            });
            if (g.length) {
                g.sort(_.numSortA);
                c = g[g.length - 1] + 1
            } else c = 1;
            return h + c
        }, isPlaylistNameAvailable:function (a) {
            var c;
            for (c in this.playlists)if (this.playlists.hasOwnProperty(c))if (a === this.playlists[c].PlaylistName)return false;
            return true
        }, getPoints:function (a, c) {
            if (this._pointsDirty)if (this._pointsPending)this._pointsPending.then(a,
                    c); else {
                this._pointsPending = b.Deferred();
                this._pointsPending.then(a, c);
                GS.service.userGetPoints(this.callback("_pointsSuccess"), this.callback("_pointsFail"))
            } else a(this.Points)
        }, _pointsSuccess:function (a) {
            var c = parseInt(a, 10);
            if (isNaN(c)) {
                this._pointsPending.reject(a);
                this._pointsPending = false
            } else {
                var h = this.Points;
                this._pointsDirty = false;
                this.Points = c;
                this._pointsPending.resolve(c);
                this._pointsPending = false;
                h !== c && b.publish("gs.auth.pointsUpdated");
                return a
            }
        }, _pointsFail:function (a) {
            this._pointsPending.reject(a);
            this._pointsPending = false;
            return a
        }, invalidatePoints:function () {
            this._pointsDirty = true;
            b.publish("gs.auth.pointsUpdated")
        }, addPoints:function (a, c) {
            c = _.orEqual(c, false);
            a = parseInt(a, 10);
            if (!isNaN(a)) {
                this._pointsDirty = true;
                this.Points += a;
                b.publish("gs.auth.pointsUpdated");
                c || GS.getNotice().displaySurveyPoints(a)
            }
        }, handleLiveRamp:function () {
            var a = GS.store.get("lastLiveRamp" + this.UserID), c = (new Date).valueOf();
            if (this.Email && (!a || c - a > 1296E6)) {
                GS.store.set("lastLiveRamp" + this.UserID, c);
                var h = hex_sha1(b.trim(this.Email.toLowerCase()));
                _.wait(3E4).then(function () {
                    b("iframe#liveRamp").remove();
                    var g = b('<iframe id="liveRamp" name="_rlcdn" width=0 height=0 frameborder=0></iframe>'), k = "http://ei.rlcdn.com/44054.html?s=" + h;
                    g.css("visibility", "hidden");
                    g.bind("load", function () {
                        g.css("visibility", "visible").unbind("load")
                    });
                    g.attr("src", k);
                    b("body").append(g)
                })
            }
        }})
})(jQuery);
(function (b) {
    GS.Models.Base.extend("GS.Models.Fanbase", {}, {currentPage:0, objectID:null, objectType:"", userIDs:[], fansLoaded:false, init:function (a) {
        this._super(a);
        this.userIDs = _.orEqual(a.userIDs, []);
        this.fansLoaded = _.orEqual(a.fansLoaded, false)
    }, getFans:function (a, c) {
        if (this.fansLoaded) {
            var h = GS.Models.User.getManyFromCache(this.userIDs);
            b.isFunction(a) && a(h)
        } else this.objectType === "playlist" ? GS.service[this.objectType + "GetFans"](this.objectID, this.callback(["cacheAndReturnUsers", a]), c) : GS.service[this.objectType +
                "GetFans"](this.objectID, this.currentPage, this.callback(["cacheAndReturnUsers", a]), c)
    }, cacheAndReturnUsers:function (a) {
        for (var c = GS.Models.User.wrapCollection(a.Users || a.Return.fans || a.Return), h = 0; h < c.length; h++) {
            var g = c[h];
            this.userIDs.indexOf(g.UserID) == -1 && this.userIDs.push(g.UserID)
        }
        if (_.defined(a.hasMore) && a.hasMore)this.currentPage++; else this.fansLoaded = true;
        return c
    }})
})(jQuery);
(function (b) {
    GS.Models.Base.extend("GS.Models.Feed", {QUEUE_ADD_LIMIT:50}, {user:null, type:null, lastDocumentID:null, lastEventID:null, events:[], pages:[], currentPage:0, hasMore:false, isLoaded:false, isComplete:false, isDirty:false, isErrored:false, realTimeWaiting:[], lastRequest:0, cache:{}, RATE_LIMIT:6E4, PAGE_LIMIT:5, getFeed:function (a, c) {
        this.reset();
        this.isComplete ? a(this.events) : this.fetch({callback:a, errback:c})
    }, next:function (a, c) {
        this.fetch({callback:a, errback:c})
    }, reset:function () {
        var a = new Date;
        if (!this.isLoaded ||
                a.getTime() > this.lastRequest + this.RATE_LIMIT || this.isDirty) {
            this.events = [];
            this.lastDocumentID = this.lastEventID = 0;
            this.isLoaded = this.hasMore = this.isComplete = this.isDirty = this.isErrored = false;
            this.lastRequest = a.getTime();
            this.cache = {};
            this.pages = [];
            this.currentPage = 0
        }
    }, fetch:function () {
        return[]
    }, onError:function (a) {
        this.isLoaded = this.isErrored = true;
        a && a.errback && a.errback([])
    }, filterFollows:function (a) {
        return a.type == GS.Models.FeedEvent.USER_FOLLOWED_TYPE || a.type == GS.Models.FeedEvent.USERS_FOLLOWED_TYPE ||
                a.type == GS.Models.FeedEvent.FAVORITE_USERS_TYPE ? false : true
    }, parseEvent:function (a) {
        var c = null;
        try {
            c = GS.Models.FeedEvent.wrap(a)
        } catch (h) {
            console.warn("Feed Parse Error: ", a.activityName, a, h)
        }
        return c
    }, parseUser:function (a, c) {
        var h = [], g;
        for (var k in a)if (a.hasOwnProperty(k))if (g = parseEvent(k)) {
            g.user = c;
            h.push(g)
        }
        return h
    }, getEvents:function (a) {
        a = _.orEqual(a, 0);
        var c = this.events.concat();
        if (a) {
            c = [];
            for (var h = 0; h < this.events.length; h++)if (this.events[h].timestamp > a)c.push(this.events[h]); else break
        }
        return c
    },
        getSongGroups:function (a, c) {
            var h = [], g, k, m, n, o, r = 0, A = {};
            a = _.orEqual(a, 0);
            c = _.orEqual(c, GS.Models.Feed.QUEUE_ADD_LIMIT);
            var w = this.getEvents(a);
            for (m = 0; m < w.length; m++) {
                o = w[m];
                g = o.getSongs();
                if (r <= c && g.length && GS.Models.FeedEvent.ListenTypes[o.activityName]) {
                    k = [];
                    for (n = 0; n < g.length; n++)if (!A[g[n].SongID]) {
                        k.push(g[n].SongID);
                        A[g[n].SongID] = true;
                        r++
                    }
                    h.push({songIDs:k, context:o.getDetailsForFeeds()});
                    if (r > c)break
                }
            }
            return h
        }, play:function (a, c, h, g, k) {
            this.isComplete ? this.playSongs(a, c, h, g, k) : this.getFeed(this.callback(function () {
                this.isComplete &&
                this.playSongs(a, c, h, g, k)
            }))
        }, playSongs:function (a, c, h, g, k) {
            if (this.isComplete) {
                a = _.orEqual(a, -1);
                c = _.orEqual(c, false);
                h = _.orEqual(h, 0);
                g = _.orEqual(g, GS.Models.Feed.QUEUE_ADD_LIMIT);
                k = _.orEqual(k, false);
                for (var m = this.getSongGroups(h, g), n = this.getDetailsForFeeds(), o = m.length - 1; o >= 0; o--) {
                    h = m[o];
                    g = h.songIDs.reverse();
                    GS.player.addSongsToQueueAt(g, a, c, b.extend({event:h.context}, n), k && o === 0);
                    a = a == GS.player.INDEX_REPLACE ? GS.player.INDEX_DEFAULT : a;
                    if (g.length)c = false
                }
            }
        }, getDetailsForFeeds:function () {
            return{user:this.user ?
                    this.user.getDetailsForFeeds() : null, type:GS.player.PLAY_CONTEXT_FEED, feedType:this.type}
        }})
})(jQuery);
(function (b) {
    GS.Models.Base.extend("GS.Models.FeedEvent", {id:"eventID", cache:{}, ListenTypes:{}, PlaylistTypes:{}, SongTypes:{}, AlbumTypes:{}, ArtistTypes:{}, init:function () {
        GS.Models.FeedEvent.setTypes();
        b.subscribe("gs.locale.ready", this.callback(this.updateDaysOfWeek));
        b.subscribe("gs.locale.update", this.callback(this.updateDaysOfWeek));
        this.updateDaysOfWeek()
    }, setTypes:function () {
        var a = {};
        a.songPlayed = true;
        a.obsession = true;
        a.playlistPlayed = true;
        a.artistPlayed = true;
        a.albumPlayed = true;
        var c = {};
        c.songPlayed =
                true;
        c.obsession = true;
        c.playlistPlayed = true;
        c.artistPlayed = true;
        c.albumPlayed = true;
        var h = {};
        h.playlistPlayed = true;
        var g = {};
        g.albumPlayed = true;
        var k = {};
        k.artistPlayed = true;
        GS.Models.FeedEvent.ListenTypes = a;
        GS.Models.FeedEvent.SongTypes = c;
        GS.Models.FeedEvent.PlaylistTypes = h;
        GS.Models.FeedEvent.AlbumTypes = g;
        GS.Models.FeedEvent.ArtistTypes = k
    }, songPlayed:function (a) {
        var c = {};
        c.user = GS.Models.FeedEvent.getUserLink(a.user);
        c.song = ['<a class="songLink">', _.cleanText(a.data.songs[0].songName), "</a>"].join("");
        c.artist = ['<a href="', _.cleanUrl(a.data.songs[0].artistName, a.data.songs[0].artistID, "artist"), '">', _.cleanText(a.data.songs[0].artistName), "</a>"].join("");
        c.album = ['<a href="', _.cleanUrl(a.data.songs[0].albumName, a.data.songs[0].albumID, "album"), '">', _.cleanText(a.data.songs[0].albumName), "</a>"].join("");
        c.numSongs = a.data.songs.length;
        if (c.numSongs > 2) {
            a.dataKey = "FEED_LISTEN_SONGS_MANY";
            c.numSongs--
        } else if (c.numSongs == 2) {
            c.song2 = ['<a class="songLink" data-song-index="1">', _.cleanText(a.data.songs[1].songName),
                "</a>"].join("");
            a.dataKey = "FEED_LISTEN_SONGS_TWO"
        } else a.dataKey = "FEED_LISTEN_SONG";
        return new GS.Models.DataString(b.localize.getString(a.dataKey), c)
    }, favoriteSong:function (a) {
        var c = {};
        c.user = GS.Models.FeedEvent.getUserLink(a.user);
        c.song = ['<a class="songLink">', _.cleanText(a.data.songs[0].songName), "</a>"].join("");
        c.artist = ['<a href="', _.cleanUrl(a.data.songs[0].artistName, a.data.songs[0].artistID, "artist"), '">', _.cleanText(a.data.songs[0].artistName), "</a>"].join("");
        c.album = ['<a href="', _.cleanUrl(a.data.songs[0].albumName,
                a.data.songs[0].albumID, "album"), '">', _.cleanText(a.data.songs[0].albumName), "</a>"].join("");
        c.numSongs = a.data.songs.length;
        if (c.numSongs > 2) {
            a.dataKey = "FEED_FAVORITE_SONGS_MANY";
            c.numSongs--
        } else if (c.numSongs == 2) {
            c.song2 = ['<a class="songLink" data-song-index="1">', _.cleanText(a.data.songs[1].songName), "</a>"].join("");
            a.dataKey = "FEED_FAVORITE_SONGS_TWO"
        } else a.dataKey = "FEED_FAVORITE_SONG";
        return new GS.Models.DataString(b.localize.getString(a.dataKey), c)
    }, obsession:function (a) {
        var c = {};
        c.user = GS.Models.FeedEvent.getUserLink(a.user);
        c.song = ['<a class="songLink">', _.cleanText(a.data.songs[0].songName), "</a>"].join("");
        c.artist = ['<a href="', _.cleanUrl(a.data.songs[0].artistName, a.data.songs[0].artistID, "artist"), '">', _.cleanText(a.data.songs[0].artistName), "</a>"].join("");
        c.album = ['<a href="', _.cleanUrl(a.data.songs[0].albumName, a.data.songs[0].albumID, "album"), '">', _.cleanText(a.data.songs[0].albumName), "</a>"].join("");
        c.numSongs = a.data.songs.length;
        if (c.numSongs > 2) {
            a.dataKey = "FEED_SONG_OBSESSION_MANY";
            c.numSongs--
        } else if (c.numSongs ==
                2) {
            c.song2 = ['<a class="songLink" data-song-index="1">', _.cleanText(a.data.songs[1].songName), "</a>"].join("");
            a.dataKey = "FEED_SONG_OBSESSION_TWO"
        } else a.dataKey = a.data.songs[0].timestamp.length >= 11 ? "FEED_SONG_OBSESSION_COWBELL" : a.data.songs[0].timestamp.length >= 7 ? "FEED_SONG_OBSESSION_BLEEDING" : a.data.songs[0].timestamp.length >= 5 ? "FEED_SONG_OBSESSION_ADDICT" : "FEED_SONG_OBSESSION";
        return new GS.Models.DataString(b.localize.getString(a.dataKey), c)
    }, addSongsToLibrary:function (a) {
        var c = {};
        c.user = GS.Models.FeedEvent.getUserLink(a.user);
        c.song = ['<a class="songLink">', _.cleanText(a.data.songs[0].songName), "</a>"].join("");
        c.artist = ['<a href="', _.cleanUrl(a.data.songs[0].artistName, a.data.songs[0].artistID, "artist"), '">', _.cleanText(a.data.songs[0].artistName), "</a>"].join("");
        c.album = ['<a href="', _.cleanUrl(a.data.songs[0].albumName, a.data.songs[0].albumID, "album"), '">', _.cleanText(a.data.songs[0].albumName), "</a>"].join("");
        c.numSongs = a.data.songs.length;
        if (c.numSongs > 2) {
            a.dataKey = "FEED_ADD_LIBRARY_SONGS_MANY";
            c.numSongs--
        } else if (c.numSongs ==
                2) {
            c.song2 = ['<a class="songLink" data-song-index="1">', _.cleanText(a.data.songs[1].songName), "</a>"].join("");
            a.dataKey = a.user.Sex == "M" ? "FEED_ADD_LIBRARY_SONGS_TWO_MALE" : a.user.Sex == "F" ? "FEED_ADD_LIBRARY_SONGS_TWO_FEMALE" : "FEED_ADD_LIBRARY_SONGS_TWO_ALIEN"
        } else a.dataKey = a.user.Sex == "M" ? "FEED_ADD_LIBRARY_SONG_MALE" : a.user.Sex == "F" ? "FEED_ADD_LIBRARY_SONG_FEMALE" : "FEED_ADD_LIBRARY_SONG_ALIEN";
        return new GS.Models.DataString(b.localize.getString(a.dataKey), c)
    }, createPlaylist:function (a) {
        var c = {};
        a.data.playlists[0].owningName =
                a.user.Name;
        a.data.playlists[0].owningID = a.user.UserID;
        c.user = GS.Models.FeedEvent.getUserLink(a.user);
        c.playlist = ['<a href="', _.cleanUrl(a.data.playlists[0].playlistName, a.data.playlists[0].playlistID, "playlist"), '">', _.cleanText(a.data.playlists[0].playlistName), "</a>"].join("");
        c.numSongs = _.isArray(a.data.songIDs) ? a.data.songIDs.length : 0;
        a.dataKey = c.numSongs && c.numSongs > 1 ? "FEED_PLAYLIST_CREATED" : "FEED_PLAYLIST_CREATED_NO_SONGS";
        return new GS.Models.DataString(b.localize.getString(a.dataKey), c)
    },
        overwritePlaylist:function (a) {
            var c = {};
            a.data.playlists[0].owningName = a.user.Name;
            a.data.playlists[0].owningID = a.user.UserID;
            c.user = GS.Models.FeedEvent.getUserLink(a.user);
            c.playlist = ['<a href="', _.cleanUrl(a.data.playlists[0].playlistName, a.data.playlists[0].playlistID, "playlist"), '">', _.cleanText(a.data.playlists[0].playlistName), "</a>"].join("");
            c.numSongs = _.isArray(a.data.songIDs) ? a.data.songIDs.length : 0;
            a.dataKey = c.numSongs && c.numSongs > 1 ? "FEED_PLAYLIST_EDITED" : "FEED_PLAYLIST_EDITED_NO_SONGS";
            return new GS.Models.DataString(b.localize.getString(a.dataKey), c)
        }, subscribePlaylist:function (a) {
            var c = {}, h = a.data.playlists[0].owningName, g = a.data.playlists[0].subscribingName;
            c.user = GS.Models.FeedEvent.getUserLink(a.user);
            c.playlist = ['<a href="', _.cleanUrl(a.data.playlists[0].playlistName, a.data.playlists[0].playlistID, "playlist"), '">', _.cleanText(a.data.playlists[0].playlistName), "</a>"].join("");
            c.author = ['<a href="', _.cleanUrl(h, a.data.playlists[0].owningUserID, "user"), '">', h, "</a>"].join("");
            c.fan = ['<a href="', _.cleanUrl(g, a.userID, "user"), '">', g, "</a>"].join("");
            a.dataKey = "FEED_PLAYLIST_FOLLOWED";
            return new GS.Models.DataString(b.localize.getString(a.dataKey), c)
        }, playlistPlayed:function (a) {
            var c = {};
            c.user = GS.Models.FeedEvent.getUserLink(a.user);
            c.playlist = ['<a href="', _.cleanUrl(a.data.playlists[0].playlistName, a.data.playlists[0].playlistID, "playlist"), '">', _.cleanText(a.data.playlists[0].playlistName), "</a>"].join("");
            a.dataKey = "FEED_LISTEN_PLAYLIST";
            return new GS.Models.DataString(b.localize.getString(a.dataKey),
                    c)
        }, favoriteArtist:function (a) {
            var c = {};
            c.user = GS.Models.FeedEvent.getUserLink(a.user);
            c.artist = ['<a href="', _.cleanUrl(a.data.artists[0].artistName, a.data.artists[0].artistID, "artist"), '">', _.cleanText(a.data.artists[0].artistName), "</a>"].join("");
            c.numArtists = a.data.artists.length;
            if (c.numArtists > 2) {
                a.dataKey = "FEED_FAVORITE_ARTIST_MANY";
                c.artist2 = ['<a href="', _.cleanUrl(a.data.artists[1].artistName, a.data.artists[1].artistID, "artist"), '">', _.cleanText(a.data.artists[1].artistName), "</a>"].join("");
                c.numArtists -= 2
            } else if (c.numArtists == 2) {
                a.dataKey = "FEED_FAVORITE_ARTIST_TWO";
                c.artist2 = ['<a href="', _.cleanUrl(a.data.artists[1].artistName, a.data.artists[1].artistID, "artist"), '">', _.cleanText(a.data.artists[1].artistName), "</a>"].join("")
            } else a.dataKey = "FEED_FAVORITE_ARTIST_ONE";
            return null
        }, addArtistToLibrary:function (a) {
            var c = {};
            c.user = GS.Models.FeedEvent.getUserLink(a.user);
            c.numSongs = a.data.songs.length - 1;
            c.song = ['<a class="songLink">', _.cleanText(a.data.songs[0].songName), "</a>"].join("");
            c.artist = ['<a href="', _.cleanUrl(a.data.songs[0].artistName, a.data.songs[0].artistID, "artist"), '">', _.cleanText(a.data.songs[0].artistName), "</a>"].join("");
            a.dataKey = "FEED_ADD_LIBRARY_ARTIST";
            return new GS.Models.DataString(b.localize.getString(a.dataKey), c)
        }, artistPlayed:function (a) {
            var c = {};
            c.user = GS.Models.FeedEvent.getUserLink(a.user);
            c.numSongs = a.data.songs.length;
            c.song = ['<a class="songLink">', _.cleanText(a.data.songs[0].songName), "</a>"].join("");
            c.artist = ['<a href="', _.cleanUrl(a.data.songs[0].artistName,
                    a.data.songs[0].artistID, "artist"), '">', _.cleanText(a.data.songs[0].artistName), "</a>"].join("");
            a.dataKey = "FEED_LISTEN_ARTIST";
            return new GS.Models.DataString(b.localize.getString(a.dataKey), c)
        }, albumPlayed:function (a) {
            var c = {};
            c.user = GS.Models.FeedEvent.getUserLink(a.user);
            c.numSongs = a.data.songs.length;
            c.artist = ['<a href="', _.cleanUrl(a.data.songs[0].artistName, a.data.songs[0].artistID, "artist"), '">', _.cleanText(a.data.songs[0].artistName), "</a>"].join("");
            c.album = ['<a href="', _.cleanUrl(a.data.songs[0].albumName,
                    a.data.songs[0].albumID, "album"), '">', _.cleanText(a.data.songs[0].albumName), "</a>"].join("");
            a.dataKey = "FEED_LISTEN_ALBUM";
            return new GS.Models.DataString(b.localize.getString(a.dataKey), c)
        }, addAlbumToLibrary:function (a) {
            var c = {};
            c.user = GS.Models.FeedEvent.getUserLink(a.user);
            c.artist = ['<a href="', _.cleanUrl(a.data.songs[0].artistName, a.data.songs[0].artistID, "artist"), '">', _.cleanText(a.data.songs[0].artistName), "</a>"].join("");
            c.album = ['<a href="', _.cleanUrl(a.data.songs[0].albumName, a.data.songs[0].albumID,
                    "album"), '">', _.cleanText(a.data.songs[0].albumName), "</a>"].join("");
            c.numSongs = a.data.songs.length;
            a.dataKey = "FEED_ADD_LIBRARY_ALBUM";
            return new GS.Models.DataString(b.localize.getString(a.dataKey), c)
        }, favoriteUser:function (a) {
            var c = {};
            c.user = GS.Models.FeedEvent.getUserLink(a.user);
            c.followed = ['<a href="', a.getUrlByType("user", 0), '">', a.getMetaByType("user", 0), "</a>"].join("");
            c.numUsers = a.data.users.length;
            if (c.numUsers > 2) {
                a.dataKey = "FEED_FAVORITE_USER_MANY";
                c.numUsers--
            } else if (c.numUsers == 2) {
                a.dataKey =
                        "FEED_FAVORITE_USER_TWO";
                c.followed2 = ['<a href="', a.getUrlByType("user", 1), '">', a.getMetaByType("user", 1), "</a>"].join("")
            } else a.dataKey = "FEED_FAVORITE_USER_ONE";
            console.warn(a.dataKey, c);
            return new GS.Models.DataString(b.localize.getString(a.dataKey), c)
        }, share:function (a) {
            var c = {};
            if (a.data.playlists) {
                var h = a.data.playlists[0].owningName, g = a.data.playlists[0].subscribingName;
                c.user = GS.Models.FeedEvent.getUserLink(a.user);
                c.playlist = ['<a href="', _.cleanUrl(a.data.playlists[0].playlistName, a.data.playlists[0].playlistID,
                        "playlist"), '">', _.cleanText(a.data.playlists[0].playlistName), "</a>"].join("");
                c.author = ['<a href="', _.cleanUrl(h, a.data.playlists[0].userID, "user"), '">', h, "</a>"].join("");
                c.fan = ['<a href="', _.cleanUrl(g, a.userID, "user"), '">', g, "</a>"].join("");
                a.dataKey = "FEED_SHARE_PLAYLIST"
            } else {
                c.user = GS.Models.FeedEvent.getUserLink(a.user);
                c.song = ['<a class="songLink">', _.cleanText(a.data.songs[0].songName), "</a>"].join("");
                c.artist = ['<a href="', _.cleanUrl(a.data.songs[0].artistName, a.data.songs[0].artistID,
                        "artist"), '">', _.cleanText(a.data.songs[0].artistName), "</a>"].join("");
                c.album = ['<a href="', _.cleanUrl(a.data.songs[0].albumName, a.data.songs[0].albumID, "album"), '">', _.cleanText(a.data.songs[0].albumName), "</a>"].join("");
                c.numSongs = a.data.songs.length;
                if (c.numSongs > 2) {
                    a.dataKey = "FEED_SHARE_SONGS_MANY";
                    c.numSongs--
                } else if (c.numSongs == 2) {
                    c.song2 = ['<a class="songLink" data-song-index="1">', _.cleanText(a.data.songs[1].songName), "</a>"].join("");
                    a.dataKey = "FEED_SHARE_SONGS_TWO"
                } else a.dataKey = "FEED_SHARE_SONG"
            }
            return new GS.Models.DataString(b.localize.getString(a.dataKey),
                    c)
        }, broadcast:function (a) {
            var c = {}, h, g = false, k = a.people ? a.people.length : 0;
            c.user = GS.Models.FeedEvent.getUserLink(a.user);
            for (h = 0; h < k; h++)if (a.people[h].userID == GS.user.UserID) {
                g = true;
                break
            }
            if (a.data.playlists) {
                c.playlist = ['<a href="', _.cleanUrl(a.data.playlists[0].playlistName, a.data.playlists[0].playlistID, "playlist"), '">', _.cleanText(a.data.playlists[0].playlistName), "</a>"].join("");
                if (a.people && a.people.length)if (a.people.length > 2) {
                    c.person = ['<a href="', a.getUrlByType("taggedUser", 0), '">', a.getMetaByType("taggedUser",
                            0), "</a>"].join("");
                    c.numUsers = a.people.length - 1;
                    a.dataKey = g ? "FEED_BROADCAST_PLAYLIST_MANY_USERS_AND_YOU" : "FEED_BROADCAST_PLAYLIST_MANY_USERS"
                } else if (a.people.length == 2) {
                    c.person = ['<a href="', a.getUrlByType("taggedUser", 0), '">', a.getMetaByType("taggedUser", 0), "</a>"].join("");
                    c.person2 = ['<a href="', a.getUrlByType("taggedUser", 1), '">', a.getMetaByType("taggedUser", 1), "</a>"].join("");
                    a.dataKey = "FEED_BROADCAST_PLAYLIST_TWO_USERS"
                } else {
                    c.person = ['<a href="', a.getUrlByType("taggedUser", 0), '">', a.getMetaByType("taggedUser",
                            0), "</a>"].join("");
                    a.dataKey = "FEED_BROADCAST_PLAYLIST_ONE_USER"
                } else a.dataKey = "FEED_BROADCAST_PLAYLIST_NO_USERS"
            } else if (a.data.songs) {
                c.song = ['<a class="songLink">', _.cleanText(a.data.songs[0].songName), "</a>"].join("");
                c.artist = ['<a href="', _.cleanUrl(a.data.songs[0].artistName, a.data.songs[0].artistID, "artist"), '">', _.cleanText(a.data.songs[0].artistName), "</a>"].join("");
                c.album = ['<a href="', _.cleanUrl(a.data.songs[0].albumName, a.data.songs[0].albumID, "album"), '">', _.cleanText(a.data.songs[0].albumName),
                    "</a>"].join("");
                if (a.people && a.people.length)if (a.people.length > 2) {
                    c.person = ['<a href="', a.getUrlByType("taggedUser", 0), '">', a.getMetaByType("taggedUser", 0), "</a>"].join("");
                    c.numUsers = a.people.length - 1;
                    a.dataKey = g ? "FEED_BROADCAST_SONG_MANY_USERS_AND_YOU" : "FEED_BROADCAST_SONG_MANY_USERS"
                } else if (a.people.length == 2) {
                    c.person = ['<a href="', a.getUrlByType("taggedUser", 0), '">', a.getMetaByType("taggedUser", 0), "</a>"].join("");
                    c.person2 = ['<a href="', a.getUrlByType("taggedUser", 1), '">', a.getMetaByType("taggedUser",
                            1), "</a>"].join("");
                    a.dataKey = "FEED_BROADCAST_SONG_TWO_USERS"
                } else {
                    c.person = ['<a href="', a.getUrlByType("taggedUser", 0), '">', a.getMetaByType("taggedUser", 0), "</a>"].join("");
                    a.dataKey = "FEED_BROADCAST_SONG_ONE_USER"
                } else a.dataKey = "FEED_BROADCAST_SONG_NO_USERS"
            } else if (a.data.artists) {
                c.artist = ['<a href="', _.cleanUrl(a.data.artists[0].artistName, a.data.artists[0].artistID, "artist"), '">', _.cleanText(a.data.artists[0].artistName), "</a>"].join("");
                if (a.people && a.people.length)if (a.people.length > 2) {
                    c.person =
                            ['<a href="', a.getUrlByType("taggedUser", 0), '">', a.getMetaByType("taggedUser", 0), "</a>"].join("");
                    c.numUsers = a.people.length - 1;
                    a.dataKey = g ? "FEED_BROADCAST_ARTIST_MANY_USERS_AND_YOU" : "FEED_BROADCAST_ARTIST_MANY_USERS"
                } else if (a.people.length == 2) {
                    c.person = ['<a href="', a.getUrlByType("taggedUser", 0), '">', a.getMetaByType("taggedUser", 0), "</a>"].join("");
                    c.person2 = ['<a href="', a.getUrlByType("taggedUser", 1), '">', a.getMetaByType("taggedUser", 1), "</a>"].join("");
                    a.dataKey = "FEED_BROADCAST_ARTIST_TWO_USERS"
                } else {
                    c.person =
                            ['<a href="', a.getUrlByType("taggedUser", 0), '">', a.getMetaByType("taggedUser", 0), "</a>"].join("");
                    a.dataKey = "FEED_BROADCAST_ARTIST_ONE_USER"
                } else a.dataKey = "FEED_BROADCAST_ARTIST_NO_USERS"
            } else if (a.data.albums) {
                c.artist = ['<a href="', _.cleanUrl(a.data.albums[0].artistName, a.data.albums[0].artistID, "artist"), '">', _.cleanText(a.data.albums[0].artistName), "</a>"].join("");
                c.album = ['<a href="', _.cleanUrl(a.data.albums[0].albumName, a.data.albums[0].albumID, "album"), '">', _.cleanText(a.data.albums[0].albumName),
                    "</a>"].join("");
                if (a.people && a.people.length)if (a.people.length > 2) {
                    c.person = ['<a href="', a.getUrlByType("taggedUser", 0), '">', a.getMetaByType("taggedUser", 0), "</a>"].join("");
                    c.numUsers = a.people.length - 1;
                    a.dataKey = g ? "FEED_BROADCAST_ALBUM_MANY_USERS_AND_YOU" : "FEED_BROADCAST_ALBUM_MANY_USERS"
                } else if (a.people.length == 2) {
                    c.person = ['<a href="', a.getUrlByType("taggedUser", 0), '">', a.getMetaByType("taggedUser", 0), "</a>"].join("");
                    c.person2 = ['<a href="', a.getUrlByType("taggedUser", 1), '">', a.getMetaByType("taggedUser",
                            1), "</a>"].join("");
                    a.dataKey = "FEED_BROADCAST_ALBUM_TWO_USERS"
                } else {
                    c.person = ['<a href="', a.getUrlByType("taggedUser", 0), '">', a.getMetaByType("taggedUser", 0), "</a>"].join("");
                    a.dataKey = "FEED_BROADCAST_ALBUM_ONE_USER"
                } else a.dataKey = "FEED_BROADCAST_ALBUM_NO_USERS"
            }
            return new GS.Models.DataString(b.localize.getString(a.dataKey), c)
        }, usersAddArtistToLibrary:function (a) {
            var c = {};
            c.user = GS.Models.FeedEvent.getUserLink(a.user);
            c.artist = ['<a href="', _.cleanUrl(a.data.songs[0].artistName, a.data.songs[0].artistID,
                    "artist"), '">', _.cleanText(a.data.songs[0].artistName), "</a>"].join("");
            a.dataKey = a.user.Sex == "M" ? "FEED_USERS_ADD_LIBRARY_ARTIST_MALE" : a.user.Sex == "F" ? "FEED_USERS_ADD_LIBRARY_ARTIST_FEMALE" : "FEED_USERS_ADD_LIBRARY_ARTIST_ALIEN";
            return new GS.Models.DataString(b.localize.getString(a.dataKey), c)
        }, usersAddAlbumToLibrary:function (a) {
            var c = {};
            c.user = GS.Models.FeedEvent.getUserLink(a.user);
            c.artist = ['<a href="', _.cleanUrl(a.data.albums[0].artistName, a.data.albums[0].artistID, "artist"), '">', _.cleanText(a.data.albums[0].artistName),
                "</a>"].join("");
            c.album = ['<a href="', _.cleanUrl(a.data.albums[0].albumName, a.data.albums[0].albumID, "album"), '">', _.cleanText(a.data.albums[0].albumName), "</a>"].join("");
            c.numAlbums = a.data.albums.length;
            a.dataKey = a.user.Sex == "M" ? "FEED_USERS_ADD_LIBRARY_ALBUM_MALE" : a.user.Sex == "F" ? "FEED_USERS_ADD_LIBRARY_ALBUM_FEMALE" : "FEED_USERS_ADD_LIBRARY_ALBUM_ALIEN";
            return new GS.Models.DataString(b.localize.getString(a.dataKey), c)
        }, comments:function (a) {
            var c = {}, h = GS.Models.User.getOneFromCache(a.userID);
            c.user =
                    GS.Models.FeedEvent.getUserLink(a.user);
            c.event = '<a href="' + h.toUrl("event/" + a.eventID) + '">event</a>';
            console.warn(a);
            a.dataKey = "FEED_USER_COMMENT_NOTICE";
            return new GS.Models.DataString(b.localize.getString(a.dataKey), c)
        }, getUserLink:function (a) {
            return['<a href="', a.toUrl(), '">', a.Name.length ? a.Name : a.FName, "</a>"].join("")
        }, wrapUsers:function (a) {
            for (var c = [], h, g = 0; g < a.length; g++) {
                h = a[g];
                c.push(GS.Models.User.wrap({UserID:h.userID, displayName:h.displayName, Picture:h.userPicture}))
            }
            return c
        }, updateDaysOfWeek:function () {
            var a =
                    b.localize.getString("WEEK_DAYS");
            if (a && a.length)this.daysOfWeek = a.split(",")
        }, getEvent:function (a, c, h) {
            var g = this.getOneFromCache(a);
            if (g)b.isFunction(c) && c(g); else GS.service.getUserFeedEvent(a, this.callback(["wrap", c]), h)
        }}, {eventID:null, activityName:null, activity:0, data:null, timestamp:null, userID:0, user:null, date:null, data:null, dataString:null, dataKey:null, users:null, validate:function () {
        return event.userID && event.data
    }, init:function (a) {
        this._super(a);
        if (_.defined(a.userIDFrom)) {
            this.user = GS.Models.User.getOneFromCache(a.userIDFrom);
            if (!this.user && a.displayName)this.user = GS.Models.User.wrap({UserID:a.userIDFrom, displayName:a.displayName, Picture:a.userPicture}, false); else if (!this.user)throw"no_user";
        } else this.user = GS.Models.User.getOneFromCache(a.userID);
        if (!this.user && a.userID && a.userID == GS.user.UserID)this.user = GS.user; else if (!this.user && a.data.users && a.data.users.length) {
            this.users = GS.Models.FeedEvent.wrapUsers(a.data.users);
            this.user = this.users[0]
        } else if (!this.user && a.displayName)this.user = GS.Models.User.wrap({UserID:a.userID,
            displayName:a.displayName, Picture:a.userPicture}, false);
        this.date = new Date(a.timestamp * 1E3);
        this.dataString = GS.Models.FeedEvent[a.activityName] ? GS.Models.FeedEvent[a.activityName](this) : null;
        if (!this.dataString || !this.user)throw"no_dataString";
    }, toHTML:function () {
        return this.dataString ? this.dataString.render() : ""
    }, playSongs:function (a, c) {
        c = _.orEqual(c, false);
        if (this.data.songs && this.data.songs.length) {
            var h = [], g = new GS.Models.PlayContext(GS.player.PLAY_CONTEXT_FEED, this);
            GS.Models.Song.wrapCollection(this.data.songs);
            for (var k in this.data.songs)this.data.songs.hasOwnProperty(k) && h.push(this.data.songs[k].songID);
            GS.player.addSongsToQueueAt(h, a, c, g)
        } else this.data.playlists && this.data.playlists.playlistID && GS.Models.Playlist.getPlaylist(this.data.playlists.playlistID, this.callback("playPlaylist", {index:a, playOnAdd:c}), null, false)
    }, getSongs:function (a) {
        var c = this.data.songs && this.data.songs.length ? GS.Models.Song.wrapCollection(this.data.songs) : [];
        return a ? c.reverse() : c
    }, getSongsWithArt:function (a) {
        a = _.orEqual(a,
                7);
        var c = [], h = {};
        if (this.data.songs && this.data.songs.length)for (var g = 0; g < this.data.songs.length; g++) {
            if (this.data.songs[g].artFilename && !h[this.data.songs[g].artFilename]) {
                c.push(g);
                h[this.data.songs[g].artFilename] = true
            }
            if (c.length == a)break
        }
        return c
    }, getUrlByType:function (a, c) {
        c = _.orEqual(c, 0);
        try {
            switch (a) {
                case "album":
                    if (this.data && this.data.songs)return _.cleanUrl(this.data.songs[c].albumName, this.data.songs[c].albumID, "album"); else if (this.data && this.data.albums)return _.cleanUrl(this.data.albums[c].albumName,
                            this.data.albums[c].albumID, "album");
                    break;
                case "artist":
                    if (this.data && this.data.songs)return _.cleanUrl(this.data.songs[c].artistName, this.data.songs[c].artistID, "artist"); else if (this.data && this.data.artists)return _.cleanUrl(this.data.artists[c].artistName, this.data.artists[c].artistID, "artist"); else if (this.data && this.data.albums)return _.cleanUrl(this.data.albums[c].artistName, this.data.albums[c].artistID, "artist");
                    break;
                case "playlist":
                    if (this.data && this.data.playlists)return _.cleanUrl(this.data.playlists[c].playlistName,
                            this.data.playlists[c].playlistID, "playlist");
                    break;
                case "playlistAuthor":
                    if (this.data && this.data.playlists)return _.cleanUrl(this.data.playlists[c].owningName, this.data.playlists[c].owningUserID, "user");
                    break;
                case "user":
                    if (this.data && this.data.users)if (this.data.users[c].userName)return _.cleanUrl(this.data.users[c].userName, this.data.users[c].userID, "user"); else if (this.data.users[c].displayName)return _.cleanUrl(this.data.users[c].displayName, this.data.users[c].userID, "user");
                    break;
                case "taggedUser":
                    if (this.data &&
                            this.people)return _.cleanUrl(this.people[c].userName, this.people[c].userID, "user");
                    break;
                default:
                    return null
            }
        } catch (h) {
            return null
        }
    }, getMetaByType:function (a, c) {
        c = _.orEqual(c, 0);
        try {
            switch (a) {
                case "song":
                    return _.cleanText(this.data.songs[c].songName);
                case "album":
                    if (this.data.songs && this.data.songs[c])return _.cleanText(this.data.songs[c].albumName); else if (this.data.albums && this.data.albums[c])return _.cleanText(this.data.albums[c].albumName);
                    break;
                case "artist":
                    if (this.data.songs)return _.cleanText(this.data.songs[c].artistName);
                    else if (this.data.artists)return _.cleanText(this.data.artists[c].artistName); else if (this.data.albums)return _.cleanText(this.data.albums[c].artistName);
                    break;
                case "playlist":
                    return _.cleanText(this.data.playlists[c].playlistName);
                case "playlistAuthor":
                    return _.cleanText(this.data.playlists[c].owningName);
                case "user":
                    if (this.data.users[c].userName)return _.cleanText(this.data.users[c].userName); else if (this.data.users[c].displayName)return _.cleanText(this.data.users[c].displayName);
                    break;
                case "taggedUser":
                    return _.cleanText(this.people[c].userName)
            }
        } catch (h) {
            return null
        }
        return null
    },
        getImageURL:function (a, c, h) {
            var g = "", k = "";
            c = _.orEqual(c, 0);
            h = _.orEqual(h, 70);
            switch (a) {
                case "song":
                case "album":
                    k = this.data.songs && this.data.songs[c] && this.data.songs[c].artFilename ? _.cleanText(this.data.songs[c].artFilename) : this.data.albums && this.data.albums[c] && this.data.albums[c].artFilename ? _.cleanText(this.data.albums[c].artFilename) : "album.png";
                    g = GS.Models.Album.artPath + h + "_" + k;
                    break;
                case "artist":
                    k = this.data.songs && this.data.songs[c] && this.data.songs[c].artFilename ? _.cleanText(this.data.songs[c].artFilename) :
                            this.data.artists && this.data.artists[c] && this.data.artists[c].artFilename ? _.cleanText(this.data.artists[c].artFilename) : "artist.png";
                    g = GS.Models.Artist.artPath + h + "_" + k;
                    break;
                case "playlist":
                    if (this.data.playlists && this.data.playlists[c] && this.data.playlists[c].artFilename) {
                        k = _.cleanText(this.data.playlists[c].artFilename);
                        g = GS.Models.Playlist.artPath + h + "_" + k
                    } else {
                        k = "album.png";
                        g = GS.Models.Album.artPath + h + "_" + k
                    }
                    break;
                case "user":
                    k = this.data.users && this.data.users[c] && this.data.users[c].picture ? _.cleanText(this.data.users[c].picture) :
                            "user.png";
                    g = GS.Models.User.artPath + h + "_" + k;
                    break;
                case "taggedUser":
                    k = this.people && this.people[c] && this.people[c].picture ? _.cleanText(this.people[c].picture) : "user.png";
                    g = GS.Models.User.artPath + h + "_" + k;
                    break
            }
            return g
        }, playPlaylist:function (a, c) {
            c && c.PlaylistID && GS.player.playPlaylist(a, c)
        }, remove:function (a, c) {
            this.user.UserID == GS.user.UserID && GS.service.hideUserEvent(this.eventID, a, c)
        }, getDetailsForFeeds:function () {
            return{user:this.user.getDetailsForFeeds(), eventID:this.eventID, activityName:this.activityName}
        },
        canComment:function () {
            if (!GS.user.fanbase)GS.user.fanbase = GS.Models.Fanbase.wrap({objectID:GS.user.UserID, objectType:"user"});
            if (GS.user.UserID > 0 && (GS.user.UserID == this.user.UserID || GS.user.fanbase.userIDs.indexOf(this.user.UserID) != -1))return true;
            return false
        }, addComment:function (a, c, h) {
            GS.service.addEventComment(this.eventID, a, this.callback([this.addCommentSuccess, c]), h)
        }, addCommentSuccess:function (a) {
            if (!a || !a._id)return false;
            this.hasComments = true;
            if (!this.comments)this.comments = [];
            this.comments.push(a);
            return a
        }, removeComment:function (a) {
            for (var c = 0; c < this.comments.length; c++) {
                var h = this.comments[c];
                if (a == h._id && (GS.user.UserID == h.userID || GS.user.UserID == this.user.UserID)) {
                    GS.service.hideEventComment(a, this.eventID);
                    this.comments.splice(c, 1);
                    return
                }
            }
        }, toString:function () {
            return["Feed. type:", this.activityName, ", usname: ", this.user.UserName].join("")
        }})
})(jQuery);
(function () {
    GS.Models.Feed.extend("GS.Models.ProfileFeed", {}, {type:"profile", fetch:function (b) {
        this.user.UserID > 0 && GS.user.UserID == this.user.UserID ? GS.service.getProfileFeed(this.lastDocumentID, this.lastEventID, this.callback("parseFeed", {lastDocumentID:this.lastDocumentID, lastEventID:this.lastEventID, currentPage:this.currentPage, callback:b.callback, errback:b.errback}), this.callback("onError", b)) : GS.service.getUserProfileFeed(this.user.UserID, this.lastDocumentID, this.lastEventID, this.callback("parseFeed",
                {lastDocumentID:this.lastDocumentID, lastEventID:this.lastEventID, currentPage:this.currentPage, callback:b.callback, errback:b.errback}), this.callback("onError", b))
    }, parseFeed:function (b, a) {
        var c, h = [];
        if (_.isEmpty(a) || !a.events)return this.onError(b);
        if (!this.pages[b.currentPage]) {
            for (var g = 0; g < a.events.length; g++)if (a.events[g])if (c = this.parseEvent(a.events[g])) {
                h.push(c);
                this.cache[c.eventID] = c
            }
            this.events = this.events.concat(h);
            this.pages.push(h);
            this.currentPage++;
            this.lastDocumentID = a.lastDocumentID;
            this.lastEventID = a.lastEventID;
            this.isComplete = this.isLoaded = true;
            this.hasMore = a.count && this.currentPage < 10
        }
        b.callback && b.callback(this.pages[b.currentPage]);
        this.isComplete || this.fetch(b)
    }})
})(jQuery);
(function () {
    GS.Models.Feed.extend("GS.Models.CommunityFeed", {}, {type:"community", userIDs:[], fetch:function (b) {
        GS.user.UserID > 0 && GS.user.UserID == this.user.UserID ? GS.service.getCombinedFeed(this.userIDs, this.lastEventID, this.callback("parseFeed", {currentPage:this.currentPage, lastEventID:this.lastEventID, callback:b.callback, errback:b.errback}), this.callback("onError", b)) : GS.service.getUserCombinedFeed(this.user.UserID, this.userIDs, this.lastEventID, this.callback("parseFeed", {currentPage:this.currentPage,
            lastEventID:this.lastEventID, callback:b.callback, errback:b.errback}), this.callback("onError", b))
    }, parseFeed:function (b, a) {
        var c, h = [];
        b = _.orEqual(b, {});
        if (_.isEmpty(a) || !a.events)return this.onError(b);
        if (!this.pages[b.currentPage]) {
            for (var g = 0; g < a.events.length; g++)if (a.events[g])if (c = this.parseEvent(a.events[g])) {
                h.push(c);
                this.cache[c.eventID] = c
            }
            this.events = this.events.concat(h);
            this.pages.push(h);
            this.currentPage++;
            this.lastEventID = a.lastEventID;
            this.isLoaded = Boolean(this.events.length);
            this.isComplete =
                    true;
            if (this.events.length < 75 && a.count >= 25 && this.pages.length < GS.Models.Feed.PAGE_LIMIT)this.isComplete = false;
            this.hasMore = a.count && this.currentPage < 10
        }
        b.callback && b.callback(this.pages[b.currentPage]);
        this.isComplete || this.fetch(b)
    }})
})(jQuery);
(function () {
    GS.Models.Feed.extend("GS.Models.MentionsFeed", {}, {type:"mentions", fetch:function (b) {
        GS.user.UserID > 0 && GS.user.UserID == this.user.UserID && GS.service.getUserNotifications(this.callback("parseFeed", {currentPage:this.currentPage, callback:b.callback, errback:b.errback}), b.errback)
    }, parseFeed:function (b, a) {
        var c, h = [];
        b = _.orEqual(b, {});
        if (!this.pages[b.currentPage]) {
            for (var g = 0; g < a.length; g++)if (a[g])if (c = this.parseEvent(a[g])) {
                h.push(c);
                this.cache[c.eventID] = c
            }
            this.events = this.events.concat(h);
            this.pages.push(h);
            this.currentPage++;
            this.lastEventID = a.lastEventID;
            this.hasMore = Boolean(a.hasMore);
            this.isLoaded = !Boolean(a.hasMore) || this.events.length;
            this.isComplete = true
        }
        b.callback && b.callback(this.pages[b.currentPage]);
        this.isComplete || this.fetch(b)
    }})
})(jQuery);
(function () {
    GS.Models.Feed.extend("GS.Models.NotificationsFeed", {}, {type:"notifications", fetch:function (b) {
        GS.user.UserID > 0 && GS.user.UserID == this.user.UserID && GS.service.getUserNotifications(this.callback("parseFeed", {currentPage:this.currentPage, callback:b.callback, errback:b.errback}), b.errback)
    }, parseFeed:function (b, a) {
        var c, h = [];
        b = _.orEqual(b, {});
        if (!this.pages[b.currentPage]) {
            for (var g = 0; g < a.length; g++)if (a[g])if (c = this.parseEvent(a[g])) {
                h.push(c);
                this.cache[c.eventID] = c
            }
            this.events = this.events.concat(h);
            this.pages.push(h);
            this.currentPage++;
            this.lastEventID = a.lastEventID;
            this.hasMore = Boolean(a.hasMore);
            this.isLoaded = !Boolean(a.hasMore) || this.events.length;
            this.isComplete = true
        }
        b.callback && b.callback(this.pages[b.currentPage]);
        this.isComplete || this.fetch(b)
    }})
})(jQuery);
(function () {
    GS.Models.Feed.extend("GS.Models.ArtistFeed", {}, {type:"artist", artist:null, fetch:function (b) {
        GS.service.getArtistProfileFeed(this.artist.ArtistID, this.lastDocumentID, this.lastEventID, this.callback("parseFeed", {artistID:this.artist.ArtistID, lastDocumentID:this.lastDocumentID, lastEventID:this.lastEventID, currentPage:this.currentPage, callback:b.callback, errback:b.errback}), b.errback)
    }, parseFeed:function (b, a) {
        var c, h = [];
        b = _.orEqual(b, {});
        if (!this.pages[b.currentPage]) {
            for (var g = 0; g < a.events.length; g++)if (a.events[g])if (c =
                    this.parseEvent(a.events[g])) {
                h.push(c);
                this.cache[c.eventID] = c
            }
            this.events = this.events.concat(h);
            this.pages.push(h);
            this.currentPage++;
            this.lastDocumentID = a.lastDocumentID;
            this.lastEventID = a.lastEventID;
            this.hasMore = Boolean(a.hasMore);
            this.isLoaded = !Boolean(a.hasMore) || this.events.length;
            this.isComplete = true;
            this.events.length < 25 && a.count >= 25 && ++this.pages.length
        }
        b.callback && b.callback(this.pages[b.currentPage]);
        this.isComplete || this.fetch(b)
    }})
})(jQuery);
(function () {
    GS.Models.Feed.extend("GS.Models.RecentFeed", {interestingFeed:null, init:function () {
        this.interestingFeed = new GS.Models.RecentFeed({})
    }}, {type:"recent", fetch:function (b) {
        b = _.orEqual(b, {});
        b.limit = _.orEqual(b.limit, 50);
        GS.service.getInterestingEvents(b.limit, this.callback("parseFeed", {limit:b.limit, callback:b.callback, errback:b.errback, currentPage:this.currentPage}), b.errback)
    }, parseFeed:function (b, a) {
        var c = [], h;
        if (!this.pages[b.currentPage]) {
            for (var g = 0; g < a.length; g++)if (h = this.parseEvent(a[g])) {
                c.push(h);
                this.cache[h.eventID] = h
            }
            this.events = this.events.concat(c);
            this.pages.push(c);
            this.currentPage++;
            this.isComplete = this.isLoaded = true
        }
        b.callback && b.callback(this.pages[b.currentPage]);
        this.isComplete || this.fetch(b)
    }})
})(jQuery);
(function (b) {
    var a;
    GS.Models.Base.extend("GS.Models.Theme", {}, {themeID:null, version:"1.0", title:"Unknown", author:"Grooveshark", location:"default", premium:false, sponsored:false, sections:null, assetLocation:"", clickIDs:null, tracking:null, pageTracking:null, expandableTracking:null, artistNotifTracking:null, videoLBTracking:null, adSync:false, misc:null, videos:null, artistIDs:null, isFirstLoad:true, isFirstLoadPageheader:true, screensaver:false, ready:null, removeReady:null, onAuthChange:null, CSS:"css", TOP:"top",
        BOTTOM:"bottom", CENTER:"center", LEFT:"left", RIGHT:"right", AUTO:"auto", SCALEX:"scalex", SCALEY:"scaley", backgroundImageSize:null, init:function (c) {
            a = this;
            c && this._super(c);
            this.assetLocation = "/themes/" + c.location + "/assets/"
        }, bindAssets:function (c) {
            var h, g, k, m, n, o, r = 0, A;
            c = b(c);
            var w = c.attr("id");
            c.children().each(function () {
                var B = b(this);
                B.hasClass("flash") || B.click(a.callback(a.handleClick));
                if (B.hasClass("flash")) {
                    h = _.orEqual(B.attr("data-flash-wmode"), "opaque");
                    g = _.orEqual(B.attr("data-flash-width"),
                            "100%");
                    k = _.orEqual(B.attr("data-flash-height"), "100%");
                    m = _.orEqual(B.attr("data-flash-src"), null);
                    flashParams = _.orEqual(B.attr("data-flash-params"), "");
                    flashVisualizer = _.orEqual(B.attr("data-flash-visualizer"), null);
                    if (m && B.attr("id")) {
                        A = flashVisualizer ? "visualizerTheme" : w + "-flash-" + r++;
                        B.append('<div id="' + A + '"></div>');
                        swfobject.embedSWF(a.assetLocation + m + "?ver=" + a.version + "&themeID=" + a.themeID + "&currentTarget=#" + B.attr("id") + flashParams, A, g, k, "9.0.0", null, null, {wmode:h})
                    }
                } else if (B.hasClass("img"))if (o =
                        _.orEqual(B.attr("data-img-src"), null)) {
                    if (B.hasClass("scalable"))try {
                        a.backgroundImageSize = a.getBackgroundImageSize();
                        o = a.backgroundImageSize + o
                    } catch (t) {
                    }
                    n = b(new Image);
                    n.css({visibility:"hidden"}).bind("load", {section:c}, a.onImageLoad).attr("src", gsConfig.assetHost + a.assetLocation + o + "?ver=" + a.version).appendTo(B)
                }
            })
        }, onImageLoad:function (c) {
            var h = b(this);
            c = c.data.section;
            var g = h.is("[display=none]") || c.is("[display=none]");
            h.parent().andSelf().show();
            var k = !c.is(":visible");
            c.show();
            var m = h[0].width,
                    n = h[0].height;
            g && h.parent().andSelf().hide();
            h.css({visibility:"visible"}).attr({"data-img-width":m, "data-img-height":n});
            k && c.hide();
            a.position(c)
        }, position:function (c) {
            var h = GS.page.getActiveController();
            if (!(!h || h.Class.fullName !== "GS.Controllers.Page.HomeController")) {
                c = b(c);
                var g, k, m, n, o, r, A, w, B, t, v, D, F, E, x, y, H, I, p = b(c).height(), q = b(c).width();
                c.children(".img").each(function () {
                    g = b(this);
                    k = g.find("img");
                    m = _.orEqual(parseInt(k.attr("data-img-width")), 0);
                    n = _.orEqual(parseInt(k.attr("data-img-height")),
                            0);
                    if (m && n) {
                        H = _.orEqual(g.attr("data-img-top"), 0);
                        I = _.orEqual(g.attr("data-img-bottom"), 0);
                        x = _.orEqual(g.attr("data-img-left"), 0);
                        y = _.orEqual(g.attr("data-img-right"), 0);
                        r = q - x - y;
                        o = p - H - I;
                        B = parseInt(_.orEqual(g.attr("data-img-min-width"), 0));
                        A = parseInt(_.orEqual(g.attr("data-img-min-height"), 0));
                        w = parseInt(_.orEqual(g.attr("data-img-max-height"), o));
                        maxWidth = parseInt(_.orEqual(g.attr("data-img-max-width"), r));
                        t = g.attr("data-img-proportional") === "false" ? false : true;
                        switch (g.attr("data-img-scale")) {
                            case "scalex":
                                k.width(Math.min(Math.max(B,
                                        r), maxWidth));
                                t ? k.height(Math.round(k.width() / m * n)) : k.height(Math.min(Math.max(A, Math.round(o), w)));
                                break;
                            case "scaley":
                                k.height(Math.min(Math.max(A, o), w));
                                t ? k.width(Math.round(k.height() / n * m)) : k.width(Math.min(Math.max(B, Math.round(r), maxWidth)));
                                break;
                            case "fit":
                                v = Math.min(r / m, o / n);
                                k.width(Math.round(v * m));
                                k.height(Math.round(v * n));
                                break;
                            case "auto":
                            default:
                                if (t) {
                                    v = Math.max(r / m, o / n);
                                    k.width(Math.round(v * m));
                                    k.height(Math.round(v * n))
                                } else {
                                    k.width(Math.round(r / m * m));
                                    k.height(Math.round(o / n * n))
                                }
                                break
                        }
                        D =
                                _.orEqual(g.attr("data-pos-x"), a.CENTER);
                        F = _.orEqual(g.attr("data-pos-y"), a.CENTER);
                        switch (D) {
                            case a.LEFT:
                                E = isNaN(x) ? x : x + "px";
                                k.css(a.LEFT, E);
                                break;
                            case a.RIGHT:
                                E = isNaN(y) ? y : y + "px";
                                k.css(a.RIGHT, E);
                                break;
                            case a.CENTER:
                                k.css(a.LEFT, Math.round((r - k.width()) / 2) + "px");
                                break
                        }
                        switch (F) {
                            case a.TOP:
                                E = isNaN(H) ? H : H + "px";
                                k.css(a.TOP, E);
                                break;
                            case a.BOTTOM:
                                E = isNaN(I) ? I : I + "px";
                                k.css(a.BOTTOM, E);
                                break;
                            case a.CENTER:
                                k.css(a.TOP, Math.round((o - k.height()) / 2) + "px");
                                break
                        }
                    }
                });
                if (a.backgroundImageSize) {
                    c = a.getBackgroundImageSize();
                    if (c != a.backgroundImageSize) {
                        a.backgroundImageSize = c;
                        GS.theme.renderSection("#theme_home")
                    }
                }
            }
        }, getBackgroundImageSize:function () {
            if (a.backgroundImageSize == "l_")return"l_";
            var c = b("#theme_home").width();
            b("#theme_home").height();
            if (c >= 1366)return"l_"; else if (c >= 1024)return"m_"; else if (a.backgroundImageSize != "m_")return"s_";
            return a.backgroundImageSize
        }, handleClick:function (c) {
            var h = b(c.currentTarget), g;
            GS.theme.setLastDFPAction();
            switch (h.attr("data-click-action")) {
                case "playSong":
                    (c = h.attr("data-song-id")) &&
                    b.publish("gs.song.play", {songID:c, playOnAdd:true, getFeedback:true});
                    break;
                case "playAlbum":
                    c = h.attr("data-album-id");
                    verified = h.attr("data-album-verified") ? Boolean(parseInt(h.attr("data-album-verified"))) : true;
                    g = h.attr("data-album-shuffle") == "true";
                    c && b.publish("gs.album.play", {albumID:c, playOnAdd:true, getFeedback:true, shuffle:g, verified:verified});
                    break;
                case "playPlaylist":
                    c = h.attr("data-playlist-id");
                    g = h.attr("data-playlist-shuffle") == "true";
                    var k = h.attr("data-radio-enabled") == "true";
                    c && b.publish("gs.playlist.play",
                            {playlistID:c, playOnAdd:true, getFeedback:true, shuffle:g});
                    k && setTimeout(function () {
                        GS.player.setAutoplay(true)
                    }, 5E3);
                    break;
                case "playStation":
                    c = h.attr("data-station-id");
                    g = h.attr("data-station-name");
                    if (c && g) {
                        GS.Models.Station.extraStations[c] = g;
                        b.publish("gs.station.play", {tagID:c, stationName:g})
                    }
                    break;
                case "playVideo":
                    c = new GS.Models.Video({src:h.attr("data-video-src"), swf:h.attr("data-video-swf"), title:_.orEqual(h.attr("data-video-title"), null), author:_.orEqual(h.attr("data-video-author"), null),
                        tracking:_.orEqual(h.attr("data-video-tracking"), null), originalWidth:_.orEqual(h.attr("data-video-originalWidth"), null), originalHeight:_.orEqual(h.attr("data-video-originalHeight"), null)});
                    c.swf.length && GS.getLightbox().open("video", {video:c});
                    break;
                case "playVideos":
                    if (a.videos && a.videos.length) {
                        c = _.defined(c.index) ? c.index % a.videos.length : 0;
                        GS.getLightbox().open("video", {video:a.videos[c], videos:a.videos, index:c})
                    }
                    break;
                case "promotion":
                    GS.getLightbox().open("promotion", {theme:a});
                    break;
                case "openLightbox":
                    (c =
                            h.attr("data-lightbox-name")) && GS.getLightbox().open(c);
                    break;
                case "expandable":
                    c = h.attr("data-expandable-id");
                    g = h.attr("data-expandable-height");
                    b(c).animate({height:g});
                    if (b.isArray(a.expandableTracking)) {
                        var m = (new Date).valueOf(), n = b("body"), o;
                        _.forEach(a.expandableTracking, function (r) {
                            r += r.indexOf("?") != -1 ? "&" + m : "?" + m;
                            o = new Image;
                            n.append(b(o).load(
                                    function (A) {
                                        b(A.target).remove()
                                    }).css("visibility", "hidden").attr("src", r))
                        })
                    }
                    break;
                case "collapse":
                    c = h.attr("data-expandable-id");
                    b(c).height(0);
                    break;
                default:
                    break
            }
            h.attr("data-click-id") && GS.service.logThemeOutboundLinkClick(a.themeID, h.attr("data-click-id"))
        }})
})(jQuery);
(function () {
    GS.Models.Base.extend("GS.Models.Event", {defaults:{EventID:0, City:"", EventName:"", StartTime:"", TicketsURL:"", VenueName:"", ArtistName:"", searchText:""}}, {EventID:0, City:"", EventName:"", StartTime:"", TicketsURL:"", VenueName:"", ArtistName:"", searchText:"", init:function (b) {
        this._super(b);
        this.TicketsURL.match("utm_source") || (this.TicketsURL += "?utm_source=1&utm_medium=partner");
        this.searchText = [b.ArtistName, b.EventName, b.City, b.VenueName].join(" ").toLowerCase();
        if (!this.ArtistName) {
            this.ArtistName =
                    this.EventName;
            b = this.ArtistName.lastIndexOf(" at ");
            if (b !== -1)this.ArtistName = this.ArtistName.substring(0, b)
        }
    }})
})(jQuery);
(function (b) {
    GS.Models.Base.extend("GS.Models.UserSettings", {NOTIF_EMAIL_USER_FOLLOW:1, NOTIF_EMAIL_INVITE_SIGNUP:2, NOTIF_EMAIL_PLAYLIST_SUBSCRIBE:16, NOTIF_EMAIL_NEW_FEATURE:4096, NOTIF_CIVICSCIENCE:32768, NOTIF_EMAIL_KINESIS:65536, RSS_LISTENS:2, RSS_FAVORITES:1}, {UserID:0, local:{restoreQueue:0, lowerQuality:0, noPrefetch:0, playPauseFade:0, crossfadeAmount:5E3, crossfadeEnabled:0, tooltips:0, persistShuffle:1, lastShuffle:0, persistPinboard:0}, FName:"", Email:"", Country:"", Zip:"", Sex:"", TSDOB:"", FeedsDisabled:0,
        NotificationEmailPrefs:0, emailNotifications:{userFollow:true, inviteSignup:true, playlistSubscribe:true, newFeature:true, civicScience:true, kinesis:true}, rssFeeds:{listens:true, favorites:true}, _hasLoadedSettings:false, init:function (a) {
            this._super(a);
            a = GS.store.get("player.restoreQueue");
            if (!_.defined(a)) {
                a = GS.store.get("player.restoreQueue" + this.UserID);
                if (_.defined(a))try {
                    GS.store.set("player.restoreQueue", a)
                } catch (c) {
                }
            }
            this.local.restoreQueue = _.orEqual(a, 0);
            this.local.lowerQuality = _.orEqual(GS.store.get("player.lowerQuality" +
                    this.UserID), 0);
            this.local.noPrefetch = _.orEqual(GS.store.get("player.noPrefetch" + this.UserID), 0);
            this.local.playPauseFade = _.orEqual(GS.store.get("player.playPauseFade" + this.UserID), 0);
            this.local.crossfadeAmount = _.orEqual(GS.store.get("player.crossfadeAmount" + this.UserID), 5E3);
            this.local.crossfadeEnabled = _.orEqual(GS.store.get("player.crossfadeEnabled" + this.UserID), 0);
            this.local.lastShuffle = _.orEqual(GS.store.get("player.lastShuffle" + this.UserID), 0);
            this.local.persistShuffle = _.orEqual(GS.store.get("player.persistShuffle" +
                    this.UserID), 1);
            this.local.tooltips = _.orEqual(GS.store.get("user.tooltips" + this.UserID), 0);
            this.local.themeFlags = _.orEqual(GS.store.get("user.themeFlags" + this.UserID), 0);
            this.local.persistPinboard = _.orEqual(GS.store.get("user.persistPinboard" + this.UserID), 0);
            if (this.UserID <= 0)this._hasLoadedSettings = true
        }, getUserSettings:function (a, c) {
            if (this.UserID)if (this._hasLoadedSettings)b.isFunction(a) && a(this); else GS.service.getUserSettings(this.callback(this._onSettingsSuccess, a), this.callback(this._onSettingsFailed,
                    c))
        }, _onSettingsSuccess:function (a, c) {
            if (c.hasOwnProperty("userInfo")) {
                b.extend(this, c.userInfo);
                if (this.hasOwnProperty("LName") && this.hasOwnProperty("FName")) {
                    var h = this.LName, g = this.FName;
                    this.LName = b.trim(this.LName);
                    this.FName = b.trim(this.FName);
                    if (this.LName) {
                        this.FName += " " + this.LName;
                        this.FName = b.trim(this.FName)
                    }
                    delete this.LName;
                    var k = {};
                    if (this.FName !== g)k.FName = this.FName;
                    if (h)k.LName = "";
                    _.isEmpty(k) || GS.service.changeUserInfoEx(k)
                }
                this.NotificationEmailPrefs = parseInt(this.NotificationEmailPrefs,
                        10);
                this.FeedsDisabled = parseInt(this.FeedsDisabled, 10);
                this._updateBitmaskProps()
            }
            this._hasLoadedSettings = true;
            b.isFunction(a) && a(this)
        }, _onSettingsFailed:function (a) {
            b.isFunction(a) && a(this)
        }, _updateBitmaskProps:function () {
            this.emailNotifications = {userFollow:!(this.NotificationEmailPrefs & GS.Models.UserSettings.NOTIF_EMAIL_USER_FOLLOW), inviteSignup:!(this.NotificationEmailPrefs & GS.Models.UserSettings.NOTIF_EMAIL_INVITE_SIGNUP), playlistSubscribe:!(this.NotificationEmailPrefs & GS.Models.UserSettings.NOTIF_EMAIL_PLAYLIST_SUBSCRIBE),
                newFeature:!(this.NotificationEmailPrefs & GS.Models.UserSettings.NOTIF_EMAIL_NEW_FEATURE), civicScience:!(this.NotificationEmailPrefs & GS.Models.UserSettings.NOTIF_CIVICSCIENCE), kinesis:!(this.NotificationEmailPrefs & GS.Models.UserSettings.NOTIF_EMAIL_KINESIS)};
            this.rssFeeds = {listens:!(this.FeedsDisabled & GS.Models.UserSettings.RSS_LISTENS), favorites:!(this.FeedsDisabled & GS.Models.UserSettings.RSS_FAVORITES)}
        }, updateProfile:function (a, c, h) {
            a = b.extend({}, {FName:this.FName, Email:this.Email, Country:this.Country,
                Zip:this.Zip, Sex:this.Sex, TSDOB:this.TSDOB, PageName:GS.user.PathName}, a);
            if (this.UserID < 1)this._saveProfileFailed({statusCode:-1}); else {
                a.PageName === GS.user.PathName && delete a.PageName;
                var g;
                for (g in a)a.hasOwnProperty(g) && a[g] == this[g] && delete a[g];
                if (_.isEmpty(a))this._saveProfileSuccess({statusCode:1}); else if ((a.hasOwnProperty("Email") || a.hasOwnProperty("PageName")) && !_.defined(a.password))GS.getLightbox().open("confirmPasswordProfile", {params:a, callback:c, errback:h}); else {
                    g = a.password;
                    delete a.password;
                    GS.service.changeUserInfoEx(a, g, this.callback(this._saveProfileSuccess, a, c, h), this.callback(this._saveProfileFailed, h))
                }
            }
        }, _saveProfileSuccess:function (a, c, h, g) {
            if (g && g.statusCode === 1) {
                b.extend(this, a);
                if (a.hasOwnProperty("PageName"))GS.user.PathName = a.PageName;
                b.isFunction(c) && c(g)
            } else this._saveProfileFailed(h, g)
        }, _saveProfileFailed:function (a, c) {
            b.isFunction(a) && a(c)
        }, changeNotificationSettings:function (a, c, h) {
            a = b.extend({}, this.emailNotifications, a);
            a = (a.userFollow ? 0 : GS.Models.UserSettings.NOTIF_EMAIL_USER_FOLLOW) |
                    (a.inviteSignup ? 0 : GS.Models.UserSettings.NOTIF_EMAIL_INVITE_SIGNUP) | (a.playlistSubscribe ? 0 : GS.Models.UserSettings.NOTIF_EMAIL_PLAYLIST_SUBSCRIBE) | (a.newFeature ? 0 : GS.Models.UserSettings.NOTIF_EMAIL_NEW_FEATURE) | (a.civicScience ? 0 : GS.Models.UserSettings.NOTIF_CIVICSCIENCE) | (a.kinesis ? 0 : GS.Models.UserSettings.NOTIF_EMAIL_KINESIS);
            if (this.UserID < 1)b.isFunction(h) && h("Not logged in"); else a === this.NotificationEmailPrefs ? this._notificationsSuccess(a, c, h, {statusCode:1}) : GS.service.changeNotificationSettings(a,
                    this.callback(this._notificationsSuccess, a, c, h), this.callback(this._notificationsFailed, h))
        }, _notificationsSuccess:function (a, c, h, g) {
            if (g && g.statusCode === 1) {
                this.NotificationEmailPrefs = a;
                this._updateBitmaskProps();
                b.isFunction(c) && c(g)
            } else this._notificationsFailed(h, g)
        }, _notificationsFailed:function (a, c) {
            b.isFunction(a) && a(c)
        }, changeRSSSettings:function (a, c, h) {
            a = b.extend({}, this.rssFeeds, a);
            a = (a.listens ? 0 : GS.Models.UserSettings.RSS_LISTENS) | (a.favorites ? 0 : GS.Models.UserSettings.RSS_FAVORITES);
            if (this.UserID <
                    1)b.isFunction(h) && h("Not logged in"); else a === this.FeedsDisabled ? this._rssSuccess(a, c, h, {statusCode:1}) : GS.service.changeFeedSettings(a, this.callback(this._notificationsSuccess, a, c, h), this.callback(this._notificationsFailed, h))
        }, _rssSuccess:function (a, c, h, g) {
            if (g && g.statusCode === 1) {
                this.FeedsDisabled = a;
                this._updateBitmaskProps();
                b.isFunction(c) && c(g)
            } else this._rssFailed(h, g)
        }, _rssFailed:function (a, c) {
            b.isFunction(a) && a(c)
        }, changeLocalSettings:function (a, c) {
            b.extend(this.local, a);
            GS.store.set("player.restoreQueue",
                    this.local.restoreQueue);
            GS.store.set("player.lowerQuality" + this.UserID, this.local.lowerQuality);
            GS.store.set("player.noPrefetch" + this.UserID, this.local.noPrefetch);
            GS.store.set("player.playPauseFade" + this.UserID, this.local.playPauseFade);
            GS.store.set("player.crossfadeAmount" + this.UserID, this.local.crossfadeAmount);
            GS.store.set("player.crossfadeEnabled" + this.UserID, this.local.crossfadeEnabled);
            GS.store.set("player.lastShuffle" + this.UserID, this.local.lastShuffle);
            GS.store.set("player.persistShuffle" +
                    this.UserID, this.local.persistShuffle);
            GS.store.set("user.tooltips" + this.UserID, this.local.tooltips);
            GS.store.set("user.themeFlags" + this.UserID, this.local.themeFlags);
            GS.store.set("user.persistPinboard" + this.UserID, this.local.persistPinboard);
            b.publish("gs.settings.local.update", this.local);
            b.isFunction(c) && c(this)
        }})
})(jQuery);
(function (b) {
    var a;
    GS.Models.Base.extend("GS.Models.Video", {id:"VideoID", artPath:"http://images.grooveshark.com/static/featured/", wrapYoutube:function (c, h) {
        if (!c.thumbnail)var g = c.Thumbnails && c.Thumbnails.length && c.Thumbnails[0] ? c.Thumbnails[0].url : "";
        h = h || c.Title || c.title || c.Video;
        return this.wrap(b.extend(true, {}, c, {title:h, duration:_.millisToMinutesSeconds((c.duration || c.Duration) * 1E3), type:"youtube", thumbnail:g, width:_.orEqual(c.Width, 480), height:_.orEqual(c.Height, 385), author:_.orEqual(c.Author,
                "")}))
    }, exploreItemRenderer:function (c) {
        var h = "" + ('<a class="name ellipsis">' + c.title + "</a>"), g = ['<img height="120" src="', c.getImageURL(120), '"/>'].join(""), k = ['<a href="', c.uri, '">', c.attributor, "</a>"].join("");
        k = b("<span></span>").localeDataString("BY_ARTIST", {artist:k});
        var m = c.set ? '<span class="group">in ' + c.set + "</span>" : "";
        return['<div  class="tooltip" data-tip-type="video" data-videoid="', c.VideoID, '" data-cachePrefix="', c.cachePrefix, '"><a class="videoImage insetBorder height120">', g, '<span class="videoPlayBtn" data-videoid="',
            c.VideoID, '" data-videogroup="' + c.set + '"></span></a>', '<div class="meta">', h, '<span class="by ellipsis">', k.render(), "</span>", m, "</div></div>"].join("")
    }, searchItemRenderer:function (c) {
        var h = "" + ('<a class="name ellipsis">' + c.title + "</a>");
        return['<a class="videoImage insetBorder height120">', ['<img height="90" src="', c.thumbnail, '"/>'].join(""), '<span class="videoPlayBtn" data-videoid="', c.VideoID, '" data-videogroup="' + c.set + '"></span></a>', '<div class="meta">', h, "</div></div>"].join("")
    }}, {title:"",
        author:"", type:"flash", swf:"/webincludes/flash/videoplayer.swf", src:"", thumb:null, thumbnail:null, thumbTracking:null, originalWidth:null, originalHeight:null, id:"", width:480, height:385, flashvars:{version:gsConfig.coreVersion}, params:{allowscriptaccess:"always", allowfullscreen:true}, attributes:{name:"videoPlayer"}, object:null, init:function (c) {
            a = this;
            if (c) {
                this._super(c);
                this.type = _.orEqual(c.embedType, c.type);
                this.embedType = _.orEqual(c.embedType, c.type);
                this.vimeoID = _.orEqual(c.vimeoID, c.VimeoID)
            }
        }, embed:function (c, h) {
            if (this.type == "flash") {
                h = _.orEqual(h, a.refreshWindow);
                object = swfobject.embedSWF(this.swf, c, this.width, this.height, "9.0.0", null, this.flashvars, this.params, this.attributes, h)
            } else if (this.type == "iframe")return GS.getVimeo().attachPlayer(this.vimeoID, this.width, this.height, c, h); else this.type == "youtube" && GS.getYoutube().attachPlayer(this.VideoID, this.width, this.height, c, h)
        }, refreshWindow:function () {
            setTimeout(function () {
                b(window).resize()
            }, 500)
        }, getImageURL:function (c) {
            c = _.orEqual(c, 70);
            if (this.Picture)return GS.Models.Video.artPath +
                    c + "_" + this.Picture;
            return GS.Models.Video.artPath + c + "_artist.png"
        }})
})(jQuery);
(function (b) {
    function a(g, k, m, n) {
        var o = {};
        o.method = g;
        o.format = "jsonp";
        o.data = JSON.stringify(k);
        b.ajax({contentType:"application/javascript", type:"GET", dataType:"jsonp", url:"https://surveys.grooveshark.com/panel/api.pro", data:o, error:function (r) {
            if (b.isFunction(n)) {
                var A = {};
                A.jqXHR = r;
                A.errno = o.errno;
                A.message = o.error;
                A.callback = m;
                console.warn("error.callback in success from data", A.callback);
                n(A)
            }
        }, success:function (r, A, w) {
            if (r.success)m(r); else if (b.isFunction(n)) {
                A = {};
                A.jqXHR = w;
                A.errno = r.errno;
                A.message =
                        r.error;
                A.callback = m;
                n(A)
            }
        }})
    }

    var c = false, h = false;
    GS.Models.Base.extend("GS.Models.Surveys", {panelID:9, numPointsForPlus:600, numPointsForAnywhere:900, init:function () {
                b.subscribe("gs.app.ready", function () {
                    c = true;
                    GS.Models.Surveys.askOptInCivicScience(6E5);
                    GS.Models.Surveys.setupAvailableNotif(4E5)
                });
                b.subscribe("gs.auth.update", function () {
                    GS.Models.Surveys.askOptInCivicScience(6E5);
                    GS.Models.Surveys.setupAvailableNotif(4E5)
                });
                b.subscribe("gs.state.active", function () {
                    GS.Models.Surveys.askOptInCivicScience(45E3);
                    GS.Models.Surveys.setupAvailableNotif(0)
                })
            }, askOptInCivicScience:function (g) {
                if (c) {
                    var k = window.location.hash.toString();
                    k = k.replace(/^#!\/|^#\/|^\/|^#!|^#/, "");
                    !GS.user.subscription.isPremium() && GS.isReady && GS.user.settings.getUserSettings(function (m) {
                        if (!(GS.user.isLoggedIn ? !m.emailNotifications.civicScience : GS.store.get("civicscience.optOut"))) {
                            var n = GS.store.get("civicscience.hasSeenInvitation" + GS.user.UserID);
                            if (!GS.getNotice().isSurveyNotifOpen())if (!n && !h)h = setTimeout(function () {
                                if (!GS.user.subscription.isPremium() &&
                                        k.indexOf("signup") !== 0 && GS.page.activePage && GS.page.activePage.type !== "surveys") {
                                    h = false;
                                    var o = GS.Models.Surveys._checkIfIdle();
                                    if (!(GS.user.isLoggedIn ? !m.emailNotifications.civicScience : GS.store.get("civicscience.optOut")) && !o) {
                                        o = {text:b.localize.getString("SURVEY_CIVICSCIENCE_OPTIN"), id:"optInCivicScience", name:"GS", type:"radio", answers:[
                                            {text:b.localize.getString("SURVEY_CIVICSCIENCE_OPTIN_SURE"), id:0},
                                            {text:b.localize.getString("SURVEY_CIVICSCIENCE_OPTIN_NO"), id:1}
                                        ]};
                                        GS.getNotice().displaySurveyOptIn({question:o,
                                            callback:function () {
                                                GS.Models.Surveys.setupCivicScience(0)
                                            }})
                                    }
                                }
                            }, g); else GS.Models.Surveys.setupCivicScience(g)
                        }
                    })
                }
            }, setupCivicScience:function (g) {
                var k = {};
                k.answeredList = [];
                k.answeredIndex = 0;
                k.session = new civicscience.iqapi.Session(473, false);
                k.askQuestion = function (m) {
                    if (m == null) {
                        var n = new Date;
                        if (!GS.store.get("civicscience.polltroll" + GS.user.UserID + n.getDay())) {
                            GS.getNotice().displaySurveyInvitation();
                            GS.store.set("civicscience.polltroll" + GS.user.UserID + n.getDay());
                            n = n.getDay() - 1;
                            if (n == 0)n = 7;
                            GS.store.remove("civicscience.polltroll" +
                                    GS.user.UserID + n)
                        }
                    } else {
                        n = {text:m.getText(), id:m.getId(), name:"CivicScience", type:"radio"};
                        m = m.getOptions();
                        var o = [];
                        _.forEach(m, function (r) {
                            o.push({text:r.getText(), id:r.getId(), option:r})
                        });
                        n.answers = o;
                        k.question = n;
                        GS.getNotice().displaySurveyQuestion({question:n})
                    }
                };
                k.handleCommit = function () {
                    k.handleResults()
                };
                k.handleResults = function () {
                    k.answeredList = k.session.getAnsweredQuestions();
                    var m = k.answeredList[k.answeredIndex];
                    if (k.question.id == 484 || k.question.id == 7078)if (GS.store) {
                        var n = GS.store.get("adhelper");
                        n || (n = {ageRange:null, gender:null});
                        var o = m.getSelectedOption();
                        if (k.question.id == 484)n.gender = o.getId(); else if (k.question.id == 7078)n.ageRange = o.getId();
                        GS.store.set("adhelper", n)
                    }
                    m.getResults(k.showResults);
                    GS.getGuts().logEvent("civicscience.questionAnswered", {userID:GS.user.UserID, questionNum:k.answeredIndex, timestamp:(new Date).getTime()});
                    k.answeredIndex++
                };
                k.showResults = function (m, n) {
                    if (n != null) {
                        var o = {};
                        o.questionText = m.getText();
                        o.numOfTotalResponses = n.getTotal();
                        var r = n.getCommittedOption(),
                                A = m.getOptions(), w = [];
                        r.id = r.getId();
                        _.forEach(A, function (v) {
                            var D = n.getCountForOption(v), F = 0;
                            if (o.numOfTotalResponses != 0) {
                                F = Math.round(100 * D / o.numOfTotalResponses);
                                w.push({text:v.getText(), id:v.getId(), percent:F, selected:r.id == v.getId() ? true : false})
                            }
                        });
                        o.answers = w;
                        A = w[0].percent;
                        var B = w[0];
                        r = w[0];
                        for (var t = 0; t < w.length - 1; t++) {
                            if (w[t + 1].selected)r = w[t + 1];
                            if (A < w[t + 1].percent) {
                                A = w[t + 1].percent;
                                B = w[t + 1]
                            }
                        }
                        o.selectedAnswer = r;
                        o.mostPopular = B;
                        GS.getNotice().displaySurveyResult({responses:o, callback:function () {
                            k.session.getNextUnansweredQuestion(k.askQuestion)
                        }})
                    }
                };
                if (GS.user.userPrivacyTokens && GS.user.userPrivacyTokens.authenticated) {
                    k.session.setExternalUserId(GS.user.userPrivacyTokens.authenticated);
                    GS.user.civicScience = k;
                    GS.Models.Surveys.initCivicScienceNotifTracking(k, g)
                }
            }, initCivicScienceNotifTracking:function (g, k) {
                var m = window.location.hash.toString();
                m = m.replace(/^#!\/|^#\/|^\/|^#!|^#/, "");
                h || (h = setTimeout(function () {
                    h = false;
                    if (!GS.user.subscription.isPremium() && m.indexOf("signup") !== 0 && GS.page.activePage && GS.page.activePage.type !== "surveys")(GS.user.isLoggedIn ?
                            !GS.user.settings.emailNotifications.civicScience : GS.store.get("civicscience.optOut")) || GS.Models.Surveys._checkIfIdle() || g.session.getNextUnansweredQuestion(g.askQuestion)
                }, k))
            }, changeCivicScienceSettings:function (g) {
                if (g)if (GS.user.isLoggedIn)GS.user.settings.changeNotificationSettings({civicScience:false}, function () {
                    b.publish("gs.notification", {type:"notice", message:b.localize.getString("SURVEY_CIVICSCIENCE_OPTOUT")});
                    GS.getGuts().logEvent("civicscience.optOut", {userID:GS.user.UserID, timestamp:(new Date).getTime()})
                });
                else {
                    GS.store.set("civicscience.optOut", true);
                    b.publish("gs.notification", {type:"notice", message:b.localize.getString("SURVEY_CIVICSCIENCE_OPTOUT")});
                    GS.getGuts().logEvent("civicscience.optOut", {userID:GS.user.UserID, timestamp:(new Date).getTime()})
                }
            }, _checkIfIdle:function () {
                var g = GS.getAd().lastActive.getTime(), k = (new Date).getTime(), m = GS.getAd().maxRotationTime;
                return k - g > m
            }, userHasKinesis:function () {
                return GS.user.Flags & GS.Models.User.FLAG_KINESIS
            }, changeKinesisFlag:function (g) {
                GS.user.Flags = g ?
                        GS.user.Flags ^ GS.Models.User.FLAG_KINESIS : GS.user.Flags | GS.Models.User.FLAG_KINESIS
            }, setupAvailableNotif:function (g) {
                c && GS.user.isLoggedIn && GS.Models.Surveys.userHasKinesis() && !GS.store.get("kinesis.notifications" + GS.user.UserID) && setTimeout(this.callback(function () {
                    if (GS.Models.Surveys.userHasKinesis())GS.user.surveys && GS.user.surveys.availableSurveys && GS.user.surveys.completedSurveys || GS.Models.Surveys.initKinesis("notif", GS.Models.Surveys.displaySurveyAvailableNotif)
                }), g)
            }, displaySurveyAvailableNotif:function (g) {
                if (!GS.store.get("kinesis.notifications") +
                        GS.user.UserID) {
                    var k = GS.store.get("kinesis.seenSurveys" + GS.user.UserID);
                    if (k && k.length) {
                        for (var m = g.availableSurveys, n = [], o = 0; o < m.length; o++) {
                            for (var r = 0; r < k.length; r++);
                            n.push(m[o])
                        }
                        if (n.length) {
                            g = g.completedSurveys;
                            temp = n;
                            n = [];
                            for (o = 0; o < g.length; o++) {
                                for (r = 0; r < temp.length; r++);
                                n.push(g[o])
                            }
                            if (n.length) {
                                n.sort(function (A, w) {
                                    return w.points - A.points
                                });
                                GS.getNotice().displaySurveyAvailable(n[0].points)
                            }
                        }
                    }
                }
            }, removeKinesisFromUser:function (g, k) {
                GS.service.removeKinesisFromUser(g, k)
            }, addKinesisToUser:function (g, k) {
                GS.service.addKinesisToUser(g, k)
            }, _addKinesisToUser:function (g, k) {
                GS.service.addKinesisToUser(this.callback("createPanelistCallback", g, k), this.callback("createPanelistErrback"))
            }, getKinesisUserPassword:function (g, k) {
                GS.service.getKinesisUserPassword(g, k)
            }, _getKinesisUserPasswordCallback:function (g, k) {
                g.password = k;
                GS.Models.Surveys.loginPanelist(GS.user.UserID + "@gsuser.com", g.password, this.callback("_loginPanelistCallback", g), this.callback("_loginPanelistErrback", g))
            }, _getKinesisUserPasswordErrback:function (g) {
                GS.Models.Surveys.wrapSurveysObject(g)
            },
                initKinesis:function (g, k) {
                    var m = GS.Models.Surveys.createPanelistObject(g);
                    m.finalCallback = k;
                    GS.user.isLoggedIn && m.hasKinesis ? GS.Models.Surveys.getKinesisUserPassword(this.callback("_getKinesisUserPasswordCallback", m), this.callback("_getKinesisUserPasswordErrback", m)) : GS.Models.Surveys.wrapSurveysObject(m)
                }, createPanelistObject:function (g) {
                    g = _.orEqual(g, "login");
                    var k = {};
                    k.hasKinesis = GS.Models.Surveys.userHasKinesis();
                    k.panelistid = null;
                    k.seskey = null;
                    k.availableSurveys = [];
                    k.completedSurveys = [];
                    k.finalCallback =
                            null;
                    k.from = g;
                    return k
                }, loginPanelist:function (g, k, m, n) {
                    a("portal.auth.login", {panelid:GS.Models.Surveys.panelID, portalid:"1", username:g, password:k}, m, n)
                }, _loginPanelistCallback:function (g, k) {
                    if (k.seskey) {
                        g.seskey = k.seskey;
                        g.panelistid = k.panelistid;
                        GS.Models.Surveys.wrapSurveysObject(g)
                    } else this._loginPanelistErrback(g, k)
                }, _loginPanelistErrback:function (g, k) {
                    if (k.errno == 40010) {
                        g.from = "create";
                        GS.Models.Surveys.initCreateRoute(g, this.callback("createConfirm", g), this.callback("createPanelistErrback",
                                g))
                    } else {
                        var m = g.finalCallback || k.originalCallback;
                        g = this.createPanelistObject("login");
                        g.finalCallback = m;
                        GS.Models.Surveys.wrapSurveysObject(g)
                    }
                }, initCreateRoute:function (g, k, m) {
                    g = _.orEqual(g, GS.Models.Surveys.createPanelistObject("create"));
                    GS.Models.Surveys.createPanelist(g, k, m)
                }, createPanelist:function (g, k, m) {
                    var n = GS.user.Sex;
                    n = n == "M" ? 1 : n == "F" ? 2 : null;
                    a("portal.panelist.create", {panelid:GS.Models.Surveys.panelID, datapoints:[
                        {label:"email", answer:GS.user.UserID + "@gsuser.com"},
                        {label:"password",
                            answer:g.password},
                        {label:"gender", answer:n},
                        {label:"zip", answer:GS.user.Zip},
                        {label:"dma", answer:gsConfig.country.DMA},
                        {label:"dob", answer:GS.user.TSDOB}
                    ]}, k, m)
                }, createConfirm:function (g, k) {
                    a("portal.panelist.confirm", {panelid:GS.Models.Surveys.panelID, panelistid:k.panelistid, verification:k.verification}, this.callback("_addKinesisToUser", g), this.callback("createPanelistErrback"))
                }, createPanelistCallback:function (g, k) {
                    if (k.seskey) {
                        g.seskey = k.seskey;
                        g.panelistid = k.panelistid;
                        GS.Models.Surveys.wrapSurveysObject(g)
                    } else this.createPanelistErrback(g,
                            k)
                }, createPanelistErrback:function (g, k) {
                    GS.Models.publishGeneralError(k);
                    g && b.isFunction(g.finalCallback) && g.finalCallback(g)
                }, wrapSurveysObject:function (g) {
                    GS.user.surveys = GS.Models.Surveys.wrap(g)
                }, publishGeneralError:function (g) {
                    b.publish("gs.notification", {type:"error", message:"Oops! Something went wrong. Please <a href='http://help.grooveshark.com/customer/portal/topics/31006-surveys/articles' target='_blank'>contact our friendly support team </a> with the error number " + g.errno + " for assistance."})
                }},
            {seskey:null, from:null, hasKinesis:false, availableSurveys:[], completedSurveys:[], profiles:[], init:function (g) {
                this._super(g);
                this.hasKinesis = g.hasKinesis;
                this.seskey = g.seskey;
                this.from = g.from;
                this.profiles = _.orEqual(g.profiles, []);
                this.availableSurveys = _.orEqual(g.availableSurveys, []);
                this.completedSurveys = _.orEqual(g.completedSurveys, []);
                b.isFunction(g.finalCallback) && g.finalCallback(this)
            }, logoutPanelist:function (g, k) {
                a("portal.auth.logout", {seskey:this.seskey}, g, k)
            }, updatePanelist:function (g, k, m) {
                g = {seskey:this.seskey, datapoints:g};
                a("portal.panelist.update", g, k, m)
            }, validateSeskey:function (g, k) {
                a("portal.auth.validate", {seskey:this.seskey}, g, k)
            }, getPanelistInfo:function (g, k, m) {
                g = {seskey:this.seskey, datapoints:g};
                a("portal.panelist.read", g, k, m)
            }, getAvailableSurveys:function (g, k, m) {
                a("portal.survey.available", {seskey:this.seskey, limit:g}, k, m)
            }, getCompletedSurveys:function (g, k, m) {
                a("portal.survey.completed", {seskey:this.seskey, limit:g}, k, m)
            }, getAllSurveys:function (g, k, m) {
                k = _.orEqual(k, 5);
                --k > 0 && b.isFunction(m) ? this.getAvailableSurveys("all", this.callback(function (n) {
                    this.availableSurveys = b.isArray(n.surveys) ? n.surveys : [];
                    this.getCompletedSurveys("all", this.callback(function (o) {
                        this.completedSurveys = b.isArray(o.surveys) ? o.surveys : [];
                        this.availableSurveys.length + this.completedSurveys.length == 0 ? setTimeout(this.callback(function () {
                            this.getAllSurveys("all", k, m)
                        }), 3E3) : m(this)
                    }))
                })) : m(this)
            }, getAllProfileSurveysStatus:function (g, k) {
                this.profiles = [];
                this.getPanelistInfo(["profile1", "profile2",
                    "profile3", "profile4", "profile5", "profile6", "profile7", "profile8", "profile9", "profile10", "profile11", "profile12", "profile13", "profile14", "profile15"], this.callback(function (m) {
                    if (m.success)for (var n = 0; n < m.values.length; n++) {
                        var o = m.values[n].label;
                        o = o.length == 8 ? o.substring(7, 8) : o.substring(7, 9);
                        if (m.values[n].answer) {
                            for (var r = [], A = 0; A < this.availableSurveys.length; A++)if (this.availableSurveys[A].subject.substring(0, 15) !== "Profile Survey:")r.push(this.availableSurveys[A]); else {
                                var w;
                                if (this.availableSurveys[A].body.length ==
                                        22)w = this.availableSurveys[A].body.substring(20, 21); else if (this.availableSurveys[A].body.length == 23)w = this.availableSurveys[A].body.substring(20, 22);
                                w === o ? this.profiles.push(this.availableSurveys[A]) : r.push(this.availableSurveys[A])
                            }
                            this.availableSurveys = r
                        }
                    }
                    g()
                }), k)
            }, getEverything:function (g) {
                this.getAvailableSurveys("all", this.callback(function (k) {
                    this.availableSurveys = b.isArray(k.surveys) ? k.surveys : [];
                    this.getAllProfileSurveysStatus(this.callback(function () {
                        this.getCompletedSurveys("all", this.callback(function (m) {
                            this.completedSurveys =
                                    b.isArray(m.surveys) ? m.surveys : [];
                            if (b.isFunction(g))this.availableSurveys.length + this.completedSurveys.length == 0 && this.from == "create" ? this.getAllSurveys("all", 24, g) : g(this)
                        }))
                    }))
                }))
            }})
})(jQuery);
(function () {
    GS.Models.Base.extend("GS.Models.Visualizer", {}, {title:"", author:"", swf:"/webincludes/flash/visualizerplayer.swf", src:"", thumb:null, width:480, height:270, flashvars:{version:gsConfig.coreVersion}, params:{allowscriptaccess:"always", allowfullscreen:true, wmode:"window"}, attributes:{name:"visualizerPlayer"}, object:null, init:function (b) {
        b && this._super(b)
    }, embed:function (b) {
        object = swfobject.embedSWF(this.swf, b, this.width, this.height, "9.0.0", null, this.flashvars, this.params, this.attributes)
    }})
})(jQuery);
(function () {
    GS.Models.Base.extend("GS.Models.Promotion", {promotions:{1:{title:"Can't Wait to Get It On Playlists", view:"trojan"}, 557:{title:"Samsung Note Valentines", view:"samsung", query:"romance love valentine"}}, submitPlaylistForCampaign:function (b, a, c, h) {
        GS.service.submitPlaylistForCampaign(b, a, c, h)
    }, submitSongVoteForCampaign:function (b, a, c, h) {
        GS.service.submitSongVoteForCampaign(b, a, c, h)
    }}, {campaignID:0, title:null, view:null, query:null, playlists:null, init:function (b) {
        this.campaignID = b;
        this.title =
                GS.Models.Promotion.promotions[this.campaignID].title;
        this.view = GS.Models.Promotion.promotions[this.campaignID].view;
        this.query = GS.Models.Promotion.promotions[this.campaignID].query
    }, getPlaylistsForCampaign:function (b, a) {
        this.query ? this.getQueryPlaylistsForCampaign(this.query, b, a) : GS.service.getPlaylistsForCampaign(this.campaignID, this.callback(["savePlaylists", b]), a)
    }, getQueryPlaylistsForCampaign:function (b, a, c) {
        GS.service.getResultsFromSearch(b, "Playlists", false, this.callback([function (h) {
            return this.playlists =
                    GS.Models.Playlist.wrapCollection(h.result)
        }, a]), c)
    }, savePlaylists:function (b) {
        return this.playlists = GS.Models.Playlist.wrapCollection(b)
    }})
})(jQuery);
(function (b) {
    b.Model.extend("GS.Models.Feature", {TYPE_ACTIVATE:"ACTIVATE", TYPE_PASSIVE:"PASSIVE", TYPE_PLUGIN:"PLUGIN", Features:{}, Activated:{}, Plugins:{}, init:function () {
        GS.Models.Feature.Plugins.sharkZapper = new GS.Models.Feature({})
    }, register:function (a, c) {
        GS.Models.Feature.Features[a] = new GS.Models.Feature(c)
    }}, {FeatureID:"", TextKey:"", Author:"Grooveshark", URL:"", IsPremium:true, Type:"PASSIVE", IsLoaded:false, LoadOnActivate:false, ActivateCallback:null, IsActiveCallback:null, init:function (a) {
        this._super(a)
    },
        activate:function (a) {
            if ((GS.user.subscription.isPremium() || !this.IsPremium) && this.ActivateCallback) {
                this.ActivateCallback();
                a && a()
            } else this.ActivateCallback && GS.getLightbox().open("vipOnlyFeature", {callback:this.callback(this.activate, a)})
        }, isActive:function () {
            return this.IsActiveCallback ? this.IsActiveCallback() : false
        }, getImageURL:function (a) {
            a = _.orEqual(a, "s");
            return gsConfig.assetHost + "/features/" + this.FeatureID + "/icon_" + a + ".png"
        }, getButtonKey:function () {
            return this.Type + (this.isActive() ? "_BUTTON_OFF" :
                    "_BUTTON_ON")
        }})
})(jQuery);
(function (b) {
    GS.Models.Base.extend("GS.Models.Tag", {id:"TagID", GENRE_TAGS:{}, getGenreTags:function () {
        _.isEmpty(this.GENRE_TAGS) && b.getJSON("gs/models/tags_with_ids.json", this.callback(function (a) {
            this.GENRE_TAGS = a
        }));
        return this.GENRE_TAGS
    }, init:function () {
    }}, {})
})(jQuery);
(function (b) {
    var a = {canListen:1, noAds:2, mobile:4, playerBonuses:8, desktop:16, email:32}, c = {month:3, year:30}, h = {plus:{month:6, year:60}, anywhere:{month:9, year:90}, lite:{month:2, year:20}, liteEx:{month:4, year:40}};
    GS.Models.Base.extend("GS.Models.Subscription", {ID_LITE:21, ID_PLUS:6, ID_ANYWHERE:8, LENGTH_WEEK:2, LENGTH_MONTH:3, LENGTH_6_MONTH:7, LENGTH_YEAR:9, LENGTH_LIFETIME:11, standardizeType:function (g) {
        var k = {};
        g = parseInt(g, 10);
        switch (g) {
            case 1:
            case 3:
            case 4:
                k.type = GS.Models.Subscription.ID_ANYWHERE;
                k.length =
                        GS.Models.Subscription.LENGTH_MONTH;
                k.special = true;
                break;
            case 2:
                k.type = GS.Models.Subscription.ID_ANYWHERE;
                k.length = GS.Models.Subscription.LENGTH_YEAR;
                k.special = true;
                break;
            case 5:
                k.type = GS.Models.Subscription.ID_ANYWHERE;
                k.length = GS.Models.Subscription.LENGTH_MONTH;
                k.special = true;
                break;
            case 6:
            case 15:
            case 20:
                k.type = GS.Models.Subscription.ID_PLUS;
                k.length = GS.Models.Subscription.LENGTH_MONTH;
                break;
            case 7:
            case 16:
            case 19:
                k.type = GS.Models.Subscription.ID_PLUS;
                k.length = GS.Models.Subscription.LENGTH_YEAR;
                break;
            case 8:
            case 10:
            case 11:
            case 13:
            case 14:
            case 17:
                k.type = GS.Models.Subscription.ID_ANYWHERE;
                k.length = GS.Models.Subscription.LENGTH_MONTH;
                break;
            case 9:
            case 18:
                k.type = GS.Models.Subscription.ID_ANYWHERE;
                k.length = GS.Models.Subscription.LENGTH_YEAR;
                break;
            case 12:
                k.type = GS.Models.Subscription.ID_ANYWHERE;
                k.length = GS.Models.Subscription.LENGTH_WEEK;
                break;
            case 21:
                k.type = GS.Models.Subscription.ID_LITE;
                k.length = GS.Models.Subscription.LENGTH_MONTH;
                break;
            case 22:
                k.type = GS.Models.Subscription.ID_LITE;
                k.length =
                        GS.Models.Subscription.LENGTH_YEAR;
                break;
            case 97:
                k.type = GS.Models.Subscription.ID_LITE;
                k.length = GS.Models.Subscription.LENGTH_LIFETIME;
                break;
            case 98:
                k.type = GS.Models.Subscription.ID_PLUS;
                k.length = GS.Models.Subscription.LENGTH_LIFETIME;
                break;
            case 99:
                k.type = GS.Models.Subscription.ID_ANYWHERE;
                k.length = GS.Models.Subscription.LENGTH_LIFETIME;
                break
        }
        return k
    }, getSubscriptionFromDetails:function (g, k) {
        var m = g.bVip === 1 || g.bVip === "1";
        if ((g === false || !g.paymentType) && k && k.IsPremium)return GS.user.Flags & GS.Models.User.FLAG_LITE ?
                new GS.Models.Subscription({SubscriptionTypeID:97, vip:m, isLoaded:true}) : GS.user.Flags & GS.Models.User.FLAG_PLUS ? new GS.Models.Subscription({SubscriptionTypeID:98, vip:m, isLoaded:true}) : new GS.Models.Subscription({SubscriptionTypeID:99, vip:m, isLoaded:true}); else if (!g || !g.bActive || g.bActive == "0")return new GS.Models.Subscription({SubscriptionTypeID:0, vip:m, isLoaded:true});
        m = {vip:m, isLoaded:true};
        m.SubscriptionTypeID = g.subscriptionTypeID;
        m.recurring = g.bRecurring;
        if (g.bVip === "1" || g.bVip === 1)if (k && k.IsPremium)m.type =
                GS.Models.Subscription.ID_ANYWHERE;
        m.paymentMethod = _.orEqual(g.paymentType, "UNKNOWN");
        m.billingAmount = g.amount;
        if (g.dateUnsubscribed) {
            var n = g.dateUnsubscribed.split("-");
            if (n.length > 1)m.unsubscriptionDate = new Date(parseInt(n[0], 10), parseInt(n[1], 10) - 1, parseInt(n[2], 10))
        }
        if ((g.dateSubscriptionEnd || g.dateEnd || g.dateSubcriptionEnd) && !m.recurring)try {
            var o = _.orEqual(g.dateSubscriptionEnd, g.dateSubcriptionEnd, g.dateEnd, "").split("-");
            if (o.length > 1)m.endDate = new Date(parseInt(o[0], 10), parseInt(o[1], 10) -
                    1, parseInt(o[2], 10))
        } catch (r) {
            m.endDate = -1
        } else if (m.unsubscriptionDate)m.endDate = m.unsubscriptionDate;
        if ((g.dateNextBill || g.dateNextCheck) && m.recurring && g.dateStart != g.dateNextCheck)try {
            var A = _.orEqual(g.dateNextBill, g.dateNextCheck, "").split("-");
            if (A.length > 1)m.nextBillDate = new Date(parseInt(A[0], 10), parseInt(A[1], 10) - 1, parseInt(A[2], 10))
        } catch (w) {
            m.nextBillDate = -1
        } else if (g.dateStart == g.dateNextCheck)m.nextBillDate = m.endDate;
        if (g.period == "MONTH")m.length = GS.Models.Subscription.LENGTH_MONTH; else if (g.period ==
                "YEAR")m.length = GS.Models.Subscription.LENGTH_YEAR; else if (g.period == "WEEK")m.length = GS.Models.Subscription.LENGTH_WEEK;
        if (k && (k.Flags & GS.Models.User.FLAG_ANYWHERE) > 0)m.type = GS.Models.Subscription.ID_ANYWHERE; else if (k && (k.Flags & GS.Models.User.FLAG_PLUS) > 0)m.type = GS.Models.Subscription.ID_PLUS; else if (k && (k.Flags & GS.Models.User.FLAG_LITE) > 0)m.type = GS.Models.Subscription.ID_LITE;
        return new GS.Models.Subscription(m)
    }, getFeatures:function (g) {
        switch (g) {
            case GS.Models.Subscription.ID_LITE:
                return a.canListen |
                        a.email;
            case GS.Models.Subscription.ID_PLUS:
                return a.canListen | a.noAds | a.playerBonuses | a.desktop | a.email;
            case GS.Models.Subscription.ID_ANYWHERE:
                return a.canListen | a.noAds | a.mobile | a.playerBonuses | a.desktop | a.email
        }
        return 0
    }}, {SubscriptionTypeID:0, type:0, length:0, recurring:false, billingAmount:0, paymentMethod:null, endDate:null, nextBillDate:null, unsubscriptionDate:null, isLoaded:false, features:0, listenConst:0, vip:false, init:function (g) {
        this._super(g);
        g || (g = {});
        if (this.SubscriptionTypeID = _.orEqual(g.SubscriptionTypeID,
                0)) {
            var k = GS.Models.Subscription.standardizeType(g.SubscriptionTypeID);
            g = b.extend({}, k, g)
        }
        this.type = _.orEqual(g.type, 0);
        this.length = _.orEqual(g.length, 0);
        this.billingAmount = _.orEqual(g.billingAmount, 0);
        this.recurring = _.orEqual(g.recurring, false);
        this.features = GS.Models.Subscription.getFeatures(this.type);
        this.endDate = _.orEqual(g.endDate, null);
        this.nextBillDate = _.orEqual(g.nextBillDate, null);
        this.unsubscriptionDate = _.orEqual(g.unsubscriptionDate, null);
        this.paymentMethod = _.orEqual(g.paymentMethod, null);
        this.vip = _.orEqual(g.vip, false);
        this.isLoaded = g.isLoaded ? true : false
    }, isActive:function () {
        if (this.endDate && this.endDate < new Date)return false;
        return true
    }, getTypeName:function () {
        switch (this.type) {
            case GS.Models.Subscription.ID_LITE:
                return"Grooveshark";
            case GS.Models.Subscription.ID_PLUS:
                return b.localize.getString("GROOVESHARK_PLUS");
            case GS.Models.Subscription.ID_ANYWHERE:
                return b.localize.getString("GROOVESHARK_ANYWHERE")
        }
        return""
    }, getTypeString:function () {
        switch (this.type) {
            case GS.Models.Subscription.ID_LITE:
                return"lite";
            case GS.Models.Subscription.ID_PLUS:
                return"plus";
            case GS.Models.Subscription.ID_ANYWHERE:
                return"anywhere"
        }
        return""
    }, hasSubscription:function () {
        return this.type > 0
    }, isPremium:function () {
        return!(this.type == GS.Models.Subscription.ID_LITE || this.type == 0)
    }, hasPlus:function () {
        return this.type == GS.Models.Subscription.ID_PLUS
    }, hasAnywhere:function () {
        return this.type == GS.Models.Subscription.ID_ANYWHERE
    }, hasLite:function () {
        return this.type == GS.Models.Subscription.ID_LITE
    }, isSpecial:function () {
        return this.length ==
                GS.Models.Subscription.LENGTH_LIFETIME
    }, canHideAds:function () {
        return(this.features & a.noAds) > 0
    }, canUsePlayerBonuses:function () {
        return this.hasAnywhere() || this.hasPlus()
    }, canListenUninterrupted:function () {
        return(this.features & a.canListen) > 0
    }, canDirectEmail:function () {
        return(this.features & a.email) > 0
    }, canUseDesktop:function () {
        return(this.features & a.desktop) > 0
    }, getNextBillDate:function () {
        if (this.nextBillDate > 0)return this.nextBillDate.format("F j, Y");
        return null
    }, getEndDate:function () {
        if (this.endDate >
                0)return this.endDate.format("F j, Y");
        return null
    }, getNewPricing:function () {
        var g = b.extend({}, h);
        if (this.vip)g.anywhere = c;
        return g
    }, canUpgradeToLite:function () {
        return!(this.type == GS.Models.Subscription.ID_ANYWHERE || this.type == GS.Models.Subscription.ID_PLUS || this.length == GS.Models.Subscription.LENGTH_LIFETIME || this.recurring || this.vip)
    }, canUpgradeToPlus:function () {
        return!(this.type == GS.Models.Subscription.ID_LITE || this.type == GS.Models.Subscription.ID_ANYWHERE || this.length == GS.Models.Subscription.LENGTH_LIFETIME ||
                this.recurring || this.vip)
    }, canUpgradeToAnywhere:function () {
        return!(this.type == GS.Models.Subscription.ID_LITE || this.type == GS.Models.Subscription.ID_PLUS || this.length == GS.Models.Subscription.LENGTH_LIFETIME || this.recurring)
    }})
})(jQuery);
$.extend($.View.EJS.Helpers.prototype, {localeTag:function (b, a, c, h) {
    c = c || {};
    c["data-translate-text"] = a;
    a = $.localize.getString(a);
    if (h)a = $("<span></span>").dataString(a, h).render();
    return[this.tag(b, c), a, this.tagEnd(b)].join("")
}, tag:function (b, a, c) {
    var h = ["<" + b];
    _.forEach(a, function (g, k) {
        h.push(" " + k + '="' + g + '"')
    });
    h.push(c || ">");
    return h.join("")
}, tagEnd:function (b) {
    return["</", b, ">"].join("")
}});
jQuery.Controller.extend("GS.Controllers.BaseController", {setup:function () {
    this._super.apply(this, arguments);
    this.preSetup && this.preSetup()
}, init:function () {
    this._super();
    if (this.onWindow && !this.isGSSingleton)new this($(window)); else this.onElement && !this.isGSSingleton && new this($(this.onElement));
    this.shortName !== "BaseController" && GS.ClassLoader.register(this.fullName, this)
}, instance:function () {
    if (this.isGSSingleton)return new this(this.onElement && $(this.onElement) || this.onWindow && window || document.documentElement);
    if (this.onDocument)return $(document.documentElement).controller(this._shortName);
    if (this.onWindow)return $(window).controller(this._shortName);
    if (this.onElement)return $(this.onElement).controller(this._shortName);
    if (this.hasActiveElement)return $(this.hasActiveElement).controller(this._shortName);
    throw"BaseController. controller, " + this._shortName + ", is improperly embedded on page";
}, singletonCallback:function (b, a, c) {
    b = "get" + _.ucwords(b);
    var h = arguments;
    return function () {
        var g = GS[b](), k = jQuery.makeArray(h).slice(2);
        k.push.apply(k, arguments);
        if (!c && g.onUpdateSubcription && !g.loaded) {
            var m;
            m = $.subscribe(g.onUpdateSubcription, g.callback(function () {
                g.loaded = true;
                $.unsubscribe(m);
                g[a].apply(g, k)
            }));
            return null
        }
        return g[a].apply(g, k)
    }
}, viewBundles:{}, bundleVersions:{}}, {init:function () {
    this.subscribe("gs.app.ready", this.callback(this.appReady))
}, appReady:function () {
}, destroy:function () {
    if ($.isArray(this.subscriptions))for (; this.subscriptions.length;)$.unsubscribe(this.subscriptions.pop());
    this._super()
}, subscribe:function (b, a, c) {
    c = _.orEqual(c, true);
    if (!_.defined(this.subscriptions))this.subscriptions = [];
    if (c) {
        b = $.subscribe(b, a);
        this.subscriptions.push(b);
        return b
    } else return $.subscribe(b, a)
}, view:function (b, a, c, h) {
    var g = ["gs", "views"];
    if (b.match(/^themes/))g = [b]; else if (b.match(/^\//))g.push(b.replace(/^\//, "")); else {
        g.push(this.Class._shortName);
        g.push(b)
    }
    g = "/" + g.join("/");
    g += $.View.ext;
    var k = g.replace(/[\/\.]/g, "_").replace(/_+/g, "_").replace(/^_/, ""), m = GS.Controllers.BaseController.viewBundles[k], n = GS.Controllers.BaseController.bundleVersions[m] ||
            "", o = "", r = true;
    a = _.orEqual(a, this);
    c = this.calculateHelpers.call(this, c);
    if ($.View.preCached[k] || !m)return $.View(g, a, c);
    h = _.orEqual(h, 0);
    if (!(h >= 3)) {
        if (h > 0)r = false;
        k = {contentType:"application/json", dataType:"json", type:"GET", url:"/gs/views/" + m + ".json?" + n, async:false, cache:r, success:this.callback(function (A) {
            if (A) {
                _.forEach(A, function (w, B) {
                    $.View.preCached[B] = w
                });
                o = $.View(g, a, c)
            } else {
                h++;
                setTimeout(this.callback(function () {
                    this.view(b, a, c, h)
                }), h * 100)
            }
        }), error:this.callback(function () {
            h++;
            setTimeout(this.callback(function () {
                this.view(b,
                        a, c, h)
            }), h * 100)
        })};
        if (window.gsConfig && window.gsConfig.viewsJSONP) {
            k.url = gsConfig.assetHost + "/gs/views/" + m + ".json?" + n;
            k.dataType = "jsonp";
            k.jsonp = false;
            k.jsonpCallback = window.gsConfig.viewsJSONP + m
        }
        $.ajax(k);
        return o
    }
}});
GS.Controllers.BaseController.extend("GS.Controllers.AirbridgeController", {onDocument:true}, {isDesktop:false, _bridge:null, oldWindowOpen:null, init:function () {
    if (window.parentSandboxBridge) {
        this.isDesktop = true;
        this._bridge = window.parentSandboxBridge;
        window.childSandboxBridge = this;
        window.console.error = this._bridge.consoleError;
        GS.store.set = this._bridge.storeSet;
        GS.store.get = this._bridge.storeGet;
        GS.store.remove = this._bridge.storeRemove;
        GS.store.clear = this._bridge.storeClear;
        gsConfig.assetHost = "http://" +
                window.location.host;
        this.subscribe("gs.player.playstatus", this.callback(this._onPlayStatus));
        this.subscribe("gs.player.song.change", this.callback(this._onSongChange));
        this.subscribe("gs.player.queue.change", this.callback(this._onQueueChange));
        this.subscribe("gs.auth.favorites.songs.add", this.callback(this._onFavLibChanged));
        this.subscribe("gs.auth.favorites.songs.remove", this.callback(this._onFavLibChanged));
        this.subscribe("gs.auth.library.add", this.callback(this._onFavLibChanged));
        this.subscribe("gs.auth.library.remove",
                this.callback(this._onFavLibChanged));
        var b = this;
        $("body").delegate('a[target="_blank"]', "click", function (a) {
            if (!$(a.target).closest("a").hasClass("airNoFollow")) {
                a.preventDefault();
                a = $(a.target).closest("a").attr("href");
                b._bridge.consoleWarn(a);
                a && b._bridge.navigateToUrl(a, "_blank");
                return false
            }
        });
        this.oldWindowOpen = window.open;
        window.open = function (a, c, h) {
            h = _.orEqual(h, "width=800,height=600");
            return c == "_blank" ? b._bridge.navigateToUrl(a, c) : b.oldWindowOpen.call(window, a, c, h)
        }
    }
    this._super()
}, _lastStatus:null,
    _onPlayStatus:function (b) {
        if (b && this._lastStatus)if (b.status === this._lastStatus.status)if (!b.activeSong && !this._lastStatus.activeSong) {
            this._lastStatus = b;
            return
        } else if (b.activeSong && this._lastStatus.activeSong)if (b.activeSong.SongID == this._lastStatus.activeSong.SongID && b.activeSong.autoplayVote == this._lastStatus.activeSong.autoplayVote) {
            this._lastStatus = b;
            return
        }
        this._lastStatus = b;
        this._bridge && this._bridge.playerChange()
    }, _onQueueChange:function () {
        this._bridge && this._bridge.playerChange()
    }, _onSongChange:function (b) {
        if (!this._lastStatus ||
                this._lastStatus.activeSong && this._lastStatus.activeSong.SongID === b.SongID && this._lastStatus.activeSong.autoplayVote !== b.autoplayVote) {
            if (this._lastStatus)this._lastStatus.activeSong.autoplayVote = b.autoplayVote;
            this._bridge && this._bridge.playerChange()
        }
    }, _onFavLibChanged:function (b) {
        if (b && GS.player.queue && GS.player.queue.activeSong && parseInt(b.SongID, 10) == parseInt(GS.player.queue.activeSong.SongID, 10)) {
            GS.player.queue.activeSong.isFavorite = b.isFavorite;
            GS.player.queue.activeSong.fromLibrary = b.fromLibrary;
            this._bridge && this._bridge.playerChange()
        }
    }, appReady:function () {
        this._bridge && this._bridge.ready()
    }, getDesktopPreferences:function () {
        return this._bridge ? this._bridge.getDesktopPreferences() : null
    }, setDesktopPreferences:function (b) {
        this._bridge && this._bridge.setDesktopPreferences(b)
    }, displayNotification:function (b, a) {
        $.publish("gs.notification", {type:b, message:$.localize.getString(a)})
    }, getQueueStatus:function () {
        var b = GS.player.getCurrentQueue(true);
        b || (b = {});
        if (b.activeSong) {
            b.activeSong.url = "http://grooveshark.com/" +
                    b.activeSong.toUrl().replace("#!/", "");
            b.activeSong.imageUrl = b.activeSong.getImageURL()
        }
        b.playStatus = GS.player.lastStatus;
        return b
    }, setHash:function (b) {
        GS.router.setHash(b)
    }, safeToClose:function () {
        return window.onbeforeunload()
    }, addSongsToQueueAt:function () {
        return GS.player.addSongsToQueueAt.apply(GS.player, arguments)
    }, playSong:function () {
        return GS.player.playSong.apply(GS.player, arguments)
    }, pauseSong:function () {
        return GS.player.pauseSong.apply(GS.player, arguments)
    }, resumeSong:function () {
        return GS.player.resumeSong.apply(GS.player,
                arguments)
    }, stopSong:function () {
        return GS.player.stopSong.apply(GS.player, arguments)
    }, previousSong:function () {
        return GS.player.previousSong.apply(GS.player, arguments)
    }, nextSong:function () {
        return GS.player.nextSong.apply(GS.player, arguments)
    }, flagSong:function () {
        return GS.player.flagSong.apply(GS.player, arguments)
    }, voteSong:function () {
        return GS.player.voteSong.apply(GS.player, arguments)
    }, getIsMuted:function () {
        return GS.player.getIsMuted.apply(GS.player, arguments)
    }, setIsMuted:function () {
        return GS.player.setIsMuted.apply(GS.player,
                arguments)
    }, getVolume:function () {
        return GS.player.getVolume.apply(GS.player, arguments)
    }, setVolume:function () {
        return GS.player.setVolume.apply(GS.player, arguments)
    }, getShuffle:function () {
        return GS.player.getShuffle.apply(GS.player, arguments)
    }, setShuffle:function () {
        return GS.player.setShuffle.apply(GS.player, arguments)
    }, setAutoplay:function () {
        return GS.player.setAutoplay.apply(GS.player, arguments)
    }, clearQueue:function () {
        return GS.player.clearQueue.apply(GS.player, arguments)
    }, getRepeat:function () {
        return GS.player.getRepeat.apply(GS.player,
                arguments)
    }, setRepeat:function () {
        return GS.player.setRepeat.apply(GS.player, arguments)
    }, addPlaylist:function (b, a, c) {
        GS.Models.Playlist.getPlaylist(b, function (h) {
            h.play(a, c)
        }, null, false)
    }, addSongFromToken:function (b, a, c) {
        GS.Models.Song.getSongFromToken(b, function (h) {
            GS.player.addSongsToQueueAt([h.SongID], a, c)
        }, null, false)
    }, favoriteSong:function (b) {
        GS.user.addToSongFavorites(b)
    }, unfavoriteSong:function (b) {
        GS.user.removeFromSongFavorites(b)
    }, addSongToLibrary:function (b) {
        GS.user.addToLibrary([b])
    }, removeSongFromLibrary:function (b) {
        GS.user.removeFromLibrary(b)
    },
    executeProtocol:function (b) {
        GS.Controllers.ApiController.instance().executeProtocol(b)
    }});
(function () {
    function b() {
        this.requests = [];
        this.pendingRequest = null
    }

    function a(p) {
        var q = [].slice.call(arguments, 1), s = (new Date).valueOf(), u = new this;
        this.apply(u, q);
        q = 6E5;
        if (p) {
            if (typeof p == "number")q = p;
            var C = u.getCacheKey(), G = u.pendingCallCache[C];
            if (_.defined(G) && (!G.isResolved() || s - G.lastResolution < q))u = G; else u.pendingCallCache[C] = u
        }
        return u
    }

    function c(p, q, s, u, C) {
        function G() {
            J.isPending = false;
            J.lastResolution = (new Date).valueOf()
        }

        this.method = _.orEqual(p, "");
        this.parameters = _.orEqual(q, {});
        this.options =
                _.orEqual(s, {});
        this.useHTTPS = _.orEqual(u, false);
        this.useSWF = _.orEqual(C, false);
        this.overrideHeaders = {};
        this.type = "normal";
        this.isPending = this.failedAuth = false;
        this.numRetries = 0;
        this.lastFault = null;
        this.lastResolution = 0;
        this.successFilters = [];
        this.faultFilters = [];
        this._dfd = $.Deferred();
        var J = this;
        this.promise().then(G, G)
    }

    function h(p, q, s) {
        c.call(this, p, q);
        this.httpMethod = _.orEqual(s, "POST");
        this.type = "facebook"
    }

    function g(p) {
        c.call(this, null, p);
        this.type = "lastfm"
    }

    function k() {
        var p = String(Math.floor(Math.random() *
                1E4));
        return!GS.service.outgoingSWFCalls[p] ? p : k()
    }

    function m(p, q) {
        var s;
        if ($.isFunction(GS.service.swfProxy)) {
            s = k();
            GS.service.outgoingSWFCalls[s] = p;
            GS.service.swfProxy(p.getSWFable(), q, s)
        } else {
            p.isPending = false;
            GS.service.callsPendingSWF.push(p)
        }
    }

    function n() {
        for (var p = "", q = 0; q < 6; q++)p += Math.floor(Math.random() * 16).toString(16);
        return p != GS.service.lastRandomizer ? p : n()
    }

    function o(p) {
        p = _.orEqual(p, {});
        var q = {client:GS.service.client, clientRevision:GS.service.clientRevision, privacy:GS.service.privacy,
            country:GS.service.country, uuid:GS.service.uuID};
        if (GS.service.sessionID)q.session = GS.service.sessionID;
        return $.extend(q, p)
    }

    function r(p, q) {
        _.defined(p) || (p = {fault:{message:"Empty Result", code:GS.service.faultCodes.EMPTY_RESULT}});
        if (p.header) {
            var s = p.header, u = s.session;
            if (u && u != GS.service.sessionID) {
                GS.service.sessionID = u;
                GS.service.tokenPending = false;
                B()
            }
            if (s.expiredClient) {
                GS.service.clientExpired = true;
                GS.player && GS.player.expireSWFService();
                A()
            }
            s = s.secondsUntilDowntime;
            if (s < 0)_.wait(5E3).then(v);
            else if (s > 0) {
                s = Math.floor(s / 60);
                u = (new Date).valueOf();
                if (s <= 60)if (GS.service.lastDowntimeNotification == 0 || s > 30 && u - GS.service.lastDowntimeNotification > 36E5 || s <= 30 && s > 15 && u - GS.service.lastDowntimeNotification > 18E5 || s <= 15 && s > 10 && u - GS.service.lastDowntimeNotification > 9E5 || s <= 10 && s > 5 && u - GS.service.lastDowntimeNotification > 6E5 || s <= 5 && u - GS.service.lastDowntimeNotification > 3E5) {
                    GS.service.lastDowntimeNotification = u;
                    s = new GS.Models.DataString($.localize.getString("NOTIFICATION_MAINTENANCE_WARNING"), {min:s});
                    $.publish("gs.notification", {type:"info", message:s})
                }
            }
        }
        p.fault ? w(p.fault, q) : q.resolve(p.hasOwnProperty("result") ? p.result : p)
    }

    function A() {
        GS.getLightbox().open({type:"invalidClient", notCloseable:true, view:{header:"POPUP_INVALID_CLIENT_TITLE", message:"POPUP_INVALID_CLIENT_MSG", buttonsRight:[
            {label:"POPUP_INVALID_CLIENT_SUBMIT", className:"submit"}
        ]}, callbacks:{".submit":function (p) {
            p.stopImmediatePropagation();
            window.location.reload(true)
        }}})
    }

    function w(p, q) {
        if (p && _.defined(p.code)) {
            console.log("HANDLE FAULT CODE",
                    p.code, q.method);
            if (p.code == GS.service.faultCodes.INVALID_TOKEN) {
                var s = (new Date).valueOf();
                if ((!GS.service.lastTokenFailed || s - GS.service.lastTokenFailed >= 3E5) && q.numRetries === 0) {
                    GS.service.lastTokenFailed = false;
                    q.isPending = false;
                    q.numRetries++;
                    GS.service.callsPendingToken.push(q);
                    B();
                    return
                } else $.publish("gs.notification", {type:"error", message:$.localize.getString("SERVICE_ERROR_COMMUNICATING"), uniqueInstance:"errorCommunicating"})
            } else if (p.code == GS.service.faultCodes.HTTP_TIMEOUT || p.code == GS.service.faultCodes.EMPTY_RESULT) {
                q.lastFault =
                        p;
                q.retry(100 + q.numRetries * 100);
                return
            } else if (p.code == GS.service.faultCodes.MAINTENANCE)_.wait(5E3).then(v); else if (p.code == GS.service.faultCodes.INVALID_CLIENT)A(); else if (p.code == GS.service.faultCodes.INVALID_SESSION)GS.getLightbox().open({type:"sessionBad", notCloseable:true, view:{header:"POPUP_SESSION_BAD_TITLE", message:"POPUP_SESSION_BAD_MSG", buttonsLeft:[
                {label:"POPUP_REFRESH_GROOVESHARK", className:"submit"}
            ]}, callbacks:{".submit":function (u) {
                u.stopImmediatePropagation();
                window.location.reload(true)
            }}});
            else if (gsConfig.runMode == "dev" && p.code == GS.service.faultCodes.HTTP_ERROR && q.method == "getCommunicationToken")window.location = "https://" + window.location.host + window.location.hash
        }
        q.reject(p)
    }

    function B() {
        if (!GS.service.tokenPending) {
            GS.service.currentToken = null;
            GS.service.tokenExpires = 0;
            GS.service.tokenPending = true;
            if (GS.service.sessionID) {
                var p = hex_md5(GS.service.sessionID);
                p = y(false, "getCommunicationToken", {secretKey:p}, {}, true);
                p.promise().then(t, function () {
                    var q = new Date;
                    GS.service.tokenPending =
                            false;
                    for (GS.service.lastTokenFailed = q.valueOf(); GS.service.callsPendingToken.length;) {
                        q = GS.service.callsPendingToken.shift();
                        q.reject({message:$.localize.getString("SERVICE_CREATE_TOKEN_FAIL"), code:GS.service.faultCodes.INVALID_TOKEN})
                    }
                })
            } else p = y(false, "initiateSession");
            p.send()
        }
    }

    function t(p) {
        var q = new Date;
        GS.service.lastTokenFailed = false;
        GS.service.currentToken = p;
        GS.service.tokenPending = false;
        for (GS.service.tokenExpires = 15E5 + q.valueOf(); GS.service.callsPendingToken.length;) {
            p = GS.service.callsPendingToken.shift();
            p.send()
        }
        $.publish("gs.cowbell.ready")
    }

    function v() {
        if (!GS.service.downForMaintenance) {
            GS.service.downForMaintenance = true;
            GS.getLightbox().open({type:"maintenance", notCloseable:true, view:{header:"POPUP_MAINT_TITLE", message:"POPUP_MAINT_MESSAGE", buttonsLeft:[
                {label:"POPUP_MAINT_TWITTER", href:"http://twitter.com/sharkjanitor"}
            ]}});
            D()
        }
    }

    function D() {
        var p = y(false, "getServiceStatus");
        p.promise().then(F, E);
        p.send()
    }

    function F(p) {
        if (p.status == 1) {
            GS.service.downForMaintenance = false;
            GS.getLightbox().close()
        } else _.wait(2E4).then(D)
    }

    function E() {
        _.wait(2E4).then(D)
    }

    b.prototype.queue = function (p) {
        function q() {
            if (this.requests.length) {
                this.pendingRequest = this.requests.shift();
                var s = this, u = function () {
                    s.pendingRequest = null;
                    q.call(s)
                };
                this.pendingRequest.promise().then(u, u);
                this.pendingRequest.send()
            }
        }

        this.requests.push(p);
        this.pendingRequest || q.call(this)
    };
    var x = function (p, q) {
        return p[p.length - 1] === q ? {} : p[p.length - 1]
    };
    c.createRequest = function () {
        return a.apply(this, arguments)
    };
    var y = function () {
        return a.apply(c, arguments)
    };
    c.prototype.promise =
            function () {
                return this._dfd.promise()
            };
    c.prototype.isResolved = function () {
        return this._dfd.isResolved()
    };
    c.prototype.isRejected = function () {
        return this._dfd.isRejected()
    };
    c.prototype.resolve = function (p) {
        for (var q = 0; q < this.successFilters.length; q++)if ($.isFunction(this.successFilters[q]))p = this.successFilters[q](p);
        this.lastResolution = (new Date).valueOf();
        this._dfd.resolve(p)
    };
    c.prototype.resolveWith = function (p, q) {
        for (var s = 0; s < this.successFilters.length; s++)if ($.isFunction(this.successFilters[s]))q =
                this.successFilters[s](q);
        this.lastResolution = (new Date).valueOf();
        this._dfd.resolveWith(p, q)
    };
    c.prototype.reject = function (p) {
        for (var q = 0; q < this.faultFilters.length; q++)if ($.isFunction(this.faultFilters[q]))p = this.faultFilters[q](p);
        this._dfd.reject(p)
    };
    c.prototype.rejectWith = function (p, q) {
        for (var s = 0; s < this.faultFilters.length; s++)if ($.isFunction(this.faultFilters[s]))q = this.faultFilters[s](q);
        this._dfd.rejectWith(p, q)
    };
    c.prototype.getSWFable = function () {
        return{type:this.type, method:this.method, parameters:this.parameters,
            useHTTPS:this.useHTTPS, overrideHeaders:this.overrideHeaders, overrideKey:H}
    };
    c.prototype.pendingCallCache = [];
    c.prototype.cacheKeyProps = ["method", "parameters", "type"];
    c.prototype.getCacheKey = function () {
        var p, q, s = "";
        for (p in this.cacheKeyProps)if (this.cacheKeyProps.hasOwnProperty(p)) {
            q = this[this.cacheKeyProps[p]];
            s += q instanceof String ? q : JSON.stringify(q)
        }
        return hex_md5(s)
    };
    c.prototype.send = function (p) {
        p && p.length == 2 && this.promise().then(p[0], p[1]);
        GS.service = GS.service || GS.Controllers.ServiceController.instance();
        var q = this;
        p = true;
        var s = (new Date).valueOf();
        if (!(this.isPending || this.isResolved()))if (GS.service.clientExpired)this.reject({message:$.localize.getString("POPUP_INVALID_CLIENT_MSG"), code:GS.service.faultCodes.INVALID_CLIENT}); else {
            this.isPending = true;
            if (this.numRetries >= 3)this.reject(this.lastFault); else {
                if (this.numRetries > 0)p = false;
                if (this.type == "facebook" || this.type == "lastfm")m(this, {}); else if (GS.service.tokenExpires > s || ["getCommunicationToken", "initiateSession", "getServiceStatus"].indexOf(this.method) !=
                        -1)if (GS.service.downForMaintenance && this.method != "getServiceStatus")this.reject({message:$.localize.getString("SERVICE_DOWN_MAINTENANCE"), code:GS.service.faultCodes.MAINTENANCE}); else {
                    s = "http://" + GS.service.hostname + "/" + GS.service.defaultEndpoint + "?" + this.method;
                    var u = {header:o(this.overrideHeaders), method:this.method, parameters:this.parameters};
                    if (GS.service.currentToken) {
                        GS.service.lastRandomizer = n();
                        var C = GS.service.revToken;
                        if (GS.service.revToken != H)C = H;
                        C = hex_sha1(this.method + ":" + GS.service.currentToken +
                                ":" + C + ":" + GS.service.lastRandomizer);
                        u.header.token = GS.service.lastRandomizer + C
                    }
                    this.useSWF || this.useHTTPS ? m(this, u.header) : $.ajax($.extend({}, this.options, {contentType:"application/json", dataType:"json", type:"POST", data:JSON.stringify(u), cache:p, url:s, success:function (G) {
                        r(G, q)
                    }, error:function (G, J, K) {
                        console.warn("ajax error: status: " + J + ", error: " + K, G, this);
                        G = {};
                        switch (J) {
                            case "parsererror":
                                G.code = GS.service.faultCodes.PARSE_ERROR;
                                G.message = $.localize.getString("SERVICE_PARSE_JSON");
                                break;
                            case "timeout":
                                G.code =
                                        GS.service.faultCodes.HTTP_TIMEOUT;
                                G.message = $.localize.getString("SERVICE_REQUEST_TIMEOUT");
                                break;
                            case "error":
                            case "notmodified":
                            default:
                                G.code = GS.service.faultCodes.HTTP_ERROR;
                                G.message = $.localize.getString("SERVICE_HTTP_ERROR");
                                break
                        }
                        w(G, q)
                    }}))
                } else {
                    this.isPending = false;
                    GS.service.callsPendingToken.push(this);
                    B()
                }
            }
        }
    };
    c.prototype.retry = function (p) {
        var q = this;
        this.isPending = false;
        this.numRetries++;
        _.wait(p).then(function () {
            q.send()
        })
    };
    c.prototype.queue = function (p) {
        if (!_.defined(c.prototype.queues))c.prototype.queues =
        {};
        var q = c.prototype.queues[p];
        _.defined(q) || (q = c.prototype.queues[p] = new b);
        q.queue(this)
    };
    h.createRequest = function () {
        return a.apply(this, arguments)
    };
    h.prototype = $.extend(h.prototype, c.prototype);
    h.prototype.getSWFable = function () {
        return{type:this.type, method:this.method, parameters:this.parameters, httpMethod:this.httpMethod}
    };
    g.createRequest = function () {
        return a.apply(this, arguments)
    };
    g.prototype = $.extend(g.prototype, c.prototype);
    g.prototype.getSWFable = function () {
        return{type:this.type, parameters:this.parameters}
    };
    var H = "grahamCrackersRYummy", I;
    $.Class.extend("GS.Controllers.ServiceController", {configDefaults:{hostname:window.location.host, sessionID:null, client:"htmlshark", clientRevision:"20120227", revToken:"makeAllTheMoney", country:null, privacy:0, uuID:"", defaultEndpoint:"more.php"}, instance:function () {
        I || (I = new GS.Controllers.ServiceController({hostname:window.location.host, sessionID:gsConfig.sessionID, country:gsConfig.country, privacy:gsConfig.user.Privacy, uuID:gsConfig.uuid, defaultEndpoint:gsConfig.endpoint}));
        return I
    }}, {faultCodes:{INVALID_CLIENT:1024, RATE_LIMITED:512, INVALID_TOKEN:256, INVALID_SESSION:16, MAINTENANCE:10, MUST_BE_LOGGED_IN:8, HTTP_TIMEOUT:6, PARSE_ERROR:4, HTTP_ERROR:2, EMPTY_RESULT:-256}, init:function (p) {
        $.extend(this, GS.Controllers.ServiceController.configDefaults, p);
        this.currentToken = null;
        this.tokenExpires = 0;
        this.lastTokenFailed = this.tokenPending = false;
        this.lastRandomizer = null;
        this.downForMaintenance = false;
        this.lastDowntimeNotification = 0;
        this.clientExpired = false;
        this.callsPendingToken = [];
        this.callsPendingSWF = [];
        this.outgoingSWFCalls = {};
        this.swfProxy = null;
        this.sessionID || y(false, "initiateSession", {}, {async:false}).send()
    }, verifyControllerKey:function (p) {
        if (p != H) {
            H = p;
            return false
        }
        return true
    }, serviceExists:function () {
        return true
    }, swfReady:function () {
        for (var p; this.callsPendingSWF.length;) {
            p = this.callsPendingSWF.shift();
            p.send()
        }
        return true
    }, swfBadHost:function () {
        GS.getLightbox().open({type:"badHost", notCloseable:true, view:{header:"POPUP_BAD_HOST_TITLE", message:"POPUP_BAD_HOST_MSG",
            buttonsLeft:[
                {href:"http://www.grooveshark.com", labelHTML:"http://www.grooveshark.com"}
            ]}})
    }, swfSuccess:function (p, q) {
        var s = this.outgoingSWFCalls[q];
        s && r(p, s);
        delete this.outgoingSWFCalls[q]
    }, swfFault:function (p, q) {
        var s = this.outgoingSWFCalls[q];
        s && w(p, s);
        delete this.outgoingSWFCalls[q]
    }, swfNeedsToken:function () {
        B()
    }, onChatData:function (p) {
        var q = p;
        if (p.data && p.data.data)p = p.data.data; else if (p.data)p = p.data;
        if (p)switch (p.messageType) {
            case "userPointsAwarded":
                p.awardedPoints && GS.user && GS.user.addPoints(p.awardedPoints);
                break;
            case "apiMethodCall":
                if (p.method && window.Grooveshark) {
                    if (!$.isArray(p.parameters))p.parameters = [];
                    q = Grooveshark[p.method];
                    $.isFunction(q) && q.apply(Grooveshark, p.parameters)
                }
                break;
            case "userRemote":
                console.warn("userRemote", p);
                q = GS.getParty();
                q.enabled && q.updateQueueFromBroadcast(p);
                break;
            case "feedEvent":
                p.data && $.publish("gs.user.feedEvent", p.data);
                break;
            case "playlist":
                var s = q.data.subscription.replace(/playlist/, "") - 0;
                q = GS.getParty();
                q.enabled && q.playlist.PlaylistID == s && q.updateQueueFromBroadcast(p);
                q = GS.Models.Playlist.getOneFromCache(s);
                GS.user.UserID != p.data.userID && q.updateFromBroadcast(p);
                break;
            default:
                console.log("unhandled chat data:", p)
        }
    }, onChatError:function (p) {
        console.log("Got chat error, event:", p)
    }, httpsFormSubmit:function (p, q, s) {
        var u = $("#httpsForm");
        $("#httpsIframe");
        var C = [];
        u.html("");
        u.attr("action", p);
        u.attr("method", "post");
        u.attr("target", "httpsIframe");
        u.attr("enctype", "multipart/form-data");
        _.forEach(q, function (G, J) {
            C.push('<input type="hidden" name="' + J + '" value="' + G + '" />')
        });
        u.append(C.join(""));
        window.setupBridge = GS.airbridge && GS.airbridge.isDesktop ? function () {
            var G = {};
            G[s] = window[s];
            document.getElementById("httpsIframe").contentWindow.parentSandboxBridge = G
        } : function () {
        };
        u.submit()
    }, isFirstVisit:function (p) {
        y(false, "isFirstVisit", {}, {}, false, true).send([p, null])
    }, makeFacebookRequest:function (p, q, s, u, C) {
        h.createRequest(false, p, q, s).send([u, C])
    }, makeLastfmRequest:function (p, q, s) {
        g.createRequest(false, p).send([q, s])
    }, rapleafPersonalize:function (p, q, s) {
        var u = x(arguments,
                s);
        u = y(false, "personalize", {redirectURL:p}, u, false, true);
        u.type = "rapleaf";
        u.send([q, s])
    }, rapleafDirect:function (p, q, s) {
        var u = x(arguments, s);
        u = y(false, "direct", {email:p}, u, false, true);
        u.type = "rapleaf";
        u.send([q, s])
    }, getAlbumByID:function (p, q, s) {
        var u = x(arguments, s);
        y(true, "getAlbumByID", {albumID:p}, u).send([q, s])
    }, getArtistByID:function (p, q, s) {
        var u = x(arguments, s);
        y(true, "getArtistByID", {artistID:p}, u).send([q, s])
    }, getPlaylistByID:function (p, q, s) {
        var u = x(arguments, s);
        y(true, "getPlaylistByID", {playlistID:p},
                u).send([q, s])
    }, getQueueSongListFromSongIDs:function (p, q, s) {
        var u = x(arguments, s);
        y(true, "getQueueSongListFromSongIDs", {songIDs:p}, u).send([q, s])
    }, getSongFromToken:function (p, q, s) {
        var u = x(arguments, s);
        y(true, "getSongFromToken", {token:p, country:this.country}, u).send([q, s])
    }, getTokenForSong:function (p, q, s) {
        var u = x(arguments, s);
        y(true, "getTokenForSong", {songID:p, country:this.country}, u).send([q, s])
    }, getUserByID:function (p, q, s) {
        var u = x(arguments, s);
        y(true, "getUserByID", {userID:p}, u).send([q, s])
    }, albumGetSongs:function (p, q, s, u, C) {
        q = _.orEqual(q, true);
        s = _.orEqual(s, 0);
        var G = x(arguments, C);
        y(true, "albumGetSongs", {albumID:p, isVerified:q, offset:s}, G).send([u, C])
    }, albumGetAllSongs:function (p, q, s) {
        var u = x(arguments, s);
        y(true, "albumGetAllSongs", {albumID:p}, u).send([q, s])
    }, artistGetAllSongs:function (p, q, s) {
        var u = x(arguments, s);
        y(true, "artistGetAllSongs", {artistID:p}, u).send([q, s])
    }, artistGetArtAttribution:function (p, q, s) {
        var u = x(arguments, s);
        y(true, "artistGetArtAttribution", {artistID:p}, u).send([q, s])
    }, playlistGetSongs:function (p, q, s) {
        var u = x(arguments, s);
        y(true, "playlistGetSongs", {playlistID:p}, u).send([q, s])
    }, getArtistRecentListeners:function (p, q, s) {
        req = c.createRequest(true, "getArtistRecentListeners", {artistID:p}, arguments[arguments.length - 1] === s ? {} : arguments[arguments.length - 1]);
        req.send([q, s])
    }, getAlbumRecentListeners:function (p, q, s) {
        req = c.createRequest(true, "getAlbumRecentListeners", {albumID:p}, arguments[arguments.length - 1] === s ? {} : arguments[arguments.length - 1]);
        req.send([q, s])
    }, getSongRecentListeners:function (p, q, s) {
        req =
                c.createRequest(true, "getSongRecentListeners", {songID:p}, arguments[arguments.length - 1] === s ? {} : arguments[arguments.length - 1]);
        req.send([q, s])
    }, popularGetSongs:function (p, q, s) {
        var u = x(arguments, s);
        ({daily:true, weekly:true, monthly:true})[p] || (p = "daily");
        y(true, "popularGetSongs", {type:p}, u).send([q, s])
    }, featuredGetCurrentFeatured:function (p, q, s) {
        var u = x(arguments, s);
        y(true, "featuredGetCurrentFeatured", {date:p}, u).send([q, s])
    }, getArtistsForTagRadio:function (p, q, s) {
        var u = x(arguments, s);
        y(true, "getArtistsForTagRadio",
                {tagID:p}, u).send([q, s])
    }, albumGetFans:function (p, q, s, u) {
        var C = x(arguments, u);
        y(true, "albumGetFans", {albumID:p, offset:q}, C).send([s, u])
    }, artistGetFans:function (p, q, s, u) {
        var C = x(arguments, u);
        y(true, "artistGetFans", {artistID:p, offset:q}, C).send([s, u])
    }, playlistGetFans:function (p, q, s) {
        var u = x(arguments, s);
        y(true, "playlistGetFans", {playlistID:p}, u).send([q, s])
    }, songGetFans:function (p, q, s, u) {
        var C = x(arguments, u);
        y(true, "songGetFans", {songID:p, offset:q}, C).send([s, u])
    }, userGetFans:function (p, q, s, u) {
        var C =
                x(arguments, u);
        y(true, "userGetFans", {userID:p, offset:q}, C).send([s, u])
    }, authenticateUser:function (p, q, s, u, C) {
        var G = x(arguments, C);
        y(false, "authenticateUser", {username:p, password:q, savePassword:s}, G, true, true).send([u, C])
    }, authenticateFacebookUser:function (p, q, s, u, C, G, J) {
        var K = x(arguments, J);
        y(false, "authenticateFacebookUser", {facebookUserID:p, sessionKey:q, accessToken1:s, accessToken3:u, accessTokenEx:C}, K, true, true).send([G, J])
    }, authenticateGoogleUser:function (p, q) {
        var s = x(arguments, q);
        y(false, "authenticateGoogleUser",
                {}, s, true, true).send([p, q])
    }, authenticateTwitterUser:function (p, q, s, u, C) {
        req = c.createRequest(false, "authenticateTwitterUser", {twitterUserID:p, oauthToken:q, oauthSecret:s}, arguments[arguments.length - 1] === C ? {} : arguments[arguments.length - 1], true, false);
        req.send([u, C])
    }, reportUserChange:function (p, q, s, u) {
        var C = x(arguments, u), G = {userID:p.UserID, email:p.Email, username:p.FName, userTrackingID:p.userTrackingID, picture:p.Picture, privacy:_.defined(q) ? q : p.Privacy, isPremium:p.IsPremium};
        y(false, "reportUserChange",
                G, C, false, true).send([s, u])
    }, logoutUser:function (p, q) {
        var s = x(arguments, q);
        y(false, "logoutUser", {}, s).send([p, q])
    }, userForgotPassword:function (p, q, s) {
        var u = x(arguments, s);
        y(false, "userForgotPassword", {usernameOrEmail:p}, u, true).send([q, s])
    }, resetPassword:function (p, q, s, u, C) {
        var G = x(arguments, C);
        y(false, "resetPassword", {usernameOrEmail:p, secretResetCode:q, newPassword:s}, G, true).send([u, C])
    }, changePassword:function (p, q, s, u) {
        var C = x(arguments, u);
        y(false, "changePassword", {oldPassword:p, newPassword:q},
                C, true, true).send([s, u])
    }, registerUser:function (p, q, s, u, C, G, J, K, L, M, O, N) {
        var P = x(arguments, N);
        y(false, "registerUser", {username:p, password:q, firstName:s, lastName:u, emailAddress:C, sex:G, birthDate:J, flags:K, inviteID:L, savePassword:M}, P, true, true).send([O, N])
    }, userDisableAccount:function (p, q, s, u, C, G) {
        var J = x(arguments, G);
        y(false, "userDisableAccount", {password:p, reason:q, details:s, contact:u}, J, true, true).send([C, G])
    }, getIsUsernameEmailAvailable:function (p, q, s, u) {
        var C = x(arguments, u);
        y(false, "getIsUsernameEmailAvailable",
                {username:p, emailAddress:q}, C).send([s, u])
    }, getUserByInviteID:function (p, q, s) {
        var u = x(arguments, s);
        y(true, "getUserByInviteID", {inviteID:p}, u, true).send([q, s])
    }, sendInvites:function (p, q, s) {
        var u = x(arguments, s);
        y(false, "sendInvites", {emailAddresses:p}, u).send([q, s])
    }, getUserSettings:function (p, q) {
        var s = x(arguments, q);
        y(false, "getUserSettings", {}, s).send([p, q])
    }, getUserTopArtists:function (p, q, s) {
        var u = x(arguments, s);
        y(true, "getUserTopArtists", {userID:p}, u).send([q, s])
    }, changeUserInfoEx:function (p, q, s, u) {
        var C = x(arguments, u);
        y(false, "changeUserInfoEx", {shitToChange:p, password:q}, C, true).send([s, u])
    }, changeNotificationSettings:function (p, q, s) {
        var u = x(arguments, s);
        y(false, "changeNotificationSettings", {newValue:p}, u).send([q, s])
    }, changePrivacySettings:function (p, q, s) {
        var u = x(arguments, s);
        y(false, "changePrivacySettings", {newValue:p}, u).send([q, s])
    }, changeFeedSettings:function (p, q, s) {
        var u = x(arguments, s);
        y(false, "changeFeedSettings", {newValue:p}, u).send([q, s])
    }, getSubscriptionDetails:function (p, q) {
        var s =
                x(arguments, q);
        y(false, "getSubscriptionDetails", {}, s, true, true).send([p, q])
    }, userGetSongsInLibrary:function (p, q, s, u, C) {
        q = _.orEqual(q, 0);
        var G = x(arguments, C);
        y(s, "userGetSongsInLibrary", {userID:p, page:q}, G).send([u, C])
    }, userGetLibraryTSModified:function (p, q, s) {
        var u = x(arguments, s);
        y(false, "userGetLibraryTSModified", {userID:p}, u).send([q, s])
    }, userAddSongsToLibrary:function (p, q, s) {
        var u = x(arguments, s);
        u = y(false, "userAddSongsToLibrary", {songs:p}, u);
        u.promise().then(q, s);
        u.queue("library")
    }, userRemoveSongsFromLibrary:function (p, q, s, u, C, G) {
        var J = x(arguments, G);
        J = y(false, "userRemoveSongsFromLibrary", {userID:p, songIDs:q, albumIDs:s, artistIDs:u}, J);
        J.promise().then(C, G);
        J.queue("library")
    }, getFavorites:function (p, q, s, u, C) {
        q = q || "Songs";
        var G = x(arguments, C);
        y(s, "getFavorites", {userID:p, ofWhat:q}, G).send([u, C])
    }, favorite:function (p, q, s, u, C) {
        var G = x(arguments, C);
        G = y(false, "favorite", {what:p, ID:q, details:s}, G);
        G.promise().then(u, C);
        G.queue("library")
    }, unfavorite:function (p, q, s, u) {
        var C = x(arguments, u);
        C = y(false, "unfavorite", {what:p,
            ID:q}, C);
        C.promise().then(s, u);
        C.queue("library")
    }, getUserSidebar:function (p, q) {
        var s = x(arguments, q);
        y(false, "getUserSidebar", {}, s).send([p, q])
    }, addShortcutToUserSidebar:function (p, q, s, u, C) {
        var G = x(arguments, C);
        G = y(false, "addShortcutToUserSidebar", {what:p, id:q, name:s}, G);
        G.promise().then(u, C);
        G.queue("library")
    }, removeShortcutFromUserSidebar:function (p, q, s, u) {
        var C = x(arguments, u);
        C = y(false, "removeShortcutFromUserSidebar", {what:p, id:q}, C);
        C.promise().then(s, u);
        C.queue("library")
    }, userGetPlaylists:function (p, q, s, u) {
        var C = x(arguments, u);
        y(q, "userGetPlaylists", {userID:p}, C).send([s, u])
    }, createPlaylist:function (p, q, s, u, C) {
        var G = x(arguments, C);
        y(false, "createPlaylist", {playlistName:p, songIDs:q, playlistAbout:s}, G).send([u, C])
    }, deletePlaylist:function (p, q, s, u) {
        var C = x(arguments, u);
        C = y(false, "deletePlaylist", {playlistID:p, name:q}, C);
        C.promise().then(s, u);
        C.queue("playlist")
    }, playlistUndelete:function (p, q, s) {
        var u = x(arguments, s);
        u = y(false, "playlistUndelete", {playlistID:p}, u);
        u.promise().then(q, s);
        u.queue("playlist")
    },
        overwritePlaylist:function (p, q, s, u, C, G) {
            var J = x(arguments, G);
            J = y(false, "overwritePlaylist", {playlistID:p, playlistName:q, songIDs:s, songs:u}, J);
            J.promise().then(C, G);
            J.queue("playlist")
        }, playlistAddSongToExisting:function (p, q, s, u, C) {
            var G = x(arguments, C);
            G = y(false, "playlistAddSongToExisting", {playlistID:p, songID:q, song:s}, G);
            G.promise().then(u, C);
            G.queue("playlist")
        }, renamePlaylist:function (p, q, s, u, C) {
            var G = x(arguments, C);
            G = y(false, "renamePlaylist", {playlistID:p, playlistName:q, broadcast:s}, G);
            G.promise().then(u,
                    C);
            G.queue("playlist")
        }, setPlaylistAbout:function (p, q, s, u, C) {
            var G = x(arguments, C);
            G = y(false, "setPlaylistAbout", {playlistID:p, about:q, broadcast:s}, G);
            G.promise().then(u, C);
            G.queue("playlist")
        }, playlistSetCollaboration:function (p, q, s, u) {
            var C = x(arguments, u);
            C = y(false, "playlistSetCollaboration", {playlistID:p, enabled:q}, C);
            C.promise().then(s, u);
            C.queue("playlist")
        }, playlistSetUserPermissions:function (p, q, s, u, C) {
            var G = x(arguments, C);
            G = y(false, "playlistSetUserPermissions", {playlistID:p, userID:q, permissions:s},
                    G);
            G.promise().then(u, C);
            G.queue("playlist")
        }, tagRadioGetAllSongs:function (p, q, s) {
            var u = x(arguments, s);
            y(true, "tagRadioGetAllSongs", {tagID:p}, u).send([q, s])
        }, getResultsFromSearch:function (p, q, s, u, C) {
            var G = x(arguments, C);
            G = y(true, "getResultsFromSearch", {query:p, type:q, guts:GS.guts ? GS.getGuts().shouldLog : 0, ppOverride:s}, G);
            q === "Artists" && G.successFilters.push(function (J) {
                if ($.isArray(J.result))J.result = _.map(J.result, function (K) {
                    K.hasOwnProperty("AlbumID") && delete K.AlbumID;
                    K.hasOwnProperty("AlbumName") &&
                    delete K.AlbumName;
                    K.hasOwnProperty("SongName") && delete K.SongName;
                    return K
                });
                return J
            });
            G.send([u, C])
        }, getSearchSuggestion:function (p, q, s) {
            var u = x(arguments, s);
            y(true, "getSearchSuggestion", {query:p}, u).send([q, s])
        }, getAutocomplete:function (p, q, s, u) {
            var C = x(arguments, u);
            y(true, "getAutocomplete", {query:p, type:q}, C).send([s, u])
        }, getProfileFeed:function (p, q, s, u) {
            var C = x(arguments, u);
            y(1E4, "getProfileFeed", {lastDocumentID:p, lastEventID:q}, C).send([s, u])
        }, getUserProfileFeed:function (p, q, s, u, C) {
            var G = x(arguments,
                    C);
            y(1E4, "getUserProfileFeed", {userID:p, lastDocumentID:q, lastEventID:s}, G).send([u, C])
        }, getCombinedFeed:function (p, q, s, u) {
            var C = x(arguments, u);
            y(1E4, "getCombinedFeed", {excludeUsers:p, lastEventID:q}, C).send([s, u])
        }, getUserCombinedFeed:function (p, q, s, u, C) {
            var G = x(arguments, C);
            y(3E4, "getUserCombinedFeed", {userID:p, excludeUsers:q, lastEventID:s}, G).send([u, C])
        }, getUserFeedEvent:function (p, q, s) {
            var u = x(arguments, s);
            y(3E4, "getUserFeedEvent", {eventID:p}, u).send([q, s])
        }, getInterestingEvents:function (p, q, s) {
            var u =
                    x(arguments, s);
            y(3E4, "getInterestingEvents", {limit:p}, u).send([q, s])
        }, getArtistProfileFeed:function (p, q, s, u, C) {
            var G = x(arguments, C);
            y(false, "getArtistProfileFeed", {artistID:p, lastDocumentID:q, lastEventID:s}, G).send([u, C])
        }, hideUserEvent:function (p, q, s) {
            var u = x(arguments, s);
            y(true, "hideUserEvent", {eventID:p}, u).send([q, s])
        }, changeFollowFlags:function (p, q, s) {
            var u = x(arguments, s);
            y(false, "changeFollowFlags", {userIDsFlags:p}, u).send([q, s])
        }, sendFeedBroadcast:function (p, q, s, u, C, G) {
            var J = x(arguments, G);
            y(false, "sendFeedBroadcast", {what:p, ID:q, people:s, message:u}, J).send([C, G])
        }, addEventComment:function (p, q, s, u) {
            var C = x(arguments, u);
            y(false, "addEventComment", {eventID:p, comment:q}, C).send([s, u])
        }, hideEventComment:function (p, q, s, u) {
            var C = x(arguments, u);
            y(false, "hideEventComment", {eventID:q, commentID:p}, C).send([s, u])
        }, getUserNotifications:function (p, q) {
            var s = x(arguments, q);
            y(6E4, "getUserNotifications", {}, s).send([p, q])
        }, feedsBanArtist:function (p, q, s) {
            var u = x(arguments, s);
            y(false, "feedsBanArtist", {artistID:p},
                    u).send([q, s])
        }, feedsUnbanArtist:function (p, q, s) {
            var u = x(arguments, s);
            y(false, "feedsUnbanArtist", {artistID:p}, u).send([q, s])
        }, feedsGetBannedArtists:function (p, q) {
            var s = x(arguments, q);
            y(false, "feedsGetBannedArtists", {}, s).send([p, q])
        }, feedsRemoveEventFromProfile:function (p, q, s, u) {
            var C = x(arguments, u);
            y(false, "feedsRemoveEventFromProfile", {type:p, time:q}, C).send([s, u])
        }, logTargetedThemeImpression:function (p, q, s) {
            var u = x(arguments, s);
            y(false, "logTargetedThemeImpression", {themeID:p}, u).send([q, s])
        }, logThemeOutboundLinkClick:function (p, q, s, u) {
            var C = x(arguments, u);
            y(false, "logThemeOutboundLinkClick", {themeID:p, linkID:q}, C).send([s, u])
        }, provideSongFeedbackMessage:function (p, q, s, u) {
            var C = x(arguments, u);
            y(false, "provideSongFeedbackMessage", {songID:p, message:q}, C).send([s, u])
        }, provideSongFeedbackVote:function (p, q, s, u, C) {
            var G = x(arguments, C);
            y(false, "provideSongFeedbackVote", {songID:p, vote:q, artistID:s}, G).send([u, C])
        }, sendShare:function (p, q, s, u, C, G, J, K) {
            var L = x(arguments, K);
            L = y(false, "sendShare", {what:p, ID:q, people:s, country:this.country,
                override:u, message:C}, L);
            if (G)L.overrideHeaders.privacy = 1;
            L.send([J, K]);
            GS.getGuts().logEvent("itemSharePerformed", {type:p, id:q})
        }, getContactInfoForFollowers:function (p, q) {
            var s = x(arguments, q);
            y(false, "getContactInfoForFollowers", {}, s).send([p, q])
        }, getSongkickEventsFromArtists:function (p, q, s, u) {
            var C = x(arguments, u);
            y(true, "getSongkickEventsFromArtists", {artistIDs:p, names:q}, C).send([s, u])
        }, getGoogleAuthToken:function (p, q, s, u) {
            var C = "EscapeMG-Grooveshark-" + this.clientRevision, G = x(arguments, u);
            y(false,
                    "getGoogleAuthToken", {Email:p, Passwd:q, source:C}, G, true).send([s, u])
        }, getGoogleContacts:function (p, q, s) {
            var u = x(arguments, s);
            req = y(false, "getGoogleContacts", {authToken:p}, u, false, true);
            req.send([q, s])
        }, getDetailsForBroadcast:function (p, q, s) {
            var u = x(arguments, s);
            y(true, "getDetailsForBroadcast", {songID:p}, u).send([q, s])
        }, broadcastSong:function (p, q, s, u, C, G, J, K, L) {
            var M = x(arguments, L);
            y(false, "broadcastSong", {songID:p, message:q, username:s, password:u, saveCredentials:C, service:G, song:J}, M, true).send([K,
                L])
        }, getUserFacebookData:function (p, q) {
            var s = x(arguments, q);
            y(false, "getUserFacebookDataEx", {}, s, true).send([p, q])
        }, saveUserFacebookData:function (p, q, s, u, C, G, J, K) {
            var L = x(arguments, K);
            y(false, "saveUserFacebookDataEx", {facebookUserID:p, sessionKey:q, accessToken1:s, accessToken3:u, flags:C, accessTokenEx:G}, L, true, true).send([J, K])
        }, updateUserFacebookData:function (p, q, s, u, C, G, J, K) {
            var L = x(arguments, K);
            y(false, "updateUserFacebookData", {facebookUserID:p, sessionKey:q, accessToken1:s, accessToken3:u, flags:C,
                accessTokenEx:G}, L, true, true).send([J, K])
        }, removeUserFacebookData:function (p, q, s) {
            var u = x(arguments, s);
            y(false, "removeUserFacebookData", {facebookUserID:p}, u).send([q, s])
        }, getUserGoogleData:function (p, q) {
            var s = x(arguments, q);
            y(false, "getUserGoogleData", {}, s, true, true).send([p, q])
        }, saveUserGoogleData:function (p, q) {
            var s = x(arguments, q);
            y(false, "saveUserGoogleData", {}, s).send([p, q])
        }, updateUserGoogleData:function (p, q) {
            req = c.createRequest(false, "updateUserGoogleData", {}, arguments[arguments.length - 1] ===
                    q ? {} : arguments[arguments.length - 1]);
            req.send([p, q])
        }, updateUserGoogleData:function (p, q) {
            var s = x(arguments, q);
            y(false, "updateUserGoogleData", {}, s).send([p, q])
        }, removeUserGoogleData:function (p, q, s) {
            var u = x(arguments, s);
            y(false, "removeUserGoogleData", {googleID:p}, u).send([q, s])
        }, getUserTwitterData:function (p, q) {
            req = c.createRequest(false, "getUserTwitterData", {}, arguments[arguments.length - 1] === q ? {} : arguments[arguments.length - 1], true, true);
            req.send([p, q])
        }, saveUserTwitterData:function (p, q, s, u, C) {
            req = c.createRequest(false,
                    "saveUserTwitterData", {twitterUserID:p, oauthToken:q, oauthSecret:s}, arguments[arguments.length - 1] === C ? {} : arguments[arguments.length - 1]);
            req.send([u, C])
        }, updateUserTwitterData:function (p, q, s, u, C) {
            req = c.createRequest(false, "updateUserTwitterData", {twitterUserID:p, oauthToken:q, oauthSecret:s}, arguments[arguments.length - 1] === C ? {} : arguments[arguments.length - 1]);
            req.send([u, C])
        }, removeUserTwitterData:function (p, q, s) {
            req = c.createRequest(false, "removeUserTwitterData", {twitterUserID:p}, arguments[arguments.length -
                    1] === s ? {} : arguments[arguments.length - 1]);
            req.send([q, s])
        }, postTwitterStatus:function (p, q, s, u, C) {
            req = c.createRequest(false, "postTwitterStatus", {message:p, oauthToken:q, oauthSecret:s}, arguments[arguments.length - 1] === C ? {} : arguments[arguments.length - 1]);
            req.send([u, C])
        }, getTwitterFriends:function (p, q, s, u, C) {
            req = c.createRequest(false, "getTwitterFriends", {twitterUserID:p, oauthToken:q, oauthSecret:s}, arguments[arguments.length - 1] === C ? {} : arguments[arguments.length - 1]);
            req.send([u, C])
        }, getTwitterFollowers:function (p, q, s, u, C) {
            req = c.createRequest(false, "getTwitterFollowers", {twitterUserID:p, oauthToken:q, oauthSecret:s}, arguments[arguments.length - 1] === C ? {} : arguments[arguments.length - 1]);
            req.send([u, C])
        }, getUsernameSuggestions:function (p, q, s, u, C) {
            var G = x(arguments, C);
            y(true, "getUsernameSuggestions", {baseUsername:p, fullName:q, idOrRand:s}, G).send([u, C])
        }, registerFacebookUser:function (p, q, s, u, C, G, J, K, L, M, O, N, P, R, Q) {
            var S = x(arguments, Q);
            y(false, "registerFacebookUser", {username:p, firstName:q, emailAddress:s, sex:u, birthDate:C,
                flags:G, inviteID:J, facebookUserID:K, sessionKey:L, accessToken1:M, accessToken3:O, accessTokenEx:N, facebookFlags:P}, S, true, true).send([R, Q])
        }, getGroovesharkUsersFromFacebookUserIDs:function (p, q, s) {
            var u = x(arguments, s);
            y(false, "getGroovesharkUsersFromFacebookUserIDs", {facebookUserIDs:p}, u).send([q, s])
        }, getGroovesharkUsersFromTwitterUserIDs:function (p, q, s) {
            req = c.createRequest(false, "getGroovesharkUsersFromTwitterUserIDs", {twitterUserIDs:p}, arguments[arguments.length - 1] === s ? {} : arguments[arguments.length -
                    1]);
            req.send([q, s])
        }, registerGoogleUser:function (p, q, s, u, C, G, J, K, L) {
            var M = x(arguments, L);
            y(false, "registerGoogleUser", {username:p, firstName:q, emailAddress:s, sex:u, birthDate:C, flags:G, inviteID:J}, M, true, true).send([K, L])
        }, registerTwitterUser:function (p, q, s, u, C, G, J, K, L, M, O, N) {
            req = c.createRequest(false, "registerTwitterUser", {username:p, firstName:q, emailAddress:s, sex:u, birthDate:C, flags:G, inviteID:J, twitterUserID:K, oauthToken:L, oauthSecret:M}, arguments[arguments.length - 1] === N ? {} : arguments[arguments.length -
                    1], true, true);
            req.send([O, N])
        }, updateLastfmService:function (p, q, s, u, C, G, J) {
            var K = x(arguments, J);
            y(false, "updateLastfmService", {session:p, token:q, username:s, flagsAdd:u, flagsRemove:C}, K).send([G, J])
        }, saveLastfmService:function (p, q, s, u, C, G) {
            var J = x(arguments, G);
            y(false, "saveLastfmService", {session:p, token:q, username:s, flags:u}, J).send([C, G])
        }, getLastfmService:function (p, q) {
            var s = x(arguments, q);
            y(false, "getLastfmService", {}, s).send([p, q])
        }, removeLastfmService:function (p, q, s) {
            var u = x(arguments, s);
            y(false,
                    "removeLastfmService", {lastfmUsername:p}, u).send([q, s])
        }, getAffiliateDownloadURLs:function (p, q, s, u) {
            var C = x(arguments, u);
            y(false, "getAffiliateDownloadURLs", {songName:p, artistName:q}, C).send([s, u])
        }, getServiceStatus:function (p, q) {
            var s = x(arguments, q);
            y(false, "getServiceStatus", {}, s).send([p, q])
        }, provideVIPFeedback:function (p, q, s, u, C) {
            var G = x(arguments, C);
            y(false, "provideVIPFeedback", {fromAddress:p, message:q, type:s}, G).send([u, C])
        }, artistGetSimilarArtists:function (p, q, s) {
            var u = x(arguments, s);
            y(true,
                    "artistGetSimilarArtists", {artistID:p}, u).send([q, s])
        }, getThemeFromDFP:function (p, q, s) {
            var u = x(arguments, s);
            u = y(false, "getThemeFromDFP", {paramString:p}, u, false, true);
            u.type = "dfp";
            u.send([q, s])
        }, getNotificationFromDFP:function (p, q, s) {
            var u = x(arguments, s);
            u = y(false, "getNotificationFromDFP", {paramString:p}, u, false, true);
            u.type = "dfp";
            u.send([q, s])
        }, getItemByPageName:function (p, q, s) {
            var u = x(arguments, s);
            y(true, "getItemByPageName", {name:p}, u).send([q, s])
        }, getPageNameByIDType:function (p, q, s, u) {
            var C = x(arguments,
                    u);
            C = y(true, "getPageNameByIDType", {id:p, type:q}, C);
            C.promise().then(s, u);
            C.promise().then(function (G) {
                G.name && window.GS && GS.router && GS.router.cachePageName(G.name, q, p)
            });
            C.send()
        }, userGetPoints:function (p, q) {
            var s = x(arguments, q);
            y(false, "userGetPoints", {}, s).send([p, q])
        }, getClearvoiceMemberInfo:function (p, q, s) {
            var u = x(arguments, s), C = {};
            if (p)C.guid = p;
            y(false, "getClearvoiceMemberInfo", C, u, true).send([q, s])
        }, getUserIDByClearvoiceEmail:function (p, q, s) {
            var u = x(arguments, s);
            y(false, "getUserIDByClearvoiceEmail",
                    {email:p}, u, true).send([q, s])
        }, saveClearvoiceMemberInfo:function (p, q, s, u, C, G) {
            var J = x(arguments, G);
            y(false, "saveClearvoiceMemberInfo", {guid:p, fName:q, lName:s, email:u}, J, true).send([C, G])
        }, addClearvoiceAnswers:function (p, q, s) {
            var u = x(arguments, s);
            y(false, "addClearvoiceAnswers", {questionsAndAnswers:p}, u, true).send([q, s])
        }, getUserSurveys:function (p, q, s) {
            var u = x(arguments, s);
            y(false, "getUserSurveys", {userID:p}, u).send([q, s])
        }, getAvailableSurveys:function (p, q) {
            var s = x(arguments, q);
            y(false, "getAvailableSurveys",
                    {}, s).send([p, q])
        }, saveUserAnswers:function (p, q, s, u, C, G) {
            var J = x(arguments, G);
            y(false, "saveUserAnswers", {surveyID:p, userID:q, questionsAndAnswers:s, finalize:u}, J, true, true).send([C, G])
        }, finalizeUserSurvey:function (p, q, s, u) {
            var C = x(arguments, u);
            y(false, "finalizeUserSurvey", {surveyID:p, userID:q}, C, true, true).send([s, u])
        }, addKinesisToUser:function (p, q) {
            var s = x(arguments, q);
            y(false, "addKinesisToUser", {}, s).send([p, q])
        }, removeKinesisFromUser:function (p, q) {
            var s = x(arguments, q);
            y(false, "removeKinesisFromUser",
                    {}, s).send([p, q])
        }, getKinesisUserPassword:function (p, q) {
            var s = x(arguments, q);
            y(false, "getKinesisUserPassword", {}, s).send([p, q])
        }, submitPlaylistForCampaign:function (p, q, s, u) {
            var C = x(arguments, u);
            (new c("submitPlaylistForCampaign", {playlistID:p, campaignID:q}, C, false)).send([s, u])
        }, submitSongVoteForCampaign:function (p, q, s, u) {
            var C = x(arguments, u);
            (new c("submitSongVoteForCampaign", {songID:p, campaignID:q}, C, false)).send([s, u])
        }, getPlaylistsForCampaign:function (p, q, s) {
            var u = x(arguments, s);
            (new c("getPlaylistsForCampaign",
                    {campaignID:p}, u, false)).send([q, s])
        }, getTunipopID:function (p, q, s, u) {
            var C = x(arguments, u), G = {};
            if (q)G.brand = p; else G.artist = p;
            C = y(true, "getTunipopID", G, C, null, true);
            C.type = "tunipop";
            C.send([s, u])
        }, getSubscriptionHistory:function (p, q) {
            var s = x(arguments, q);
            y(true, "getSubscriptionHistory", {}, s, true, true).send([p, q])
        }, getPartyHash:function (p, q) {
            var s = x(arguments, q);
            s = y(false, "getPartyHash", {}, s);
            s.promise().then(p, q);
            s.queue("playlist")
        }})
})();
GS.Controllers.BaseController.extend("GS.Controllers.AuthController", {onWindow:true}, {init:function () {
    GS.service = GS.service || GS.Controllers.ServiceController.instance();
    if (!gsConfig.user.UserID)gsConfig.user.UserID = -1;
    this._handleLoginChange(GS.Models.AuthUser.wrap(gsConfig.user));
    this._super();
    this.subscribe("gs.auth.update", this.callback(this._onAuthUpdate))
}, appReady:function () {
    if (GS.user.UserID > 0 && GS.user.TSDOB !== "" && GS.user.UserID != 42) {
        var b = new Date, a = GS.user.TSDOB.split("-"), c = parseInt(a[1],
                10) - 1;
        a = parseInt(a[2], 10);
        b.getMonth() == c && b.getDate() == a && GS.getNotice().displayPerAnum()
    }
}, login:function (b, a, c, h, g) {
    GS.service.authenticateUser(b, a, c, this.callback(this._loginSuccess, "normal", h, g), this.callback(this._loginFailed, "normal", g))
}, loginViaFacebook:function (b, a) {
    GS.getFacebook().login(this.callback(this._loginSuccess, "facebook", b, a), this.callback(this._loginFailed, "facebook", a))
}, loginViaTwitter:function (b, a) {
    GS.getTwitter().login(this.callback(this._loginSuccess, "twitter", b, a), this.callback(this._loginFailed,
            "twitter", a))
}, loginViaGoogle:function (b, a) {
    GS.getGoogle().login(this.callback(this._loginSuccess, "google", b, a), this.callback(this._loginFailed, "google", a))
}, _loginSuccess:function (b, a, c, h) {
    if (h && h.userID === 0 || !h)return this._loginFailed(b, c, h);
    h.authType = b;
    if (window.GS && GS.Controllers.PageController.activePageName === "SurveysController")h.doNotReset = true;
    this._updateUser({}, {User:h});
    if (GS.airbridge && GS.airbridge.isDesktop && parseInt(h.isPremium, 10) !== 1 || gsConfig.isPreview && parseInt(h.isPremium, 10) !==
            1 && parseInt(h.userID, 10) % 5 != 0) {
        if ($.isFunction(c)) {
            h.error = "POPUP_SIGNUP_LOGIN_FORM_PREMIUM_REQUIRED_ERROR";
            c(h)
        }
    } else $.isFunction(a) && a(h);
    return h
}, _loginFailed:function (b, a, c) {
    c || (c = {});
    c.authType = b;
    $.isFunction(a) && a(c);
    return c
}, logout:function (b) {
    GS.service.logoutUser(this.callback(this._logoutSuccess, b), this.callback(this._logoutFailed))
}, _logoutSuccess:function (b) {
    GS.user.clearData();
    GS.getGuts().logEvent("logout", {});
    GS.getGuts().endContext("userID");
    GS.router.setHash("/");
    this._handleLoginChange(GS.Models.AuthUser.wrap({userTrackingID:GS.user.userTrackingID}));
    $.isFunction(b) && b()
}, _logoutFailed:function () {
}, signup:function (b, a, c, h, g, k, m, n, o, r) {
    var A = this._getInviteCode();
    GS.service.registerUser(b, a, c, "", h, g, k, m, A, n, this.callback(this._signupSuccess, "normal", A, h, o, r), this.callback(this._signupFailed, "normal", r))
}, signupViaFacebook:function (b, a, c, h, g, k, m, n, o) {
    var r = this._getInviteCode();
    m.accessToken1 ? GS.service.registerFacebookUser(b, a, c, h, g, k, r, m.facebookUserID, m.sessionKey, m.accessToken1, m.accessToken3, null, m.flags, this.callback(this._signupSuccess, "facebook",
            r, c, n, o), this.callback(this._signupFailed, "facebook", o)) : GS.service.registerFacebookUser(b, a, c, h, g, k, r, m.facebookUserID, "", "", "", m.accessTokenEx, m.flags, this.callback(this._signupSuccess, "facebook", r, c, n, o), this.callback(this._signupFailed, "facebook", o))
}, signupViaGoogle:function (b, a, c, h, g, k, m, n) {
    var o = this._getInviteCode();
    GS.service.registerGoogleUser(b, a, c, h, g, k, o, this.callback(this._signupSuccess, "google", o, c, m, n), this.callback(this._signupFailed, "google", n))
}, signupViaTwitter:function (b, a, c, h, g, k, m, n, o) {
    var r = this._getInviteCode();
    GS.service.registerTwitterUser(b, a, c, h, g, k, r, m.twitterUserID, m.oauthToken, m.oauthSecret, this.callback(this._signupSuccess, "twitter", r, c, n, o), this.callback(this._signupFailed, "twitter", o))
}, _signupSuccess:function (b, a, c, h, g, k) {
    if (k && k.userID === 0 || !k)return this._signupFailed(b, g, k);
    k.authType = b;
    k.Email = c;
    if (a) {
        GS.store.set("lastInviteCode", null);
        gsConfig.inviteCode = null;
        GS.service.getUserByInviteID(a, this.callback(this._getInviterSuccess))
    }
    k.doNotReset = true;
    GS.service.getUserByID(k.userID, this.callback(this._updateUser, k));
    $.isFunction(h) && h(k);
    return k
}, _signupFailed:function (b, a, c) {
    c || (c = {});
    c.authType = b;
    $.isFunction(a) && a(c);
    return c
}, _getInviteCode:function () {
    var b = "", a = new Date, c = GS.store.get("lastInviteCode");
    if (c)if (c.expires && c.expires > a.valueOf())b = c.inviteCode; else GS.store.remove("lastInviteCode"); else if (gsConfig.inviteCode)b = gsConfig.inviteCode;
    return b
}, _getInviterSuccess:function (b) {
    var a = GS.Models.User.wrap(b);
    GS.getLightbox().open({type:"followInviter",
        view:{header:"POPUP_FOLLOW_INVITER_TITLE", messageHTML:(new GS.Models.DataString($.localize.getString("POPUP_FOLLOW_INVITER_MESSAGE"), {user:a.Name})).render(), buttonsLeft:[
            {label:"POPUP_FOLLOW_INVITER_CANCEL", className:"close"}
        ], buttonsRight:[
            {label:"POPUP_FOLLOW_INVITER_FOLLOW", className:"submit"}
        ]}, callbacks:{".submit":function () {
            GS.user.addToUserFavorites(a.UserID)
        }}})
}, _updateUser:function (b, a) {
    a.User.UserID = b.userID;
    b.doNotReset || GS.router.setHash("/");
    var c = $.extend({}, b, a.User);
    this._handleLoginChange(GS.Models.AuthUser.wrapFromService(c),
            b);
    $("#notifications li.survey").remove()
}, _handleLoginChange:function (b, a) {
    var c = GS.user;
    GS.user = b;
    GS.service.reportUserChange(GS.user);
    if (c && c.isDirty) {
        var h = {};
        _.forEach(c.playlists, function (k) {
            var m = [], n = k.PlaylistID;
            _.forEach(k.songs, function (o) {
                m.push(o.SongID)
            });
            GS.user.createPlaylist(k.PlaylistName, m, k.Description, function () {
                h[n] = k.PlaylistID
            }, null, false)
        });
        var g = _.map(c.library.songs, function (k) {
            return k.SongID
        });
        GS.user.addToLibrary(g, false);
        _.forEach(c.favorites.artists, function (k) {
            GS.user.addToArtistFavorites(k.ArtistID,
                    false)
        });
        _.forEach(c.favorites.playlists, function (k) {
            GS.user.addToPlaylistFavorites(k.PlaylistID, false)
        });
        _.forEach(c.favorites.songs, function (k) {
            GS.user.addToSongFavorites(k.SongID, false)
        });
        _.forEach(c.favorites.users, function (k) {
            GS.user.addToUserFavorites(k.UserID, false)
        });
        _.forEach(c.sidebar.stations, function (k) {
            c.defaultStations.indexOf(k) == -1 && GS.user.addToShortcuts("station", k, "", false)
        });
        _.forEach(c.sidebar.playlists, function (k) {
            if (k < 0)k = h[k];
            (k = GS.Models.Playlist.getOneFromCache(k)) && GS.user.addToShortcuts("playlist",
                    k.PlaylistID, k.PlaylistName, false)
        });
        _.forEach(c.sidebar.subscribedPlaylists, function (k) {
            (k = GS.Models.Playlist.getOneFromCache(k)) && GS.user.addToShortcuts("playlist", k.PlaylistID, k.PlaylistName, false)
        });
        _.forEach(c.sidebar.songs, function (k) {
            (k = GS.Models.Song.getOneFromCache(k)) && GS.user.addToShortcuts("song", k.SongID, k.SongName, false)
        });
        _.forEach(c.sidebar.artists, function (k) {
            (k = GS.Models.Artist.getOneFromCache(k)) && GS.user.addToShortcuts("artist", k.ArtistID, k.ArtistName, false)
        });
        _.forEach(c.sidebar.albums,
                function (k) {
                    (k = GS.Models.Album.getOneFromCache(k)) && GS.user.addToShortcuts("album", k.AlbumID, k.AlbumName, false)
                })
    }
    GS.service.reportUserChange(GS.user);
    $.publish("gs.auth.update", a);
    if (!GS.user.subscription.canUseDesktop() && GS.Controllers.AirbridgeController.instance().isDesktop || gsConfig.isPreview && !GS.user.subscription.isPremium() && GS.user.UserID % 5 != 0) {
        if (g = GS.getLightbox ? GS.getLightbox() : null)$("#lightbox_wrapper .lbcontainer.gs_lightbox_login:visible").length || g.open("login", {premiumRequired:true,
            showPreview:true, notCloseable:true}); else gsConfig.lightboxOnInit = {type:"login", defaults:{premiumRequired:true, showPreview:true, notCloseable:true}};
        GS.player && GS.player.pauseNextSong()
    }
    GS.user.isLoggedIn || $.publish("gs.auth.library.update");
    if (GS.getGuts && GS.user && GS.user.UserID > 0) {
        g = _.browserDetect();
        GS.getGuts().logEvent("login", {userID:GS.user.UserID, browser:g.browser, browserVersion:g.version, os:navigator.platform, ip:gsConfig.remoteAddr});
        GS.getGuts().beginContext({userID:GS.user.UserID})
    }
}, _onAuthUpdate:function () {
    $.isFunction(this.vipUpdateCallback) &&
            GS.user.subscription.isPremium() && this.vipUpdateCallback();
    this.vipUpdateCallback = null;
    $.isFunction(this.authUpdateCallback) && this.authUpdateCallback();
    this.authUpdateCallback = null
}});
jQuery.Controller.extend("GS.Controllers.ThemeController", {_instance:null, themes:themes, sortOrder:themesSortOrder, plusThemes:plusThemes, artistThemes:artistThemes, instance:function () {
    return this._instance ? this._instance : new this($(document))
}, init:function () {
    this._super()
}}, {currentTheme:null, themes:null, sort:null, themesLocation:"themes", themePreferences:{}, hasSeenSponsoredTheme:true, hasSeenRotationCount:true, promptOnLogin:false, themeVisualizerForcedOnce:false, themeIsReady:false, manualSelectThemeID:null,
    lastActivePage:null, lastThemeNotification:null, lastDFPChange:null, lastUserChange:null, PAGE_HOME:"homecontroller", DEFAULT_USER_THEMEID:377, DEFAULT_PREMIUM_THEMEID:377, THEME_URL_PATTERN:/^#!\/(theme)\/(.*)\/?/, THEME_USER_LIMIT:6E5, THEME_RATE_LIMIT:6E4, THEME_NOTIF_RATE_LIMIT:864E5, THEME_FLAG_DEFAULT:0, THEME_FLAG_FAMILY_FRIENDLY:1, init:function () {
        this.themes = themes;
        this.sort = themesSortOrder;
        this.themePreferences = GS.store.get("themePreferences") || {};
        $.subscribe("gs.app.ready", this.callback(this.appReady));
        $.subscribe("gs.app.resize", this.callback(this.positionTheme));
        $.subscribe("gs.auth.update", this.callback(this.onAuthUpdate));
        $.subscribe("gs.page.home.update", this.callback(this.positionTheme));
        $.subscribe("gs.player.nowplaying", this.callback(this.onSongPlay));
        $.subscribe("gs.player.streamserver", this.callback(this.onStreamServer));
        $.subscribe("gs.page.view", this.callback(this.pageView));
        $.subscribe("gs.theme.click", this.callback(this.onThemeClick));
        $.subscribe("gs.theme.playVideo", this.callback(this.playVideo))
    },
    appReady:function () {
        if (!(location.hash && location.hash.match(GS.theme.THEME_URL_PATTERN))) {
            if (GS.user.UserID > 0 || _.defined(GS.store.get("isFirstVisit")) || _.defined(gsConfig.isNoob) && !gsConfig.isNoob) {
                this.isFirstVisit = false;
                this.resetTheme();
                this.handlePreviewLightboxTrigger()
            } else GS.service.isFirstVisit(this.callback("onIsFirstVisit"));
            setTimeout(this.callback(function () {
                this.currentTheme || this.lastOrDefault()
            }), 1E4)
        }
    }, onAuthUpdate:function (b) {
        if (!(b && b.hasOwnProperty("doNotReset") || location.hash.indexOf("#!/signup") ==
                0)) {
            this.lastDFPChange = this.lastUserChange = this.lastThemeNotification = null;
            this.hasSeenRotationCount = this.hasSeenSponsoredTheme = true;
            if (this.promptOnLogin && GS.user.UserID > 0) {
                this.promptOnLogin = false;
                this.lastDFPChange = (new Date).getTime();
                GS.getLightbox().open("promotion", {theme:this.currentTheme})
            } else!this.promptOnLogin && GS.getLightbox().curType !== "promotion" && this.resetTheme();
            if (GS.user.subscription.canHideAds()) {
                $("#sidebarCapital_160").removeClass("capital");
                GS.getAd().hideAdBar()
            }
            this.currentTheme &&
                    this.currentTheme.onAuthChange && this.currentTheme.onAuthChange()
        }
    }, resetTheme:function (b) {
        if (!(b && b.hasOwnProperty("doNotReset") || this.isFirstVisit)) {
            b = new Date;
            !gsConfig.isPreview && !GS.user.subscription.canHideAds() && this.hasSeenSponsoredTheme && this.hasSeenRotationCount && (!this.lastUserChange || b.getTime() - this.lastUserChange > this.THEME_USER_LIMIT) ? this.loadFromDFP() : this.lastOrDefault()
        }
    }, onIsFirstVisit:function (b) {
        this.isFirstVisit = b;
        GS.store.set("isFirstVisit", false);
        if (this.isFirstVisit) {
            this.setCurrentTheme(this.DEFAULT_USER_THEMEID);
            this.trackFirstVisit()
        } else this.resetTheme();
        this.handlePreviewLightboxTrigger()
    }, lastOrDefault:function () {
        var b = this.getLastTheme();
        if (this.themes) {
            if (b && themes[b] && (GS.user.subscription.canHideAds() && b || themes[b] && !themes[b].premium)) {
                themes[b].pageTracking = [];
                this.setCurrentTheme(b)
            } else GS.user.subscription.canHideAds() ? this.setCurrentTheme(this.DEFAULT_PREMIUM_THEMEID) : this.setCurrentTheme(this.DEFAULT_USER_THEMEID);
            this.themeNotification(GS.player.getCurrentSong())
        }
    }, setCurrentTheme:function (b, a) {
        if (!this.themes[b] || this.currentTheme && this.currentTheme.themeID == b || !GS.user.subscription.canHideAds() && this.themes[b].premium)return false;
        var c = !this.currentTheme;
        (this.lastTheme = this.currentTheme) && this.lastTheme.removeReady && this.lastTheme.removeReady();
        this.promptOnLogin = false;
        this.currentTheme = GS.Models.Theme.wrap(this.themes[b]);
        this.renderTheme();
        var h = new Date;
        if (GS.getAd)GS.getAd().rotationCountPerImpression = 0;
        if (a) {
            this.hasSeenRotationCount = this.hasSeenSponsoredTheme = true;
            this.setLastTheme(b);
            if (this.lastTheme)this.setLastSeen(this.lastTheme.themeID); else this.lastUserChange = h.getTime()
        } else {
            this.lastDFPChange = h.getTime();
            this.hasSeenRotationCount = this.hasSeenSponsoredTheme = false
        }
        if (c) {
            this.onReady();
            GS.getGuts().gaTrackEvent("themes", "firstTheme", b);
            this.firstTheme = "" + b
        } else this.adSync();
        GS.getGuts().gaTrackEvent("themes", "change", b);
        this.themeImpression();
        this.themePageImpression();
        this.setRecentSeen(this.currentTheme.themeID);
        this.currentTheme.ready && setTimeout(this.callback(function () {
            this.currentTheme.ready();
            GS.getFacebook();
            GS.getNotice()
        }, 0));
        $.publish("gs.theme.set");
        this.buildSidebarAd()
    }, setLastTheme:function (b) {
        if (this.themePreferences[GS.user.UserID])this.themePreferences[GS.user.UserID].lastTheme = b; else this.themePreferences[GS.user.UserID] = {lastTheme:b, lastSeen:{}}
    }, setLastSeen:function (b) {
        var a = new Date;
        this.lastUserChange = a.getTime();
        if (this.themePreferences[GS.user.UserID])this.themePreferences[GS.user.UserID].lastSeen[b] = a.getTime()
    }, setRecentSeen:function (b) {
        this.themePreferences[GS.user.UserID] ||
        (this.themePreferences[GS.user.UserID] = {lastTheme:b, lastSeen:{}, recentSeenThemes:[]});
        if (!this.themePreferences[GS.user.UserID].recentSeenThemes)this.themePreferences[GS.user.UserID].recentSeenThemes = [];
        if (this.themePreferences[GS.user.UserID].recentSeenThemes.indexOf(b) < 0)if (this.themePreferences[GS.user.UserID].recentSeenThemes.length >= 10) {
            this.themePreferences[GS.user.UserID].recentSeenThemes.push(b);
            this.themePreferences[GS.user.UserID].recentSeenThemes.shift()
        } else this.themePreferences[GS.user.UserID].recentSeenThemes.push(b)
    },
    getRecentSeen:function () {
        return this.themePreferences[GS.user.UserID] ? this.themePreferences[GS.user.UserID].recentSeenThemes : null
    }, setLastDFPAction:function () {
        this.lastDFPChange = (new Date).getTime()
    }, getLastTheme:function () {
        return this.themePreferences[GS.user.UserID] && this.themePreferences[GS.user.UserID].lastTheme ? this.themePreferences[GS.user.UserID].lastTheme : null
    }, getLastSeen:function (b) {
        return this.themePreferences[GS.user.UserID] && this.themePreferences[GS.user.UserID].lastSeen[b] ? this.themePreferences[GS.user.UserID].lastSeen[b] :
                null
    }, canCallAdServer:function () {
        return!this.isFirstVisit && !gsConfig.isPreview && !GS.user.subscription.canHideAds() && this.hasSeenSponsoredTheme && this.hasSeenRotationCount && (!this.lastUserChange || (new Date).getTime() - this.lastUserChange > this.THEME_USER_LIMIT)
    }, adSync:function () {
        if (!GS.user.subscription.canHideAds() && (this.currentTheme.misc && this.currentTheme.misc.adSync || this.currentTheme.adSync))GS.getAd().startAdTimer()
    }, adUnSync:function () {
        if (!GS.user.subscription.canHideAds() && (this.currentTheme.misc &&
                this.currentTheme.misc.adUnSync || this.currentTheme.adUnSync))GS.getAd().startAdTimer()
    }, hasAdSyncUnSync:function () {
        return this.currentTheme.misc && this.currentTheme.misc.adSync && this.currentTheme.misc.adUnSync || this.currentTheme.adSync && this.currentTheme.adUnSync
    }, loadFromDFPManual:function (b) {
        this.manualSelectThemeID = b;
        b = ";" + ["id=" + this.manualSelectThemeID, "m=1;dcmt=text/json;sz=777x777"].join(";");
        GS.service.getThemeFromDFP(b, this.callback("onGetThemeManual"), this.callback("onGetThemeErr"))
    }, onGetThemeManual:function (b) {
        this.onGetTheme(b,
                true)
    }, loadFromDFP:function () {
        var b = new Date;
        if (!gsConfig.isPreview && !GS.user.subscription.canHideAds() && (!this.lastDFPChange || b.getTime() - this.lastDFPChange > this.THEME_RATE_LIMIT))GS.service.getThemeFromDFP(this.buildParams(), this.callback("onGetTheme"), this.callback("onGetThemeErr"))
    }, onGetTheme:function (b, a) {
        var c = new Date;
        if (!a && c.getTime() - this.lastUserChange < this.THEME_USER_LIMIT)console.warn("[Stopped DFP Override]"); else {
            try {
                b = JSON.parse(b)
            } catch (h) {
                console.log("invalid json from DFP", h);
                this.lastOrDefault();
                return
            }
            if (b) {
                if (a) {
                    if (this.manualSelectThemeID && this.manualSelectThemeID.toString() != b.themeID.toString()) {
                        this.themes[this.manualSelectThemeID].pageTracking = [];
                        this.setCurrentTheme(this.manualSelectThemeID, true);
                        return
                    }
                } else {
                    if (b.themeID < 0) {
                        this.trackDefault(b.themeID);
                        this.lastOrDefault();
                        return
                    }
                    if (this.getLastSeen(b.themeID)) {
                        this.lastOrDefault();
                        return
                    }
                }
                if (this.themes[b.themeID])$.extend(this.themes[b.themeID], b); else this.themes[b.themeID] = b;
                this.themes[b.themeID].themeID =
                        _.isString(b.themeID) ? parseInt(b.themeID) : b.themeID;
                this.themes[b.themeID].premium = _.isString(b.premium) ? b.premium === "true" : b.premium;
                this.themes[b.themeID].sponsored = _.isString(b.sponsored) ? b.sponsored === "true" : b.sponsored;
                this.themes[b.themeID].adSync = _.isString(b.adSync) ? b.adSync === "true" : b.adSync;
                this.themes[b.themeID].adUnSync = _.isString(b.adUnSync) ? b.adUnSync === "true" : b.adUnSync;
                c = parseFloat(b.pageHeaderFrequency);
                if (!isNaN(c))if (c == 0 || Math.random() > c)this.themes[b.themeID].pageTracking = null;
                c = parseFloat(b.artistNotifFrequency);
                if (!isNaN(c))if (c == 0 || Math.random() > c)this.themes[b.themeID].artistNotifTracking = null;
                this.setCurrentTheme(b.themeID, a)
            } else this.lastOrDefault()
        }
    }, onGetThemeErr:function () {
        if (this.manualSelectThemeID && (!this.currentTheme || this.manualSelectThemeID != this.currentTheme.themeID) && this.themes[this.manualSelectThemeID]) {
            themes[this.manualSelectThemeID].pageTracking = [];
            this.setCurrentTheme(this.manualSelectThemeID, true);
            this.manualSelectThemeID = null
        } else this.lastOrDefault()
    },
    onReady:function () {
        if (!this.themeIsReady) {
            this.themeIsReady = true;
            GS.user.subscription.canHideAds() || GS.getAd().startAdTimer()
        }
    }, onSongPlay:function (b) {
        if (b && b.SongID)if (!this.currentSong || this.currentSong.SongID != b.SongID) {
            this.currentSong = b;
            this.canCallAdServer() ? this.loadFromDFP() : this.themeNotification(b)
        }
    }, onStreamServer:function (b) {
        if (document.visualizerTheme && document.visualizerTheme.loadCrossdomain) {
            document.visualizerTheme.loadCrossdomain(b.streamServer);
            if (!this.themeVisualizerForcedOnce)if (document.visualizerTheme &&
                    document.visualizerTheme.visualizerForceStart) {
                document.visualizerTheme.visualizerForceStart();
                this.themeVisualizerForcedOnce = true
            }
        }
    }, savePreferences:function () {
        GS.store.set("themePreferences", this.themePreferences)
    }, buildSidebarAd:function () {
        if (!GS.user.subscription.canHideAds() && !this.isFirstVisit && (!this.currentTheme.sponsored || this.currentTheme.sidebarAd) && GS.Controllers.PageController.activePageName.toLowerCase() == this.PAGE_HOME) {
            GS.getAd().showAdBar();
            GS.getAd().updateRotationCount();
            $("#sidebarCapital_160").addClass("capital");
            GS.getAd().buildAd($("#sidebarCapital_160"), 160, 600, ["p=home"])
        } else GS.getAd().hideAdBar()
    }, pageView:function (b) {
        if (!this.currentTheme && !this.themeIsReady || !this.lastActivePage)this.lastActivePage = b.toLowerCase(); else {
            switch (b.toLowerCase()) {
                case this.PAGE_HOME:
                    this.positionTheme();
                    this.hasAdSyncUnSync() && this.adSync();
                    this.themeImpression();
                    this.buildSidebarAd();
                    break;
                default:
                    this.canCallAdServer() && this.loadFromDFP();
                    this.hasAdSyncUnSync() && this.lastActivePage == this.PAGE_HOME && this.adUnSync();
                    this.themePageImpression();
                    break
            }
            this.lastActivePage = b
        }
    }, themeImpression:function () {
        if (this.currentTheme && this.themeIsReady && this.currentTheme.sponsored)if (GS.Controllers.PageController.activePageName && GS.Controllers.PageController.activePageName.toLowerCase() == this.PAGE_HOME)if (this.currentTheme.tracking) {
            this.hasSeenSponsoredTheme = true;
            GS.service.logTargetedThemeImpression(this.currentTheme.themeID);
            this.loadTracking(this.currentTheme.tracking);
            if (GS.getAd)GS.getAd().rotationCountPerImpression =
                    0
        }
    }, themePageImpression:function () {
        this.currentTheme && this.themeIsReady && this.currentTheme.sponsored && $("#theme_page_header").is(".active:visible") && this.loadTracking(this.currentTheme.pageTracking)
    }, loadTracking:function (b) {
        if ($.isArray(b)) {
            var a = (new Date).valueOf(), c;
            _.forEach(b, function (h) {
                if (h) {
                    h += h.indexOf("?") != -1 ? "&" + a : "?" + a;
                    c = new Image;
                    $("body").append($(c).load(
                            function (g) {
                                $(g.target).remove()
                            }).css("visibility", "hidden").attr("src", h))
                }
            })
        }
    }, trackDefault:function (b) {
        this.loadTracking(["http://ad.doubleclick.net/ad/grooveshark.wall/;id=" +
                b + ";d=1;sz=1x1;ord="]);
        GS.getGuts().logEvent("trackDefaultTheme", {id:b})
    }, trackFirstVisit:function () {
        this.loadTracking(["http://ad.doubleclick.net/ad/grooveshark.wall/;id=-1;v=1;sz=1x1;ord="])
    }, onThemeClick:function (b) {
        b && b.currentTarget && this.currentTheme && this.currentTheme.handleClick(b)
    }, playVideo:function (b) {
        if (this.currentTheme) {
            index = _.orEqual(b.index, 0);
            GS.getLightbox().open("video", {video:this.currentTheme.videos[index], videos:this.currentTheme.videos, index:index})
        }
    }, renderTheme:function () {
        var b =
                $("#theme_page_header.measure").height();
        if (this.currentTheme) {
            $("#themeStyleSheet").attr("href", [gsConfig.assetHost, this.themesLocation, this.currentTheme.location, "theme.css"].join("/") + "?ver=" + this.currentTheme.version);
            $(".theme_component").html("").removeClass("active");
            for (var a = 0; a < this.currentTheme.sections.length; a++)this.renderSection(this.currentTheme.sections[a]);
            this.positionTheme();
            a = window.location.hash.toString();
            a = a.replace(/^#!\/|^#\/|^\/|^#!|^#/, "");
            if (a !== "" && a.indexOf("theme") !==
                    0 && a.indexOf("sessions") !== 0) {
                $("#theme_home object").hide();
                a.indexOf("signup");
                this.currentTheme.artistIDs && this.themeNotification(GS.player.getCurrentSong())
            }
        }
        $("#theme_page_header.measure").height() !== b && GS.resize()
    }, renderSection:function (b) {
        if (this.currentTheme && b.length && $(b).length) {
            var a = [this.themesLocation, this.currentTheme.location];
            a.push(b.substr(7, b.length));
            a = a.join("/");
            $(b).html(this.view(a)).addClass("active");
            if (b === "#theme_page_header" || b === "#theme_page_header_expandable")$(b).prepend($("<div class='border'></div>"));
            this.currentTheme.bindAssets(b)
        }
    }, positionTheme:function () {
        var b;
        if (this.currentTheme && this.currentTheme.sections)for (var a = 0; a < this.currentTheme.sections.length; a++) {
            b = this.currentTheme.sections[a];
            this.currentTheme.position(b)
        }
    }, themeNotification:function (b) {
        b = _.orEqual(b, GS.player.getCurrentSong());
        var a = new Date, c = window.location.hash.toString();
        c = c.replace(/^#!\/|^#\/|^\/|^#!|^#/, "");
        if (b && this.currentTheme.artistIDs && c !== "")for (var h = 0; h < this.currentTheme.artistIDs.length; h++) {
            c = this.currentTheme.artistIDs[h];
            if (c == b.ArtistID && this.currentTheme.artistNotifTracking && (!this.lastThemeNotification || a.getTime() - this.lastThemeNotification > this.THEME_NOTIF_RATE_LIMIT)) {
                this.lastThemeNotification = a.getTime();
                GS.getNotice().displayThemeArtistNotification(b, this.currentTheme);
                break
            }
        }
    }, view:function (b, a, c) {
        b = [b];
        a = _.orEqual(a, this);
        c = this.calculateHelpers.call(this, c);
        b = "/" + b.join("/");
        b += $.View.ext + "?ver=" + this.currentTheme.version.toString().replace(/[\/\.\?]/g, "_");
        b.replace(/[\/\.]/g, "_").replace(/_+/g, "_").replace(/^_/,
                "");
        return $.View(b, a, c)
    }, buildParams:function () {
        return GS.getAd().buildParams(["dcmt=text/json", "sz=777x777"], ";", ";")
    }, themeCenter:function () {
        $(".theme-center").each(function () {
            var b = $(this);
            b.css({left:"50%", marginLeft:-(b.outerWidth() / 2)})
        })
    }, downloadIE9:function () {
        function b(r) {
            return a.indexOf(r) >= 0
        }

        var a = navigator.userAgent.toLowerCase();
        parseFloat(window.navigator.appMinorVersion);
        b("windows nt");
        var c = b("windows nt 6.0"), h = b("windows nt 6.1"), g = b("windows nt 5.1"), k = b("msie");
        b("msie 7");
        b("msie 8");
        b("trident/5.0");
        b("trident/6.0");
        var m = b("firefox"), n = b("chrome"), o = false;
        if (n)Version = a.match(/chrome\/(\d{1,2})/)[1];
        if (m && /Firefox[\/\s](\d+\.\d+)/.test(navigator.userAgent))Version = Number(RegExp.$1);
        if (k || m && Version >= 4 || n && Version >= 11) {
            BitSniffed = true;
            o = b("win64") || b("wow64")
        }
        WinVersion = g ? "xp" : c ? "vista" : h ? "win7" : "";
        WinBits = o ? "64" : "32";
        c = {"win7-32":"/8/6/D/86DB5DC9-5706-4A5B-BD46-FFBA6FA67D44/IE9-Windows7-x86-enu.exe", "win7-64":"/8/6/D/86DB5DC9-5706-4A5B-BD46-FFBA6FA67D44/IE9-Windows7-x64-enu.exe",
            "vista-32":"/8/6/D/86DB5DC9-5706-4A5B-BD46-FFBA6FA67D44/IE9-WindowsVista-x86-enu.exe", "vista-64":"/8/6/D/86DB5DC9-5706-4A5B-BD46-FFBA6FA67D44/IE9-WindowsVista-x64-enu.exe"};
        h = WinVersion ? WinVersion + "-" + WinBits : "";
        return c[h] ? "http://download.microsoft.com/download" + c[h] : false
    }, handlePreviewLightboxTrigger:function () {
        var b = new Date, a = new Date(2011, 11, 1);
        if (!(b.valueOf() > a.valueOf()))if (this.isFirstVisit)GS.store.set("hasSeenUkuleleWelcome", true); else if (!GS.store.get("hasSeenUkuleleWelcome")) {
            GS.store.set("hasSeenUkuleleWelcome",
                    true);
            GS.getLightbox().open("preview")
        }
    }});
$.Class.extend("GS.Notification", {defaults:{duration:5E3, view:"notification", viewParams:false, uniqueInstance:false, element:null, isOpen:false, isAdded:false, timeout:false, focusInText:false, mouseIsOut:false, listenersSet:false, useAnimation:true, onOpen:null}}, {controller:null, init:function (b) {
    b = $.extend({}, GS.Notification.defaults, b);
    for (var a in b)if (b.hasOwnProperty(a))this[a] = b[a];
    if (!this.notificationID)this.notificationID = this.controller.generateNotificationID();
    this.controller.notificationLookup[this.notificationID] =
            this;
    if (this.uniqueInstance)this.controller.uniquesLookup[this.uniqueInstance] = this;
    if (!this.viewParams)this.viewParams = {};
    this.viewParams.notificationID = this.notificationID;
    if (!this.element)this.element = $(this.controller.view(this.view, this.viewParams))
}, open:function () {
    this.isAdded || this.add();
    this.useAnimation ? this.element.slideDown("fast") : this.element.show();
    this.isOpen = true;
    this.beginTimeout();
    this.controller.reportOpen(this);
    $.isFunction(this.onOpen) && this.onOpen()
}, close:function () {
    this.remove();
    this.isOpen = false;
    this.endTimeout();
    this.controller.reportClose(this)
}, beginTimeout:function (b) {
    b = _.orEqual(b, this.duration);
    this.timeout && this.endTimeout();
    if (b)this.timeout = setTimeout(this.callback(function () {
        this.close()
    }), b)
}, endTimeout:function () {
    clearTimeout(this.timeout)
}, setListeners:function () {
    this.element.mouseout(this.callback(function () {
        this.mouseOut = true;
        this.focusInText || this.beginTimeout(this.duration)
    }));
    this.element.mouseover(this.callback(function () {
        this.mouseOut = false;
        this.endTimeout()
    }));
    this.element.find("textarea").focus(this.callback(function () {
        this.focusInText = true;
        this.endTimeout()
    }));
    this.element.find("textarea").focusout(this.callback(function () {
        this.focusInText = false;
        this.mouseOut && this.beginTimeout(this.duration)
    }))
}, add:function () {
    $("#notifications").append(this.element);
    this.element.hide();
    this.listenersSet || this.setListeners();
    this.isAdded = true
}, remove:function () {
    if (this.useAnimation)this.element.stop().slideUp("fast", this.callback(function () {
        this.element.remove();
        this.isAdded =
                false
    })); else {
        this.element.remove();
        this.isAdded = false
    }
}});
GS.Controllers.BaseController.extend("GS.Controllers.NotificationsController", {isGSSingleton:true, preSetup:function () {
            var b = GS.Controllers.BaseController.singletonCallback, a = $.subscribe;
            a("gs.notification", b("notice", "displayMessage"));
            a("gs.player.nowplaying", b("notice", "onSongPlay"));
            a("gs.notification.restorequeue", b("notice", "displayRestoreQueue"));
            a("gs.facebook.notification.sent", b("notice", "displayFacebookSent"));
            a("gs.facebook.notification.removed", b("notice", "displayFacebookUndoPost"));
            a("gs.notification.favorite.song",
                    b("notice", "displayFavoritedObject", "song"));
            a("gs.notification.favorite.playlist", b("notice", "displayFavoritedObject", "playlist"));
            a("gs.notification.favorite.artist", b("notice", "displayFavoritedObject", "artist"));
            a("gs.notification.favorite.user", b("notice", "displayFavoritedObject", "user"));
            a("gs.notification.playlist.create", b("notice", "displayFavoritedObject", "newPlaylist"));
            a("gs.auth.library.songsAdded", b("notice", "displayLibraryAddedObject"));
            a("gs.facebook.notification.connect", b("notice",
                    "displayFacebookConnect"));
            a("gs.facebook.notification.songComment", b("notice", "displayFacebookSongComment"));
            a("gs.facebook.notification.findFriends", b("notice", "displayFacebookFindFriends"));
            a("gs.facebook.notification.cannotPost", b("notice", "displayFacebookCannotPost"));
            a("gs.facebook.notification.rateLimited", b("notice", "displayFacebookRateLimit"));
            a("gs.twitter.notification.sent", b("notice", "displayTwitterSent"));
            a("gs.twitter.notification.findFriends", b("notice", "displayTwitterFindFriends"))
        }},
        {appIsReady:false, localeIsReady:false, queuedNotifications:[], openNotifications:[], maxOnScreen:3, uniquesLookup:{}, notificationLookup:{}, seenArtistNotifications:[], seenPromoNotifications:null, sawSignupNotification:false, sawRestoreQueueNotification:false, feedbackOnNextSong:false, currentPromotionIntervalID:null, lastPromoNotification:null, sawPreviewNotification:0, doNotShowPreviewNotification:false, sawPreviewNotificationThisSession:false, beenToPreview:false, PROMO_NOTIF_RATE_LIMIT:108E5, init:function () {
            this.seenPromoNotifications =
                    GS.store.get("seenPromoNotifications") || {};
            this.sawPreviewNotification = parseInt(GS.store.get("sawPreviewNotification"), 10) || 0;
            this.doNotShowPreviewNotification = _.orEqual(GS.store.get("doNotShowPreviewNotification"), false);
            this.sawRestoreQueueNotification = parseInt(GS.store.get("sawRestoreQueueNotification"), 10) || 0;
            this.beenToPreview = _.orEqual(GS.store.get("beenToPreview"), false);
            this.sawFacebookListenNotification = _.orEqual(GS.store.get("sawFBListenNotification"), false);
            this._super();
            if ($.localize.ready)this.localeIsReady =
                    true; else this.subscribe("gs.locale.ready", this.callback("localeReady"));
            GS.Notification.prototype.controller = this;
            var b = _.browserDetect(), a = false;
            switch (b.browser) {
                case "chrome":
                    a = true;
                    break;
                case "firefox":
                    a = b.version >= 6;
                    break;
                case "msie":
                    a = b.version >= 8;
                    break
            }
            GS.Notification.defaults.useAnimation = a
        }, appReady:function () {
            this.appIsReady = true;
            this.openNext();
            GS.IE.canPin && !GS.IE.isPinned && GS.IE.firstVisit ? this.getPromoNotifFromDFP({subid:2.2}) : this.getPromoNotifFromDFP()
        }, showPreviewLightbox:function () {
            if (!this.beenToPreview &&
                    (GS.user.subscription.isPremium() || GS.user.UserID % 5 === 0)) {
                this.beenToPreview = true;
                GS.store.set("beenToPreview", true);
                GS.getLightbox().open("preview")
            }
        }, localeReady:function () {
            this.localeIsReady = true;
            this.openNext()
        }, generateNotificationID:function () {
            var b = (Math.floor(Math.random() * 1E4) + 1).toString();
            return this.notificationLookup.hasOwnProperty(b) ? this.generateNotificationID() : b
        }, queueNotification:function (b) {
            this.queuedNotifications.indexOf(b) === -1 && this.queuedNotifications.push(b);
            this.openNext()
        },
            openNext:function () {
                this.appIsReady && this.localeIsReady && this.queuedNotifications.length && this.openNotifications.length < this.maxOnScreen && this.queuedNotifications.shift().open()
            }, reportOpen:function (b) {
            this.openNotifications.indexOf(b) === -1 && this.openNotifications.push(b)
        }, reportClose:function (b) {
            var a = this.openNotifications.indexOf(b);
            a !== -1 && this.openNotifications.splice(a, 1);
            this.notificationLookup.hasOwnProperty(b.notificationID) && delete this.notificationLookup[b.notificationID];
            b.uniqueInstance &&
                    this.uniquesLookup.hasOwnProperty(b.uniqueInstance) && delete this.uniquesLookup[b.uniqueInstance];
            this.openNext()
        }, displayMessage:function (b) {
            var a;
            if (b.uniqueInstance)if ((a = this.uniquesLookup[b.uniqueInstance]) && a.isOpen) {
                a.beginTimeout();
                return
            }
            a || (a = new GS.Notification({view:"notification", viewParams:{controller:this, notification:b}, duration:b.manualClose ? 0 : b.displayDuration, uniqueInstance:_.orEqual(b.uniqueInstance, false)}));
            a.isOpen || this.queueNotification(a)
        }, onSongPlay:function (b) {
            if (b && (this.feedbackOnNextSong ||
                    b.sponsoredAutoplayID)) {
                this.feedbackOnNextSong = false;
                if (this.seenArtistNotifications.indexOf(b.ArtistID) === -1) {
                    this.seenArtistNotifications.push(b.ArtistID);
                    this.displayArtistFeedback(b)
                }
            }
            this.uniquesLookup.promotion || this.getPromoNotifFromDFP({song:b});
            this.sawFacebookListenNotification || setTimeout(this.callback(function () {
                if (!GS.getFacebook().connected || GS.getFacebook().scrobblingEnabled) {
                    GS.store.set("sawFBListenNotification", true);
                    this.showFacebookListenNotification({disable:GS.getFacebook().scrobblingEnabled})
                }
                this.sawFacebookListenNotification =
                        true
            }), 5E3)
        }, closeAllNotifs:function () {
            if (!_.isEmpty(this.uniquesLookup))for (var b in this.uniquesLookup)this.uniquesLookup.hasOwnProperty(b) && this.uniquesLookup[b].close()
        }, closeAllSurveyNotifs:function () {
            if (!_.isEmpty(this.uniquesLookup))for (var b in this.uniquesLookup)if (this.uniquesLookup.hasOwnProperty(b))if (b == "surveyOptIn" || b == "surveyResult" || b == "surveyQuestion")this.uniquesLookup[b].close()
        }, isSurveyNotifOpen:function () {
            if (!_.isEmpty(this.uniquesLookup))for (var b in this.uniquesLookup)if (this.uniquesLookup.hasOwnProperty(b))if (b ==
                    "surveyOptIn" || b == "surveyResult" || b == "surveyQuestion")return true;
            return false
        }, saveSeenPromoNotifications:function () {
            GS.store.set("seenPromoNotifications", this.seenPromoNotifications)
        }, getPromoNotifFromDFP:function (b) {
            var a = new Date;
            if (b && _.isNumber(b.subid))GS.service.getNotificationFromDFP(this.buildParams(b), this.callback("displayPromotionManual"), this.callback("displayPromotionErr")); else if (!this.lastPromoNotification || a.getTime() - this.lastPromoNotification > this.PROMO_NOTIF_RATE_LIMIT) {
                this.lastPromoNotification =
                        a.getTime();
                GS.service.getNotificationFromDFP(this.buildParams(b), this.callback("displayPromotion"), this.callback("displayPromotionErr"))
            }
        }, buildParams:function (b) {
            var a = [];
            a.push("notif=1");
            if (b && _.isNumber(b.subid)) {
                a.push("m=1");
                a.push("subid=" + b.subid)
            }
            if (GS.theme && GS.theme.currentTheme) {
                var c = parseInt(GS.theme.currentTheme.themeID, 10);
                c && a.push("11=" + c)
            }
            b && b.song && a.push("2=" + b.song.ArtistID);
            if (GS.user.isLoggedIn) {
                if (GS.user.Sex)a.push("1=" + (GS.user.Sex.toLowerCase() == "m" ? "0" : "1"));
                if (GS.user.TSDOB) {
                    b =
                            GS.user.TSDOB.split("-");
                    if (b.length == 3) {
                        c = new Date;
                        var h = c.getFullYear() - parseInt(b[0], 10);
                        if (parseInt(b[1], 10) > c.month)h -= 1; else if (parseInt(b[1], 10) == c.month && parseInt(b[2], 10) > c.date)h -= 1;
                        var g;
                        if (h >= 13 && h < 18)g = "1"; else if (h >= 18 && h < 25)g = "2"; else if (h >= 25 && h < 35)g = "3"; else if (h >= 35 && h < 50)g = "4"; else if (h >= 50)g = "5";
                        h >= 21 && a.push("a=1");
                        g && a.push("10=" + g)
                    }
                }
            }
            GS.getAd && a.push("4=" + GS.getAd().rotationCount);
            if (GS.theme) {
                a.push("5=" + ((GS.user.settings.local.themeFlags & GS.theme.THEME_FLAG_FAMILY_FRIENDLY) ==
                        GS.theme.THEME_FLAG_FAMILY_FRIENDLY ? 1 : 0));
                GS.theme.currentTheme && GS.theme.currentTheme.sections.indexOf("#theme_page_header") >= 0 && a.push("6=1")
            }
            if (GS.Controllers.PageController)if (GS.Controllers.PageController.activePageName && GS.Controllers.PageController.activePageName.toLowerCase() == "homecontroller")a.push("9=1"); else GS.Controllers.PageController.activePageName && GS.Controllers.PageController.activePageName.toLowerCase() == "searchcontroller" && (!GS.search.type || GS.search.type === "" || GS.search.type ==
                    "everything") ? a.push("9=2") : a.push("9=0");
            if (GS.IE)if (GS.IE.canPin)if (GS.IE.canPin && !GS.IE.isPinned)a.push("ie=1"); else GS.IE.isPinned && a.push("ie=2"); else a.push("ie=0");
            if (GS.user.subscription.isPremium())if ((GS.user.Flags & GS.Models.User.FLAG_ANYWHERE) > 0)a.push("f=1"); else(GS.user.Flags & GS.Models.User.FLAG_PLUS) > 0 && a.push("f=2"); else a.push("f=0");
            a.push("dcmt=text/json");
            a.push("sz=468x60");
            if (!GS.user.subscription.isPremium() && !GS.user.isLoggedIn && GS.store.get("webvisit") && GS.store.get("webvisit").theme)a =
                    a.concat(GS.store.get("webvisit").theme);
            return";" + a.join(";")
        }, displayPromotionManual:function (b) {
            this.displayPromotion(b, true)
        }, displayPromotion:function (b, a) {
            try {
                b = JSON.parse(b)
            } catch (c) {
                console.log("invalid json from DFP", c);
                return
            }
            if (b.id != "-1")if (!this.currentPromotionIntervalID && !this.uniquesLookup.promotion && !this.getLastPromoNotifSeen(b.id) || a) {
                if (b.delay && _.isArray(b.delay) && b.delay.length) {
                    var h = b.delay;
                    h = h.shuffle();
                    b.delay = h[0]
                }
                h = parseInt(b.delay, 10);
                if (isNaN(h))h = 0;
                var g = parseInt(b.duration,
                        10);
                if (isNaN(g))g = 15E3;
                var k = b.view ? b.view : "promotionalNotification";
                if (a)h = 0;
                this.currentPromotionIntervalID = setTimeout(this.callback(function () {
                    if (!a)if (b.type == "signup")if (GS.user.isLoggedIn || this.userActivityCheck()) {
                        this.setLastPromoNotifSeen(b.id);
                        this.currentPromotionIntervalID = null;
                        return
                    }
                    this.queueNotification(new GS.Notification({uniqueInstance:"promotion", view:k, viewParams:{controller:this, notifData:b}, duration:g}));
                    this.setLastPromoNotifSeen(b.id)
                }), h)
            }
        }, displayPromotionErr:function () {
            console.warn("Promotional Notification Error")
        },
            userActivityCheck:function () {
                var b = false, a = 0;
                _.forEach(GS.theme.themePreferences, function (c, h) {
                    a++;
                    if (h != "-1" || a > 1)b = true
                });
                return b
            }, setLastPromoNotifSeen:function (b) {
            var a = new Date;
            if (!this.seenPromoNotifications)this.seenPromoNotifications = {};
            if (!this.seenPromoNotifications[GS.user.UserID]) {
                this.seenPromoNotifications[GS.user.UserID] = {};
                this.seenPromoNotifications[GS.user.UserID].lastSeen = {}
            }
            this.seenPromoNotifications[GS.user.UserID].lastSeen[b] = a.getTime()
        }, getLastPromoNotifSeen:function (b) {
            return this.seenPromoNotifications &&
                    this.seenPromoNotifications[GS.user.UserID] && this.seenPromoNotifications[GS.user.UserID].lastSeen[b] ? this.seenPromoNotifications[GS.user.UserID].lastSeen[b] : null
        }, loadTracking:function (b) {
            if ($.isArray(b)) {
                var a = (new Date).valueOf(), c;
                _.forEach(b, function (h) {
                    h += h.indexOf("?") != -1 ? "&" + a : "?" + a;
                    c = new Image;
                    $("body").append($(c).load(
                            function (g) {
                                $(g.target).remove()
                            }).css("visibility", "hidden").attr("src", h))
                })
            }
        }, "li.notification.promo .promoNotifClickTracking click":function (b) {
            if (b = this.notificationLookup[$(b).closest("li.notification").attr("data-notificationid")]) {
                this.loadTracking(b.viewParams.notifData.clickTracking);
                b.close()
            }
        }, displayArtistFeedback:function (b) {
            this.uniquesLookup.artistFeedback || this.queueNotification(new GS.Notification({uniqueInstance:"artistFeedback", view:"artistNotification", viewParams:{controller:this, feedbackSong:b}, duration:15E3}))
        }, displaySurveyQuestion:function (b) {
            b = _.orEqual(b, {});
            this.queueNotification(new GS.Notification({uniqueInstance:"surveyQuestion", view:"surveyQuestion", viewParams:{controller:this, question:b.question, callback:b.callback}, duration:6E4}))
        }, displaySurveyOptIn:function (b) {
            b =
                    _.orEqual(b, {});
            this.queueNotification(new GS.Notification({uniqueInstance:"surveyOptIn", view:"surveyOptIn", viewParams:{controller:this, question:b.question, callback:b.callback}, duration:6E4}));
            GS.getGuts().logEvent("civicscience.invitationSeen", {userID:GS.user.UserID, timestamp:(new Date).getTime()})
        }, displaySurveyResult:function (b) {
            b = _.orEqual(b, {});
            this.queueNotification(new GS.Notification({uniqueInstance:"surveyResults", view:"surveyResults", viewParams:{controller:this, mostPopular:b.responses.mostPopular,
                selectedAnswer:b.responses.selectedAnswer, responses:b.responses, callback:b.callback}, duration:15E3}))
        }, displaySurveyInvitation:function () {
            var b = window.location.hash.toString();
            b = b.replace(/^#!\/|^#\/|^\/|^#!|^#/, "");
            !this.uniquesLookup.surveyInvitation && b.indexOf("surveys") !== 0 && this.queueNotification(new GS.Notification({uniqueInstance:"surveyInvitation", view:"surveyInvitation", viewParams:{controller:this}, duration:15E3}))
        }, displaySurveyAvailable:function (b) {
            this.queueNotification(new GS.Notification({uniqueInstance:"surveyAvailable",
                view:"surveyAvailable", viewParams:{controller:this, points:b}, duration:15E3}))
        }, displaySurveyPoints:function (b) {
            this.queueNotification(new GS.Notification({view:"surveyPoints", viewParams:{controller:this, points:b}, duration:15E3}))
        }, "#surveyOptOut click":function (b, a) {
            a.preventDefault();
            var c = null;
            if ($(b).hasClass("optOut")) {
                GS.store.set("civicscience.hasSeenInvitation" + GS.user.UserID, true);
                c = this.uniquesLookup.surveyQuestion
            } else c = this.uniquesLookup.surveyOptIn;
            if (c) {
                GS.Models.Surveys.changeCivicScienceSettings(true);
                c.close()
            }
            return false
        }, "#surveyOptIn click":function (b, a) {
            a.preventDefault();
            GS.store.set("civicscience.hasSeenInvitation" + GS.user.UserID, true);
            var c = this.uniquesLookup.surveyOptIn;
            if (c) {
                var h = c.viewParams.callback;
                c.close();
                h();
                GS.getGuts().logEvent("civicscience.optIn", {userID:GS.user.UserID, timestamp:(new Date).getTime()})
            }
            return false
        }, "#nextQuestion click":function (b, a) {
            a.preventDefault();
            var c = this.uniquesLookup.surveyResults;
            if (c) {
                var h = c.viewParams.callback;
                c.close();
                h()
            }
            return false
        }, "li.notification form.survey submit":function (b, a) {
            a.preventDefault();
            var c = this.uniquesLookup.surveyQuestion;
            if (c) {
                var h = c.viewParams.question.answers, g = $(b).find(".selection");
                name = c.viewParams.question.name;
                callback = c.viewParams.callback;
                if (g.attr("value") != "-")if (name == "CivicScience") {
                    var k = GS.user.civicScience, m = k.session, n = null;
                    if (g && g.length) {
                        for (n = 0; n < h.length; n++)if (h[n].id == g.attr("value")) {
                            n = h[n].option;
                            n.select();
                            break
                        }
                        c.close();
                        m.commit(k.handleCommit)
                    }
                } else if ($.isFunction(callback)) {
                    h = {text:g.text(), id:g.attr("value"), questionId:g.attr("name")};
                    callback(h);
                    c.close()
                }
            }
            return false
        }, "#goToSurveys click":function (b, a) {
            a.preventDefault();
            var c = this.uniquesLookup.surveyAvailable;
            if (c) {
                c.close();
                GS.router.setHash("/surveys")
            }
            return false
        }, "#surveyAvailClose click":function (b, a) {
            a.preventDefault();
            var c = null;
            (c = this.uniquesLookup.surveyAvailable) && c.close();
            return false
        }, "#surveyInvitClose click":function (b, a) {
            a.preventDefault();
            var c = null;
            (c = this.uniquesLookup.surveyInvitation) && c.close();
            return false
        }, "#surveyInvitation .surveyStart click":function (b, a) {
            a.preventDefault();
            var c = this.uniquesLookup.surveyInvitation;
            if (c) {
                GS.router.setHash("/surveys");
                c.close()
            }
            return false
        }, displayPerAnum:function () {
            this.queueNotification(new GS.Notification({view:"perAnum", viewParams:{controller:this}}))
        }, displayThemeArtistNotification:function (b, a) {
            var c = this.uniquesLookup.artistFeedback;
            c && c.close();
            this.queueNotification(new GS.Notification({uniqueInstance:"artistFeedback", view:"themes/" + a.location + "/artist_notification", viewParams:{controller:this, feedbackSong:b},
                duration:false}));
            GS.theme.lastDFPChange = (new Date).getTime() + 15E3
        }, "li.notification a.theme_link click":function (b, a) {
            a.index = parseInt($(b).attr("data-video-index"), 10);
            GS.theme.currentTheme.handleClick(a);
            GS.theme.lastDFPChange = (new Date).getTime();
            if ($(b).attr("data-click-action")) {
                var c = this.notificationLookup[$(b).closest("li.notification").attr("data-notificationid")];
                c && c.close()
            }
        }, "li.notification a.gsAnywhereHoliday click":function (b, a) {
            var c = $(b).closest("li.notification").attr("data-notificationid"),
                    h = $(a.target).attr("data-notif-ctp"), g = $(a.target).attr("data-theme-id");
            GS.service.logThemeOutboundLinkClick(parseInt(g), 400);
            GS.theme.loadTracking(h.split(","));
            GS.router.setHash("/settings/subscriptions");
            (c = this.notificationLookup[c]) && c.close()
        }, displayLibraryAddedObject:function (b) {
            var a = {controller:this};
            if (b.songs) {
                if (b.songs.length == 1) {
                    a.msgKey = "NOTIF_LIBRARY_ADDED_SONG";
                    a.msgData = b.songs[0];
                    a.msgData.songLink = "<a class='songLink' rel='" + b.songs[0].songID + "'>" + b.songs[0].songName + "</a>";
                    a.msgData.artistLink = "<a href='" + _.cleanUrl(b.songs[0].artistName, b.songs[0].artistID, "artist", null, null) + "'>" + b.songs[0].artistName + "</a>";
                    a.object = b.songs[0].songID;
                    a.type = "song"
                } else {
                    a.msgKey = "NOTIFICATION_LIBRARY_ADD_SONGS";
                    a.msgData = {numSongs:b.songs.length};
                    a.type = "songs"
                }
                this.queueNotification(new GS.Notification({view:"libraryAddedNotification", viewParams:a}))
            }
        }, displayFavoritedObject:function (b, a) {
            function c(k) {
                if (k.view == "libraryAddedNotification" && k.viewParams.type === "song" && k.viewParams.msgData)if (_.orEqual(k.viewParams.msgData.SongID,
                        k.viewParams.msgData.songID) == _.orEqual(a.songID, a.SongID))return true;
                return false
            }

            var h, g;
            if (a) {
                if (b == "song") {
                    for (h = 0; h < this.openNotifications.length; h++) {
                        g = this.openNotifications[h];
                        c(g) && g.close()
                    }
                    for (h = 0; h < this.queuedNotifications.length; h++) {
                        g = this.queuedNotifications[h];
                        if (c(g)) {
                            this.queuedNotifications.splice(h, 1);
                            h--
                        }
                    }
                }
                h = {controller:this, type:b, object:a};
                switch (b) {
                    case "playlist":
                        h.msgKey = "NOTIF_SUBSCRIBED_PLAYLIST";
                        h.msgData = {playlistName:a.PlaylistName, playlistLink:"<a href='" + _.cleanUrl(a.PlaylistName,
                                a.PlaylistID, "playlist", null, null) + "'>" + a.PlaylistName + "</a>"};
                        break;
                    case "song":
                        h.msgKey = "NOTIF_FAVORITED_SONG";
                        h.msgData = {songName:_.orEqual(a.SongName, a.songName), artistName:_.orEqual(a.ArtistName, a.artistName), songLink:"<a class='songLink' rel='" + a.SongID + "'>" + a.SongName + "</a>", artistLink:"<a href='" + _.cleanUrl(a.ArtistName, a.ArtistID, "artist", null, null) + "'>" + a.ArtistName + "</a>"};
                        break;
                    case "user":
                        if (a.Username) {
                            h.msgKey = "NOTIF_FOLLOWED_USER";
                            h.msgData = {userName:a.Name, userLink:"<a href='" + _.cleanUrl(a.Name,
                                    a.UserID, "user", null, null) + "'>" + a.Name + "</a>"}
                        } else {
                            h.msgKey = "NOTIF_FOLLOWED_USERS";
                            h.msgData = {}
                        }
                        break;
                    case "newPlaylist":
                        h.msgKey = "NOTIF_CREATED_PLAYLIST";
                        h.msgData = {playlistName:a.PlaylistName, playlistLink:"<a href='" + _.cleanUrl(a.PlaylistName, a.PlaylistID, "playlist", null, null) + "'>" + a.PlaylistName + "</a>"};
                        break;
                    case "artist":
                        h.msgKey = "NOTIF_FOLLOWED_ARTIST";
                        h.msgData = {artistName:a.ArtistName, artistLink:"<a href='" + _.cleanUrl(a.ArtistName, a.ArtistID, "artist", null, null) + "'>" + a.ArtistName + "</a>"};
                        break
                }
                g = new GS.Notification({view:"favoriteNotification", viewParams:h});
                this.queueNotification(g)
            }
        }, "li.notification .favorited button.loginWithFacebook click":function (b, a) {
            a.stopImmediatePropagation();
            var c = this.notificationLookup[$(b).closest("li.notification").attr("data-notificationid")];
            if (c) {
                console.log(c, c.endTimeout);
                c.duration = false;
                c.endTimeout();
                $("button.loginWithFacebook", c.element).hide();
                $("button.closeNotif", c.element).show();
                GS.getFacebook().login(this.callback(function () {
                    $("button.closeNotif",
                            c.element).hide();
                    c.duration = 5E3;
                    this.shareWithFacebook(c)
                }))
            }
            return false
        }, "li.notification .favorited button.shareWithFacebook click":function (b, a) {
            a.stopImmediatePropagation();
            this.shareWithFacebook(this.notificationLookup[$(b).closest("li.notification").attr("data-notificationid")]);
            return false
        }, shareWithFacebook:function (b) {
            if (b) {
                b.element.removeClass("notification_success").addClass("notification_form");
                $("button.shareWithFacebook", b.element).hide();
                $("div.facebookShare", b.element).show();
                $("div.content", b.element).prepend('<img src="/webincludes/images/notifications/facebook.png" />');
                $("div.content p", b.element).addClass("hasIcon");
                var a = $("#fb_share_message", b.element);
                a.focus(this.callback(function () {
                    a.val() == $.localize.getString("NOTIF_SHARE_PREFILL_MSG") && a.val("")
                }));
                a.focusout(this.callback(function () {
                    a.val() === "" && a.val($.localize.getString("NOTIF_SHARE_PREFILL_MSG"))
                }))
            }
        }, "li.notification .favorited button.shareWithFacebookSubmit click":function (b, a) {
            a.stopImmediatePropagation();
            var c = this.notificationLookup[$(b).closest("li.notification").attr("data-notificationid")];
            if (c) {
                var h = c.viewParams.object, g = c.viewParams.type, k = $("#fb_share_message", c.element).val();
                if (k == $.localize.getString("NOTIF_SHARE_PREFILL_MSG"))k = "";
                switch (g) {
                    case "song":
                        GS.getFacebook().onFavoriteSong(h, k, true);
                        break;
                    case "playlist":
                        GS.getFacebook().onSubscribePlaylist(h, k);
                        break;
                    case "newPlaylist":
                        GS.getFacebook().onPlaylistCreate(h, k, true);
                        break;
                    case "user":
                        GS.getFacebook().onFollowUser(h, k);
                        break;
                    case "artist":
                        GS.getFacebook().onFollowArtist(h,
                                k);
                        break
                }
                c.close()
            }
            return false
        }, displayTwitterSent:function (b) {
            if (b && b.type) {
                var a = this.uniquesLookup.twitter;
                a && a.close();
                a = new GS.Notification({uniqueInstance:"twitter", view:"twitterPostNotification", viewParams:{controller:this, type:b.type}});
                this.queueNotification(a)
            }
        }, displayFacebookSent:function (b) {
            if (b && b.params && b.data) {
                var a = this.uniquesLookup.facebook;
                a && a.close();
                a = new GS.Notification({uniqueInstance:"facebook", view:"facebookPostNotification", viewParams:{controller:this, type:b.params.type,
                    hideUndo:b.params.hideUndo, ref:b.params.ref, data:b.data, object:b.params.object}});
                this.queueNotification(a)
            }
        }, "li.notification .facebook button.undo click":function (b, a) {
            a.stopImmediatePropagation();
            var c = this.notificationLookup[$(b).closest("li.notification").attr("data-notificationid")];
            if (c) {
                var h = c.viewParams.data;
                h.object = c.viewParams.object;
                GS.getFacebook().removeEvent(h);
                c.close()
            }
            return false
        }, "li.notification .facebook button.ok click":function (b, a) {
            a.stopImmediatePropagation();
            var c = this.notificationLookup[$(b).closest("li.notification").attr("data-notificationid")];
            c && c.close();
            return false
        }, "li.notification .facebook button.settings click":function (b, a) {
            a.stopImmediatePropagation();
            var c = this.notificationLookup[$(b).closest("li.notification").attr("data-notificationid")];
            if (c) {
                c.close();
                GS.router.setHash("/settings/services")
            }
            return false
        }, "li.notification .facebook a.resetPerms click":function (b, a) {
            a.stopImmediatePropagation();
            var c = this.notificationLookup[$(b).closest("li.notification").attr("data-notificationid")];
            c && c.close();
            GS.getFacebook().showReAuthLightbox();
            return false
        }, "li.notification a.logoutFacebook click":function () {
            GS.auth.logout(function () {
                FB.logout(function () {
                    GS.router.setHash("/signup")
                })
            })
        }, "li.notification a.logoutGoogle click":function () {
            GS.auth.logout(function () {
                GS.router.setHash("/signup");
                GS.getGoogle().serviceLogout()
            })
        }, "li.notification a.logoutTwitter click":function () {
            GS.auth.logout(function () {
                GS.router.setHash("/signup");
                GS.getTwitter().serviceLogout()
            })
        }, displayFacebookUndoPost:function (b) {
            if (b.data) {
                var a = "that one";
                if (b.params &&
                        b.params.object) {
                    a = b.params.object;
                    a = _.orEqualEx(a.SongName, a.PlaylistName, a.ArtistName, a.AlbumName)
                }
                (b = this.uniquesLookup.facebook) && b.close();
                b = new GS.Notification({uniqueInstance:"facebook", view:"facebookUndoPostNotification", viewParams:{controller:this, msgData:{title:a}, msgKey:"NOTIF_FACEBOOK_SHARE_UNDO"}});
                this.queueNotification(b)
            }
        }, displayFacebookCannotPost:function (b) {
            var a = this.uniquesLookup.facebook;
            a && a.close();
            a = "facebook";
            if (b && b.error)a = "notification_error";
            a = new GS.Notification({uniqueInstance:"facebook",
                view:"facebookCannotPostNotification", viewParams:{controller:this, successButton:b && b.successButton ? b.successButton : "POPUP_LOGIN_FACEBOOK", cancelButton:b && b.cancelButton ? b.cancelButton : null, notifLocale:b && b.notifLocale ? b.notifLocale : "POPUP_LOGIN_FACEBOOK_FLAGS", className:a}, duration:15E3});
            this.queueNotification(a)
        }, "li.notification .facebook button.loginToFacebook click":function (b, a) {
            a.stopImmediatePropagation();
            var c = this.notificationLookup[$(b).closest("li.notification").attr("data-notificationid")];
            if (c) {
                GS.getFacebook().forceLogin = true;
                GS.getFacebook().login();
                c.close()
            }
            return false
        }, "li.notification .facebook button.cancel click":function (b, a) {
            a.stopImmediatePropagation();
            var c = this.notificationLookup[$(b).closest("li.notification").attr("data-notificationid")];
            if (c) {
                GS.getLightbox().open("newFacebookUser", {showFindFriends:false});
                c.close()
            }
            return false
        }, displayFacebookRateLimit:function (b) {
            if (b.callback) {
                var a = this.uniquesLookup.facebook;
                a && a.close();
                a = new GS.Notification({uniqueInstance:"facebook",
                    view:"facebookRateLimitNotification", viewParams:{controller:this, callback:b.callback, type:b.type}});
                this.queueNotification(a)
            }
        }, "li.notification .facebook button.doItAnyway click":function (b, a) {
            a.stopImmediatePropagation();
            var c = this.notificationLookup[$(b).closest("li.notification").attr("data-notificationid")];
            if (c) {
                var h = c.viewParams.callback;
                h();
                c.close()
            }
            return false
        }, showFacebookListenNotification:function (b) {
            var a = this.uniquesLookup.facebook;
            a && a.close();
            a = new GS.Notification({uniqueInstance:"facebook",
                view:"facebookListens", viewParams:{controller:this, disable:b && b.disable ? true : false}, duration:b && b.disable ? 5E3 : 1E4});
            this.queueNotification(a)
        }, "li.notification.facebookListens button.loginWithFacebook click":function (b, a) {
            a.stopImmediatePropagation();
            var c = this.notificationLookup[$(b).closest("li.notification").attr("data-notificationid")];
            if (c) {
                GS.user.UserID > 0 ? GS.getFacebook().login() : GS.auth.loginViaFacebook();
                c.close()
            }
            return false
        }, "li.notification.facebookListens button.disable click":function (b, a) {
            a.stopImmediatePropagation();
            var c = this.notificationLookup[$(b).closest("li.notification").attr("data-notificationid")];
            if (c) {
                GS.getLightbox().open("newFacebookUser", {showFindFriends:false});
                c.close()
            }
            return false
        }, "li.notification form.artistFeedback button click":function (b, a) {
            a.stopImmediatePropagation();
            var c = this.uniquesLookup.artistFeedback;
            if (c) {
                var h = $(b).attr("data-vote"), g = c.element.find("textarea").val();
                c = c.viewParams.feedbackSong;
                g && g.length && GS.service.provideSongFeedbackMessage(c.SongID,
                        g);
                GS.service.provideSongFeedbackVote(c.SongID, h, c.ArtistID, this.callback("onArtistFeedback", h), this.callback("onArtistFeedbackFail"))
            }
            return false
        }, displayFacebookConnect:function () {
            var b = this.uniquesLookup.facebook;
            b && b.close();
            b = new GS.Notification({uniqueInstance:"facebook", view:"facebookConnectNotification", viewParams:{controller:this}, duration:1E4});
            this.queueNotification(b)
        }, "#fbNotifConnect-btn click":function (b) {
            (b = this.notificationLookup[$(b).closest("li.notification").attr("data-notificationid")]) &&
            b.close();
            GS.getFacebook().login(function () {
            }, this.callback("fbConnectErrback"))
        }, fbConnectErrback:function (b) {
            if (typeof b == "object" && b.error)b = b.error;
            this.queueNotification(new GS.Notification({view:"notification", viewParams:{controller:this, notification:{type:"error", message:$.localize.getString(b)}}, duration:5E3}))
        }, displayFacebookFindFriends:function (b) {
            var a = this.uniquesLookup.facebook;
            a && a.close();
            b || (b = {message:false, inviteFriends:false});
            a = new GS.Notification({uniqueInstance:"facebook", view:"facebookFindFriendsNotification",
                viewParams:{controller:this, message:b.message, inviteFriends:b.inviteFriends}, duration:1E4});
            this.queueNotification(a)
        }, "a.findFacebookFriends click":function (b, a) {
            if (a.which) {
                var c = this.notificationLookup[$(b).closest("li.notification").attr("data-notificationid")];
                c && c.close();
                GS.getFacebook().getGroovesharkUsersFromFriends()
            }
        }, "a.inviteFriends click":function (b, a) {
            if (a.which) {
                var c = this.notificationLookup[$(b).closest("li.notification").attr("data-notificationid")];
                c && c.close();
                GS.getLightbox().open("invite")
            }
        },
            displayTwitterFindFriends:function (b) {
                var a = this.uniquesLookup.twitter;
                a && a.close();
                b || (b = {message:false, inviteFriends:false});
                a = new GS.Notification({uniqueInstance:"twitter", view:"twitterFindFriendsNotification", viewParams:{controller:this, message:b.message, inviteFriends:b.inviteFriends}});
                this.queueNotification(a)
            }, "a.findTwitterFriends click":function (b, a) {
            if (a.which) {
                var c = this.notificationLookup[$(b).closest("li.notification").attr("data-notificationid")];
                c && c.close();
                GS.getTwitter().getGroovesharkUsersFromFollowing()
            }
        },
            displayFacebookSongComment:function () {
                var b = this.uniquesLookup.facebook;
                b && b.close();
                b = new GS.Notification({uniqueInstance:"facebook", view:"facebookSongCommentNotification", viewParams:{controller:this}, duration:1E4});
                this.queueNotification(b)
            }, "a.songLink click":function (b, a) {
            a.preventDefault();
            var c = parseInt($(b).attr("rel"), 10);
            c && GS.Models.Song.getSong(c, function (h) {
                h && GS.router.setHash(h.toUrl())
            })
        }, onArtistFeedback:function (b, a) {
            var c = this.uniquesLookup.artistFeedback;
            if (c) {
                var h = {controller:this,
                    feedbackSong:c.viewParams.feedbackSong};
                if (a.success && b == 2) {
                    h.urls = a.urls;
                    c.element.find(".content").html(this.view("artistNotificationResult", h));
                    _.isEmpty(a.urls) && c.beginTimeout(5E3)
                } else c.close()
            }
        }, onArtistFeedbackFail:function () {
            var b = this.uniquesLookup.artistFeedback;
            b && b.close()
        }, displayRestoreQueue:function () {
            if (this.sawRestoreQueueNotification < 3) {
                this.queueNotification(new GS.Notification({view:"restoreQueue", viewParams:{controller:this}}));
                this.sawRestoreQueueNotification++;
                GS.store.set("sawRestoreQueueNotification",
                        this.sawRestoreQueueNotification)
            }
        }, "li.notification a.close click":function (b) {
            (b = this.notificationLookup[$(b).closest("li.notification").attr("data-notificationid")]) && b.close()
        }, "li.notification .cancel click":function (b) {
            (b = this.notificationLookup[$(b).closest("li.notification").attr("data-notificationid")]) && b.close()
        }, "form.feedback submit":function () {
            console.log("submit song feedback");
            return false
        }, "li.notification .loginCTA click":function (b) {
            (b = this.notificationLookup[$(b).closest("li.notification").attr("data-notificationid")]) &&
            b.close();
            GS.getLightbox().open("login")
        }, "li.notification .signupCTA click":function (b) {
            (b = this.notificationLookup[$(b).closest("li.notification").attr("data-notificationid")]) && b.close();
            GS.router.setHash("/signup")
        }, "li.notification.restoreQueue .restore click":function (b) {
            (b = this.notificationLookup[$(b).closest("li.notification").attr("data-notificationid")]) && b.close();
            GS.player.restoreQueue()
        }, "li.notification.restoreQueue a.settings click":function (b) {
            (b = this.notificationLookup[$(b).closest("li.notification").attr("data-notificationid")]) &&
            b.close();
            GS.user.isLoggedIn ? GS.router.setHash("/settings") : GS.getLightbox().open("login")
        }, "li.notification .playlistLink click":function (b) {
            var a = this.notificationLookup[$(b).closest("li.notification").attr("data-notificationid")];
            a && a.close();
            b = $(b).data("playlistid");
            GS.Models.Playlist.getPlaylist(b, function (c) {
                GS.router.setHash(c.toUrl())
            })
        }, "input focus":function (b) {
            $(b).parent().parent().addClass("active")
        }, "textarea focus":function (b) {
            $(b).parent().parent().parent().addClass("active")
        }, "input blur":function (b) {
            $(b).parent().parent().removeClass("active")
        },
            "textarea blur":function (b) {
                $(b).parent().parent().parent().removeClass("active")
            }, ".selection_survey focus":function (b) {
            b.parents(".input_wrapper").addClass("active")
        }, ".selection_survey blur":function (b) {
            b.parents(".input_wrapper").removeClass("active")
        }, ".selection_survey keydown":function (b) {
            b.change()
        }, ".selection_survey change":function (b) {
            var a = b.siblings("span");
            b = b.find("#profilerQuestion:selected");
            a.html(b.html());
            a.attr("value", b.attr("value"))
        }});
(function () {
    function b(c) {
        if (a.indexOf(c) === -1)c = "en";
        $("[data-translate-text]").localize("gs", {language:c});
        $("[data-translate-title]").localize("gs", {language:c, callback:"titleCallback"})
    }

    var a = ["bg", "ca", "cs", "cy", "da", "de", "el", "en", "es", "eu", "et", "gl", "fi", "fr", "hr", "hu", "it", "ja", "ko", "lt", "lv", "nb", "nl", "pl", "pt", "ro", "ru", "sk", "sl", "sv", "tr", "uk", "zh"];
    GS.Controllers.BaseController.extend("GS.Controllers.LocaleController", {onWindow:true, isGSSingleton:true}, {locale:"en", init:function () {
        var c =
                this, h = (GS.store.get("gs.locale") || gsConfig.lang || this.detectLangauge() || this.locale || "en").substring(0, 2);
        if (a.indexOf(h) === -1)h = "en";
        b(h);
        this.updateWeeksMonths();
        this.subscribe("gs.locale.changed", function (g) {
            c.locale = g;
            c.callback("updateWeeksMonths");
            b(g);
            $.publish("gs.locale.update", g);
            GS.store.set("gs.locale", g)
        });
        this.locale = h;
        $.localize.ready ? b(h) : this.subscribe("gs.locale.ready", this.callback(function () {
            b(this.locale)
        }))
    }, daysOfWeek:[], monthsOfYear:[], updateWeeksMonths:function () {
        var c = $.localize.getString("WEEK_DAYS");
        if (c && c.length)this.daysOfWeek = c.split(",");
        if ((c = $.localize.getString("MONTHS")) && c.length)this.monthsOfYear = c.split(",")
    }, detectLangauge:function () {
        var c = window.navigator;
        return c.language || c.browserLanguage || c.systemLanguage || c.userLanguage
    }})
})();
GS.Controllers.BaseController.extend("GS.Controllers.HeaderController", {onElement:"#header"}, {init:function () {
    this.subscribe("gs.auth.update", this.callback("update"));
    this.subscribe("gs.auth.user.pathName", this.callback("update"));
    this.subscribe("gs.page.view", this.callback("updateSection"));
    this.subscribe("gs.router.history.change", this.callback("updateNavButtons"));
    this._super()
}, appReady:function () {
    this.update()
}, update:function () {
    this.user = GS.user;
    this.isDesktop = GS.airbridge ? GS.airbridge.isDesktop :
            false;
    var b = $("#dropdown_loginForm");
    b.detach();
    $("#header_userOptions").html(this.view(GS.user.isLoggedIn ? "loggedIn" : "loggedOut"));
    $("#header_mainNavigation").html(this.view("mainNavigation"));
    if (GS.user.isLoggedIn) {
        $("#loginFormHolder").append(b);
        GS.user.getNotifications(this.callback("updateNotifications"))
    } else $("#putLoginFormHere").append(b);
    this.updateSection(GS.page.activePageName, GS.page.activePageIdentifier);
    this.updateNavButtons()
}, updateNotifications:function () {
    if (GS.user.notificationsFeed.events &&
            GS.user.notificationsFeed.events.length) {
        $("#header_notification").addClass("active");
        $("#header_notifications_list").html(this.view("notifications"));
        var b = GS.user.getLastSeenNotification();
        b = GS.user.notificationsFeed.getEvents(b);
        if (b.length) {
            $("#header_notification_pill").addClass("block");
            $("#header_notification_count").text(Math.min(b.length, 99))
        }
    } else {
        $("#header_notification").removeClass("active");
        $("#header_notification_count").text("")
    }
}, updateSection:function (b) {
    switch (b) {
        case "HomeController":
        case "SearchController":
            b =
                    $("#header_search_btn");
            b.hasClass("active") || b.addClass("active").siblings().removeClass("active");
            break;
        case "MusicController":
            $("#header_explore_btn").addClass("active").siblings().removeClass("active");
            break;
        case "UserMusicController":
            GS.page.activePageIdentifier == GS.user.UserID ? $("#header_music_btn").addClass("active").siblings().removeClass("active") : $("#header_mainNavigation a").removeClass("active");
            break;
        case "UserController":
            GS.page.activePageIdentifier == GS.user.UserID && GS.page.activePageParams.section ==
                    "community" ? $("#header_community_btn").addClass("active").siblings().removeClass("active") : $("#header_mainNavigation a").removeClass("active");
            break;
        default:
            $("#header_mainNavigation a").removeClass("active")
    }
}, updateFeedCount:function () {
    this.user = GS.user;
    this.isDesktop = GS.airbridge ? GS.airbridge.isDesktop : false;
    $("#header_mainNavigation").html(this.view("mainNavigation"));
    this.updateSection(GS.page.activePageName, GS.page.activePageIdentifier);
    this.updateNavButtons()
}, updateNavButtons:function () {
    if (GS.router &&
            GS.airbridge.isDesktop) {
        $("#header_back_btn").attr("disabled", !GS.router.hasBack);
        $("#header_forward_btn").attr("disabled", !GS.router.hasForward)
    }
}, "#grooveshark click":function () {
    if ($("#page").is(".gs_page_home")) {
        $("input.search.autocomplete", "#page").focus();
        $("#searchBar_input input").val() == "" && $("#searchBar_input span").show()
    } else setTimeout(function () {
        $("input.search.autocomplete", "#page").blur()
    }, 0)
}, "#header_mainNavigation a click":function (b) {
    b = $(b).attr("href");
    GS.getGuts().logEvent("headerNavigationClick",
            {link:b})
}, "#header_search_btn mousedown":function () {
    if ($("#page").is(".gs_page_home")) {
        $("input.search.autocomplete", "#page").focus();
        $("#searchBar_input input").val() == "" && $("#searchBar_input span").show().addClass("faded");
        $("#searchBar_input input").addClass("focused")
    } else var b = $.subscribe("gs.page.home.view", function () {
        setTimeout(function () {
            $("input.search.autocomplete", "#page").focus()
        }, 0);
        $("#searchBar_input span").show();
        $.unsubscribe(b)
    })
}, "#header_forward_btn click":function () {
    GS.router.forward()
},
    "#header_back_btn click":function () {
        GS.router.back()
    }, "#header_login click":function (b) {
        $(b).toggleClass("active");
        $("#dropdown_loginForm_box").toggle();
        if ($("#dropdown_loginForm_box").is(":visible")) {
            $("#dropdown_loginForm_box").find("input:first").focus();
            this.element.find(".error").hide();
            $("div.capital iframe").hide().parent().hide()
        } else {
            $("#dropdown_loginForm").find("input").blur().val("");
            $("div.capital iframe").show().parent().show()
        }
        var a = this;
        $("body").click(function (c) {
            if (!$(c.target).parents("#dropdown_loginForm_box").length &&
                    !$(c.target).parents("#header_loginOption").length) {
                a.closeLoginDropdown();
                $("div.capital iframe").show().parent().show()
            }
        })
    }, "#loginReplace click":function (b, a) {
        $("#header_login").trigger("click");
        a.preventDefault()
    }, closeLoginDropdown:function () {
        $("#dropdown_loginForm_box").hide();
        $("#dropdown_loginForm").find("input").blur().val("");
        $("#header_login").removeClass("active")
    }, "#headerSignup click":function () {
        var b = GS.getGuts();
        b.currentTest && b.currentTest.name == "signupDropdown" ? b.logEvent("loginDropdownSignupClick",
                2) : b.logEvent("loginDropdownSignupClick", 1);
        this.closeLoginDropdown()
    }, "#header_search .placeholder click":function () {
        $("#header_search input").focus()
    }, "#header_search .remove click":function () {
        $("#header_search input").val("").focus();
        $("#header_search .remove").addClass("hide")
    }, "#header_search input focus":function () {
        $("#header_search").addClass("active");
        $("#header_search .placeholder").hide();
        this.pageSearchHasFocus = true
    }, "#header_search input blur":function () {
        var b = $("#header_search input");
        $("#header_search").removeClass("active");
        this.pageSearchHasFocus = false;
        setTimeout(function () {
            $("#page_search_results").hide()
        }, 200);
        b.val() == "" && $("#header_search .placeholder").show()
    }, "#header_search input keydown":function (b, a) {
        var c = $("#page_search_results li.selected");
        switch (a.which) {
            case _.keys.ENTER:
                b.parents("form").submit();
                return;
            case _.keys.ESC:
                c = $("#page_search_results");
                if (c.is(":visible")) {
                    c.hide();
                    $.publish("gs.menu.hide")
                } else {
                    b.siblings("a.remove").addClass("hide");
                    b.val("");
                    this.inpageSearch(b)
                }
                return;
            case _.keys.UP:
                c.is(":first-child") ? $("#page_search_results li:last").addClass("selected") : c.prev().addClass("selected");
                c.removeClass("selected");
                return;
            case _.keys.DOWN:
                c.is(":last-child") ? $("#page_search_results li:first").addClass("selected") : c.next().addClass("selected");
                c.removeClass("selected");
                return
        }
        $("#header_search a.remove").toggleClass("hide", !b.val().length);
        this.inpageSearch(b)
    }, ".search-item a click":function (b) {
        $("#page_search_results li.selected").removeClass("selected");
        $(b).parent().addClass("selected");
        $(b).is(".search-item") && b.closest("input").val($(b).text());
        b.submit()
    }, searchTimeout:false, searchTimeoutWait:100, inpageSearch:function (b) {
        this.searchTimeout && clearTimeout(this.searchTimeout);
        this.searchTimeout = setTimeout(this.callback(function () {
            if (this.element) {
                var a = $.trim(b.val().toLowerCase());
                if (a.length > 0)GS.service.getAutocomplete(a, "artist", this.callback("autocompleteSuccess"), this.callback("autocompleteFail")); else {
                    $("#page_search_results").hide();
                    $.publish("gs.menu.hide")
                }
            }
        }), this.searchTimeoutWait)
    },
    autocompleteSuccess:function (b) {
        this.autocompleteResults = b;
        console.warn("autocomplete", b);
        $("#page_search_results").html(this.view("/shared/pageSearchResults"));
        if (this.pageSearchHasFocus && b && b.length) {
            $("#page_search_results").show();
            $.publish("gs.menu.show")
        } else if (b && !b.length) {
            $("#page_search_results").hide();
            $.publish("gs.menu.hide")
        }
    }, autocompleteFail:function () {
        $("#page_search_results").remove(".search_result").hide();
        $.publish("gs.menu.hide")
    }, "#header_search submit":function (b, a) {
        a.preventDefault();
        GS.search = _.orEqual(GS.search, {});
        GS.search.type = $(b).attr("data-search-type") || "";
        var c = $("#page_search_results li.selected");
        GS.search.query = c.is(".search-item-result") ? c.find("a").text() : $("input[name=q]", b).val();
        if (GS.search.query && GS.search.query.length) {
            $("input[name=q]", b).blur().val("");
            $("#header_search a.remove").addClass("hide");
            GS.router.performSearch(GS.search.type, GS.search.query)
        }
        return false
    }, showAccountOptions:function () {
        var b = [];
        if (GS.user.UserID > 0)b = [
            {title:$.localize.getString("PROFILE"),
                action:{type:"gourl", url:GS.user.toUrl("")}},
            {title:$.localize.getString("COLLECTION"), action:{type:"gourl", url:GS.user.toUrl("music")}},
            {title:$.localize.getString("FAVORITES"), action:{type:"gourl", url:GS.user.toUrl("music/favorites")}},
            {title:$.localize.getString("PLAYLISTS"), action:{type:"gourl", url:GS.user.toUrl("music/playlists")}},
            {customClass:"separator"}
        ];
        var a = [
            {title:$.localize.getString("HOME_SUPPORT"), action:{type:"gourl", target:"_blank", url:"http://help.grooveshark.com"}}
        ];
        if (GS.user.subscription.canDirectEmail())a =
                a.concat([
                    {title:$.localize.getString("FEEDBACK"), action:{type:"fn", callback:function () {
                        GS.getLightbox().open("feedback")
                    }}}
                ]);
        b = b.concat([
            {title:$.localize.getString("LANGUAGE"), action:{type:"fn", callback:function () {
                GS.getLightbox().open("locale")
            }}},
            {title:$.localize.getString("SETTINGS"), action:{type:"gourl", url:"/#!/settings"}},
            {title:$.localize.getString("SURVEYS"), action:{type:"gourl", url:"/#!/surveys"}},
            {title:$.localize.getString("HOME_FEATURES"), action:{type:"gourl", url:"/#!/features"}},
            {title:$.localize.getString("HOME_HELP"), type:"sub", src:a}
        ]);
        GS.user.UserID > 0 && b.push({title:$.localize.getString("INVITE_FRIENDS"), action:{type:"fn", callback:function () {
            GS.getLightbox().open("invite")
        }}});
        b.push({customClass:"separator"});
        GS.user.UserID > 0 ? b.push({title:$.localize.getString("LOGOUT"), action:{type:"fn", callback:function () {
            GS.auth.logout()
        }}}) : b.push({title:$.localize.getString("SIGNUP"), action:{type:"gourl", url:"/#/signup"}});
        return b
    }, accountMenuTimer:null, "#header_account_group mouseenter":function (b, a) {
        this.closeLoginDropdown();
        this.openAccountDropDown(b, a)
    }, "#header_account_group click":function (b, a) {
        this.closeLoginDropdown();
        this.openAccountDropDown(b, a)
    }, "#header_account_group a click":function () {
        if (GS.user.UserID > 0)location = GS.user.toUrl("")
    }, openAccountDropDown:function (b, a) {
        this.accountMenuTimer && clearTimeout(this.accountMenuTimer);
        this.accountMenu = $(b).jjmenu(a, this.showAccountOptions(), null, {xposition:"right", yposition:"bottom", show:"default", spill:"left", keepState:b, className:"accountDropDown",
            append:$(this.element), shouldLog:true})
    }, ".accountDropDown mouseenter":function () {
        this.accountMenuTimer && clearTimeout(this.accountMenuTimer)
    }, "#header_account_group,.accountDropDown mouseleave":function () {
        this.accountMenuTimer && clearTimeout(this.accountMenuTimer);
        this.accountMenuTimer = setTimeout(this.callback("closeAccountDropDown"), 200)
    }, closeAccountDropDown:function () {
        $(document).trigger("contextmenu")
    }, "#header_notification.active click":function (b) {
        if ($(b).hasClass("active-context"))this.closeNotificationsDropdown();
        else {
            $(b).addClass("active-context");
            $("#header_notification_pill").removeClass("block");
            $("#header_notification_count").text("");
            GS.user && GS.user.UserID > 0 && GS.user.setLastSeenNotification()
        }
        var a = this;
        $("body").click(function (c) {
            $(c.target).parents("#header_notification").length || a.closeNotificationsDropdown()
        })
    }, "#dropdown_notification_box a click":function () {
        setTimeout(this.callback("closeNotificationsDropdown"), 100)
    }, closeNotificationsDropdown:function () {
        $("#header_notification").removeClass("active-context")
    },
    "input focus":function (b) {
        $(b).parent().parent().addClass("active")
    }, "textarea focus":function (b) {
        $(b).parent().parent().parent().addClass("active")
    }, "input blur":function (b) {
        $(b).parent().parent().removeClass("active")
    }, "textarea blur":function (b) {
        $(b).parent().parent().parent().removeClass("active")
    }, showError:function (b) {
        $("div.message", this.element).html($.localize.getString(b));
        this.element.find(".error").show()
    }, showMessage:function (b) {
        $("div.message", this.element).html(b);
        this.element.find(".error").show()
    },
    "form#dropdown_loginForm submit":function (b) {
        this.element.find(".error").hide();
        var a = $("input[name=username]", b).val(), c = $("input[name=password]", b).val();
        b = $("input[name=save]", b).val() ? 1 : 0;
        switch (a.toLowerCase()) {
            case "dbg:googlelogin":
                GS.getGoogle().lastError ? this.showMessage("Last Google Login Error: " + JSON.stringify(GS.getGoogle().lastError)) : this.showMessage("There does not appear to be any errors with Google Login");
                break;
            case "dbg:facebooklogin":
                GS.getFacebook().lastError ? this.showMessage("Last Facebook Login Error: " +
                        JSON.stringify(GS.getFacebook().lastError)) : this.showMessage("There does not appear to be any errors with Facebook Login");
                break;
            default:
                GS.auth.login(a, c, b, this.callback(this.loginSuccess), this.callback(this.loginFailed));
                break
        }
    }, "button.facebookLogin click":function () {
        GS.auth.loginViaFacebook(null, this.callback(this.extLoginFailed));
        this.closeLoginDropdown()
    }, "button.googleLogin click":function () {
        GS.auth.loginViaGoogle(null, this.callback(this.extLoginFailed));
        this.closeLoginDropdown()
    }, "button.twitterLogin click":function () {
        GS.auth.loginViaTwitter(null,
                this.callback(this.extLoginFailed));
        this.closeLoginDropdown()
    }, loginSuccess:function () {
        this.closeLoginDropdown()
    }, loginFailed:function (b) {
        if (b.error)this.showError(b.error); else b && b.userID == 0 ? this.showError("POPUP_SIGNUP_LOGIN_FORM_AUTH_ERROR") : this.showError("POPUP_SIGNUP_LOGIN_FORM_GENERAL_ERROR")
    }, extLoginFailed:function (b) {
        var a = {error:"POPUP_SIGNUP_LOGIN_FORM_GENERAL_ERROR", premiumRequired:gsConfig.isPreview, notCloseable:gsConfig.isPreview};
        if (b.error)a.error = b.error; else if (b && b.authType ==
                "facebook")a.error = "POPUP_SIGNUP_LOGIN_FORM_FACEBOOK_ERROR"; else if (b && b.authType == "google")a.error = "POPUP_SIGNUP_LOGIN_FORM_GOOGLE_ERROR"; else if (b && b.authType == "twitter")a.error = "POPUP_SIGNUP_LOGIN_FORM_TWITTER_ERROR";
        GS.getLightbox().open("login", a)
    }, "a.loginLink click":function () {
        $("#dropdown_loginForm_box").hide();
        $("#dropdown_loginForm_box").find("input").blur();
        $("#header_login").removeClass("active")
    }, "a.forget click":function () {
        GS.getLightbox().open("forget")
    }});
GS.Controllers.BaseController.extend("GS.Controllers.AdController", {isGSSingleton:true}, {rotateTimer:0, rotationTime:45E3, defaultRotationTime:45E3, lastActive:null, maxIdleTime:24E4, lastIdleTime:null, lastRotation:null, rotationCountPerImpression:0, useTestAds:false, rotationCount:0, sessionStart:null, lastAdChange:null, chooseAdLimit:4E3, clickAdCatchTimeout:null, lastActivePage:null, campaignArtists:{}, campaignsByCampaignID:{}, userCampaigns:[], locales:{en:"1", bg:"2", ca:"3", cs:"4", da:"5", de:"6", es:"7", eu:"8",
    fi:"9", fr:"10", it:"11", ja:"12", lt:"13", nb:"14", nl:"15", pl:"16", pt:"17", ro:"18", ru:"19", sk:"20", sl:"21", sv:"22", tr:"23", zh:"24"}, adPlacements:["home_160x600", "search_song_300x250", "search_artist_300x250", "search_album_300x250", "search_playlist_300x250", "search_user_300x250", "search_event_300x250", "search_song_728x90", "search_artist_728x90", "search_album_728x90", "search_playlist_728x90", "search_user_728x90", "search_event_728x90", "explore_featured_300x250", "explore_popular_300x250", "explore_stations_300x250",
    "explore_playlists_300x250", "explore_popular_728x90", "explore_videos_300x250", "explore_featured_728x90", "explore_stations_728x90", "mymusic_songs_160x600", "mymusic_favorites_160x600", "mymusic_playlists_overview_160x600", "mymusic_playlists_subscribed_160x600", "community_activity_300x250", "community_activity_728x90", "community_mentions_300x250", "playlist_music_300x250", "playlist_albums_300x250", "playlist_subscribers_300x250", "playlist_music_728x90", "artist_profile_300x250", "artist_songs_300x250", "artist_albums_300x250",
    "artist_events_300x250", "artist_profile_728x90", "album_overview_300x250", "song_overview_300x250", "song_overview_728x90", "myprofile_activity_300x250", "myprofile_following_300x250", "myprofile_fans_300x250", "myprofile_activity_728x90", "profile_activity_300x250", "profile_music_300x250", "profile_favorites_300x250", "profile_playlists_300x250", "profile_community_300x250", "profile_following_300x250", "profile_fans_300x250", "profile_activity_728x90"], init:function () {
    this.sessionStart = (new Date).getTime();
    this.lastActive =
            new Date;
    this.subscribe("gs.auth.update", this.callback(this.update));
    this.subscribe("gs.player.nowplaying", this.callback(this.onSongPlay));
    this.subscribe("gs.app.resize", this.callback(this.adSpecific));
    this.subscribe("gs.drag.start", function () {
        $("div.capital iframe").hide().parent().hide()
    });
    this.subscribe("gs.drag.end", function () {
        $("div.capital iframe").show().parent().show()
    });
    this.subscribe("gs.menu.show", function () {
        $("div.capital iframe").hide().parent().hide()
    });
    this.subscribe("gs.menu.hide",
            function () {
                setTimeout(function () {
                    $("#lightbox:visible").length || $("div.capital iframe").show().parent().show()
                }, 10)
            });
    var b = this;
    $("body").bind("mousemove", function () {
        b.lastActive = new Date
    });
    this._super()
}, appReady:function () {
    this.update()
}, update:function () {
    this.user = GS.user;
    this.parseCampaignsForUser();
    GS.user.subscription.canHideAds() || this.startAdTimer();
    $("#page").scroll(this.onScroll);
    GS.resize()
}, onSongPlay:function (b) {
    if (this.campaignArtists && this.campaignArtists[b.ArtistID]instanceof Array)for (var a =
            0; a < this.campaignArtists[b.ArtistID].length; a++) {
        var c = this.campaignArtists[b.ArtistID][a];
        if (c) {
            var h = this.campaignsByCampaignID[c];
            if (!h) {
                h = {id:c, count:1};
                this.campaignsByCampaignID[c] = h;
                this.userCampaigns.push(h)
            }
        }
    }
}, parseCampaignsForUser:function () {
    this.userCampaigns = [];
    this.campaignsByCampaignID = {};
    var b = GS.store.get("artistsPlayed" + (this.user ? this.user.UserID : -1));
    if (this.campaignArtists && b)for (var a = 0; a < b.length; a++) {
        var c = b[a];
        if (c && this.campaignArtists[c]instanceof Array)for (var h = 0; h < this.campaignArtists[c].length; h++) {
            var g =
                    this.campaignArtists[c][h];
            if (g) {
                var k = this.campaignsByCampaignID[g];
                if (k)k.count++; else {
                    k = {id:g, count:1};
                    this.campaignsByCampaignID[g] = k;
                    this.userCampaigns.push(k)
                }
            }
        }
    }
}, showAdBar:function () {
    $("#capitalSidebar").width(170).show();
    GS.resize()
}, startAdTimer:function () {
    if (gsConfig.country.ID != "38")if (GS.theme.themeIsReady) {
        clearInterval(this.rotateTimer);
        this.rotateTimer = setInterval(this.callback("onRotateTimer"), this.defaultRotationTime);
        this.chooseAd()
    }
}, resetAdTimer:function () {
    if (GS.theme.themeIsReady) {
        clearInterval(this.rotateTimer);
        this.rotateTimer = setInterval(this.callback("onRotateTimer"), this.defaultRotationTime)
    }
}, hideAdBar:function () {
    $("#capitalSidebar").hide().width(0);
    $("#sidebarCapital_160").children("iframe").attr("src", "");
    GS.resize();
    GS.player && GS.player.updateQueueWidth()
}, onRotateTimer:function () {
    if (this.lastActive && !GS.user.subscription.canHideAds()) {
        var b = (new Date).valueOf(), a = b - (this.lastActive ? this.lastActive.valueOf() : 0);
        this.lastRotation && this.lastRotation.valueOf();
        if (a <= this.maxIdleTime)this.chooseAd();
        else this.lastIdleTime = b
    }
}, adAction:function (b) {
    if (b)if ($(b.target).hasClass("stopAdAction"))return;
    b = (new Date).getTime();
    if (GS.theme.themeIsReady && !GS.user.subscription.canHideAds() && !this.clickAdCatchTimeout && (!this.lastAdChange || b - this.lastAdChange > this.chooseAdLimit))gsConfig.country.ID == "48" ? setTimeout(this.callback(this.chooseAd), 500) : this.chooseAd()
}, chooseAd:function () {
    $("div.capital iframe:visible").length !== 0 && setTimeout(this.callback(function () {
        this.lastRotation = new Date;
        this.updateAds();
        GS.getGuts().logEvent("adRotation", {})
    }), 100)
}, buildParams:function (b, a, c) {
    b = b instanceof Array ? b : [];
    a = _.orEqual(a, "?");
    c = _.orEqual(c, "&");
    GS.player && GS.player.getCurrentSong() && b.push("2=" + GS.player.getCurrentSong().ArtistID);
    var h, g;
    if (GS.user.isLoggedIn) {
        if (GS.user.Sex) {
            g = GS.user.Sex.toLowerCase() == "m" ? "0" : "1";
            b.push("1=" + g)
        }
        if (GS.user.TSDOB) {
            var k = GS.user.TSDOB.split("-");
            if (k.length == 3) {
                var m = new Date, n = m.getFullYear() - parseInt(k[0], 10);
                if (parseInt(k[1], 10) > m.month)n -= 1; else if (parseInt(k[1],
                        10) == m.month && parseInt(k[2], 10) > m.date)n -= 1;
                if (n >= 13 && n < 18)h = "1"; else if (n >= 18 && n < 25)h = "2"; else if (n >= 25 && n < 35)h = "3"; else if (n >= 35 && n < 50)h = "4"; else if (n >= 50)h = "5";
                n >= 21 && b.push("a=1");
                h && b.push("10=" + h);
                b.push("14=" + this.encodeInteger(n))
            }
        }
    }
    b.push("3=" + Math.round(((new Date).getTime() - this.sessionStart) / 1E3));
    b.push("4=" + this.rotationCount);
    b.push("5=" + ((GS.user.settings.local.themeFlags & GS.theme.THEME_FLAG_FAMILY_FRIENDLY) == GS.theme.THEME_FLAG_FAMILY_FRIENDLY ? 1 : 0));
    GS.theme.currentTheme && GS.theme.currentTheme.sections.indexOf("#theme_page_header") >=
            0 && b.push("6=1");
    if (GS.Controllers.PageController.activePageName && GS.Controllers.PageController.activePageName.toLowerCase() == "homecontroller")b.push("9=1"); else GS.Controllers.PageController.activePageName && GS.Controllers.PageController.activePageName.toLowerCase() == "searchcontroller" && (!GS.search.type || GS.search.type === "" || GS.search.type == "everything") ? b.push("9=2") : b.push("9=0");
    if (GS.theme && GS.theme.currentTheme)(k = parseInt(GS.theme.currentTheme.themeID, 10)) && b.push("11=" + k);
    if (GS.player && GS.player.queue &&
            GS.player.queue.currentAutoplayTagID) {
        b.push("12=1");
        b.push("13=" + GS.player.queue.currentAutoplayTagID)
    }
    b.push("15=" + this.rotationCountPerImpression);
    gsConfig && gsConfig.isPreview && b.push("16=1");
    if (GS.user.UserID > 0)if (GS.user.Flags & GS.Models.FLAG_ISARTIST)b.push("17=1"); else GS.user.Flags & GS.Models.FLAG_MUSIC_BUSINESS && b.push("17=2");
    b.push("18=" + (new Date).getDate());
    if (k = GS.theme.getRecentSeen())for (m = 0; m < k.length; m++)b.push("rec" + k[m] + "=1");
    if (GS.IE) {
        if (GS.IE.canPin)if (GS.IE.canPin && !GS.IE.isPinned)b.push("ie=1");
        else GS.IE.isPinned && b.push("ie=2"); else b.push("ie=0");
        GS.IE.firstPin && !GS.theme.lastTheme && b.push("ie2=1")
    }
    this.useTestAds && b.push("testAds=1");
    if (k = GS.store ? GS.store.get("adhelper") : null) {
        if (!h) {
            if (k.hasOwnProperty("ageRange"))switch (k.ageRange) {
                case 29516:
                    h = "1";
                    break;
                case 29517:
                    h = "2";
                    break;
                case 30024:
                case 30025:
                    h = "3";
                    break;
                case 29520:
                case 29521:
                    h = "4";
                    break;
                case 29522:
                case 29523:
                    h = "5";
                    break
            }
            h && b.push("10=" + h)
        }
        if (!g)if (k.hasOwnProperty("gender")) {
            if (k.gender == 1536)g = "0"; else if (k.gender == 1537)g =
                    "1";
            g && b.push("1=" + g)
        }
    }
    if (!GS.user.subscription.canHideAds())if ((h = GS.store.get("webvisit")) && h.sidebar)b = b.concat(GS.store.get("webvisit").sidebar); else if ((h = GS.store.get("krux")) && h.params)b = b.concat(GS.store.get("krux").params);
    var o;
    try {
        o = "0=";
        o += this.locales[GS.getLocale().locale]
    } catch (r) {
        o = "0=1"
    }
    b = b.concat([o]);
    return a + b.join(c)
}, encodeInteger:function (b) {
    b = b.toString(2).split("");
    for (var a = 1, c = b.length, h = 0; a < c;) {
        b.splice(a + h, 0, 0);
        a += 3;
        h++
    }
    return(parseInt(b.join(""), 2) * 751).toString(16)
},
    decodeInteger:function (b) {
        b = (parseInt(b, 16) / 751).toString(2).split("");
        for (var a = 1, c = 0; b[a + c] !== undefined;) {
            b[a + c] = null;
            a += 3;
            c++
        }
        return parseInt(b.join(""), 2)
    }, buildAd:function (b, a, c, h) {
        if (b && b.length) {
            h || (h = []);
            var g = b.attr("data-iframe-type") && b.attr("data-iframe-type") == "afc";
            if (b.data("data-user-activity") == undefined) {
                b.data("data-user-activity", null);
                b.live("mouseover", function () {
                    $(this).data("data-user-activity", (new Date).getTime() + 9E4)
                });
                b.live("mouseout", function () {
                    $(this).data("data-user-activity",
                            null)
                })
            }
            $page = $("#page_content");
            for (var k = 0; k < h.length; k++) {
                var m = h[k].split("=");
                if (m.length > 1 && m[0] == "p")h[k] = GS.getAd().adPlacements.indexOf(m[1] + "_" + a + "x" + c) >= 0 ? h[k] : "p=default"
            }
            b.data("data-iframe-width", a).data("data-iframe-height", c).data("data-iframe-params", h.concat()).data("data-iframe-born", (new Date).getTime());
            h = GS.getAd().buildParams(h.concat(["w=" + a, "h=" + c]));
            var n = b.children("iframe"), o;
            if (n.length > 1) {
                for (c = n.length - 1; c > 0; c--)n.eq(c).unbind("load").remove();
                n = n.eq(0);
                o = n.clone()
            } else o =
                    $('<iframe height="' + c + '" width="' + a + '" class="' + (g ? "afcCapitalFrame_" : "capitalFrame_") + a + '" frameborder="0" allowTransparency="true"></iframe>');
            o.css("visibility", "hidden");
            o.bind("load", this.callback(function () {
                n.unbind("load").remove();
                o.css("visibility", "visible").width(0);
                b.parent().show();
                if (a == 728 || a == 160) {
                    b.parent().parent().show();
                    this.adSpecific();
                    $("#capitalSidebar .capitalView_160").scrollTop(0)
                }
                a == 300 && this.onScroll();
                setTimeout(function () {
                    o.width(a)
                }, 100);
                setTimeout(function () {
                    o.width(a -
                            1);
                    o.width(a + 1)
                }, 1500)
            }));
            this.lastAdChange = (new Date).getTime();
            gsConfig.country.ID != "38" && this.resetAdTimer();
            b.attr("data-iframe-type") && b.attr("data-iframe-type") == "afc" ? o.attr("src", "/afcAds.html" + h) : o.attr("src", "/dfpAds.html" + h);
            b.append(o)
        }
    }, updateAds:function () {
        setTimeout(this.callback(function () {
            if (!this.lastActivePage || this.lastActivePage != GS.Controllers.PageController.activePageName + (GS.Controllers.PageController.activePage ? GS.Controllers.PageController.activePage.subpage : ""))this.lastActivePage =
                    GS.Controllers.PageController.activePageName + (GS.Controllers.PageController.activePage ? GS.Controllers.PageController.activePage.subpage : ""); else {
                this.lastActivePage = GS.Controllers.PageController.activePageName + (GS.Controllers.PageController.activePage ? GS.Controllers.PageController.activePage.subpage : "");
                var b = (new Date).getTime();
                if ($(".capital").length) {
                    $(".capital").each(this.callback(function (a, c) {
                        c = $(c);
                        if (b - c.data("data-iframe-born") > this.chooseAdLimit && (!c.data("data-user-activity") || c.data("data-user-activity") <
                                b) && c.offset().top + c.data("data-iframe-height") >= 0 && c.offset().top <= $("#page").height())c.data("data-iframe-width") && c.data("data-iframe-height") && c.data("data-iframe-params") && this.buildAd(c, c.data("data-iframe-width"), c.data("data-iframe-height"), c.data("data-iframe-params"))
                    }));
                    this.updateRotationCount()
                }
            }
        }), 500)
    }, updateRotationCount:function () {
        this.rotationCount++;
        this.rotationCountPerImpression++;
        if (GS.theme && !GS.theme.hasSeenRotationCount)GS.theme.hasSeenRotationCount = this.rotationCountPerImpression >=
                3
    }, onScroll:function () {
        if (gsConfig.country.ID == "38") {
            var b = $(".capitalWrapper_300"), a = $("#capitalBelowFoldHelper_300"), c = $("#capitalAboveFoldHelper_300");
            a.hasClass("justScroll") || a.addClass("justScroll");
            if (!(!b.length || !a.length || !c.length))if (c.length && c.offset().top + b.height() < 0)if (a.offset().top > 58) {
                b.hasClass("capitalFixedTop_300") && b.removeClass("capitalFixedTop_300");
                b.offset({top:a.offset().top})
            } else b.hasClass("capitalFixedTop_300") || b.addClass("capitalFixedTop_300"); else if (c.length &&
                    c.offset().top + c.height() >= 0) {
                b.hasClass("capitalFixedTop_300") && b.removeClass("capitalFixedTop_300");
                b.offset({top:c.offset().top})
            }
        } else {
            var h = $(".capital_300");
            b = $("#capitalBelowFoldHelper_300");
            a = $(".afcCapitalWrapper_300");
            $(".afcCapital_300 iframe");
            c = $(".afcCapital_300");
            if (c.length && !c.find("iframe").length && h.length && h.offset().top + h.height() < 0) {
                c.attr("data-iframe-type", "afc");
                h = GS.page.activePageName.toLowerCase().replace("controller", "");
                var g = (GS.search.query ? GS.search.query : "") + " " +
                        h + " ";
                switch (h) {
                    case "search":
                        g += GS.search.type;
                        break;
                    case "music":
                        g += GS.page.activePage.subpage.length ? GS.page.activePage.subpage : "featured";
                        break;
                    case "user":
                        g += "community friends";
                        break
                }
                if (g.indexOf("music") < 0)g += " music";
                g = $.trim(g);
                GS.getAd().buildAd(c, 300, 250, ["q=" + g])
            }
            if (b.length && a.length)if (b.offset().top > 58)a.hasClass("capitalFixedTop_300") && a.removeClass("capitalFixedTop_300"); else!a.hasClass("capitalFixedTop_300") && $("#page").height() > 310 && a.addClass("capitalFixedTop_300")
        }
    }, adSpecific:function () {
        if ($(".capital_728").length &&
                $(".capital_728").is(":visible")) {
            var b = $(".capital_728"), a = $(".capitalWrapper_728"), c = $(".capitalSliderBtn"), h = $(".capitalView_728");
            h.scrollLeft(h.scrollLeft() / 0.5);
            if (a.width() < b.width() + 42) {
                if (!c.is(":visible")) {
                    c.show();
                    b.css({left:0, marginLeft:0});
                    h.css({left:"21px"})
                }
                h.css({width:a.width() - 42 + "px"})
            } else if (c.is(":visible")) {
                c.hide();
                b.css({left:"50%", marginLeft:"-364px"});
                h.css({width:"100%", left:0})
            }
        } else if ($("#capitalSidebar .capital_160").length && $("#capitalSidebar .capital_160").is(":visible")) {
            b =
                    $("#capitalSidebar .capital_160");
            a = $("#capitalSidebar .capitalWrapper_160");
            c = $("#capitalSidebar .capitalSliderBtnRev");
            h = $("#capitalSidebar .capitalView_160");
            if (a.height() < b.height() + 48) {
                if (!c.is(":visible")) {
                    c.show();
                    h.css({top:"24px"})
                }
                h.css({height:a.height() - 48 + "px"})
            } else if (c.is(":visible")) {
                c.hide();
                h.css({height:"100%", top:0})
            }
        } else if ($("#page_wrapper .capital_160").length && $("#page_wrapper .capital_160").is(":visible")) {
            b = $("#page_wrapper .capital_160");
            a = $("#page_wrapper .capitalWrapper_160");
            c = $("#page_wrapper .capitalSliderBtnRev");
            h = $("#page_wrapper .capitalView_160");
            if (a.height() < b.height() + 42) {
                if (!c.is(":visible")) {
                    c.show();
                    h.css({top:"21px"})
                }
                h.css({height:a.height() - 42 + "px"})
            } else if (c.is(":visible")) {
                c.hide();
                h.css({height:"100%", top:0})
            }
        }
    }, "#capitalSidebar .capitalSliderBtnRev click":function (b) {
        b = $(b);
        $(b).hasClass("capitalSliderDown") ? $("#capitalSidebar .capitalView_160").animate({scrollTop:$("#capitalSidebar .capitalView_160").scrollTop() + 200}, 500) : $("#capitalSidebar .capitalView_160").animate({scrollTop:$("#capitalSidebar .capitalView_160").scrollTop() -
                200}, 500)
    }, ".removeAdsLink click":function () {
        GS.getLightbox().open("vipPerks")
    }});
GS.Controllers.BaseController.extend("GS.Controllers.SidebarController", {onElement:"#sidebar", isGSSingleton:true, preSetup:function () {
    var b = GS.Controllers.BaseController.singletonCallback, a = $.subscribe;
    a("gs.auth.update", b("sidebar", "update"));
    a("gs.auth.pinboard.update", b("sidebar", "populateByType"));
    a("gs.auth.playlists.update", b("sidebar", "populateByType", {type:"playlists"}));
    a("gs.auth.favorites.playlists.update", b("sidebar", "populateByType", {type:"subscribedPlaylists"}));
    a("gs.page.view", b("sidebar",
            "updateSection"));
    a("gs.app.ready", b("sidebar", "update"))
}}, {playlists:[], subscribedPlaylists:[], stations:[], sortBy:"sidebarSort", doingSubscribed:false, doResize:true, isOpen:false, lastClickedPinnedElement:false, doubleClickTimeout:false, init:function () {
    var b = GS.store.get("gs.sort.sidebar");
    if (["sidebarSort", "PlaylistName"].indexOf(b) != -1)this.sortBy = b;
    this.subscribe("gs.auth.sidebar.loaded", this.callback(function () {
        this.populateByType({type:"all"})
    }));
    this.subscribe("gs.app.resize", this.callback("resize"));
    this._super()
}, appReady:function () {
    this.update()
}, updateSection:function (b) {
    if (b === "user_music")if (GS.user.UserID == GS.page.activePageIdentifier && !GS.page.activePageParams.subpage)$(".sidebar_myMusic").addClass("active").siblings().removeClass("active"); else if (GS.user.UserID == GS.page.activePageIdentifier && GS.page.activePageParams.subpage == "favorites")$(".sidebar_myFavorites").addClass("active").siblings().removeClass("active"); else GS.user.UserID == GS.page.activePageIdentifier && GS.page.activePageParams.subpage ==
            "playlists" ? $(".sidebar_playlists").addClass("active").siblings().removeClass("active") : $(".sidebar_music_link").removeClass("active"); else $(".sidebar_music_link").removeClass("active")
}, show:function () {
    if (!this.isOpen) {
        this.isOpen = true;
        this.element.addClass("active").removeClass("hide").width(180);
        if (this.tinyScrollbar)this.tinyScrollbar.update(); else this.tinyScrollbar = $("#sidebar_pinboard").tinyscrollbar({animationOptions:{duration:50, easing:"linear"}});
        GS.resize()
    }
}, hide:function () {
    if (this.isOpen) {
        this.isOpen =
                false;
        this.element.removeClass("active").addClass("hide").width(0);
        GS.resize()
    }
}, resize:function () {
    this.tinyScrollbar && !this.element.hasClass("hide") && this.tinyScrollbar.update()
}, update:function () {
    if (GS.user) {
        this.user = GS.user;
        this.tinyScrollbar && this.tinyScrollbar.remove();
        this.tinyScrollbar = null;
        this.element.html(this.view("index"));
        this.populateByType({type:"all"});
        this.beginDragDrop()
    }
}, changeSort:function (b) {
    this.sortBy = b;
    this.populateByType({type:"all"});
    GS.store.set("gs.sort.sidebar", b)
},
    playlistSort:function (b, a) {
        var c, h;
        try {
            if (this.sortBy === "sidebarSort") {
                c = b[this.sortBy];
                h = a[this.sortBy]
            } else {
                c = b[this.sortBy].toString().toLowerCase();
                h = a[this.sortBy].toString().toLowerCase()
            }
        } catch (g) {
        }
        return c == h ? 0 : c > h ? 1 : -1
    }, populateByType:function (b) {
        if (GS.user.sidebarLoaded) {
            switch (b.type) {
                case "all":
                    this.populateSidebarStations();
                    this.populateSidebarSubscribedPlaylists();
                    this.populateSidebarPlaylists();
                    this.populateSidebarSongs();
                    this.populateSidebarArtists();
                    this.populateSidebarAlbums();
                    break;
                case "playlists":
                    this.populateSidebarPlaylists();
                    break;
                case "subscribedPlaylists":
                    this.populateSidebarSubscribedPlaylists();
                    break;
                case "stations":
                    this.populateSidebarStations();
                    break;
                case "songs":
                    this.populateSidebarSongs();
                    break;
                case "artists":
                    this.populateSidebarArtists();
                    break;
                case "albums":
                    this.populateSidebarAlbums();
                    break
            }
            if (this.tinyScrollbar)this.tinyScrollbar.update(); else this.tinyScrollbar = $("#sidebar_pinboard").tinyscrollbar({animationOptions:{duration:50, easing:"linear"}})
        }
    }, populateSidebarPlaylists:function () {
        if (GS.user.sidebarLoaded) {
            this.playlists =
                    [];
            for (var b = GS.user.sidebar.playlists, a = 0; a < b.length; a++) {
                var c = GS.user.playlists[b[a]];
                if (c) {
                    c.sidebarSort = a + 1;
                    this.playlists.push(c)
                }
            }
            this.playlists.sort(this.callback(this.playlistSort));
            this.showPlaylists()
        }
    }, populateSidebarSubscribedPlaylists:function () {
        if (GS.user.sidebarLoaded) {
            this.subscribedPlaylists = [];
            for (var b = GS.user.sidebar.subscribedPlaylists, a = 0; a < b.length; a++) {
                var c = b[a], h = GS.Models.Playlist.getOneFromCache(c), g = h ? h.PlaylistName : GS.user.sidebar.meta.subscribedPlaylists[c];
                if (h) {
                    if (h.UserID !==
                            GS.user.UserID) {
                        h.sidebarSort = a + 1;
                        this.subscribedPlaylists.push(h)
                    }
                } else g ? this.subscribedPlaylists.push({PlaylistID:c, PlaylistName:g, sidebarSort:a + 1}) : console.log("subscribedPlaylist shortcut with no name!", c)
            }
            this.subscribedPlaylists.sort(this.callback(this.playlistSort));
            this.showSubscribedPlaylists()
        }
    }, populateSidebarStations:function () {
        if (GS.user.sidebarLoaded) {
            this.stations = [];
            var b, a, c, h, g = GS.user.sidebar.stations;
            c = 0;
            for (h = g.length; c < h; c++) {
                b = g[c];
                if (a = GS.Models.Station.getOneFromCache(b))if (a =
                        a.StationTitle) {
                    a = {StationID:b, Station:a, Name:a, PlaylistName:a, sidebarSort:c + 1};
                    this.stations.push(a)
                }
            }
            this.stations.sort(this.callback(this.playlistSort));
            this.showStations()
        }
    }, populateSidebarSongs:function () {
        if (GS.user.sidebarLoaded) {
            this.songs = [];
            for (var b = GS.user.sidebar.songs, a = 0; a < b.length; a++) {
                var c = b[a], h = GS.Models.Song.getOneFromCache(c);
                (h = h ? h.SongName : GS.user.sidebar.meta.songs[c]) ? this.songs.push({SongName:h, SongID:c, sidebarSort:a + 1}) : console.log("song shortcut with no name!", c)
            }
            this.songs.sort(this.callback(this.playlistSort));
            this.showSongs()
        }
    }, populateSidebarArtists:function () {
        if (GS.user.sidebarLoaded) {
            this.artists = [];
            for (var b = GS.user.sidebar.artists, a = 0; a < b.length; a++) {
                var c = b[a], h = GS.Models.Artist.getOneFromCache(c);
                (h = h ? h.ArtistName : GS.user.sidebar.meta.artists[c]) ? this.artists.push({ArtistName:h, ArtistID:c, sidebarSort:a + 1}) : console.log("artist shortcut with no name!", c)
            }
            this.artists.sort(this.callback(this.playlistSort));
            this.showArtists()
        }
    }, populateSidebarAlbums:function () {
        if (GS.user.sidebarLoaded) {
            this.albums =
                    [];
            for (var b = GS.user.sidebar.albums, a = 0; a < b.length; a++) {
                var c = b[a], h = GS.Models.Album.getOneFromCache(c);
                (h = h ? h.AlbumName : GS.user.sidebar.meta.albums[c]) ? this.albums.push({AlbumName:h, AlbumID:c, sidebarSort:a + 1}) : console.log("album shortcut with no name!", c)
            }
            this.albums.sort(this.callback(this.playlistSort));
            this.showAlbums()
        }
    }, showPlaylists:function () {
        $("#sidebar_playlists").html(this.view("playlists", {playlists:this.playlists, doingSubscribed:false}));
        $("#sidebar_playlists_divider").show();
        $("#sidebar_playlist_new").toggle(!this.playlists.length)
    },
    showSubscribedPlaylists:function () {
        $("#sidebar_subscribed_playlists").html(this.view("playlists", {playlists:this.subscribedPlaylists, doingSubscribed:true}));
        $("#sidebar_playlists_divider").show()
    }, showStations:function () {
        $("#sidebar_stations").html(this.view("stations"));
        $("#sidebar_stations_divider").show();
        $("#sidebar_station_new").toggle(!this.stations.length)
    }, showSongs:function () {
        $("#sidebar_songs").html(this.view("songs"));
        var b = $("#sidebar_songs_divider"), a = b.toggle(!!this.songs.length).hasClass("sidebar_pin_collapsed");
        b.next(".sidebar_pin_group").toggle(!a && !!this.songs.length)
    }, showArtists:function () {
        $("#sidebar_artists").html(this.view("artists"));
        var b = $("#sidebar_artists_divider"), a = b.toggle(!!this.artists.length).hasClass("sidebar_pin_collapsed");
        b.next(".sidebar_pin_group").toggle(!a && !!this.artists.length)
    }, showAlbums:function () {
        $("#sidebar_albums").html(this.view("albums"));
        var b = $("#sidebar_albums_divider"), a = b.toggle(!!this.albums.length).hasClass("sidebar_pin_collapsed");
        b.next(".sidebar_pin_group").toggle(!a &&
                !!this.albums.length)
    }, ".sidebar_pin_divider click":function (b) {
        $(b).toggleClass("sidebar_pin_collapsed");
        $(b).next(".sidebar_pin_group").toggle()
    }, "a.sidebar_playlist click":function (b, a) {
        a.preventDefault();
        var c = parseInt($(b).attr("rel"), 10);
        if (b[0] != this.lastClickedPinnedElement[0]) {
            clearTimeout(this.doubleClickTimeout);
            this.doubleClickTimeout = false
        }
        if (c) {
            if (this.doubleClickTimeout) {
                clearTimeout(this.doubleClickTimeout);
                this.doubleClickTimeout = false;
                GS.Models.Playlist.getPlaylist(c, function (g) {
                    g &&
                    g.play(GS.player.INDEX_LAST, true)
                })
            } else {
                var h = this;
                this.doubleClickTimeout = setTimeout(function () {
                    h.doubleClickTimeout = false;
                    GS.Models.Playlist.getPlaylist(c, function (g) {
                        g && GS.router.setHash(g.toUrl())
                    })
                }, 900)
            }
            this.lastClickedPinnedElement = b
        }
    }, "a.sidebar_playlist_new click":function (b, a) {
        a.preventDefault();
        GS.getLightbox().open("newPlaylist")
    }, ".sidebar_playlist .remove click":function (b, a) {
        a.stopPropagation();
        a.preventDefault();
        var c = b.parent().attr("rel"), h = GS.Models.Playlist.getOneFromCache(c),
                g = h.isSubscribed(), k = $(b).closest(".link_group"), m = function () {
            if ($(".sidebar_link", k).length === 0)if (!g) {
                $("#sidebar_subscribed_divider").addClass("sidebar_pin_collapsed");
                $("#sidebar_subscribed_wrapper").css("display", "none")
            }
        };
        GS.getLightbox().open({type:"removePlaylistSidebar", view:{header:"POPUP_DELETE_PLAYLIST_TITLE", messageHTML:(new GS.Models.DataString($.localize.getString("POPUP_DELETE_PLAYLIST_QUESTION"), {playlist:h.PlaylistName})).render(), buttonsLeft:[
            {className:"close", label:"CANCEL"}
        ],
            buttonsRight:[
                {className:"submit playlist", label:g ? "PLAYLIST_UNSUBSCRIBE" : "POPUP_DELETE_PLAYLIST_LABEL"},
                {className:"submit shortcut", label:"POPUP_REMOVE_PINBOARD_LABEL"}
            ]}, callbacks:{"button.playlist":function () {
            g ? h.unsubscribe() : h.remove();
            m()
        }, "button.shortcut":function () {
            GS.user.removeFromShortcuts("playlist", h.PlaylistID, true);
            m()
        }}});
        return false
    }, "a.playlist contextmenu":function (b, a) {
        var c = b.attr("rel");
        c = GS.Models.Playlist.getOneFromCache(c).getContextMenu();
        $(b).jjmenu(a, c, null, {xposition:"mouse",
            yposition:"mouse", show:"show", className:"playlistmenu"})
    }, "a.station click":function (b, a) {
        a.stopPropagation();
        var c = b.attr("rel");
        GS.player.setAutoplay(true, c);
        return false
    }, "a.station .remove click":function (b, a) {
        a.stopPropagation();
        var c = b.parent().attr("rel");
        this.removeStationID = c;
        var h = $(b).closest(".link_group");
        GS.user.removeFromShortcuts("station", c, true);
        if ($(".sidebar_link", h).length === 0) {
            $("#sidebar_stations_divider").addClass("sidebar_pin_collapsed");
            $("#sidebar_stations_wrapper").css("display",
                    "none")
        }
        return false
    }, "a.noProfile click":function () {
        GS.getLightbox().open("login")
    }, "a.upload click":function () {
        window.open("http://" + location.host + "/upload", "_blank")
    }, "a.sidebar_song click":function (b, a) {
        a.preventDefault();
        var c = parseInt($(b).attr("rel"), 10);
        if (b[0] != this.lastClickedPinnedElement[0]) {
            clearTimeout(this.doubleClickTimeout);
            this.doubleClickTimeout = false
        }
        if (c)if (this.doubleClickTimeout) {
            clearTimeout(this.doubleClickTimeout);
            this.doubleClickTimeout = false;
            GS.Models.Song.getSong(c, function (g) {
                g &&
                GS.player.addSongAndPlay(g.SongID)
            })
        } else {
            var h = this;
            this.doubleClickTimeout = setTimeout(function () {
                h.doubleClickTimeout = false;
                GS.Models.Song.getSong(c, function (g) {
                    g && GS.router.setHash(g.toUrl())
                })
            }, 900)
        }
        this.lastClickedPinnedElement = b
    }, ".sidebar_song .remove click":function (b, a) {
        a.stopPropagation();
        a.preventDefault();
        var c = b.parent().attr("rel"), h = b.parent().attr("title");
        GS.getLightbox().open({type:"removeSongSidebar", view:{header:"POPUP_REMOVE_FROM_PINBOARD_TITLE", messageHTML:(new GS.Models.DataString($.localize.getString("POPUP_REMOVE_FROM_PINBOARD_MSG"),
                {name:h, type:$.localize.getString("SONG").toLowerCase()})).render(), buttonsLeft:[
            {className:"close", label:"CANCEL"}
        ], buttonsRight:[
            {className:"submit shortcut", label:"POPUP_REMOVE_PINBOARD_LABEL"}
        ]}, callbacks:{"button.shortcut":function () {
            GS.user.removeFromShortcuts("song", c)
        }}});
        return false
    }, "a.sidebar_song contextmenu":function (b, a) {
        var c = parseInt($(b).attr("rel"), 10);
        c && GS.Models.Song.getSong(c, function (h) {
            if (h) {
                h = h.getContextMenu();
                $(b).jjmenu(a, h, null, {xposition:"mouse", yposition:"mouse", show:"show",
                    className:"songmenu"})
            }
        })
    }, "a.sidebar_album click":function (b, a) {
        a.preventDefault();
        var c = parseInt($(b).attr("rel"), 10);
        if (b[0] != this.lastClickedPinnedElement[0]) {
            clearTimeout(this.doubleClickTimeout);
            this.doubleClickTimeout = false
        }
        if (c)if (this.doubleClickTimeout) {
            clearTimeout(this.doubleClickTimeout);
            this.doubleClickTimeout = false;
            GS.Models.Album.getAlbum(c, function (g) {
                g && g.play(GS.player.INDEX_LAST, true)
            })
        } else {
            var h = this;
            this.doubleClickTimeout = setTimeout(function () {
                h.doubleClickTimeout = false;
                GS.Models.Album.getAlbum(c,
                        function (g) {
                            g && GS.router.setHash(g.toUrl())
                        })
            }, 900)
        }
        this.lastClickedPinnedElement = b
    }, ".sidebar_album .remove click":function (b, a) {
        a.stopPropagation();
        a.preventDefault();
        var c = b.parent().attr("rel"), h = b.parent().attr("title");
        GS.getLightbox().open({type:"removeAlbumSidebar", view:{header:"POPUP_REMOVE_FROM_PINBOARD_TITLE", messageHTML:(new GS.Models.DataString($.localize.getString("POPUP_REMOVE_FROM_PINBOARD_MSG"), {name:h, type:$.localize.getString("ALBUM").toLowerCase()})).render(), buttonsLeft:[
            {className:"close",
                label:"CANCEL"}
        ], buttonsRight:[
            {className:"submit shortcut", label:"POPUP_REMOVE_PINBOARD_LABEL"}
        ]}, callbacks:{"button.shortcut":function () {
            GS.user.removeFromShortcuts("album", c)
        }}});
        return false
    }, "a.sidebar_album contextmenu":function (b, a) {
        var c = parseInt($(b).attr("rel"), 10);
        c && GS.Models.Album.getAlbum(c, function (h) {
            if (h) {
                h = h.getContextMenu();
                $(b).jjmenu(a, h, null, {xposition:"mouse", yposition:"mouse", show:"show", className:"albummenu"})
            }
        })
    }, "a.sidebar_artist click":function (b, a) {
        a.preventDefault();
        var c = b.attr("rel");
        c && GS.Models.Artist.getArtist(c, function (h) {
            h && GS.router.setHash(h.toUrl())
        })
    }, ".sidebar_artist .remove click":function (b, a) {
        a.stopPropagation();
        a.preventDefault();
        var c = b.parent().attr("rel"), h = b.parent().attr("title");
        GS.getLightbox().open({type:"removeSongSidebar", view:{header:"POPUP_REMOVE_FROM_PINBOARD_TITLE", messageHTML:(new GS.Models.DataString($.localize.getString("POPUP_REMOVE_FROM_PINBOARD_MSG"), {name:h, type:$.localize.getString("ARTIST").toLowerCase()})).render(), buttonsLeft:[
            {className:"close",
                label:"CANCEL"}
        ], buttonsRight:[
            {className:"submit shortcut", label:"POPUP_REMOVE_PINBOARD_LABEL"}
        ]}, callbacks:{"button.shortcut":function () {
            GS.user.removeFromShortcuts("artist", c)
        }}});
        return false
    }, "a.sidebar_artist contextmenu":function (b, a) {
        var c = parseInt($(b).attr("rel"), 10);
        c && GS.Models.Artist.getArtist(c, function (h) {
            if (h) {
                h = h.getContextMenu();
                $(b).jjmenu(a, h, null, {xposition:"mouse", yposition:"mouse", show:"show", className:"artistmenu"})
            }
        })
    }, "#pinboard_new click":function (b, a) {
        b.jjmenu(a, this.getPinboardMenu(),
                null, {xposition:"left", yposition:"auto", show:"default", className:"pinboardmenu"})
    }, getPinboardMenu:function () {
        return[
            {title:$.localize.getString("SIDEBAR_CONTEXT_ADD_PLAYLIST"), action:{type:"fn", callback:function () {
                GS.getLightbox().open("newPlaylist", null)
            }, log:function () {
                GS.getGuts().onContextMenuClick("contextNewPlaylist", "pinboard_new", null, null)
            }}, customClass:"jj_menu_item_hasIcon jj_menu_item_add_playlist"},
            {title:$.localize.getString("SIDEBAR_CONTEXT_ADD_STATION"), type:"sub", src:GS.Models.Station.getStationsStartMenuForPinboard(),
                customClass:"stations jj_menu_item_hasIcon jj_menu_item_station"}
        ]
    }, beginDragDrop:function () {
        function b(g, k, m) {
            _.orEqual(m, false);
            if (!($("#sidebar").within(g.clientX, g.clientY).length <= 0)) {
                g = $(".sidebar_link a", "#sidebar").within(g.clientX, g.clientY);
                $("#sidebar .sidebar_link a").removeClass("hover");
                g.length && k.draggedItemsType !== "playlist" && g.addClass("hover")
            }
        }

        function a(g, k) {
            var m = [], n, o;
            g.draggedItemsType = g.draggedItemsType || _.guessDragType(g.draggedItems);
            switch (g.draggedItemsType) {
                case "song":
                    for (n =
                                 0; n < g.draggedItems.length; n++)m.push(g.draggedItems[n].SongID);
                    var r, A = [], w = [];
                    if ($("#grid").controller()) {
                        var B = $("#grid").controller().dataView.rows;
                        $('#grid .slick-row.selected[id!="showQueue"]').each(function (v, D) {
                            r = parseInt($(D).attr("row"), 10);
                            if (!isNaN(r)) {
                                A.push(r + 1);
                                var F = B[r].ppVersion;
                                F && w.push(F)
                            }
                        })
                    }
                    n = {ranks:A, songIDs:m};
                    if (w.length > 0)n.ppVersions = w.join();
                    GS.getGuts().logMultiSongDrag("OLSongsDraggedToSidebar", n);
                    break;
                case "album":
                    var t = function (v) {
                        v.sort(GS.Models.Album.defaultSongSort);
                        for (o = 0; o < v.length; o++)m.push(v[o].SongID)
                    };
                    for (n = 0; n < g.draggedItems.length; n++)g.draggedItems[n].getSongs(t, null, true, {async:false});
                    break;
                case "artist":
                    t = function (v) {
                        v.sort(GS.Models.Artist.defaultSongSort);
                        for (o = 0; o < v.length; o++)m.push(v[o].SongID)
                    };
                    for (n = 0; n < g.draggedItems.length; n++)g.draggedItems[n].getSongs(t, null, {async:false});
                    break;
                case "playlist":
                    t = function (v) {
                        for (o = 0; o < v.length; o++)m.push(v[o].SongID)
                    };
                    for (n = 0; n < g.draggedItems.length; n++)g.draggedItems[n].getSongs(t, null, {async:false});
                    break;
                case "user":
                    t = function (v) {
                        for (o = 0; o < v.length; o++)m.push(v[o].SongID)
                    };
                    for (n = 0; n < g.draggedItems.length; n++)g.draggedItems[n].getFavoritesByType("Song", t, null, {async:false});
                    break;
                default:
                    console.error("sidebar drop, invalid drag type", g, g.draggedItemsType);
                    return
            }
            if (k === "library")GS.user.addToLibrary(m, true); else if (k === "favorites")for (n = 0; n < m.length; n++)GS.user.addToSongFavorites(m[n]); else if (k === "newPlaylist")GS.getLightbox().open("newPlaylist", m); else if (k instanceof GS.Models.Playlist)k.addSongs(m,
                    null, true); else {
                console.error("sidebar drop, invalid thing", k);
                return
            }
            GS.getGuts().gaTrackEvent("sidebar", "dropSuccess")
        }

        var c = $("li.sidebar_myMusic"), h = $("li.sidebar_favorites");
        $("#sidebar_playlists,#sidebar_subscribed_playlists,#sidebar_songs,#sidebar_artists,#sidebar_albums,#sidebar_stations").bind("draginit",
                function (g, k) {
                    var m = $(g.target).closest(".sidebar_link");
                    if (m.length === 0)return false;
                    k.draggedSidebarItem = m;
                    k.proxyOffsetX = g.clientX - m.offset().left;
                    k.proxyOffsetY = g.clientY - m.offset().top
                }).bind("dragstart",
                function (g, k) {
                    var m = k.draggedSidebarItem.attr("rel"), n, o;
                    if (k.draggedSidebarItem.hasClass("sidebar_playlist")) {
                        n = "playlist";
                        o = GS.Models.Playlist.getOneSynchronous(m)
                    } else if (k.draggedSidebarItem.hasClass("sidebar_artist")) {
                        n = "artist";
                        o = GS.Models.Artist.getOneSynchronous(m)
                    } else if (k.draggedSidebarItem.hasClass("sidebar_album")) {
                        n = "album";
                        o = GS.Models.Album.getOneSynchronous(m)
                    } else if (k.draggedSidebarItem.hasClass("sidebar_song")) {
                        n = "song";
                        o = GS.Models.Song.getOneSynchronous(m)
                    } else if (k.draggedSidebarItem.hasClass("sidebar_station")) {
                        n =
                                "station";
                        o = GS.Models.Station.getOneFromCache(m)
                    } else return false;
                    if (!o)return false;
                    k.draggedItems = [o];
                    k.draggedIemsType = n;
                    k.draggedItemsSource = "sidebar";
                    k.deleteAction = {label:"CONTEXT_REMOVE_FROM_PINBOARD", method:function () {
                        GS.user.removeFromShortcuts(n, m, true)
                    }};
                    $.publish("gs.drag.start", k);
                    return $('<div class="dragProxy" style="position:absolute; z-index: 99999;"><div class="status"></div></div>').prepend($(k.draggedSidebarItem).clone()).appendTo("body").mousewheel(_.globalDragProxyMousewheel)
                }).bind("drag",
                function (g, k) {
                    k.clientX = g.clientX;
                    k.clientY = g.clientY;
                    $(k.proxy).css({top:g.clientY - k.proxyOffsetY, left:g.clientX - k.proxyOffsetX});
                    var m = false, n = false;
                    _.forEach(k.drop, function (o) {
                        $.isFunction(o.updateDropOnDrag) && o.updateDropOnDrag(g, k);
                        if (!m)if ($(o).within(g.clientX, g.clientY).length > 0)if ($(o).data("ignoreForOverDrop"))n = true; else {
                            n = false;
                            m = true
                        }
                    });
                    n || (m ? $(k.proxy).addClass("valid").removeClass("invalid") : $(k.proxy).addClass("invalid").removeClass("valid"))
                }).bind("dragend",
                function (g, k) {
                    $(k.proxy).remove();
                    GS.getGuts().gaTrackEvent("sidebar", "dragEnd");
                    $.publish("gs.drag.end", k)
                }).bind("dropinit",
                function () {
                    this.updateDropOnDrag = function (g, k) {
                        b(g, k, k.draggedItemsType === "playlist")
                    }
                }).bind("dropstart",
                function (g, k) {
                    if (!k.draggedItems) {
                        this.updateDropOnDrag = null;
                        return false
                    }
                    k.draggedItemsType = k.draggedItemsType || _.guessDragType(k.draggedItems);
                    if (k.draggedItemsSource == "sidebar") {
                        this.updateDropOnDrag = null;
                        return false
                    }
                    if (k.draggedItemsType !== "playlist" || $(this).attr("id") !== "sidebar_playlists") {
                        this.updateDropOnDrag =
                                null;
                        return false
                    }
                }).bind("dropend",
                function () {
                    $("#sidebar .sidebar_link a").removeClass("hover")
                }).bind("drop", function (g, k) {
                    if ($("#sidebar").width() !== 0) {
                        k.draggedItemsType = k.draggedItemsType || _.guessDragType(k.draggedItems);
                        var m, n;
                        if (k.draggedItemsType === "playlist")for (m = 0; m < k.draggedItems.length; m++) {
                            n = k.draggedItems[m];
                            n.UserID == GS.user.UserID || n.isSubscribed() ? GS.user.addToShortcuts("playlist", n.PlaylistID, n.PlaylistName, true) : GS.user.addToPlaylistFavorites(n.PlaylistID, true)
                        } else {
                            m = $(".playlist",
                                    "#sidebar_playlists").within(g.clientX, g.clientY).attr("rel");
                            n = GS.Models.Playlist.getOneFromCache(m);
                            if (n instanceof GS.Models.Playlist)a(k, n); else m == "new" && a(k, "newPlaylist")
                        }
                    }
                });
        c.bind("dropinit",
                function () {
                    this.updateDropOnDrag = function (g, k) {
                        b(g, k, true)
                    }
                }).bind("dropstart",
                function (g, k) {
                    if (!k.draggedItems) {
                        this.updateDropOnDrag = null;
                        return false
                    }
                }).bind("dropend",
                function () {
                    $("#sidebar .sidebar_link a").removeClass("hover")
                }).bind("drop", function (g, k) {
                    a(k, "library")
                });
        h.bind("dropinit",
                function () {
                    this.updateDropOnDrag =
                            function (g, k) {
                                b(g, k, true)
                            }
                }).bind("dropstart",
                function (g, k) {
                    if (!k.draggedItems) {
                        this.updateDropOnDrag = null;
                        return false
                    }
                }).bind("dropend",
                function () {
                    $("#sidebar .sidebar_link a").removeClass("hover")
                }).bind("drop", function (g, k) {
                    a(k, "favorites")
                })
    }});
(function () {
    function b(m) {
        if (!c) {
            var n = m.draggedItemsType = m.draggedItemsType || _.guessDragType(m.draggedItems);
            if (n != "user") {
                $("#shortcuts").show();
                if (n == "song" && m.draggedItems.length > 1)n = "manySongs";
                var o = _.orEqual(GS.shareTypes[n], []), r = $("#shortcuts_bar .share_option"), A = $("#shortcuts_share_wrapper"), w = GS.user.isLoggedIn && m.draggedItems.length === 1 && k.indexOf(n) !== -1;
                if (!GS.user.isLoggedIn) {
                    o = o.concat();
                    var B = o.indexOf("email");
                    B != -1 && o.splice(B, 1)
                }
                r.hide();
                if (o.length || w) {
                    A.show();
                    _.forEach(o, function (t) {
                        r.filter("." +
                                t).show()
                    });
                    w && r.filter(".broadcast").show()
                } else A.hide();
                $("#shortcuts_add_pinboard").toggle(m.draggedItems.length === 1 && g.indexOf(n) !== -1 && m.draggedItemsSource != "sidebar");
                $("#shortcuts_add_favorites").toggle(n === "song");
                $("#shortcuts_add_library").add("#shortcuts_playlists_wrapper").toggle(n !== "station");
                $("#shortcuts_add_wrapper").toggle($("#shortcuts_add").children(":visible").length > 0);
                $("#shortcuts_scroll").height($("#shortcuts_bar").height());
                if (m.deleteAction) {
                    n = $("#shortcuts_trash_label");
                    $("#shortcuts_trash_wrapper").show();
                    n.removeClass("ellipsis");
                    n.localeDataString(m.deleteAction.label, m.deleteAction.labelParams);
                    n.addClass("ellipsis")
                } else $("#shortcuts_trash_wrapper").hide();
                m = $("#shortcuts_scroll .viewport").innerHeight() < $("#shortcuts_scroll .overview").outerHeight() ? 0 : -15;
                $("#shortcuts_bar").stop().animate({right:m}, "fast", function () {
                    if (h)h.update(); else {
                        h = $("#shortcuts_scroll").tinyscrollbar();
                        h.find(".viewport").scroll(function () {
                            h.update()
                        })
                    }
                });
                c = true
            }
        }
    }

    function a(m) {
        clearTimeout(m.shortcutsAutoScrollWaitTimeout);
        m.shortcutsAutoScrollWaitTimeout = false;
        m.shortcutsAutoScrollHasWaited = false;
        clearInterval(m.shortcutsAutoScrollInterval);
        m.shortcutsAutoScrollInterval = false
    }

    var c = false, h = false, g = ["song", "playlist", "album", "artist", "station"], k = ["song", "playlist", "album", "artist"];
    GS.Controllers.BaseController.extend("GS.Controllers.ShortcutsController", {onElement:"#shortcuts"}, {playlists:[], playlistsDirty:true, init:function () {
        this.subscribe("gs.drag.start", this.callback("onGlobalDragStart"));
        this.subscribe("gs.drag.end",
                this.callback("onGlobalDragEnd"));
        this.subscribe("gs.auth.update", this.callback("dirtyPlaylists"));
        this.subscribe("gs.auth.playlists.update", this.callback("dirtyPlaylists"));
        this._super()
    }, appReady:function () {
        this.update()
    }, update:function () {
        this.element.html(this.view("index"));
        this.beginDragDrop()
    }, dirtyPlaylists:function () {
        this.playlistsDirty = true;
        c && this.populatePlaylists()
    }, populatePlaylists:function () {
        this.playlists = [];
        GS.user && _.forEach(GS.user.playlists, function (m) {
                    this.playlists.push(m)
                },
                this);
        this.playlists.sort(function (m, n) {
            var o = m.PlaylistName.toLowerCase(), r = n.PlaylistName.toLowerCase();
            return o == r ? m == n ? 0 : m < n ? -1 : 1 : o < r ? -1 : 1
        });
        $("#shortcuts_playlists").html(this.view("playlists", {playlists:this.playlists}));
        this.playlistsDirty = false
    }, beginDragDrop:function () {
        function m(t) {
            return function () {
                if (t.hasOwnProperty("clientX") && t.clientX < A.offset().left)a(t); else B = setTimeout(m(t), 100)
            }
        }

        function n(t, v) {
            function D() {
                var y = (new Date).valueOf();
                if (v.shortcutsAutoScrollHasWaited && (!v.shortcutsAutoScrollLast ||
                        y - v.shortcutsAutoScrollLast >= x)) {
                    v.shortcutsAutoScrollLast = y;
                    $scrollable.scrollTop(Math.max(0, $scrollable.scrollTop() - 41))
                }
            }

            function F() {
                var y = (new Date).valueOf();
                if (v.shortcutsAutoScrollHasWaited && (!v.shortcutsAutoScrollLast || y - v.shortcutsAutoScrollLast >= x)) {
                    v.shortcutsAutoScrollLast = y;
                    $scrollable.scrollTop(Math.min(scrollHeight, $scrollable.scrollTop() + 41))
                }
            }

            $scrollable = $("#shortcuts_scroll .viewport");
            var E = Math.ceil($scrollable.height() * 0.2), x = 200;
            scrollHeight = $scrollable[0].scrollHeight;
            if (v.shortcutsAutoScrollWaitTimeout)if ($scrollable.offset().top +
                    E > t.clientY) {
                D();
                clearInterval(v.shortcutsAutoScrollInterval);
                v.shortcutsAutoScrollInterval = setInterval(D, x)
            } else if ($scrollable.offset().top + $scrollable.height() - E < t.clientY) {
                F();
                clearInterval(v.shortcutsAutoScrollInterval);
                v.shortcutsAutoScrollInterval = setInterval(F, x)
            } else a(v); else v.shortcutsAutoScrollWaitTimeout = setTimeout(function () {
                v.shortcutsAutoScrollHasWaited = true;
                v.shortcutsAutoScrollWaitTimeout = false
            }, 500)
        }

        function o(t) {
            var v = [], D, F;
            t.draggedItemsType = t.draggedItemsType || _.guessDragType(t.draggedItems);
            switch (t.draggedItemsType) {
                case "song":
                    for (D = 0; D < t.draggedItems.length; D++)v.push(t.draggedItems[D].SongID);
                    var E, x = [], y = [];
                    if ($("#grid").controller()) {
                        var H = $("#grid").controller().dataView.rows;
                        $('#grid .slick-row.selected[id!="showQueue"]').each(function (p, q) {
                            E = parseInt($(q).attr("row"), 10);
                            if (!isNaN(E)) {
                                x.push(E + 1);
                                var s = H[E].ppVersion;
                                s && y.push(s)
                            }
                        })
                    }
                    t = {ranks:x, songIDs:v};
                    if (y.length > 0)t.ppVersions = y.join();
                    GS.getGuts().logMultiSongDrag("OLSongsDraggedToShortcuts", t);
                    break;
                case "album":
                    var I =
                            function (p) {
                                p.sort(GS.Models.Album.defaultSongSort);
                                for (F = 0; F < p.length; F++)v.push(p[F].SongID)
                            };
                    for (D = 0; D < t.draggedItems.length; D++)t.draggedItems[D].getSongs(I, null, {async:false});
                    break;
                case "artist":
                    I = function (p) {
                        p.sort(GS.Models.Artist.defaultSongSort);
                        for (F = 0; F < p.length; F++)v.push(p[F].SongID)
                    };
                    for (D = 0; D < t.draggedItems.length; D++)t.draggedItems[D].getSongs(I, null, {async:false});
                    break;
                case "playlist":
                    I = function (p) {
                        for (F = 0; F < p.length; F++)v.push(p[F].SongID)
                    };
                    for (D = 0; D < t.draggedItems.length; D++)t.draggedItems[D].getSongs(I,
                            null, {async:false});
                    break;
                case "user":
                    I = function (p) {
                        for (F = 0; F < p.length; F++)v.push(p[F].SongID)
                    };
                    for (D = 0; D < t.draggedItems.length; D++)t.draggedItems[D].getFavoritesByType("Song", I, null, {async:false});
                    break;
                default:
                    console.error("shortcut drop, invalid drag type", t, t.draggedItemsType)
            }
            return v
        }

        function r(t, v) {
            if (v === "library")GS.user.addToLibrary(t, true); else if (v === "favorites")for (i = 0; i < t.length; i++)GS.user.addToSongFavorites(t[i]); else if (v === "newPlaylist")GS.getLightbox().open("newPlaylist", t); else v instanceof
                    GS.Models.Playlist ? v.addSongs(t, null, true) : console.error("shortcut drop, invalid thing", v)
        }

        var A = $("#shortcuts"), w = $("#shortcuts_bar"), B = false;
        A.data("ignoreForOverDrop", true).bind("dropinit",
                function () {
                    this.updateDropOnDrag = function (t, v) {
                        if (!(w.within(t.clientX, t.clientY).length <= 0)) {
                            var D = w.find(".shortcuts_link a");
                            D.removeClass("hover");
                            D = D.within(t.clientX, t.clientY);
                            D.addClass("hover");
                            D.length ? $(v.proxy).addClass("valid").removeClass("invalid") : $(v.proxy).addClass("invalid").removeClass("valid")
                        }
                        n(t,
                                v)
                    }
                }).bind("dropend",
                function (t, v) {
                    v.isOverShortcuts = false;
                    clearTimeout(B);
                    B = setTimeout(m(v), 100)
                }).bind("dropstart",
                function (t, v) {
                    v.isOverShortcuts = true;
                    clearTimeout(B);
                    if (!v.draggedItems) {
                        this.updateDropOnDrag = null;
                        return false
                    }
                    v.draggedItemsType = v.draggedItemsType || _.guessDragType(v.draggedItems)
                }).bind("drop", function (t, v) {
                    v.draggedItemsType = v.draggedItemsType || _.guessDragType(v.draggedItems);
                    var D = w.find(".shortcuts_link").within(t.clientX, t.clientY).last(), F = D.attr("rel");
                    if (D.is(".share_option"))a:{
                        v.draggedItemsType =
                                v.draggedItemsType || _.guessDragType(v.draggedItems);
                        F = {service:F};
                        switch (v.draggedItemsType) {
                            case "song":
                                F.id = o(v);
                                if (F.id.length == 1) {
                                    F.id = F.id[0];
                                    F.type = "song"
                                } else F.type = "manySongs";
                                break;
                            case "playlist":
                                F.id = v.draggedItems[0].PlaylistID;
                                F.type = "playlist";
                                break;
                            case "album":
                                F.id = v.draggedItems[0].AlbumID;
                                F.type = "album";
                                break;
                            case "artist":
                                F.id = v.draggedItems[0].ArtistID;
                                F.type = "artist";
                                break;
                            default:
                                console.error("shortcut share drop, invalid type", v.draggedItemsType);
                                break a
                        }
                        F.service != "widget" &&
                                F.type != "manySongs" ? GS.getLightbox().open("share", F) : GS.getLightbox().open("widget", F)
                    } else if (D.is(".add_option"))if (D.is(".pinboard")) {
                        D = v.draggedItems[0];
                        switch (v.draggedItemsType) {
                            case "playlist":
                                F = D.PlaylistID;
                                D = D.PlaylistName;
                                break;
                            case "song":
                                F = D.SongID;
                                D = D.SongName;
                                break;
                            case "album":
                                F = D.AlbumID;
                                D = D.AlbumName;
                                break;
                            case "artist":
                                F = D.ArtistID;
                                D = D.ArtistName;
                                break;
                            case "station":
                                F = D.StationID;
                                D = "";
                                break;
                            default:
                                return
                        }
                        GS.user.addToShortcuts(v.draggedItemsType, F, D)
                    } else r(o(v), F); else if (D.is(".playlist_option")) {
                        D =
                                GS.Models.Playlist.getOneFromCache(F);
                        if (D instanceof GS.Models.Playlist)r(o(v), D); else F == "new" && r(o(v), "newPlaylist")
                    } else if (D.is(".trash_option"))v.deleteAction && $.isFunction(v.deleteAction.method) && v.deleteAction.method.call(); else return;
                    GS.getGuts().gaTrackEvent("shortcuts", "dropSuccess")
                })
    }, onGlobalDragStart:function (m) {
        this.playlistsDirty && this.populatePlaylists();
        b(m)
    }, onGlobalDragEnd:function (m) {
        if (c) {
            $("#shortcuts_bar").stop().css({right:-215}).find(".shortcuts_link a").removeClass("hover");
            $("#shortcuts").hide();
            c = false
        }
        a(m)
    }})
})();
(function () {
    var b, a = true, c = new Date, h = 4;
    $.browser.mozilla || $.browser.opera ? $("body").bind("mousemove", function () {
        GS.user.subscription.canListenUninterrupted() || (c = new Date)
    }) : $("body").bind("mousemove", function () {
        c = new Date
    });
    GS.Controllers.BaseController.extend("GS.Controllers.PlayerController", {onElement:"#footer"}, {REPEAT_NONE:0, REPEAT_ALL:1, REPEAT_ONE:2, repeatStates:{none:0, all:1, one:2}, INDEX_DEFAULT:-1, INDEX_NEXT:-2, INDEX_LAST:-3, INDEX_REPLACE:-4, PLAY_STATUS_NONE:0, PLAY_STATUS_INITIALIZING:1,
        PLAY_STATUS_LOADING:2, PLAY_STATUS_PLAYING:3, PLAY_STATUS_PAUSED:4, PLAY_STATUS_BUFFERING:5, PLAY_STATUS_FAILED:6, PLAY_STATUS_COMPLETED:7, PLAY_CONTEXT_UNKNOWN:"unknown", PLAY_CONTEXT_SONG:"song", PLAY_CONTEXT_ALBUM:"album", PLAY_CONTEXT_ARTIST:"artist", PLAY_CONTEXT_PLAYLIST:"playlist", PLAY_CONTEXT_RADIO:"radio", PLAY_CONTEXT_SEARCH:"search", PLAY_CONTEXT_POPULAR:"popular", PLAY_CONTEXT_FEED:"feed", PLAY_CONTEXT_SIDEBAR:"sidebar", PLAY_CONTEXT_EXPLORE:"explore", PLAY_CONTEXT_USER:"user", QUEUE_ADD_LIMIT:1E3, crossfadeAmount:5E3,
        crossfadeEnabled:false, playPauseFade:false, prefetchEnabled:true, lowerQuality:false, embedTimeout:0, playlistName:$.localize.getString("NOW_PLAYING"), currentSongString:new GS.Models.DataString, songCountString:new GS.Models.DataString, numSongs:0, player:null, isPlaying:false, isPaused:false, isLoading:false, repeatMode:null, autoplayEnabled:null, activeSong:null, currentSongs:null, nextSongToPlay:null, nullStatus:{activeSong:{}, bytesLoaded:0, bytesTotal:0, duration:0, position:0, status:0}, SCRUB_LOCK:false, QUEUE_SIZES:{s:{width:144,
            activeWidth:144}, m:{width:86, activeWidth:86}, l:{width:106, activeWidth:106}}, queueSize:"m", songWidth:86, activeSongWidth:86, queueClosed:false, queueClosedByUser:false, gsQueue:null, allowRestore:true, lastZoomLevel:0, videoModeEnabled:false, powerModeEnabled:false, exists:false, init:function () {
            b = this;
            var g = location.hash.match(/^#!?\/s\/(.*)\/?/);
            if (g) {
                g = g[0].replace(/\?([^#]*)$/, "");
                this.allowRestore = false;
                this.songToPlayOnReadyToken = g.split("/")[3]
            }
            this.beginDragDrop();
            this.addQueueSeek();
            this.addShortcuts();
            this.addVolumeSlider();
            this.addQueueResize();
            this.queueSize = _.orEqual(GS.store.get("queueSize"), $(window).height() > 700 ? "m" : "s");
            this.songWidth = this.QUEUE_SIZES[this.queueSize].width;
            this.activeSongWidth = this.QUEUE_SIZES[this.queueSize].activeWidth;
            this.setQueue("off", false);
            this.subscribe("gs.auth.update", this.callback(this.userChange));
            this.subscribe("gs.auth.song.update", this.callback(this.songChange));
            this.subscribe("gs.auth.library.update", this.callback(this.libraryChange));
            this.subscribe("gs.auth.favorites.songs.update",
                    this.callback(this.libraryChange));
            this.subscribe("gs.settings.local.update", this.callback(this.updateWithLocalSettings));
            this.subscribe("gs.song.play", this.callback(this.eventPlaySong));
            this.subscribe("gs.album.play", this.callback(this.eventPlayAlbum));
            this.subscribe("gs.playlist.play", this.callback(this.eventPlayPlaylist));
            this.subscribe("gs.station.play", this.callback(this.eventPlayStation));
            this.subscribe("gs.app.resize", this.callback(this.resize));
            this.subscribe("gs.swf.invalidMethod", this.callback(this.swfDied));
            this.exists = true;
            GS.Models.Feature.register("videoMode", {FeatureID:"videoMode", TextKey:"VIDEO_MODE", ActivateCallback:this.callback("enableVideoMode"), Type:"ACTIVATED"});
            GS.Models.Feature.register("visualizers", {FeatureID:"visualizers", TextKey:"VISUALIZERS", ActivateCallback:this.callback(function () {
                GS.getLightbox().open("visualizer", {showPlayerControls:true})
            }), Type:"ACTIVATED"});
            GS.Models.Feature.register("powerHour", {FeatureID:"powerHour", TextKey:"POWER_HOUR_MODE", ActivateCallback:this.callback("togglePowerMode"),
                IsActiveCallback:this.callback(function () {
                    return this.powerModeEnabled
                })});
            this._super()
        }, appReady:function () {
            if (swfobject.hasFlashPlayerVersion("9.0.0"))this.embedTimeout = setTimeout(this.callback(this.onEmbedTimeout), 1E4); else setTimeout(function () {
                GS.getLightbox().open({type:"noFlash", notCloseable:true, view:{header:"POPUP_NO_FLASH_TITLE", message:"POPUP_NO_FLASH_MSG", buttonsRight:[
                    {label:"POPUP_REFRESH_GROOVESHARK", className:"submit"}
                ], buttonsLeft:[
                    {label:"POPUP_INSTALL_FLASH", href:"http://get.adobe.com/flashplayer/",
                        className:"install"}
                ]}, callbacks:{".submit":function (g) {
                    g.stopImmediatePropagation();
                    window.location.reload(true)
                }, ".install":function () {
                    $(this).attr("target", "_blank")
                }}})
            }, 500)
        }, resize:function () {
            b.updateQueueWidth()
        }, setQueue:function (g, k) {
            k = _.orEqual(k, true);
            var m = g === "s" ? b.smallQueueSongToHtml : b.queueSongToHtml(g), n = b.getCurrentQueue(), o = _.defined(b.queue) && b.queue.songs ? b.queue.songs : [], r = 0, A = (g != b.queueSize || b.queueClosed) && g != "off", w = b.queueClosed, B = 0;
            $("#queue").height("auto");
            if (b.QUEUE_SIZES[g]) {
                b.queueSize =
                        g;
                if (k) {
                    b.queueClosed = false;
                    b.queueClosedByUser = false
                }
                b.songWidth = b.QUEUE_SIZES[g].width;
                b.activeSongWidth = b.QUEUE_SIZES[g].activeWidth;
                GS.store.set("queueSize", g)
            } else if (g == "off") {
                b.queueClosed = true;
                b.queueClosedByUser = k
            }
            if (n && n.activeSong)r = n.activeSong.index;
            if (A) {
                B = b.gsQueue.calcIndex($("#queue .viewport").scrollLeft());
                $("#queue").attr("class", "size-" + b.queueSize);
                b.gsQueue.updateSettings({activeItemWidth:b.activeSongWidth, itemWidth:b.songWidth, itemRenderer:m, activeIndex:r})
            } else if (!b.gsQueue)b.gsQueue =
                    $("#queue").attr("class", "size-" + b.queueSize).gsQueue({activeItemWidth:b.activeSongWidth, itemWidth:b.songWidth, itemRenderer:m, activeIndex:r}, o);
            if (b.queueClosed) {
                b.gsQueue.setDisabled(true);
                $("#queue").height(0)
            } else {
                b.gsQueue.setDisabled(false);
                A && setTimeout(function () {
                    b.gsQueue.moveTo(w ? r : B, true, w ? false : true)
                }, 50)
            }
            $(window).resize()
        }, userChange:function () {
            this.updateWithLocalSettings()
        }, libraryChange:function () {
            var g = {};
            if ((g = b.player ? b.player.getCurrentQueue() : {activeSong:false, songs:[]}) && g.songs.length) {
                var k =
                        GS.Models.Song.wrapQueue(g.songs);
                b.gsQueue.setItems(k, true);
                b.updateQueueDetails()
            }
            if (g.activeSong) {
                g = GS.Models.Song.wrapQueue([g.activeSong])[0];
                b.updateSongOnPlayer(g, true, true)
            }
        }, playerExists:function () {
            return GS.isReady
        }, playerReady:function (g) {
            if (!b.isReady && g.interruptionExpireTime && a) {
                var k = new Date, m = k.getTime();
                k.setTime(g.interruptionExpireTime);
                k = k.getTime();
                if (k > m) {
                    a = false;
                    setTimeout(function () {
                        a = true
                    }, k - m)
                }
            }
            b.isReady = true;
            if (!GS.isReady)return false;
            return b.playerSetup(g)
        }, playerSetup:function (g) {
            g ||
            (g = b.player.getEverything());
            b.player.setErrorCallback("GS.Controllers.PlayerController.instance().playerError");
            b.player.setPlaybackStatusCallback("GS.Controllers.PlayerController.instance().playerStatus");
            b.player.setPropertyChangeCallback("GS.Controllers.PlayerController.instance().propertyChange");
            b.player.setQueueChangeCallback("GS.Controllers.PlayerController.instance().queueChange");
            b.player.setSongPropertyChangeCallback("GS.Controllers.PlayerController.instance().songChange");
            b.player.setChatServers(gsConfig.chatServersWeighted ?
                    gsConfig.chatServersWeighted : {});
            var k = b.player.setZoomChangeCallback("GS.Controllers.PlayerController.instance().onZoomChange");
            b.onZoomChange(k);
            GS.service.verifyControllerKey(g.verifyKey);
            $("#volumeSlider").slider("value", b.player.getVolume());
            b.updateWithLocalSettings();
            clearTimeout(b.embedTimeout);
            b.embedTimeout = null;
            GS.getLightbox && GS.getLightbox().isOpen && GS.getLightbox().curType == "swfTimeout" && GS.getLightbox().close();
            this.songToPlayOnReadyToken && GS.Models.Song.getSongFromToken(this.songToPlayOnReadyToken,
                    function (m) {
                        m && m.validate() && b.addSongAndPlay(m.SongID)
                    }, null, false);
            return true
        }, onEmbedTimeout:function () {
            b.player || GS.getLightbox().open("swfTimeout", {notCloseable:true})
        }, swfDied:function () {
            GS.getLightbox().open({type:"swfCrash", view:{header:"POPUP_SWF_CRASH_TITLE", message:"POPUP_SWF_CRASH_MESSAGE", buttonsLeft:[
                {label:"POPUP_SWF_CRASH_RELOAD", className:"reload"}
            ]}, callbacks:{".reload":function () {
                window.location.reload(true)
            }}})
        }, queueIsRestorable:function () {
            this.getCurrentQueue(true);
            if (GS.user &&
                    GS.user.settings.local.restoreQueue && this.allowRestore)this.restoreQueue(); else {
                $("#queue_clear_button").addClass("undo").attr("title", $.localize.getString("QUEUE_RESTORE_QUEUE")).attr("data-translate-title", "QUEUE_RESTORE_QUEUE").show();
                $.publish("gs.notification.restorequeue")
            }
        }, onZoomChange:function (g) {
            var k = window.GS && GS.airbridge ? GS.airbridge : GS.Controllers.AirbridgeController.instance();
            if (g && !k.isDesktop) {
                console.warn("ZOOM CHANGED, NOT ZERO", g);
                alert($.localize.getString("ZOOM_ALERT"));
                window._gaq &&
                        window._gaq.push && window._gaq.push(["_trackPageview", "#!/lb/zoom"])
            } else g !== this.lastZoomLevel && $(window).resize();
            this.lastZoomLevel = g
        }, expireSWFService:function () {
            b.player && b.player.expireService()
        }, storeQueue:function () {
            b.player && b.player.storeQueue()
        }, playerError:function (g) {
            console.log("player.playererror", g);
            switch (g.type) {
                case "errorAddingSongs":
                    console.log("player. failed to add songs: ", g.details.songs, g.details.reason);
                    g.details.reason == "tooManySongs" ? $.publish("gs.notification", {type:"notice",
                        message:$.localize.getString("ERROR_TOO_MANY_SONGS")}) : $.publish("gs.notification", {type:"error", message:$.localize.getString("ERROR_ADDING_SONG") + ": " + g.details.reason});
                    break;
                case "playbackError":
                    console.log("player. error playing song", g.details.song, g.details.reason, g.details.errorDetail);
                    g.details.reason === "unknownHasNext" ? $.publish("gs.notification", {type:"error", message:$.localize.getString("ERROR_HASNEXT_MESSAGE")}) : $.publish("gs.notification", {type:"error", message:$.localize.getString("ERROR_PLAYING_SONG")});
                    break;
                case "autoplayFailed":
                    console.log("player. error fetching autoplay song", g.details.reason);
                    if (g.details.reason === "unknownHasNext")$.publish("gs.notification", {type:"error", message:$.localize.getString("ERROR_HASNEXT_MESSAGE")}); else g.details.reason === "noRecommendations" ? this.showRadioStations() : $.publish("gs.notification", {type:"error", message:$.localize.getString("ERROR_FETCHING_RADIO")});
                    break;
                case "autoplayVoteError":
                    console.log("player. error voting song", g.details.song);
                    $.publish("gs.notification",
                            {type:"error", message:$.localize.getString("ERROR_VOTING_SONG")});
                    break;
                case "serviceError":
                    console.log("player. service error", g.details);
                    $.publish("gs.notification", {type:"error", message:$.localize.getString("ERROR_FETCHING_INFO")});
                    break
            }
            g.details.errorDetail ? GS.getGuts().gaTrackEvent("playerError", g.type, g.details.reason + ", " + g.details.errorDetail) : GS.getGuts().gaTrackEvent("playerError", g.type, g.details.reason)
        }, $seekBar:$("#player_seeking_back"), $seekBuffer:$("#player_seeking_buffer"), $seekProgress:$("#player_seeking_progress"),
        $seekScrubber:$("#player_seeking_scrubber"), lastStatus:false, lastPlayedQueueSongID:false, powerHourTimeout:6E4, playerStatus:function (g) {
            g = g || this.nullStatus;
            if (!this.currentSong || !g.activeSong || this.currentSong && g.activeSong && this.currentSong.queueSongID !== g.activeSong.queueSongID) {
                if (g.status == b.PLAY_STATUS_PLAYING)return;
                g.activeSong = GS.Models.Song.wrapQueue([g.activeSong ? g.activeSong : {}])[0];
                this.updateSongOnPlayer(g.activeSong, true)
            } else g.activeSong = this.currentSong;
            var k = Math.min(1, g.bytesLoaded /
                    g.bytesTotal), m = Math.min(1, g.position / g.duration), n = this.$seekBar.width();
            k = Math.min(n, k * 100);
            var o = Math.min(n, m * 100);
            m = Math.min(n, Math.max(0, n * m));
            k = isNaN(k) ? 0 : k;
            o = isNaN(o) ? 0 : o;
            m = isNaN(m) ? 0 : m;
            this.$seekBuffer.width(k + "%");
            this.$seekProgress.width(o + "%");
            this.SCRUB_LOCK || this.$seekScrubber.css("left", m);
            if (g.duration > 0) {
                g.position == 0 ? $("#player_elapsed").text("00:00") : $("#player_elapsed").text(_.millisToMinutesSeconds(g.position, true));
                g.duration == 0 ? $("#player_duration").text("00:00") : $("#player_duration").text(_.millisToMinutesSeconds(g.duration,
                        true))
            } else {
                $("#player_elapsed").text("00:00");
                $("#player_duration").text("00:00")
            }
            g.currentStreamServer && g.currentStreamServer !== this.lastStatus.currentStreamServer && $.publish("gs.player.streamserver", {streamServer:g.currentStreamServer});
            this.powerModeEnabled && g.position > this.powerHourTimeout && this.nextSong();
            n = this.autoplayEnabled ? "forceLogEvent" : "logEvent";
            m = g.activeSong ? g.activeSong.SongID : false;
            switch (g.status) {
                case b.PLAY_STATUS_NONE:
                    this.lastStatus !== g.status && GS.getGuts()[n]("playStatusUpdate",
                            {playStatus:"NONE", activeSong:m, streamServer:g.currentStreamServer});
                    b.isPlaying = false;
                    b.isPaused = false;
                    b.isLoading = false;
                    b.seek.slider("disable");
                    $("#player_play_pause").addClass("play").removeClass("pause").removeClass("buffering");
                    $("#queue_list li.queue-item.queue-item-active a.play").addClass("paused");
                    $.publish("gs.player.stopped", g.activeSong);
                    break;
                case b.PLAY_STATUS_INITIALIZING:
                    b.isPlaying = true;
                    b.isPaused = false;
                    b.isLoading = true;
                    if (this.lastStatus !== g.status) {
                        GS.getGuts()[n]("playStatusUpdate",
                                {playStatus:"INITIALIZING", activeSong:m, streamServer:g.currentStreamServer});
                        this.lastStatus == b.PLAY_STATUS_COMPLETED && GS.getGuts().gaTrackEvent("player", "continueInterrupted", g.currentSongID)
                    }
                    if (GS.airbridge && GS.airbridge.isDesktop && !GS.user.subscription.canUseDesktop() || gsConfig.isPreview && !GS.user.subscription.isPremium() && GS.user.UserID % 5 != 0) {
                        this.stopSong();
                        GS.getLightbox().open("login", {premiumRequired:true, notCloseable:gsConfig.isPreview || GS.airbridge && GS.airbridge.isDesktop})
                    }
                    break;
                case b.PLAY_STATUS_LOADING:
                    if (this.lastStatus !==
                            g.status) {
                        GS.getGuts()[n]("playStatusUpdate", {playStatus:"LOADING", activeSong:m, streamServer:g.currentStreamServer});
                        b.isPlaying = true;
                        b.isPaused = false;
                        b.isLoading = true;
                        b.updateSongOnPlayer(g.activeSong);
                        $("#player_play_pause").is(".buffering") || $("#player_play_pause").removeClass("play").removeClass("pause").addClass("buffering");
                        GS.getGuts().gaTrackEvent("player", "loading", g.currentStreamServer);
                        b.lastLoadingQueueSongID = g.activeSong ? g.activeSong.queueSongID : false;
                        b.lastLoadingTime = (new Date).getTime()
                    }
                    $("#queue_list li.queue-item.queue-item-active a.play").removeClass("paused");
                    break;
                case b.PLAY_STATUS_PLAYING:
                    if (this.lastStatus !== g.status || this.lastPlayedQueueSongID !== g.activeSong.queueSongID) {
                        GS.getGuts()[n]("playStatusUpdate", {playStatus:"PLAYING", activeSong:m, streamServer:g.currentStreamServer});
                        b.isPlaying = true;
                        b.isPaused = false;
                        b.isLoading = false;
                        b.seek.slider("enable");
                        $("#player_play_pause").is(".pause") || $("#player_play_pause").removeClass("play").addClass("pause").removeClass("buffering");
                        $.publish("gs.player.playing", g);
                        if (g.activeSong && (this.lastPlayedQueueSongID !==
                                g.activeSong.queueSongID || this.repeatMode == b.REPEAT_ONE && this.lastStatus == b.PLAY_STATUS_LOADING)) {
                            n = {42:true, 224:true, 61:true, 98:true, 96:true, 182:true, 219:true, 67:true, 85:true, 94:true};
                            k = {182:true, 219:true, 67:true, 85:true, 94:true};
                            if (!GS.user.subscription.canListenUninterrupted() && a && n[gsConfig.country.ID] && GS.player.player.getNumVisitedDays && GS.player.player.getNumVisitedDays() > 5) {
                                setTimeout(this.callback(function () {
                                    this.pauseSong()
                                }), 10);
                                h = 4;
                                GS.getLightbox().close("interactionTime");
                                k[gsConfig.country.ID] ?
                                        GS.getLightbox().open("interruptListen", {notCloseable:true, defaultVideo:true}) : GS.getLightbox().open("interruptListen", {notCloseable:true, slider:true})
                            }
                            this.lastStatus == b.PLAY_STATUS_COMPLETED && GS.getGuts().gaTrackEvent("player", "continueNextSong", m);
                            GS.getGuts().gaTrackEvent("player", "play", m);
                            this.trackAutoplayEvent("play");
                            this.updateSongOnPlayer(g.activeSong);
                            if (g.duration)g.activeSong.playerDuration = g.duration;
                            $.publish("gs.player.nowplaying", g.activeSong);
                            $("#queue_list .queueSong a.play[rel=" +
                                    this.lastPlayedQueueSongID + "]").addClass("paused");
                            this.lastPlayedQueueSongID = g.activeSong ? g.activeSong.queueSongID : false
                        }
                        this.lastStatus == b.PLAY_STATUS_LOADING ? GS.getGuts().gaTrackEvent("player", "loadingTime", g.currentStreamServer, (new Date).getTime() - this.lastLoadingTime) : GS.getGuts().gaTrackEvent("player", "loadingTime", g.currentStreamServer, 0)
                    }
                    if (this.pauseNextQueueSongID && g.activeSong && this.pauseNextQueueSongID === g.activeSong.queueSongID) {
                        this.pauseNextQueueSongID = false;
                        setTimeout(this.callback(function () {
                            this.pauseSong()
                        }),
                                10)
                    }
                    $("#queue_list li.queue-item.queue-item-active a.play").removeClass("paused");
                    $.publish("gs.player.playing.continue", g);
                    if (g.position % 10 < 1)if (!GS.user.subscription.canListenUninterrupted() && a)if (new Date - c > 36E5) {
                        h = 4;
                        GS.getLightbox().open("interactionTime")
                    }
                    break;
                case b.PLAY_STATUS_PAUSED:
                    if (this.lastStatus !== g.status) {
                        GS.getGuts()[n]("playStatusUpdate", {playStatus:"PAUSED", activeSong:m, streamServer:g.currentStreamServer});
                        b.isPlaying = false;
                        b.isPaused = true;
                        b.isLoading = false;
                        $("#player_play_pause").is(".play") ||
                        $("#player_play_pause").addClass("play").removeClass("pause").removeClass("buffering");
                        $.publish("gs.player.paused", g.activeSong)
                    }
                    $("#queue_list li.queue-item.queue-item-active a.play").addClass("paused");
                    break;
                case b.PLAY_STATUS_BUFFERING:
                    this.lastStatus !== g.status && GS.getGuts()[n]("playStatusUpdate", {playStatus:"BUFFERING", activeSong:m, streamServer:g.currentStreamServer});
                    b.isPlaying = true;
                    b.isPaused = false;
                    b.isLoading = true;
                    $("#player_play_pause").is(".buffering") || $("#player_play_pause").removeClass("play").removeClass("pause").addClass("buffering");
                    $("#queue_list li.queue-item.queue-item-active a.play").removeClass("paused");
                    break;
                case b.PLAY_STATUS_FAILED:
                    this.lastStatus !== g.status && GS.getGuts()[n]("playStatusUpdate", {playStatus:"FAILED", activeSong:m, streamServer:g.currentStreamServer});
                    b.isPlaying = false;
                    b.isPaused = false;
                    b.isLoading = false;
                    b.seek.slider("disable");
                    $("#player_play_pause").addClass("play").removeClass("pause").removeClass("buffering");
                    $("#queue_list li.queue-item.queue-item-active a.play").addClass("paused");
                    break;
                case b.PLAY_STATUS_COMPLETED:
                    this.lastStatus !==
                            g.status && GS.getGuts()[n]("playStatusUpdate", {playStatus:"COMPLETED", activeSong:m, streamServer:g.currentStreamServer});
                    b.isPlaying = false;
                    b.isPaused = false;
                    b.isLoading = false;
                    b.seek.slider("disable");
                    $("#player_play_pause").addClass("play").removeClass("pause").removeClass("buffering");
                    $("#queue_list li.queue-item.queue-item-active a.play").addClass("paused");
                    b.$seekBuffer.width("0%");
                    b.$seekProgress.width("0%");
                    b.$seekScrubber.css("left", 0);
                    $.publish("gs.player.stopped", g.activeSong);
                    $.publish("gs.player.completed",
                            g.activeSong);
                    break
            }
            this.lastStatus = g.status;
            $.publish("gs.player.playstatus", g)
        }, pauseNextQueueSongID:false, pauseNextSong:function () {
            var g = this.getCurrentQueue(true);
            this.pauseNextQueueSongID = g && g.nextSong && g.nextSong.queueSongID ? g.nextSong.queueSongID : false
        }, propertyChange:function (g) {
            if (g.isMuted) {
                $("#player_volume").addClass("muted");
                $("#volumeSlider").slider("value", 0)
            } else {
                $("#player_volume").removeClass("muted");
                $("#volumeSlider").slider("value", g.volume)
            }
            if (g.crossfadeEnabled) {
                $("#player_crossfade").addClass("active");
                this.crossfadeEnabled = true
            } else {
                $("#player_crossfade").removeClass("active");
                this.crossfadeEnabled = false
            }
        }, queueChange:function (g) {
            var k = g.fullQueue;
            if (b.player)k.hasRestoreQueue = b.player.getQueueIsRestorable();
            b.queue = false;
            switch (g.type) {
                case "queueReset":
                    k.activeSong = k.activeSong ? GS.Models.Song.wrapQueue([k.activeSong])[0] : null;
                    k.activeSong && this.updateSongOnPlayer(k.activeSong, true, b.currentSong && b.currentSong.queueSongID == k.activeSong.queueSongID);
                    k.songs = GS.Models.Song.wrapQueue(k.songs);
                    b.queue =
                            k;
                    b.updateQueueDetails(k);
                    b.updateQueueSongs(k);
                    if (g.details.hasOwnProperty("autoplayEnabled"))if (g.details.autoplayEnabled == true) {
                        GS.player.getCurrentQueue();
                        GS.getGuts().forceLogEvent("autoplayOn", {tagID:g.details.currentAutoplayTagID});
                        GS.getGuts().beginContext({autoplay:g.details.currentAutoplayTagID})
                    } else GS.getGuts().endContext("autoplay");
                    break;
                case "propertyChange":
                    if (g.details.hasOwnProperty("autoplayEnabled"))if (g.details.autoplayEnabled == true) {
                        k = b.getCurrentQueue().songs;
                        var m = {tagID:g.fullQueue.currentAutoplayTagID};
                        if (k) {
                            for (var n = "", o = 0; o < k.length; o++)n = o == 0 ? k[o].SongID : n + "," + k[o].SongID;
                            m.seedSongs = n
                        }
                        GS.getGuts().forceLogEvent("autoplayOn", m);
                        GS.getGuts().beginContext({autoplay:g.fullQueue.currentAutoplayTagID, autoplaySeedSongs:n})
                    } else GS.getGuts().handleAutoplayOff();
                    b.updateQueueDetails();
                    break;
                case "contentChange":
                    b.gsQueue.setActive(b.getCurrentQueue().activeSong.index, false);
                    b.gsQueue.setItems(b.getCurrentQueue().songs);
                    b.updateQueueWidth();
                    b.updateQueueDetails();
                    break
            }
            $.publish("gs.player.queue.change")
        },
        songChange:function (g) {
            var k = ["parentQueueID", "queueSongID", "autoplayVote", "source", "sponsoredAutoplayID"], m = b.player ? b.player.getCurrentQueue() : {activeSong:false}, n, o, r, A, w = true;
            g instanceof GS.Models.Song || (g = GS.Models.Song.wrapQueue([g])[0]);
            r = m.songs;
            for (n = 0; A = r[n]; n++)if (A.SongID == g.SongID)for (o in g)if (g.hasOwnProperty(o) && A[o] != g[o] && (A.queueSongID === g.queueSongID || k.indexOf(o) == -1)) {
                A[o] = g[o];
                w = false
            }
            if (!w) {
                k = GS.Models.Song.wrapQueue(r);
                b.gsQueue.setItems(k, true)
            }
            b.updateQueueDetails();
            m.activeSong &&
                    g.queueSongID === m.activeSong.queueSongID && b.updateSongOnPlayer(g, true, true);
            $.publish("gs.player.song.change", g)
        }, updateWithLocalSettings:function (g) {
            if (this.player) {
                g = g || GS.user.settings.local;
                g.crossfadeEnabled != this.getCrossfadeEnabled() && this.setCrossfadeEnabled(g.crossfadeEnabled);
                g.crossfadeAmount != this.getCrossfadeAmount() && this.setCrossfadeAmount(g.crossfadeAmount);
                g.lowerQuality != this.getLowerQuality() && this.setLowerQuality(g.lowerQuality);
                !g.noPrefetch != this.getPrefetchEnabled() && this.setPrefetchEnabled(!g.noPrefetch);
                g.playPauseFade != this.getPlayPauseFade() && this.setPlayPauseFade(g.playPauseFade);
                this.setPersistShuffle(g.persistShuffle);
                g.persistShuffle && g.lastShuffle != this.getShuffle() && this.setShuffle(g.lastShuffle)
            }
        }, getEverything:function () {
            if (b.player)return b.player.getEverything();
            return{}
        }, getPlaybackStatus:function () {
            if (b.player)return b.player.getPlaybackStatus();
            return{}
        }, getSongDetails:function (g, k) {
            var m;
            g = _.orEqual(g, 0);
            if (typeof k === "number" || typeof k === "string")k = [k];
            if (b.player) {
                m = b.player.getSongDetails(g,
                        k);
                return GS.Models.Song.wrapQueue(m)
            }
            return GS.Models.Song.wrap({})
        }, getCurrentSong:function () {
            if (b.player)return b.getCurrentQueue().activeSong
        }, setActiveSong:function (g) {
            if (g && b.player)return b.player.setActiveSong(g);
            return false
        }, addSongsToQueueAt:function (g, k, m, n, o) {
            k = _.orEqual(k, this.INDEX_DEFAULT);
            m = _.orEqual(m, false);
            n = _.orEqual(n, {type:this.PLAY_CONTEXT_UNKNOWN});
            o = _.orEqual(o, false);
            $.isArray(g) || (g = isNaN(g) ? g.split(",") : [g]);
            var r, A = [];
            for (r = 0; r < g.length; r++)g[r] > 0 && GS.Models.Song.getSong(g[r],
                    this.callback(function (w) {
                        w = w.dupe();
                        w.songs = {};
                        w.albums = {};
                        w.fanbase = {};
                        A[r] = w
                    }), false, false, {async:false});
            if (b.player) {
                if (k == -4) {
                    k = -1;
                    this.clearQueue()
                }
                b.player.addSongsToQueueAt(A, k, m, n, o);
                this.autoplayEnabled ? GS.getGuts().forceLogEvent("songsQueued", {songIDs:g}) : GS.getGuts().logEvent("songsQueued", {songIDs:g})
            }
        }, playSong:function (g) {
            GS.isPlaying = true;
            b.player && b.player.playSong(g)
        }, eventPlaySong:function (g) {
            if (g && g.songID) {
                GS.getNotice().feedbackOnNextSong = _.orEqual(g.getFeedback, false);
                b.addSongAndPlay(g.songID)
            }
        },
        eventPlayAlbum:function (g) {
            if (g && g.albumID) {
                GS.getNotice().feedbackOnNextSong = _.orEqual(g.getFeedback, false);
                GS.Models.Album.getAlbum(g.albumID, this.callback("playAlbum", g), null, false)
            }
        }, playAlbum:function (g, k) {
            console.log("player.playAlbum", g, k);
            var m = _.orEqual(g.index, -1), n = _.orEqual(g.playOnAdd, false), o = _.orEqual(g.shuffle, false), r = _.orEqual(g.verified, true);
            k.play(m, n, o, r)
        }, eventPlayPlaylist:function (g) {
            if (g && g.playlistID) {
                GS.getNotice().feedbackOnNextSong = _.orEqual(g.getFeedback, false);
                GS.Models.Playlist.getPlaylist(g.playlistID,
                        this.callback("playPlaylist", g), null, false)
            }
        }, playPlaylist:function (g, k) {
            console.log("player.playPlaylist", g, k);
            var m = _.orEqual(g.index, -1), n = _.orEqual(g.playOnAdd, false), o = _.orEqual(g.shuffle, false);
            k.play(m, n, o)
        }, eventPlayStation:function (g) {
            if (g && g.tagID) {
                console.log("play station", g.tagID);
                b.setAutoplay(true, g.tagID)
            }
        }, addSongAndPlay:function (g, k) {
            b.player && b.addSongsToQueueAt([g], b.INDEX_DEFAULT, true, k)
        }, pauseSong:function () {
            b.isPlaying = false;
            b.isPaused = true;
            b.player && b.player.pauseSong();
            GS.getGuts().gaTrackEvent("player",
                    "pauseSong")
        }, resumeSong:function () {
            b.isPlaying = true;
            b.isPaused = false;
            b.player && b.player.resumeSong();
            GS.getGuts().gaTrackEvent("player", "resumeSong")
        }, stopSong:function () {
            b.isPlaying = false;
            b.isPaused = false;
            b.player && b.player.stopSong();
            GS.getGuts().gaTrackEvent("player", "stopSong")
        }, previousSong:function (g) {
            g = g ? true : false;
            if (b.player && !this.videoModeEnabled)b.player.previousSong(g); else {
                g = b.getCurrentQueue();
                var k = g.activeSong.index;
                if (!g.songs[k - 1])return;
                g = g.songs[k - 1];
                b.setActiveSong(g.queueSongID);
                $.publish("gs.video.player.loadSong", g)
            }
            GS.getGuts().logEvent("prevSong", {});
            GS.getGuts().gaTrackEvent("player", "prevSong");
            b.trackAutoplayEvent("prev")
        }, nextSong:function () {
            if (b.player && !this.videoModeEnabled)b.player.nextSong(); else {
                var g = b.getCurrentQueue(), k = g.activeSong.index;
                if (!g.songs[k + 1])return;
                g = g.songs[k + 1];
                b.setActiveSong(g.queueSongID);
                $.publish("gs.video.player.loadSong", g)
            }
            GS.getGuts().logEvent("nextSong", {});
            GS.getGuts().gaTrackEvent("player", "nextSong");
            b.trackAutoplayEvent("next")
        },
        seekTo:function (g) {
            b.player && b.player.seekTo(g);
            GS.getGuts().gaTrackEvent("player", "seekTo")
        }, clearQueue:function () {
            if (b.player) {
                b.queue && b.queue.autoplayEnabled && GS.getGuts().handleAutoplayOff();
                b.queue = null;
                b.currentSong = null;
                b.player.stopSong();
                b.player.clearQueue();
                b.playerStatus(b.player.getPlaybackStatus());
                b.updateQueueWidth();
                b.gsQueue.setActive(0, false);
                b.gsQueue.setItems([], true);
                b.updateQueueDetails();
                $("#playerDetails_nowPlaying").html("");
                $.publish("gs.player.currentSong", null);
                GS.getGuts().logEvent("queueCleared",
                        {})
            }
            GS.getGuts().gaTrackEvent("player", "clearQueue");
            $.publish("gs.player.queue.change")
        }, restoreQueue:function () {
            b.player && b.player.restoreQueue();
            GS.getGuts().gaTrackEvent("player", "restoreQueue")
        }, saveQueue:function () {
            for (var g = b.getCurrentQueue().songs, k = [], m = 0; m < g.length; m++)k.push(g[m].SongID);
            GS.getLightbox().open("newPlaylist", k);
            GS.getGuts().logQueueSaveInitiated();
            GS.getGuts().gaTrackEvent("player", "saveQueue")
        }, getCurrentQueue:function (g) {
            g = _.orEqual(g, false);
            if (!g && b.queue)return b.queue;
            if (b.player) {
                g = b.player.getCurrentQueue();
                if (g.activeSong) {
                    g.activeSong = GS.Models.Song.wrapQueue([g.activeSong])[0];
                    this.updateSongOnPlayer(g.activeSong, true, true)
                }
                if (g.songs && g.songs.length)g.songs = GS.Models.Song.wrapQueue(g.songs);
                g.hasRestoreQueue = b.player.getQueueIsRestorable();
                return b.queue = g
            }
        }, getPreviousQueue:function () {
            b.player && b.player.getPreviousQueue();
            GS.getGuts().gaTrackEvent("player", "previousQueue")
        }, moveSongsTo:function (g, k) {
            if (typeof g === "number" || typeof g === "string")g = [g];
            b.player &&
            b.player.moveSongsTo(g, k)
        }, removeSongs:function (g) {
            if (typeof g === "number" || typeof g === "string")g = [g];
            var k = [];
            if (b.player) {
                var m = b.getSongDetails(b.queue.queueID, g);
                if ($.isArray(m))for (var n = 0; n < m.length; n++)m[n].SongID && k.push(m[n].SongID); else m.hasOwnProperty("SongID") && k.push(m.SongID);
                b.player.removeSongs(g);
                b.updateQueueWidth()
            }
            b.queue = false;
            b.queue = b.getCurrentQueue();
            $.publish("gs.player.queue.change");
            GS.getGuts().gaTrackEvent("player", "removeSongs");
            b.trackAutoplayEvent("removeSongs");
            if (k.length)b.autoplayEnabled ?
                    GS.getGuts().forceLogEvent("songsRemovedFromQueue", {songIDs:k}) : GS.getGuts().logEvent("songsRemovedFromQueue", {songIDs:k})
        }, lastAutoplayInfo:false, setAutoplay:function (g, k, m, n) {
            var o = b.getCurrentQueue();
            g = g ? true : false;
            k = parseInt(k, 10);
            if (isNaN(k))k = 0; else {
                var r = {55:55, 9:9, 75:75, 230:230, 2563:2563, 123:123, 29:29, 102:102, 69:69, 1138:1138, 17:17, 160:160}, A = GS.getGuts();
                if (A.currentTest && A.currentTest.name == "peterTagRadio")if (r[k])n = "tagRadioGetSong"
            }
            if (o.songs.length == 0 && !k && !m)this.showRadioStations(o.songs.length ==
                    0); else if ((k > 0 || m) && o && o.songs.length > 0) {
                GS.getLightbox().close();
                GS.getLightbox().open({type:"radioClearQueue", view:{header:"POPUP_START_RADIO_TITLE", message:"POPUP_START_RADIO_MESSAGE", buttonsLeft:[
                    {label:"CANCEL", className:"close"}
                ], buttonsRight:[
                    {label:"POPUP_START_RADIO_TITLE", className:"submit"}
                ]}, callbacks:{".submit":function () {
                    GS.player.clearQueue();
                    GS.player.setAutoplay(true, k, m, n)
                }}})
            } else {
                if (b.player) {
                    if (g) {
                        $("#player_radio_button").addClass("active");
                        $("#player_radio_switch").stop().css({left:25});
                        GS.getGuts().beginContext({autoplay:k})
                    } else {
                        $("#player_radio_button").removeClass("active");
                        $("#player_radio_switch").stop().css({left:0});
                        GS.getGuts().endContext("autoplay")
                    }
                    b.player.setAutoplay(g, k, m, n);
                    $.publish("gs.player.autoplay.update", g)
                }
                GS.getGuts().gaTrackEvent("player", g ? "enableRadio" : "disableRadio", k)
            }
        }, trackLastAutoplayInfo:function (g, k) {
            if (b.lastAutoplayInfo && (!g || b.lastAutoplayInfo.tagID != k)) {
                var m = (new Date).getTime() - b.lastAutoplayInfo.time;
                GS.getGuts().gaTrackEvent("player", "autoplayDuration",
                        b.lastAutoplayInfo.tagID, m)
            }
            if (g) {
                if (!b.lastAutoplayInfo || b.lastAutoplayInfo && b.lastAutoplayInfo.tagID !== k)b.lastAutoplayInfo = {tagID:k, time:(new Date).getTime()}
            } else b.lastAutoplayInfo = false
        }, trackAutoplayEvent:function (g) {
            g = "" + g;
            b.lastAutoplayInfo && g && GS.getGuts().gaTrackEvent("player", "autoplay" + _.ucwords(g), b.lastAutoplayInfo.tagID)
        }, voteSong:function (g, k) {
            var m;
            if (b.player) {
                b.player.voteSong(g, k);
                m = this.getSongDetails(b.queue.queueID, [g])[0].SongID;
                switch (k) {
                    case -1:
                        GS.getGuts().forceLogEvent("songDownVoted",
                                {songID:m});
                        GS.getGuts().gaTrackEvent("player", "voteSongDown");
                        break;
                    case 0:
                        GS.getGuts().forceLogEvent("songVotedNeutral", {songID:m});
                        GS.getGuts().gaTrackEvent("player", "voteSongNeutral");
                        break;
                    case 1:
                        GS.getGuts().forceLogEvent("songUpVoted", {songID:m});
                        GS.getGuts().gaTrackEvent("player", "voteSongUp");
                        break
                }
                $.publish("gs.player.voted", k)
            }
        }, flagSong:function (g, k) {
            if (b.player) {
                b.player.flagSong(g, k);
                $.publish("gs.notification", {message:$.localize.getString("SUCCESS_FLAG_SONG")})
            }
            GS.getGuts().gaTrackEvent("player",
                    "flagSong", k)
        }, getVolume:function () {
            if (b.player)return b.player.getVolume()
        }, setVolume:function (g) {
            g = Math.max(0, Math.min(100, parseInt(g, 10)));
            b.player && b.player.setVolume(g);
            GS.getGuts().gaTrackEvent("player", "setVolume", g)
        }, getCrossfadeAmount:function () {
            if (b.player)return b.player.getCrossfadeAmount()
        }, getCrossfadeEnabled:function () {
            if (b.player)return b.player.getCrossfadeEnabled()
        }, setCrossfadeAmount:function (g) {
            g = parseInt(g, 10);
            b.player && b.player.setCrossfadeAmount(g);
            GS.getGuts().gaTrackEvent("player",
                    "setCrossfade", g)
        }, setCrossfadeEnabled:function (g) {
            g = g && GS.user.subscription.canUsePlayerBonuses() ? true : false;
            b.player && b.player.setCrossfadeEnabled(g);
            GS.user.settings.changeLocalSettings({crossfadeEnabled:g ? 1 : 0});
            GS.getGuts().gaTrackEvent("player", g ? "enableCrossfade" : "disableCrossfade")
        }, setPrefetchEnabled:function (g) {
            g = g ? true : false;
            b.player && b.player.setPrefetchEnabled(g);
            GS.getGuts().gaTrackEvent("player", g ? "enablePrefetch" : "disablePrefetch")
        }, getPrefetchEnabled:function () {
            if (b.player)return b.player.getPrefetchEnabled()
        },
        setLowerQuality:function (g) {
            g = g ? true : false;
            b.player && b.player.setLowerQuality(g);
            GS.getGuts().gaTrackEvent("player", g ? "enableLowerQuality" : "disableLowerQuality")
        }, getLowerQuality:function () {
            if (b.player)return b.player.getLowerQuality()
        }, getIsMuted:function () {
            if (b.player)return b.player.getIsMuted()
        }, setIsMuted:function (g) {
            g = g ? true : false;
            b.player && b.player.setIsMuted(g);
            GS.getGuts().gaTrackEvent("player", g ? "enableMuted" : "disableMuted")
        }, getPlayPauseFade:function () {
            if (b.player)return b.player.getPlayPauseFade()
        },
        setPlayPauseFade:function (g) {
            g = g ? true : false;
            b.player && b.player.setPlayPauseFade(g);
            GS.user.settings.changeLocalSettings({playPauseFade:g ? 1 : 0});
            GS.getGuts().gaTrackEvent("player", g ? "enablePlayPauseFade" : "disablePlayPauseFade")
        }, setRepeat:function (g) {
            b.repeat = g;
            b.player && b.player.setRepeat(g);
            GS.getGuts().gaTrackEvent("player", "setRepeat", g)
        }, getRepeat:function () {
            if (b.player && b.player.getRepeat)return b.player.getRepeat();
            return b.repeat
        }, setShuffle:function (g) {
            if (!(b.queue && b.queue.autoplayEnabled)) {
                g =
                        g ? true : false;
                b.player && b.player.setShuffle(g);
                GS.user.settings.changeLocalSettings({lastShuffle:g ? 1 : 0});
                GS.getGuts().gaTrackEvent("player", "shuffle", g ? "on" : "off")
            }
        }, getShuffle:function () {
            if (b.player)return b.player.getShuffle();
            return false
        }, setPersistShuffle:function (g) {
            g = g ? true : false;
            b.player && b.player.setPersistShuffle(g);
            GS.getGuts().gaTrackEvent("player", "persistShuffle", g ? "on" : "off")
        }, prefetchStreamKeys:function (g) {
            if (b.player)return b.player.prefetchStreamKeys(g)
        }, getAPIVersion:function () {
            if (b.player)return b.player.getAPIVersion()
        },
        getApplicationVersion:function () {
            if (b.player)return b.player.getApplicationVersion()
        }, updateSongOnPlayer:function (g, k, m) {
            if (g) {
                m = _.orEqual(m, false);
                k = _.orEqual(k, false);
                if (!(!k && b.currentSong && b.currentSong.queueSongID === g.queueSongID)) {
                    if (g instanceof GS.Models.Song)b.currentSong = g; else {
                        b.currentSong = GS.Models.Song.wrapQueue([g])[0];
                        if (!(b.currentSong instanceof GS.Models.Song))return
                    }
                    b.videoIndex = b.currentSong.index;
                    $("#queue_list li.queue-item.queue-item-active").removeClass("active");
                    $("#queue_list #" +
                            b.currentSong.queueSongID).addClass("active");
                    $("#playerDetails_nowPlaying").html(b.view("currentSongDetails")).attr("rel", b.currentSong.SongID).attr("qsid", b.currentSong.queueSongID);
                    b.currentSongString.hookup($("#playerDetails_current_song"));
                    _.defined(b.currentSong.index && b.currentSong.index >= 0) && b.gsQueue.setActive(b.currentSong.index, !b.isMouseDown && !m);
                    $.publish("gs.player.currentSong", g)
                }
            }
        }, updateQueueDetails:function (g) {
            g || (g = b.getCurrentQueue(true));
            if (g && g.hasOwnProperty("songs") && b.currentSongs !=
                    g.songs) {
                b.currentSongs = g.songs;
                g.songs.length && b.queueClosed && !b.queueClosedByUser && b.setQueue(b.queueSize);
                if (g.songs && g.songs.length > 0) {
                    $("#player_seeking_scrubber").show();
                    $("#player_previous").removeAttr("disabled").removeClass("disabled");
                    g.previousSong ? $("#player_previous").attr("data-tooltip", _.uncleanText(g.previousSong.SongName)) : $("#player_previous").removeAttr("data-tooltip")
                } else if (!GS.player.queue.autoplayEnabled) {
                    $("#player_seeking_scrubber").hide();
                    $("#player_previous").attr("disabled",
                            "disabled").addClass("disabled").removeAttr("data-tooltip");
                    $("#player_radio_button").removeClass("active");
                    $("#player_radio_switch").stop().css({left:0})
                }
            }
            if (g && g.hasOwnProperty("nextSong") && b.nextSongToPlay != g.nextSong)if (b.nextSongToPlay = g.nextSong) {
                $("#player_next").removeAttr("disabled").removeClass("disabled").attr("data-tooltip", _.uncleanText(g.nextSong.SongName));
                if (b.pauseNextQueueSongID && g.nextSong.hasOwnProperty("queueSongID") && g && g.hasOwnProperty("activeSong") && b.pauseNextQueueSongID !==
                        g.activeSong.queueSongID)b.pauseNextQueueSongID = g.nextSong.queueSongID
            } else $("#player_next", b.element).attr("disabled", "disabled").addClass("disabled").removeAttr("data-tooltip");
            if (b.activeSong != g.activeSong) {
                var k = b.activeSong ? b.activeSong.queueSongID : null;
                b.activeSong = g.activeSong;
                if (g && g.hasOwnProperty("activeSong")) {
                    $("#player_play_pause").removeAttr("disabled").removeClass("disabled");
                    b.updateSongOnPlayer(g.activeSong, true, k && g.activeSong && k == g.activeSong.queueSongID)
                } else $("#player_play_pause").attr("disabled",
                        "disabled").addClass("disabled")
            }
            $("#playerDetails_queue").html(b.view("queueDetails"));
            k = g.songs.length === 0 ? "QUEUE_NO_SONGS" : g.songs.length == 1 ? "QUEUE_ONE_SONG" : "QUEUE_NUM_SONGS";
            $("#queue_songCountLink").localeDataString(k, {numSongs:g.songs.length});
            if (g && g.hasOwnProperty("repeatMode") && b.repeatMode != g.repeatMode) {
                b.repeatMode = g.repeatMode;
                if (b.repeatMode === b.REPEAT_ALL)$("#player_loop").removeClass("none").addClass("all").addClass("active"); else if (b.repeatMode === b.REPEAT_ONE)$("#player_loop").removeClass("all").addClass("one").addClass("active");
                else b.repeatMode === b.REPEAT_NONE && $("#player_loop").removeClass("one").addClass("none").removeClass("active")
            }
            if (g && g.hasOwnProperty("autoplayEnabled") && b.autoplayEnabled != g.autoplayEnabled) {
                if (b.autoplayEnabled = g.autoplayEnabled) {
                    $("#queue_list").addClass("autoplay");
                    $("#player_shuffle").removeClass("active");
                    $("#player_radio_switch").stop().animate({left:25}, {duration:100, complete:function () {
                        $("#player_radio_button").addClass("active")
                    }})
                } else {
                    $("#queue_list").removeClass("autoplay");
                    $("#player_radio_switch").stop().animate({left:0},
                            {duration:100, complete:function () {
                                $("#player_radio_button").removeClass("active")
                            }});
                    g.shuffleEnabled ? $("#player_shuffle").addClass("active") : $("#player_shuffle").removeClass("active")
                }
                $.publish("gs.player.autoplay.update", g.autoplayEnabled);
                b.trackLastAutoplayInfo(g.autoplayEnabled, g.currentAutoplayTagID)
            }
        }, updateQueueSongs:function (g) {
            if (g.hasOwnProperty("songs"))if (g.songs.length) {
                b.currentSong = g.activeSong;
                b.songs = g.songs;
                b.gsQueue.setActive(g.activeSong.index, false);
                b.gsQueue.setItems(g.songs,
                        true)
            } else {
                b.activeSong = g.activeSong;
                b.songs = g.songs;
                $("#playerDetails_nowPlaying").html("");
                b.gsQueue.setActive(0, false);
                b.gsQueue.setItems([], true)
            }
        }, updateQueueWidth:function () {
            var g, k, m = b.getCurrentQueue();
            if (m) {
                parseInt($("#queue_list_window").css("padding-left"), 10);
                g = $("#queue").width();
                k = $("#queue").height();
                if (m && m.songs && m.songs.length > 0) {
                    g = b.songWidth * (m.songs.length - 1) + b.activeSongWidth;
                    $("#queue_list").removeClass("empty")
                } else {
                    g = g;
                    $("#queue_list").addClass("empty").width("")
                }
                k !== $("#queue").height() &&
                        b.lastQueueWidth !== g && $(window).resize();
                b.lastQueueWidth = g
            }
        }, recordEngagement:function (g, k) {
            if (!g || !k)return false;
            a = false;
            setTimeout(function () {
                a = true
            }, h * 60 * 60 * 1E3);
            GS.player.player.updateInterruptionExpireTime(g, k);
            return false
        }, autoScrollWaitDuration:300, beginDragDrop:function () {
            function g(o, r) {
                var A = $("#queue_songGuide");
                if (k.within(o.clientX, o.clientY).length > 0) {
                    r.queueLength = _.orEqual(r.queueLength, b.getCurrentQueue().songs.length);
                    var w = k.parent(), B = b.activeSongWidth - b.songWidth, t = 0, v = k.offset().left,
                            D = m.scrollLeft() - 10 - (o.clientX > parseInt($("#queue_list .queue-item-active").css("left"), 10) + b.activeSongWidth ? B : 0), F = parseInt(m.width(), 10) * 0.05;
                    k.children();
                    B = b.getCurrentQueue().activeSong ? _.orEqual(b.getCurrentQueue().activeSong.index, 0) : 0;
                    stopIndex = Math.max(0, Math.min(r.queueLength, Math.round((o.clientX + D) / b.songWidth)));
                    guideLeft = stopIndex * b.songWidth + v - A.width() / 2;
                    v = function () {
                        var x = (new Date).valueOf();
                        if (!r.queueAutoScrollLast || x - r.queueAutoScrollLast >= b.autoScrollWaitDuration) {
                            r.queueAutoScrollLast =
                                    x;
                            t = Math.max(0, D - F);
                            m.scrollLeft(t);
                            b.gsQueue.updateScrollbar()
                        }
                    };
                    var E = function () {
                        var x = (new Date).valueOf();
                        if (!r.queueAutoScrollLast || x - r.queueAutoScrollLast >= b.autoScrollWaitDuration) {
                            r.queueAutoScrollLast = x;
                            t = Math.min(k.width(), D + F);
                            m.scrollLeft(t);
                            b.gsQueue.updateScrollbar()
                        }
                    };
                    if (w.offset().left + 200 > o.clientX) {
                        v();
                        clearInterval(r.queueAutoScrollInterval);
                        r.queueAutoScrollInterval = setInterval(v, b.autoScrollWaitDuration)
                    } else if (w.width() - 200 < o.clientX) {
                        E();
                        clearInterval(r.queueAutoScrollInterval);
                        r.queueAutoScrollInterval = setInterval(E, b.autoScrollWaitDuration)
                    } else {
                        clearInterval(r.queueAutoScrollInterval);
                        r.queueAutoScrollInterval = false
                    }
                    if (stopIndex > B)guideLeft += b.activeSongWidth - b.songWidth;
                    A.css("left", guideLeft);
                    A.show()
                } else {
                    clearInterval(r.queueAutoScrollInterval);
                    r.queueAutoScrollInterval = false;
                    A.hide()
                }
            }

            var k = $("#queue_list"), m = $("#queue_list_window"), n = $("#queue");
            $footer = $("#footer");
            k.bind("draginit",
                    function (o, r) {
                        var A = $(o.target).closest(".queue-item");
                        if (A.length === 0)return false;
                        r.draggedQueueItem = A;
                        r.proxyOffsetX = o.clientX - A.offset().left;
                        r.proxyOffsetY = o.clientY - A.offset().top
                    }).bind("dragstart",
                    function (o, r) {
                        r.draggedItems = [GS.Models.Song.getOneFromCache($(r.draggedQueueItem).find(".queueSong").attr("rel"))];
                        r.draggedItemsType = "song";
                        r.draggedItemSource = "queue";
                        var A = parseInt(r.draggedQueueItem.attr("data-queuesongid"), 10);
                        if (A)r.deleteAction = {label:"SHORTCUTS_DELETE_NOW_PLAYING", method:function () {
                            GS.player.removeSongs(A)
                        }};
                        $.publish("gs.drag.start", r);
                        return $('<div class="queue-item-drag size-' +
                                GS.player.queueSize + '" style="position:absolute; z-index: 99999;"><div class="status"></div></div>').append($(r.draggedQueueItem).clone()).appendTo("body").mousewheel(_.globalDragProxyMousewheel)
                    }).bind("drag",
                    function (o, r) {
                        r.clientX = o.clientX;
                        r.clientY = o.clientY;
                        $(r.proxy).css("top", o.clientY - r.proxyOffsetY).css("left", o.clientX - r.proxyOffsetX);
                        var A = false, w = false;
                        _.forEach(r.drop, function (B) {
                            $.isFunction(B.updateDropOnDrag) && B.updateDropOnDrag(o, r);
                            if (!A)if ($(B).within(o.clientX, o.clientY).length >
                                    0)if ($(B).data("ignoreForOverDrop"))w = true; else {
                                w = false;
                                A = true
                            }
                        });
                        w || (A ? $(r.proxy).addClass("valid").removeClass("invalid") : $(r.proxy).addClass("invalid").removeClass("valid"))
                    }).bind("dragend", function (o, r) {
                        $(r.proxy).remove();
                        GS.getGuts().gaTrackEvent("player", "dragSuccess");
                        $.publish("gs.drag.end", r)
                    });
            $footer.bind("dropinit",
                    function () {
                        this.updateDropOnDrag = g
                    }).bind("dropstart",
                    function (o, r) {
                        if (!r.draggedItems) {
                            this.updateDropOnDrag = null;
                            return false
                        }
                        r.draggedItemsType = r.draggedItemsType || _.guessDragType(r.draggedItems);
                        $(".queue-item").length && r.draggedItemsType !== "station" && $("<div id='queue_songGuide'/>").addClass("size_" + GS.player.queueSize).css({position:"absolute", zIndex:"99998", height:$(".queue-item").outerHeight(true), width:10, top:$(".queue-item").offset().top + 5}).hide().appendTo("body")
                    }).bind("dropend",
                    function (o, r) {
                        $("#queue_songGuide").remove();
                        clearInterval(r.queueAutoScrollInterval)
                    }).bind("drop", function (o, r) {
                        $(this).offset();
                        var A = $footer.within(o.clientX, o.clientY).length > 0;
                        n.within(o.clientX, o.clientY);
                        var w = b.activeSongWidth - b.songWidth;
                        w = $("#queue_list_window").scrollLeft() - 10 - (o.clientX > parseInt($("#queue_list .queue-item-active").css("left"), 10) + b.activeSongWidth ? w : 0);
                        w = Math.max(0, Math.min(r.queueLength, Math.round((o.clientX + w) / b.songWidth)));
                        if (r.draggedItemSource == "queue") {
                            if (!($(".queue-item", k).length < 2)) {
                                queueSongID = r.draggedQueueItem.find(".queueSong").attr("id");
                                b.moveSongsTo([queueSongID], w)
                            }
                        } else {
                            var B = [], t, v, D, F;
                            if (A)if (!(o.clientX === 0 && o.layerX === 0 && o.offsetX === 0 && o.screenX === 0)) {
                                r.draggedItemsType =
                                        r.draggedItemsType || _.guessDragType(r.draggedItems);
                                switch (r.draggedItemsType) {
                                    case "song":
                                        t = [];
                                        for (D = 0; D < r.draggedItems.length; D++)t.push(r.draggedItems[D].SongID);
                                        B.push({songIDs:t, context:r.draggedItemsContext});
                                        var E, x = [], y = [];
                                        A = $("#grid");
                                        if (A.controller()) {
                                            var H = A.controller().dataView.rows;
                                            $('#grid .slick-row.selected[id!="showQueue"]').each(function (I, p) {
                                                E = parseInt($(p).attr("row"), 10);
                                                if (!isNaN(E)) {
                                                    x.push(E + 1);
                                                    var q = H[E].ppVersion;
                                                    q && y.push(q)
                                                }
                                            })
                                        }
                                        A = {ranks:x, songIDs:t};
                                        if (y.length > 0)A.ppVersions =
                                                y.join();
                                        GS.getGuts().logMultiSongDrag("OLSongsDraggedToQueue", A);
                                        break;
                                    case "album":
                                        for (D = 0; D < r.draggedItems.length; D++) {
                                            t = [];
                                            r.draggedItems[D].getSongs(function (I) {
                                                I.sort(GS.Models.Album.defaultSongSort);
                                                for (F = 0; F < I.length; F++)t.push(I[F].SongID)
                                            }, null, true, {async:false});
                                            B.push({songIDs:t, context:new GS.Models.PlayContext(GS.player.PLAY_CONTEXT_ALBUM, r.draggedItems[D])})
                                        }
                                        break;
                                    case "artist":
                                        for (D = 0; D < r.draggedItems.length; D++) {
                                            t = [];
                                            r.draggedItems[D].getSongs(function (I) {
                                                I.sort(GS.Models.Artist.defaultSongSort);
                                                for (F = 0; F < I.length; F++)t.push(I[F].SongID)
                                            }, false, null, {async:false});
                                            B.push({songIDs:t, context:new GS.Models.PlayContext(GS.player.PLAY_CONTEXT_ARTIST, r.draggedItems[D])})
                                        }
                                        break;
                                    case "playlist":
                                        for (D = 0; D < r.draggedItems.length; D++) {
                                            t = [];
                                            r.draggedItems[D].getSongs(function (I) {
                                                for (F = 0; F < I.length; F++)t.push(I[F].SongID)
                                            }, null, {async:false});
                                            B.push({songIDs:t, context:new GS.Models.PlayContext(GS.player.PLAY_CONTEXT_PLAYLIST, r.draggedItems[D])})
                                        }
                                        break;
                                    case "user":
                                        for (D = 0; D < r.draggedItems.length; D++) {
                                            t =
                                                    [];
                                            r.draggedItems[D].getFavoritesByType("Songs", function (I) {
                                                _.forEach(I, function (p) {
                                                    t.push(p.SongID)
                                                })
                                            }, null, {async:false});
                                            B.push({songIDs:t, context:new GS.Models.PlayContext(GS.player.PLAY_CONTEXT_USER, r.draggedItems[D])})
                                        }
                                        break;
                                    case "station":
                                        GS.player.setAutoplay(true, r.draggedItems[0].StationID);
                                        return;
                                    default:
                                        console.error("queue drop, invalid drag type", r.draggedItemsType);
                                        return
                                }
                                v = n.within(o.clientX, o.clientY).length > 0 || b.getCurrentQueue().songs.length > 0 ? false : true;
                                for (D = 0; D < B.length; D++) {
                                    t =
                                            B[D].songIDs;
                                    A = _.orEqual(B[D].context, new GS.Models.PlayContext);
                                    b.addSongsToQueueAt(t, w, v, A);
                                    w += t.length;
                                    v = false
                                }
                                GS.getGuts().gaTrackEvent("player", "dropSuccess")
                            }
                        }
                    })
        }, addQueueSeek:function () {
            this.seek = $("#seeking_wrapper");
            this.seek.slider({disabled:true, max:1E3, start:function () {
                GS.player.SCRUB_LOCK = true
            }, stop:function () {
                GS.player.SCRUB_LOCK = false
            }, change:function (g, k) {
                var m = k.value / 1E3, n = b.player.getPlaybackStatus();
                b.seekTo(m * n.duration)
            }})
        }, addShortcuts:function () {
            b.volumeSliderTimeout = null;
            b.volumeSliderDuration = 300;
            $(document).bind("keyup", "space",
                    function (g) {
                        $(g.target).is("button") && g.preventDefault()
                    }).bind("keydown", "space",
                    function (g) {
                        if (!($(g.target).is("input,textarea,select") && $(g.target).val().length > 0)) {
                            b.togglePlayPause();
                            GS.getGuts().gaTrackEvent("player", "playPauseShortcut");
                            return false
                        }
                    }).bind("keydown", "ctrl+right",
                    function (g) {
                        if (!($(g.target).is("input,textarea,select") && $(g.target).val().length > 0)) {
                            b.nextSong();
                            GS.getGuts().gaTrackEvent("player", "nextShortcut");
                            return false
                        }
                    }).bind("keydown",
                    "meta+right",
                    function (g) {
                        if (!($(g.target).is("input,textarea,select") && $(g.target).val().length > 0)) {
                            b.nextSong();
                            GS.getGuts().gaTrackEvent("player", "nextShortcut");
                            return false
                        }
                    }).bind("keydown", "ctrl+left",
                    function (g) {
                        if (!($(g.target).is("input,textarea,select") && $(g.target).val().length > 0)) {
                            b.previousSong();
                            GS.getGuts().gaTrackEvent("player", "prevShortcut");
                            return false
                        }
                    }).bind("keydown", "meta+left",
                    function (g) {
                        if (!($(g.target).is("input,textarea,select") && $(g.target).val().length > 0)) {
                            b.previousSong();
                            GS.getGuts().gaTrackEvent("player", "prevShortcut");
                            return false
                        }
                    }).bind("keydown", "ctrl+up",
                    function (g) {
                        if (!($(g.target).is("input,textarea,select") && $(g.target).val().length > 0)) {
                            b.setVolume(Math.min(100, b.getVolume() + 5));
                            $("#volumeSlider").slider("value", b.getVolume());
                            $("#volumeControl").show();
                            clearTimeout(b.volumeSliderTimeout);
                            b.volumeSliderTimeout = setTimeout(function () {
                                $("#volumeControl").hide()
                            }, b.volumeSliderDuration);
                            GS.getGuts().gaTrackEvent("player", "volumeUpShortcut", b.getVolume());
                            return false
                        }
                    }).bind("keydown",
                    "meta+up",
                    function (g) {
                        if (!($(g.target).is("input,textarea,select") && $(g.target).val().length > 0)) {
                            b.setVolume(Math.min(100, b.getVolume() + 5));
                            $("#volumeSlider").slider("value", b.getVolume());
                            $("#volumeControl").show();
                            clearTimeout(b.volumeSliderTimeout);
                            b.volumeSliderTimeout = setTimeout(function () {
                                $("#volumeControl").hide()
                            }, b.volumeSliderDuration);
                            GS.getGuts().gaTrackEvent("player", "volumeUpShortcut", b.getVolume());
                            return false
                        }
                    }).bind("keydown", "ctrl+down",
                    function (g) {
                        if (!($(g.target).is("input,textarea,select") &&
                                $(g.target).val().length > 0)) {
                            b.setVolume(Math.max(0, b.getVolume() - 5));
                            $("#volumeSlider").slider("value", b.getVolume());
                            $("#volumeControl").show();
                            clearTimeout(b.volumeSliderTimeout);
                            b.volumeSliderTimeout = setTimeout(function () {
                                $("#volumeControl").hide()
                            }, b.volumeSliderDuration);
                            GS.getGuts().gaTrackEvent("player", "volumeDownShortcut", b.getVolume());
                            return false
                        }
                    }).bind("keydown", "meta+down", function (g) {
                        if (!($(g.target).is("input,textarea,select") && $(g.target).val().length > 0)) {
                            b.setVolume(Math.max(0,
                                    b.getVolume() - 5));
                            $("#volumeSlider").slider("value", b.getVolume());
                            $("#volumeControl").show();
                            clearTimeout(b.volumeSliderTimeout);
                            b.volumeSliderTimeout = setTimeout(function () {
                                $("#volumeControl").hide()
                            }, b.volumeSliderDuration);
                            GS.getGuts().gaTrackEvent("player", "volumeDownShortcut", b.getVolume());
                            return false
                        }
                    })
        }, addVolumeSlider:function () {
            var g = ["off", "one", "two", "three", "four", "five"], k = function (m, n) {
                var o = _.orEqual(Math.ceil(n.value / 20), 5);
                o = g[o];
                $("#player_volume").attr("class", "player_control main_asset " +
                        o);
                n.value == 0 && b.getIsMuted() ? $("#player_volume").addClass("muted") : b.setVolume(n.value)
            };
            $("#volumeSlider").slider({orientation:"vertical", range:"min", min:0, max:100, slide:k, change:k})
        }, addQueueResize:function () {
            var g = this;
            $("#player_queue").resizable({handles:{s:$("#player_queue_resize")}, minHeight:0, maxHeight:185, animate:false, distance:10, iframeFix:true, resize:function () {
                $("#deselector").select();
                $("#queue_list_window").hide();
                g.gsQueue && g.gsQueue.setDisabled(true);
                GS.resize()
            }, stop:function (k, m) {
                var n = m.size.height - 30;
                $("#queue_list_window").show();
                if (n > 145)g.setQueue("l"); else if (n > 100)g.setQueue("m"); else n > 15 ? g.setQueue("s") : g.setQueue("off");
                $("#player_queue").height("auto").width("auto");
                GS.resize()
            }})
        }, ".queueSong dblclick":function (g, k) {
            k.stopPropagation();
            b.getCurrentQueue(true) && b.playSong(g.attr("id"));
            return false
        }, ".queueSong a.play click":function (g, k) {
            k.stopImmediatePropagation();
            var m = b.getCurrentQueue(true);
            if (m && m.activeSong && g.attr("rel") == m.activeSong.queueSongID)if (b.isPlaying)b.pauseSong();
            else b.isPaused ? b.resumeSong() : b.playSong(m.activeSong.queueSongID); else b.playSong(g.attr("rel"));
            return false
        }, ".queueSong a.remove click":function (g, k) {
            k.stopImmediatePropagation();
            var m = b.getCurrentQueue().activeSong, n = b.getSongDetails(b.getCurrentQueue().queueID, g.parents(".queueSong").attr("id"))[0];
            b.removeSongs([n.queueSongID]);
            b.queue = false;
            b.queue = b.getCurrentQueue();
            b.updateQueueWidth();
            b.gsQueue.setItems(b.queue.songs);
            if (b.queue.activeSong)b.gsQueue.setActive(b.queue.activeSong.index,
                    false); else m && m.index && m.index > 0 && b.gsQueue.setActive(m.index - 1, false);
            GS.getGuts().gaTrackEvent("player", "removeSong", n.SongID);
            return false
        }, ".queueSong a.add click":function (g, k) {
            k.stopImmediatePropagation();
            var m = b.getCurrentQueue(), n = g.is(".inLibrary"), o = g.parents(".queueSong").attr("id");
            m = b.getSongDetails(m.queueID, [o])[0];
            if (b.currentSong && b.currentSong.queueSongID === m.queueSongID)m = b.currentSong;
            if (n) {
                g.removeClass("inLibrary").removeClass("isFavorite");
                GS.user.removeFromLibrary(m.SongID);
                GS.getGuts().logEvent("playerRemoveFromLibrary", {songID:m.SongID})
            } else {
                g.addClass("inLibrary");
                GS.user.addToLibrary(m.SongID);
                GS.getGuts().logEvent("playerAddToLibrary", {songID:m.SongID})
            }
            return false
        }, ".queueSong a.favorite click":function (g, k) {
            k.stopImmediatePropagation();
            var m = b.getCurrentQueue(), n = g.is(".isFavorite"), o = g.parents(".queueSong").attr("id");
            m = b.getSongDetails(m.queueID, [o])[0];
            if (b.currentSong && b.currentSong.queueSongID === m.queueSongID)m = b.currentSong;
            if (n) {
                g.removeClass("isFavorite");
                GS.user.removeFromSongFavorites(m.SongID);
                GS.getGuts().logEvent("playerRemoveFromSongFavorites", {songID:m.SongID})
            } else {
                g.addClass("isFavorite");
                GS.user.addToSongFavorites(m.SongID);
                GS.getGuts().logEvent("playerAddToSongFavorites", {songID:m.SongID})
            }
            return false
        }, ".queueSong a.options click":function (g, k) {
            var m = this.getCurrentQueue(), n = g.parents(".queueSong").attr("id");
            m = this.getSongDetails(m.queueID, [n])[0];
            var o = {isQueue:true, flagSongCallback:function (r) {
                GS.player.flagSong(n, r)
            }, voteSongCallback:function (r) {
                GS.player.voteSong(n,
                        r)
            }};
            if ($("div.qsid" + n).is(":visible")) {
                $("div.qsid" + n).hide();
                g.removeClass("active-context")
            } else {
                g.addClass("active-context").jjmenu(k, m.getContextMenu(o), null, {xposition:"auto", yposition:"top", orientation:"top", show:"show", className:"queuemenu qsid" + n, keepState:g});
                GS.getGuts().gaTrackEvent("player", "songMenu", m.SongID)
            }
        }, ".queueSong .smile click":function (g, k) {
            k.stopImmediatePropagation();
            console.log("player.smile click", g, k);
            var m = g.parents(".queueSong").attr("id");
            g.siblings(".frown").removeClass("active");
            if (g.is(".active")) {
                this.voteSong(m, 0);
                g.removeClass("active");
                GS.getGuts().gaTrackEvent("player", "unsmile", g.parents(".queueSong").attr("id"));
                this.trackAutoplayEvent("unsmile")
            } else {
                this.voteSong(m, 1);
                g.addClass("active");
                GS.getGuts().gaTrackEvent("player", "smile", g.parents(".queueSong").attr("id"));
                this.trackAutoplayEvent("smile")
            }
            return false
        }, ".queueSong .frown click":function (g, k) {
            k.stopImmediatePropagation();
            console.log("player.frown click", g.get(), k);
            var m = g.parents(".queueSong").attr("id");
            g.siblings(".smile").removeClass("active");
            if (g.is(".active")) {
                this.voteSong(m, 0);
                g.removeClass("active");
                GS.getGuts().gaTrackEvent("player", "unfrown", g.parents(".queueSong").attr("id"));
                this.trackAutoplayEvent("unfrown")
            } else {
                this.voteSong(m, -1);
                g.addClass("active");
                GS.getGuts().gaTrackEvent("player", "frown", g.parents(".queueSong").attr("id"));
                this.trackAutoplayEvent("frown")
            }
            return false
        }, ".currentSongLink, a.queueSong_name click":function (g, k) {
            k.stopImmediatePropagation();
            var m = g.attr("rel"), n =
                    GS.Models.Song.getOneFromCache(m);
            if (n = n && $.isFunction(n.toUrl) ? n.toUrl() : false) {
                GS.router.setHash(n);
                GS.getGuts().gaTrackEvent("player", "songItemLink", m)
            }
            return false
        }, ".queueSong contextmenu":function (g, k) {
            var m = GS.Models.Song.getOneFromCache(g.attr("rel")), n = g.attr("id");
            g.jjmenu(k, m.getContextMenu({isQueue:true, flagSongCallback:function (o) {
                GS.player.flagSong(n, o)
            }, voteSongCallback:function (o) {
                GS.player.voteSong(n, o)
            }}), null, {xposition:"mouse", yposition:"mouse", show:"show", className:"queuemenu"});
            GS.getGuts().gaTrackEvent("player", "songMenu", m.SongID)
        }, "#playerDetails_nowPlaying_options click":function (g, k) {
            var m = $("#playerDetails_nowPlaying").attr("rel"), n = this.getCurrentSong().queueSongID, o = GS.Models.Song.getOneFromCache(m), r = {isQueue:true, flagSongCallback:function (A) {
                GS.player.flagSong(n, A)
            }, voteSongCallback:function (A) {
                GS.player.voteSong(n, A)
            }};
            if (g.hasClass("active-context")) {
                $(".jjplayerNowPlaying").hide();
                g.removeClass("active-context")
            } else {
                g.addClass("active-context").jjmenu(k, o.getContextMenu(r),
                        null, {xposition:"left", yposition:"top", orientation:"top", show:"show", className:"queuemenu jjplayerNowPlaying", keepState:g});
                GS.getGuts().gaTrackEvent("player", "nowPlayingMenu", m)
            }
        }, togglePlayPause:function () {
            var g = this.player.getPlaybackStatus();
            if (g) {
                switch (g.status) {
                    case this.PLAY_STATUS_NONE:
                    case this.PLAY_STATUS_FAILED:
                    case this.PLAY_STATUS_COMPLETED:
                    default:
                        g.activeSong && this.playSong(g.activeSong.queueSongID);
                        break;
                    case this.PLAY_STATUS_INITIALIZING:
                    case this.PLAY_STATUS_LOADING:
                        this.stopSong();
                        break;
                    case this.PLAY_STATUS_PLAYING:
                    case this.PLAY_STATUS_BUFFERING:
                        this.pauseSong();
                        break;
                    case this.PLAY_STATUS_PAUSED:
                        this.resumeSong();
                        break
                }
                $.publish("gs.player.queue.change")
            }
        }, "#player_play_pause click":function () {
            this.togglePlayPause();
            return false
        }, "#player_previous click":function () {
            this.previousSong();
            return false
        }, "#player_next click":function () {
            this.nextSong();
            return false
        }, "#player_shuffle click":function (g) {
            if (!b.queue.autoplayEnabled) {
                g.toggleClass("active");
                g = g.is(".active") ? true :
                        false;
                b.setShuffle(g);
                return false
            }
        }, "#player_loop click":function (g) {
            var k;
            if (g.is(".none")) {
                k = b.REPEAT_ALL;
                g.removeClass("none").addClass("all").addClass("active")
            } else if (g.is(".all")) {
                k = b.REPEAT_ONE;
                g.removeClass("all").addClass("one").addClass("active")
            } else {
                k = b.REPEAT_NONE;
                g.removeClass("one").addClass("none").removeClass("active")
            }
            b.setRepeat(k);
            return false
        }, "#player_crossfade click":function (g) {
            if (GS.user.UserID > 0 && GS.user.subscription.canUsePlayerBonuses()) {
                g.toggleClass("active");
                g = g.is(".active") ?
                        true : false;
                b.setCrossfadeEnabled(g)
            } else GS.getLightbox().open("vipOnlyFeature", {callback:this.callback(function () {
                this.setCrossfadeEnabled(true)
            })});
            return false
        }, "#player_fullscreen click":function () {
            return false
        }, "#player_volume click":function (g) {
            console.log("player_volume toggle", this.getIsMuted());
            if (this.getIsMuted()) {
                this.setIsMuted(false);
                $(g).removeClass("muted");
                $("#volumeSlider").slider("value", b.player.getVolume())
            } else {
                this.setIsMuted(true);
                $(g).addClass("muted");
                $("#volumeSlider").slider("value",
                        0)
            }
            return false
        }, "#player_volume mouseenter":function () {
            clearTimeout(this.volumeSliderTimeout);
            $("#volumeControl").show();
            return false
        }, "#player_volume mouseleave":function () {
            clearTimeout(this.volumeSliderTimeout);
            this.volumeSliderTimeout = setTimeout(this.callback(function () {
                $("#volumeControl").hide()
            }), this.volumeSliderDuration);
            return false
        }, "#volumeControl mouseenter":function () {
            clearTimeout(this.volumeSliderTimeout);
            return false
        }, "#volumeControl mouseleave":function () {
            clearTimeout(this.volumeSliderTimeout);
            if (this.isMouseDown) {
                var g = this, k = function () {
                    $("body").unbind("mouseup", k);
                    $("body").unbind("mouseleave", k);
                    g.isMouseDown = 0;
                    g.volumeSliderTimeout = setTimeout(g.callback(function () {
                        $("#volumeControl").hide()
                    }), g.volumeSliderDuration)
                };
                $("body").bind("mouseup", k);
                $("body").bind("mouseleave", k)
            } else this.volumeSliderTimeout = setTimeout(this.callback(function () {
                $("#volumeControl").hide()
            }), this.volumeSliderDuration);
            return false
        }, isMouseDown:0, mousedown:function () {
            this.isMouseDown = 1
        }, mouseup:function () {
            this.isMouseDown =
                    0
        }, "#queue_load_button click":function (g, k) {
            this.getCurrentQueue(true);
            var m = this, n = [], o;
            if (GS.user.favorites.songs) {
                o = _.toArrayID(GS.user.favorites.songs);
                o.length && n.push({title:$.localize.getString("QUEUE_LOAD_FAVORITES"), customClass:"stations jj_menu_item_hasIcon jj_menu_item_favorites", action:{type:"fn", callback:function () {
                    GS.player.addSongsToQueueAt(o)
                }}})
            }
            var r = GS.Models.Playlist.getPlaylistsMenu([], function (A) {
                var w = function () {
                    var B = [], t = new GS.Models.PlayContext(GS.player.PLAY_CONTEXT_PLAYLIST,
                            A);
                    A.getSongs(function (v) {
                        for (j = 0; j < v.length; j++)B.push(v[j].SongID);
                        GS.player.addSongsToQueueAt(B, m.INDEX_REPLACE, true, t)
                    }, null, false, {async:false})
                };
                if (GS.player.queue && GS.player.queue.songs && GS.player.queue.songs.length > 0) {
                    GS.getLightbox().close();
                    GS.getLightbox().open({type:"playlistClearQueue", view:{header:"POPUP_LOAD_PLAYLIST_TITLE", message:"POPUP_LOAD_PLAYLIST_MESSAGE", buttonsLeft:[
                        {label:"CANCEL", className:"close"}
                    ], buttonsRight:[
                        {label:"POPUP_LOAD_PLAYLIST_BTN", className:"submit"}
                    ]}, callbacks:{".submit":function () {
                        w();
                        GS.getGuts().logEvent("playlistOverwriteQueue", {overwrite:1})
                    }}});
                    GS.getGuts().logEvent("playlistOverwriteQueue", {overwrite:0})
                } else w()
            }, true, false);
            r.length > 0 && n.push({title:$.localize.getString("QUEUE_LOAD_PLAYLIST"), customClass:"playlist jj_menu_item_hasIcon jj_menu_item_playlist", type:"sub", src:r});
            n.push({title:$.localize.getString("QUEUE_LOAD_STATION"), customClass:"stations jj_menu_item_hasIcon jj_menu_item_station", type:"sub", src:GS.Models.Station.getStationsStartMenu()});
            if (g.hasClass("active-context")) {
                $(".jjQueueMenu").hide();
                g.removeClass("active-context")
            } else {
                g.addClass("active-context").jjmenu(k, n, null, {xposition:"right", yposition:"top", orientation:"top", spill:"left", show:"show", className:"radiomenu jjQueueMenu", keepState:g});
                GS.getGuts().gaTrackEvent("player", "queueLoadMenu")
            }
        }, "#queue_save_button click":function (g, k) {
            var m = this.getCurrentQueue(true), n = [], o = [];
            if (m && m.songs && m.songs.length > 0)n = [
                {title:$.localize.getString("CONTEXT_ADD_TO_LIBRARY"), customClass:"addLibrary jj_menu_item_hasIcon jj_menu_item_music", action:{type:"fn",
                    callback:function () {
                        var w, B = [];
                        for (w = 0; w < m.songs.length; w++) {
                            B.push(m.songs[w].SongID);
                            GS.getGuts().logEvent("playerAddToLibrary", {songID:m.songs[w].SongID})
                        }
                        GS.user.addToLibrary(B)
                    }}},
                {customClass:"separator"}
            ];
            if (m && m.songs && m.songs.length > 0) {
                _.forEach(m.songs, function (w) {
                    o.push(w.SongID)
                });
                var r = GS.Models.Playlist.getPlaylistsMenu(o, function (w) {
                    GS.getLightbox().open({type:"confirm", view:{header:"POPUP_ARE_YOU_SURE", message:"POPUP_ARE_YOU_SURE_OVERWRITE_PLAYLIST", buttonsLeft:[
                        {label:"CANCEL", className:"close"}
                    ],
                        buttonsRight:[
                            {label:"OK", className:"submit"}
                        ]}, callbacks:{".submit":function () {
                        w.overwriteWithSongs(o, true)
                    }}})
                }, false, true), A = GS.Models.Playlist.getPlaylistsMenu(o, function (w) {
                    w.addSongs(o, w.length, true)
                }, false, false);
                _.isEmpty(GS.user.playlists) ? n.push({title:$.localize.getString("CONTEXT_NEW_PLAYLIST"), customClass:"jj_menu_item_hasIcon jj_menu_item_new_playlist", action:{type:"fn", callback:function () {
                    GS.getLightbox().open("newPlaylist", o)
                }}}) : n.push({title:$.localize.getString("QUEUE_SAVE_PLAYLIST"),
                    customClass:"jj_menu_item_hasIcon jj_menu_item_replace_playlist saveQueue", type:"sub", src:r});
                A.length && n.push({title:$.localize.getString("QUEUE_ADD_TO_PLAYLIST"), customClass:"saveQueue jj_menu_item_hasIcon jj_menu_item_add_playlist", type:"sub", src:A});
                n.length && n.push({customClass:"separator"});
                n.push({title:$.localize.getString("QUEUE_EMBED_SONGS"), customClass:"jj_menu_item_hasIcon jj_menu_item_share_widget shareSongs", action:{type:"fn", callback:function () {
                    var w, B = [];
                    for (w = 0; w < m.songs.length; w++)B.push(m.songs[w].SongID);
                    GS.getLightbox().open("widget", {type:"manySongs", id:B})
                }}})
            }
            if (g.hasClass("active-context")) {
                $(".jjQueueMenu").hide();
                g.removeClass("active-context")
            } else {
                g.addClass("active-context").jjmenu(k, n, null, {xposition:"right", yposition:"top", orientation:"top", spill:"left", show:"show", className:"radiomenu jjQueueMenu", keepState:g});
                GS.getGuts().gaTrackEvent("player", "queueSaveMenu")
            }
        }, "#player_options click":function (g, k) {
            var m = this.getCurrentQueue(), n = this, o = [], r = [
                {title:$.localize.getString("QUEUE_LARGE"),
                    customClass:!GS.player.queueClosed && GS.player.queueSize == "l" ? "jj_menu_item_hasIcon jj_menu_item_tick" : "jj_menu_item_hasIcon jj_menu_item_blank", action:{type:"fn", callback:function () {
                    GS.player.setQueue("l")
                }}},
                {title:$.localize.getString("QUEUE_NORMAL"), customClass:!GS.player.queueClosed && GS.player.queueSize == "m" ? "jj_menu_item_hasIcon jj_menu_item_tick" : "jj_menu_item_hasIcon jj_menu_item_blank", action:{type:"fn", callback:function () {
                    GS.player.setQueue("m")
                }}},
                {title:$.localize.getString("QUEUE_SMALL"),
                    customClass:!GS.player.queueClosed && GS.player.queueSize == "s" ? "jj_menu_item_hasIcon jj_menu_item_tick" : "jj_menu_item_hasIcon jj_menu_item_blank", action:{type:"fn", callback:function () {
                    GS.player.setQueue("s")
                }}},
                {title:$.localize.getString("QUEUE_HIDE"), customClass:GS.player.queueClosed ? "jj_menu_item_hasIcon jj_menu_item_tick" : "jj_menu_item_hasIcon jj_menu_item_blank", action:{type:"fn", callback:function () {
                    GS.player.setQueue("off")
                }}}
            ];
            o.push({title:$.localize.getString("QUEUE_SIZES"), type:"sub", customClass:"jj_menu_item_hasIcon jj_menu_item_play",
                src:r});
            GS.user.UserID > 0 && o.push({title:$.localize.getString("PLAYER_SHOW_SETTINGS"), customClass:"jj_menu_item_hasIcon jj_menu_item_share_widget", action:{type:"fn", callback:function () {
                GS.router.setHash("/settings/activity")
            }}});
            if (m && m.songs && m.songs.length) {
                o.push({customClass:"separator"});
                n.videoModeEnabled ? o.push({title:$.localize.getString("PLAYER_DISABLE_VIDEO_MODE"), customClass:"jj_menu_item_hasIcon jj_menu_item_video", action:{type:"fn", callback:function () {
                    n.disableVideoMode()
                }}}) : o.push({title:$.localize.getString("PLAYER_ENABLE_VIDEO_MODE"),
                    customClass:"jj_menu_item_hasIcon jj_menu_item_video", action:{type:"fn", callback:function () {
                        n.enableVideoMode()
                    }}});
                o.push({title:$.localize.getString("PLAYER_SHOW_VISUALIZER"), customClass:"jj_menu_item_hasIcon jj_menu_item_visualizer", action:{type:"fn", callback:function () {
                    if (GS.user.subscription.canUsePlayerBonuses())$("#lightbox .lbcontainer:visible").is(".gs_lightbox_visualizer") || GS.getLightbox().open("visualizer", {showPlayerControls:true}); else GS.getLightbox().open("vipOnlyFeature", {callback:n.callback(function () {
                        $("#lightbox .lbcontainer:visible").is(".gs_lightbox_visualizer") ||
                        GS.getLightbox().open("visualizer", {showPlayerControls:true})
                    })})
                }}});
                n.powerModeEnabled ? o.push({title:$.localize.getString("PLAYER_DISABLE_POWER_MODE"), customClass:"jj_menu_item_hasIcon jj_menu_item_clock", action:{type:"fn", callback:function () {
                    n.disablePowerMode()
                }}}) : o.push({title:$.localize.getString("PLAYER_ENABLE_POWER_MODE"), customClass:"jj_menu_item_hasIcon jj_menu_item_clock", action:{type:"fn", callback:function () {
                    GS.user.subscription.canUsePlayerBonuses() ? n.enablePowerMode() : GS.getLightbox().open("vipOnlyFeature",
                            {callback:n.callback(function () {
                                this.enablePowerMode()
                            })})
                }}})
            }
            if (g.hasClass("active-context")) {
                $(".jjQueueMenu").remove();
                g.removeClass("active-context")
            } else {
                g.addClass("active-context").jjmenu(k, o, null, {xposition:"right", yposition:"top", orientation:"top", spill:"left", show:"show", className:"radiomenu jjQueueMenu", keepState:g});
                GS.getGuts().gaTrackEvent("player", "queueSongMenu")
            }
        }, showRadioStations:function (g) {
            messageKey = g ? "POPUP_START_RADIO_NO_SONGS_MESSAGE" : "POPUP_START_RADIO_NO_RECS_MESSAGE";
            GS.getLightbox().open({type:"radioStations", view:{header:"POPUP_START_RADIO_TITLE", messageHTML:'<p data-translate-text="' + messageKey + '">' + $.localize.getString(messageKey) + '</p><div id="grid" class="gs_grid radioStations"></div>', buttonsRight:[], buttonsLeft:[
                {label:"CLOSE", className:"close"}
            ]}, callbacks:{".close":function () {
                GS.getLightbox().close();
                return false
            }}, loadCallback:function () {
                var k = GS.Models.Station.tagStations;
                $("#lightbox_content .radioStations").gs_grid(k, GS.Controllers.GridController.columns.station,
                        {allowDragSort:false, allowDuplicates:false, disableMultiSelect:true, sortCol:"StationTitle", sortDir:true}, "station");
                GS.getLightbox().positionLightbox();
                $.subscribe("gs.player.autoplay.update", function (m) {
                    m && GS.getLightbox().close()
                })
            }})
        }, "#player_radio_button, #player_radio_label click":function (g) {
            $(g);
            if (b.player && !b.player.getCurrentQueue().autoplayEnabled)if (b.player.getCurrentQueue().songs.length > 0) {
                b.player.setAutoplay(true);
                $("#player_radio_switch").stop().animate({left:25}, {duration:100, complete:function () {
                    $("#player_radio_button").addClass("active")
                }})
            } else this.showRadioStations(true);
            else {
                b.player.setAutoplay(false);
                $("#player_radio_switch").stop().animate({left:0}, {duration:100, complete:function () {
                    $("#player_radio_button").removeClass("active")
                }})
            }
        }, videoIndex:0, enableVideoMode:function () {
            this.videoModeEnabled = true;
            this.showVideoLightbox();
            if (this.powerModeEnabled) {
                clearInterval(this.powerModeInterval);
                this.powerModeInterval = setInterval($(".lbcontainer.gs_lightbox_video").controller().callback("powerHourCheckVideoMode"), 1E3)
            }
            GS.getGuts().gaTrackEvent("player", "enableVideoMode")
        },
        disableVideoMode:function () {
            this.videoModeEnabled = false;
            this.hideVideoLightbox();
            this.playSong();
            this.powerModeEnabled && clearInterval(this.powerModeInterval);
            GS.getGuts().gaTrackEvent("player", "disableVideoMode")
        }, showVideoLightbox:function () {
            var g = this.currentSong;
            if (g) {
                GS.getLightbox().close();
                GS.getLightbox().open("video", {isLoading:true, isVideoMode:true, song:g, sidebarHeader:"POPUP_VIDEO_ALTERNATE"})
            } else {
                $.publish("gs.notification", {type:"error", message:$.localize.getString("NOTIF_FEATURE_REQUIREMENT_SONGS")});
                this.videoModeEnabled = false
            }
        }, hideVideoLightbox:function () {
            $("div.lbcontainer.gs_lightbox_video").is(":visible") && GS.getLightbox().close()
        }, togglePowerMode:function () {
            this.powerModeEnabled ? this.disablePowerMode() : this.enablePowerMode()
        }, enablePowerMode:function () {
            this.powerModeEnabled = true;
            if (this.videoModeEnabled && $(".lbcontainer.video")) {
                clearInterval(this.powerModeInterval);
                this.powerModeInterval = setInterval($(".lbcontainer.gs_lightbox_video").controller().callback("powerHourCheckVideoMode"), 1E3)
            } else {
                var g =
                        this.player ? this.player.getPlaybackStatus() : null;
                if (g)switch (g.status) {
                    case this.PLAY_STATUS_NONE:
                    case this.PLAY_STATUS_FAILED:
                    case this.PLAY_STATUS_COMPLETED:
                    case this.PLAY_STATUS_PAUSED:
                        if (g.activeSong) {
                            this.playSong(g.activeSong.queueSongID);
                            $.publish("gs.player.queue.change")
                        }
                        break
                }
            }
            $.publish("gs.player.feature.change");
            GS.getGuts().gaTrackEvent("player", "enablePowerMode")
        }, disablePowerMode:function () {
            this.powerModeEnabled = false;
            this.videoModeEnabled && clearInterval(this.powerModeInterval);
            $.publish("gs.player.feature.change");
            GS.getGuts().gaTrackEvent("player", "disablePowerMode")
        }, "#queue_clear_button click":function () {
            var g = this.getCurrentQueue();
            if (g.hasRestoreQueue)b.restoreQueue(); else if (g && g.songs && g.songs.length > 0) {
                b.clearQueue();
                b.setQueue("off", false)
            }
        }, queueSongToHtml:function () {
            return function (g, k, m) {
                var n = "paused", o = [], r = b.getCurrentQueue(), A = "", w = g.fromLibrary ? "inLibrary" : "", B = g.isFavorite ? "isFavorite" : "", t = "", v = "";
                if (g.context.data && g.context.data.hasOwnProperty("CoverArtFilename"))g.CoverArtFilename = g.context.data.CoverArtFilename;
                if (r.activeSong && g.queueSongID === r.activeSong.queueSongID) {
                    A += " active";
                    if (b.isPlaying)n = ""
                }
                if (r.autoplayEnabled) {
                    if (g.autoplayVote === -1 || k === m - 1 && g.source !== "user")A += " suggestion";
                    if (g.autoplayVote === 1 || g.autoplayVote === 0 && g.source === "user") {
                        t = "active";
                        v = ""
                    } else if (g.autoplayVote === -1) {
                        v = "active";
                        t = ""
                    }
                }
                o.push('<div id="', g.queueSongID, '" rel="', g.SongID, '" class="', A, ' queueSong">', '<a class="remove" title="', $.localize.getString("removeSong"), '"></a>', '<div class="albumart">', '<div class="radio_options ',
                        r && r.autoplayEnabled ? "active" : "", '">', '<a class="smile ', t, '" title="', $.localize.getString("QUEUE_ITEM_SMILE"), '"></a>', '<a class="frown ', v, '" title="', $.localize.getString("QUEUE_ITEM_FROWN"), '"></a>', "</div>", '<div class="song_options ', w, " ", B, '">', '<a class="collection ', B, ' textToggle" title="', $.localize.getString("QUEUE_ADD_SONG_FAVORITE_TITLE"), '"></a>', '<a class="options selectbox" title="', $.localize.getString("QUEUE_ITEM_OPTIONS"), '"></a>', "</div>", '<a class="play ', n, '" rel="', g.queueSongID,
                        '"></a>', '<img src="', g.getImageURL(b.queueSize == "l" ? 90 : 70), '" height="100%" width="100%" />', "</div>", '<a title="', _.cleanText(g.SongName), '" class="queueSong_name song ellipsis" rel="', g.SongID, '">', _.cleanText(g.SongName), "</a>", '<a href="', _.cleanUrl(g.ArtistName, g.ArtistID, "artist"), '" title="', _.cleanText(g.ArtistName), '" class="queueSong_artist artist ellipsis">', _.cleanText(g.ArtistName), "</a>", "</div>");
                return o.join("")
            }
        }, smallQueueSongToHtml:function (g, k, m) {
            var n = "paused", o = [], r = b.getCurrentQueue(),
                    A = "", w = g.fromLibrary ? "inLibrary" : "", B = g.isFavorite ? "isFavorite" : "";
            if (g.context.data && g.context.data.hasOwnProperty("CoverArtFilename"))g.CoverArtFilename = g.context.data.CoverArtFilename;
            if (r.activeSong && g.queueSongID === r.activeSong.queueSongID) {
                A += " active";
                if (b.isPlaying)n = ""
            }
            if (r.autoplayEnabled)if (g.autoplayVote === -1 || k === m - 1 && g.source !== "user")A += " suggestion";
            o.push('<div id="', g.queueSongID, '" rel="', g.SongID, '" class="', A, ' queueSong small">', '<div class="albumart ', w, " ", B, '">', '<a class="play ',
                    n, '" rel="', g.queueSongID, '"></a>', '<a class="collection ', B, ' textToggle" title="', $.localize.getString("QUEUE_ADD_SONG_FAVORITE_TITLE"), '"></a>', '<a class="options selectbox" title="', $.localize.getString("QUEUE_ITEM_OPTIONS"), '"></a>', '<img src="', g.getImageURL(70), '" height="33" width="33" />', "</div>", '<a class="remove" title="', $.localize.getString("removeSong"), '"></a>', '<a title="', _.cleanText(g.SongName), '" class="queueSong_name song ellipsis" rel="', g.SongID, '">', _.cleanText(g.SongName),
                    "</a>", '<a href="', _.cleanUrl(g.ArtistName, g.ArtistID, "artist"), '" title="', _.cleanText(g.ArtistName), '" class="queueSong_artist artist ellipsis">', _.cleanText(g.ArtistName), "</a>", "</div>");
            return o.join("")
        }})
})();
GS.Controllers.BaseController.extend("GS.Controllers.YoutubeController", {isGSSingleton:true}, {readyCallbacks:[], API_URL:"http://gdata.youtube.com/feeds/api/videos", DEV_KEY:"AI39si6SJVyxgw9MFbAdbXE-wbtZFdTl8qnY2UWX3dFA97c9PrcfAYDpqUh0iLeVEkurJsjUvDmObBWvLX-wmsy_kW8KHAgN-Q", APPLICATION_ID:"Grooveshark", lastError:null, init:function () {
    window.onYouTubePlayerReady = function (b) {
        var a = GS.getYoutube(), c = a.makeVideoObject($("#" + b)[0], b);
        c.play();
        if (a.readyCallbacks[b]) {
            a.readyCallbacks[b](c);
            delete a.readyCallbacks[b]
        }
    };
    this._super()
}, attachPlayer:function (b, a, c, h, g) {
    var k = "videoVObj" + h, m = "http://www.youtube.com/v/" + b + "?version=3&enablejsapi=1&version=3&fs=1&playerapiid=" + k, n = {id:k, name:k, allowFullScreen:"true"};
    if (!b || _.notDefined(b))return false;
    a = a || 480;
    c = c || 385;
    if ($.isFunction(g))GS.getYoutube().readyCallbacks[k] = g;
    swfobject.embedSWF(m, h, a, c, "8", null, {}, {allowScriptAccess:"always", allowFullScreen:"true"}, n)
}, makeVideoObject:function (b, a) {
    var c = {callbacks:[], addEvent:function (h, g) {
        if ($.isFunction(g)) {
            var k = "yt" +
                    h + a + Math.floor(Math.random() * 1001);
            window[k] = g;
            g = k;
            this.callbacks.push(k)
        }
        b.addEventListener(h, g)
    }, play:function () {
        b.playVideo()
    }, playVideoAt:function (h) {
        b.playVideoAt(h)
    }, pause:function () {
        b.pauseVideo()
    }, isPaused:function () {
        var h = this.getState();
        return h != 1 && h != 3
    }, getState:function () {
        return b.getPlayerState()
    }, stop:function () {
        b.stopVideo()
    }, getCurrentTime:function () {
        return b.getCurrentTime()
    }, getDuration:function () {
        return b.getDuration()
    }, getVideoUrl:function () {
        return b.getVideoUrl()
    }, getVolume:function () {
        return b.getVolume() /
                100
    }, setVolume:function (h) {
        b.setVolume(h * 100)
    }, loadVideoById:function (h) {
        b.loadVideoById(h);
        GS.getGuts().gaTrackEvent("youtube", "loadVideoById", h)
    }, loadVideoByUrl:function (h) {
        b.loadVideoByUrl(h)
    }};
    $(b).parent().bind("remove", function () {
        try {
            c.callbacks && c.callbacks.length && _.forEach(c.callbacks, function (g) {
                window[g] = null
            })
        } catch (h) {
        }
    });
    return c
}, searchCache:{}, search:function (b, a, c, h, g) {
    b = $.trim(_.orEqual(b, ""));
    a = _.orEqual(a, 10);
    if ((!b || b == "") && g) {
        b = g.SongName.replace(/[\(\[][a-zA-Z0-9\s]+[\]\)]/g,
                "");
        b = g.ArtistName.toLowerCase() != "unknown" && g.ArtistName.toLowerCase() != "unknown artist" ? [g.ArtistName || "", b || ""].join(" - ") : b;
        b = $.trim(b)
    }
    if (!b) {
        $.isFunction(h) && h();
        return false
    }
    this.searchCache[b] && $.isFunction(c) && c(this.searchCache[b]);
    var k = "jQueryYoutube" + OAuth.nonce(10), m = {"max-results":a, orderBy:"relevance", safeSearch:"none", alt:"json-in-script", time:"all_time", "start-index":1, q:b, callback:k, key:this.DEV_KEY, v:2};
    a = this.API_URL;
    OAuth.completeRequest({method:"GET", action:a, parameters:m},
            {consumerKey:this.APPLICATION_ID, consumerSecret:this.DEV_KEY});
    m = OAuth.getParameterMap(m);
    a = a + "?" + _.httpBuildQuery(m);
    $.ajax({url:a, success:this.callback("searchSuccess", c, h, b, g), error:this.callback("searchFailed", h), dataType:"jsonp", jsonp:false, jsonpCallback:k, cache:true});
    GS.getGuts().gaTrackEvent("youtube", "search", b)
}, searchSuccess:function (b, a, c, h, g) {
    if (g.feed && g.feed.entry) {
        var k = [], m = {};
        _.forEach(g.feed.entry, function (n) {
            if (n.media$group && n.media$group.media$thumbnail) {
                m = {Author:"", Description:"",
                    Duration:0, Rating:0, LikeRatio:0, VideoID:"", Plays:0, URL:"", Title:"", Thumbnails:[]};
                if (n.author && n.author[0] && n.author[0].name && n.author[0].name.$t)m.Author = n.author[0].name.$t; else if (n.media$group.media$credit && n.media$group.media$credit.$t)m.Author = n.media$group.media$credit.$t;
                if (n.media$group.media$description && n.media$group.media$description.$t)m.Description = n.media$group.media$description.$t;
                if (n.media$group.yt$duration && n.media$group.yt$duration.seconds)m.Duration = parseInt(n.media$group.yt$duration.seconds);
                if (n.gd$rating && n.gd$rating.average)m.Rating = parseFloat(n.gd$rating.average);
                if (n.yt$rating && n.yt$rating.numLikes && n.yt$rating.numDislikes)m.LikeRatio = parseInt(n.yt$rating.numLikes) / parseInt(n.yt$rating.numDislikes);
                if (n.media$group.yt$videoid && n.media$group.yt$videoid.$t)m.VideoID = n.media$group.yt$videoid.$t; else if (n.id) {
                    var o = n.id.split(":");
                    m.VideoID = o[o.length - 1]
                }
                if (n.yt$statistics && n.yt$statistics.viewCount)m.Plays = parseInt(n.yt$statistics.viewCount);
                if (n.title && n.title.$t)m.Title = n.title.$t;
                if (n.link && n.link[0] && n.link.href)m.URL = n.link.href;
                _.forEach(n.media$group.media$thumbnail, function (r) {
                    if (r.yt$name)switch (r.yt$name) {
                        case "default":
                            m.Thumbnails.unshift(r);
                            return;
                        case "hqdefault":
                            m.Thumbnails.length && m.Thumbnails[0].yt$name == "default" ? m.Thumbnails.splice(1, 0, r) : m.Thumbnails.unshift(r);
                            return
                    }
                    m.Thumbnails.push(r)
                });
                m = GS.Models.Video.wrapYoutube(m);
                k.push(m)
            }
        });
        if (h)k = this.filterSearchResults(h, k);
        this.searchCache[c] = k;
        $.isFunction(b) && b(k)
    } else {
        this.lastError = g;
        $.isFunction(a) &&
        a(g)
    }
}, filterSearchResults:function (b, a) {
    var c = [], h = "";
    if (b && b.ArtistName)h = b.ArtistName.match(/[a-z0-9]/gi).join("").toLowerCase();
    _.forEach(a, function (g, k) {
        if (g.VideoID && g.Author && g.Duration > 60) {
            g.weight = Math.floor(4.01 * (a.length - k));
            if (g.Author.toLowerCase().lastIndexOf("vevo") > -1)g.weight *= 9.7; else if (g.Author.toLowerCase().lastIndexOf("emimusic") > -1)g.weight *= 8.98;
            if (h)if (g.Author.toLowerCase().indexOf(h) > -1)g.weight *= 2.101;
            if (g.Author.toLowerCase().lastIndexOf("records") > -1)g.weight *= 2.209;
            var m = g.Title.toLowerCase();
            if (m.lastIndexOf("parody") > -1)g.weight *= 0.203; else if (m.lastIndexOf("official") > -1)g.weight *= 2.51;
            for (m = 0; m < c.length; m++)if (c[m].weight < g.weight) {
                c.splice(m, 0, g);
                return
            }
            c.push(g)
        }
    });
    return c
}, searchFailed:function (b, a) {
    this.lastError = a;
    $.isFunction(b) && b(a)
}, loadFloppyMusic:function () {
    var b = [];
    _.forEach([
        {Author:"sh4dowww90", Description:"Another useless device. Imperial march played by two floppy disk drives. Read the note about the next video: silent.org.pl Homepage: silent.org.pl Post in English: silent.org.pl Po polsku: silent.org.pl",
            VideoID:"yHJOz_y9rZE", Title:"Floppy music DUO - Imperial march", type:"youtube", duration:84, thumbnail:"http://i.ytimg.com/vi/yHJOz_y9rZE/default.jpg", width:480, height:385},
        {Author:"ToxicTripod0", Description:"Another attempt at playing midi on floppy drives", VideoID:"dmwLEf_2Tk8", Title:"Floppy Mario Theme", type:"youtube", duration:51, thumbnail:"http://i.ytimg.com/vi/dmwLEf_2Tk8/default.jpg", width:480, height:385},
        {Author:"Sammy1Am", Description:'My second multi-floppy song, as suggested by Neutrino. I\'m using an Arduino UNO hooked up to three drives (one 5.25" and two 3.5").',
            VideoID:"VJhvRQHNM1w", Title:"Floppy Kirby's Theme", type:"youtube", duration:82, thumbnail:"http://i.ytimg.com/vi/VJhvRQHNM1w/default.jpg", width:480, height:385},
        {Author:"CoolNapkins", Description:"Playing around with an old computer and the floppymidi driver for BeOS 1. Tetris 2. Super Mario 3. Zelda 4. Mr. Roboto 5. 1812 Overture", VideoID:"QkkrQ8xHJlM", Title:"The Floppy Music Machine", type:"youtube", duration:252, thumbnail:"http://i.ytimg.com/vi/QkkrQ8xHJlM/default.jpg", width:480, height:385},
        {Author:"Sammy1Am",
            Description:"Theme from Tetris as played on three floppy drives.", VideoID:"73Sie3yrcnE", Title:"Floppy Korobeiniki (Tetris Theme)", type:"youtube", duration:68, thumbnail:"http://i.ytimg.com/vi/73Sie3yrcnE/default.jpg", width:480, height:385}
    ], function (a) {
        b.push(GS.Models.Video.wrapYoutube(a))
    });
    GS.getLightbox().open("video", {videos:b})
}, loadDubstep:function () {
    var b = GS.Models.Video.wrapYoutube({Author:"tobyharris100", Description:"", VideoID:"QbZhbZBK2ZY", Title:"How To Dance To Dubstep! Parrot", type:"youtube",
        duration:163, thumbnail:"http://i.ytimg.com/vi/QbZhbZBK2ZY/default.jpg", width:480, height:385});
    GS.getLightbox().open("video", {video:b})
}});
GS.Controllers.BaseController.extend("GS.Controllers.VimeoController", {isGSSingleton:true}, {f:null, API_URL:"http://vimeo.com/api/rest/v2/", API_KEY:"6bf5b02fd725f336e2587ee7feadcb42", API_SECRET:"247c4b613fcf18b5", init:function () {
    if (window.$f) {
        this.f = window.$f;
        window.$f = null
    }
    if (window.Froogaloop) {
        if (!this.f)this.f = window.Froogaloop;
        window.Froogaloop = null
    }
    this._super()
}, attachPlayer:function (b, a, c, h, g) {
    if (this.f) {
        var k = "http://player.vimeo.com/video/" + b + "?api=1&player_id=videoVObj" + h + "&autoplay=1";
        if (!b ||
                _.notDefined(b))return false;
        a = a || 480;
        c = c || 385;
        b = $("<iframe />").width(a).height(c).attr("src", k).attr("id", "videoVObj" + h);
        $("#" + h).html(b);
        var m = this.makeVideoObject($("#videoVObj" + h)[0]);
        g && m.addEvent("ready", function () {
            g(m)
        });
        return m[0]
    }
}, makeVideoObject:function (b) {
    var a = this.f(b);
    return{addEvent:function (c, h) {
        a.addEvent(c, h)
    }, play:function () {
        a.api("play")
    }, pause:function () {
        a.api("pause")
    }, isPaused:function (c) {
        a.api("paused", c)
    }, stop:function () {
        a.api("unload")
    }, getCurrentTime:function (c) {
        a.api("getCurrentTime",
                c)
    }, getVideoUrl:function (c) {
        a.api("getVideoUrl", c)
    }}
}, searchCache:{}, search:function (b, a, c) {
    if (!b || b == "")return false;
    this.searchCache[b] && $.isFunction(a) && a(this.searchCache[b]);
    var h = "jQueryVimeo" + OAuth.nonce(10), g = {per_page:10, query:b, method:"vimeo.videos.search", full_response:1, format:"jsonp", callback:h}, k = this.API_URL;
    OAuth.completeRequest({method:"GET", action:k, parameters:g}, {consumerKey:this.API_KEY, consumerSecret:this.API_SECRET});
    g = OAuth.getParameterMap(g);
    k = k + "?" + _.httpBuildQuery(g);
    $.ajax({url:k,
        success:this.callback("searchSuccess", a, c, b), error:this.callback("searchFailed", c), dataType:"jsonp", jsonp:false, jsonpCallback:h, cache:true})
}, searchSuccess:function (b, a, c, h) {
    if (h.videos && h.videos.video) {
        var g = [];
        _.forEach(h.videos.video, function (k) {
            g.push({Description:k.description || "", Duration:parseInt(k.duration), Height:parseInt(k.height), Width:parseInt(k.width), VideoID:k.id, Plays:parseInt(k.number_of_plays), Title:k.title || "", URL:"http://vimeo.com/" + k.id, Thumbnails:k.thumbnails.thumbnail})
        });
        this.searchCache[c] =
                g;
        $.isFunction(b) && b(g)
    } else {
        this.lastError = h;
        $.isFunction(a) && a(h)
    }
}, searchFailed:function (b, a) {
    this.lastError = a;
    $.isFunction(b) && b(a)
}});
(function () {
    function b(k) {
        return"<span class='slick-column-name' data-translate-text='" + k.name + "'>" + $.localize.getString(k.name) + "</span>"
    }

    function a(k, m, n, o, r) {
        k = _.ucwords(o.name);
        m = $("#grid").controller();
        return r.IsVerified == 0.5 ? o.name == "ARTIST" ? m.filter.hasOwnProperty("onlyVerified") && !m.filter.onlyVerified ? '<div class="showMore showingMore" data-translate-text="SEARCH_RESULTS_SHOW_LESS">' + $.localize.getString("SEARCH_RESULTS_SHOW_LESS") + "</div>" : '<div class="showMore" data-translate-text="SEARCH_RESULTS_SHOW_MORE">' +
                $.localize.getString("SEARCH_RESULTS_SHOW_MORE") + "</div>" : "" : ['<a class="field" href="', o.name == "SONG" ? "javascript:_.redirectSong(" + r.SongID + ", event)" : o.name == "USER" ? _.cleanUrl(r.Name, r.UserID, "user") : o.name == "AUTHOR" ? _.cleanUrl(r.UserName, r.UserID, "user") : _.cleanUrl(r[k + "Name"], r[k + "ID"], o.name.toLowerCase()), '" class="ellipsis" title="', n, '">', n, "</a>"].join("")
    }

    function c(k, m, n) {
        return['<span class="filter field ellipsis" title="', n, '">', n, '</span><span class="arrow rowOption"></span>'].join("")
    }

    function h(k, m, n, o, r) {
        if (r.IsVerified == 0.5)return""; else {
            k = GS.getGuts();
            m = r.isFavorite ? " isFavorite" : "";
            o = r.fromLibrary ? " inLibrary" : "";
            var A = r.fromLibrary ? "SONG_ROW_REMOVE_SONG_LIBRARY_TITLE" : "SONG_ROW_ADD_SONG_LIBRARY_TITLE", w = r.isFavorite ? "SONG_ROW_REMOVE_SONG_FAVORITE_TITLE" : "SONG_ROW_ADD_SONG_FAVORITE_TITLE", B = GS.player.getCurrentQueue(), t = "SONG_ROW_ADD_SONG_PLAY_TITLE";
            if (B && B.songs && B.songs.length > 0)t = "SONG_ROW_ADD_SONG_ADD_TO_PLAYING_TITLE";
            B = k.currentTest && k.currentTest.name == "gridRowPlay" ?
                    " AB_" + k.currentTest.name + "_" + k.currentTest.currentGroup : "";
            return k.currentTest && k.currentTest.name == "gridRowPlay" && (k.currentTest.currentGroup == 2 || k.currentTest.currentGroup == 3 || k.currentTest.currentGroup == 4) ? ['<a class="play rowOption', B, '" data-translate-title="', t, '" title="', $.localize.getString(t), '" rel="', r.SongID, '"></a><div class="options ', m, " ", o, '"><a class="rowOption favorite option', m, '" data-translate-title="', w, '" title="', $.localize.getString(w), '" rel="', r.SongID, '"></a><a class="rowOption library option',
                o, '" data-translate-title="', A, '" title="', $.localize.getString(A), '" rel="', r.SongID, '"></a><a class="rowOption more option grid_song_more', o, '" data-translate-title="OPTIONS" title="', $.localize.getString("OPTIONS"), '" rel="', r.SongID, '"></a></div><span class="songName ellipsis">', n, "</span>"].join("") : ['<a class="play rowOption', B, '" data-translate-title="', t, '" title="', $.localize.getString(t), '" rel="', r.SongID, '"></a><div class="options ', m, " ", o, '"><a class="rowOption favorite option', m, '" data-translate-title="',
                w, '" title="', $.localize.getString(w), '" rel="', r.SongID, '"></a><a class="rowOption library option', o, '" data-translate-title="', A, '" title="', $.localize.getString(A), '" rel="', r.SongID, '"></a><a class="rowOption more option grid_song_more', o, '" data-translate-title="OPTIONS" title="', $.localize.getString("OPTIONS"), '" rel="', r.SongID, '"></a></div><span class="songName"><a class="songLink ellipsis" title="', n, '" rel="', r.SongID, '">', n, "</a></span>"].join("")
        }
    }

    function g(k, m, n) {
        n = n == "0" ? "&nbsp;" : n;
        return['<span class="track">', n, "</span>"].join("")
    }

    GS.Controllers.BaseController.extend("GS.Controllers.GridController", {columns:{song:[
        {id:"song", name:"SONG", field:"SongName", cssClass:"song", minWidth:150, formatter:h, behavior:"selectAndMove", sortable:true, columnFormatter:b},
        {id:"artist", name:"ARTIST", field:"ArtistName", cssClass:"artist", minWidth:100, formatter:a, behavior:"selectAndMove", sortable:true, columnFormatter:b},
        {id:"album", name:"ALBUM", field:"AlbumName", cssClass:"album", minWidth:100, formatter:a,
            behavior:"selectAndMove", sortable:true, columnFormatter:b},
        {id:"track", name:"TRACK_NUM", field:"TrackNum", cssClass:"track", minWidth:70, maxWidth:90, formatter:g, behavior:"selectAndMove", sortable:true, columnFormatter:b}
    ], albumSongs:[
        {id:"song", name:"SONG", field:"SongName", cssClass:"song", minWidth:150, formatter:h, behavior:"selectAndMove", sortable:true, columnFormatter:b, minWidth:300},
        {id:"artist", name:"ARTIST", field:"ArtistName", cssClass:"artist", minWidth:100, formatter:a, behavior:"selectAndMove", sortable:true,
            columnFormatter:b},
        {id:"track", name:"TRACK_NUM", field:"TrackNum", cssClass:"track", minWidth:70, maxWidth:90, formatter:g, behavior:"selectAndMove", sortable:true, columnFormatter:b}
    ], queuesong:[
        {id:"song", name:"SONG", field:"SongName", cssClass:"song", minWidth:150, formatter:function (k, m, n, o, r) {
            k = r.isFavorite ? " isFavorite" : "";
            m = r.fromLibrary ? " inLibrary" : "";
            o = r.fromLibrary ? "SONG_ROW_REMOVE_SONG_LIBRARY_TITLE" : "SONG_ROW_ADD_SONG_LIBRARY_TITLE";
            return['<a class="play rowOption ', GS.player.isPlaying ? "" : "paused",
                '" rel="', r.SongID, '"></a><div class="options ', k, " ", m, '"><a class="rowOption favorite option', k, '" rel="', r.SongID, '"></a><a class="rowOption library option', m, '" data-translate-title="', o, '" title="', $.localize.getString(o), '" rel="', r.SongID, '"></a><a class="rowOption more option', m, '" rel="', r.SongID, '"></a></div><span class="songName"><a class="songLink ellipsis" title="', n, '" rel="', r.SongID, '">', n, "</a></span>"].join("")
        }, behavior:"selectAndMove", sortable:true, columnFormatter:b},
        {id:"artist",
            name:"ARTIST", field:"ArtistName", cssClass:"artist", minWidth:100, formatter:function (k, m, n, o, r) {
            k = r.autoplayVote == 1 || r.autoplayVote == 0 && r.source === "user" ? "selected" : "";
            m = r.autoplayVote == -1 ? "selected" : "";
            var A = _.ucwords(o.name);
            o = _.cleanUrl(r[A + "Name"], r[A + "ID"], o.name.toLowerCase());
            return['<div class="options"><a class="rowOption smile rowOption ', k, '"></a><a class="rowOption frown rowOption ', m, '"></a></div><a class="field ellipsis" href="', o, '" title="', n, '">', n, "</a>"].join("")
        }, behavior:"selectAndMove",
            sortable:true, columnFormatter:b},
        {id:"album", name:"ALBUM", field:"AlbumName", cssClass:"album", minWidth:100, formatter:a, behavior:"selectAndMove", sortable:true, columnFormatter:b},
        {id:"track", name:"TRACK_NUM", field:"TrackNum", cssClass:"track", minWidth:70, maxWidth:90, formatter:g, behavior:"selectAndMove", sortable:true, columnFormatter:b}
    ], playlistsong:[
        {id:"song", name:"SONG", field:"SongName", cssClass:"song", minWidth:150, formatter:h, behavior:"selectAndMove", sortable:false, columnFormatter:b},
        {id:"artist",
            name:"ARTIST", field:"ArtistName", cssClass:"artist", minWidth:100, formatter:a, behavior:"selectAndMove", sortable:false, columnFormatter:b},
        {id:"album", name:"ALBUM", field:"AlbumName", cssClass:"album", minWidth:100, formatter:a, behavior:"selectAndMove", sortable:false, columnFormatter:b}
    ], album:[
        {id:"album", name:"ALBUM", field:"AlbumName", cssClass:"albumDetail", formatter:function (k, m, n, o, r) {
            k = '<a href="' + r.toArtistUrl() + '">' + r.ArtistName + "</a>";
            $("<span></span>").localeDataString("BY_ARTIST", {artist:k});
            return['<a href="',
                r.toUrl(), '" class="image insetBorder height30"><img src="', r.getImageURL(30), '" width="30" height="30" class="avatar" /></a><a href="', r.toUrl(), '" class="title ellipsis">', r.AlbumName, "</a>"].join("")
        }, behavior:"selectAndMove", sortable:true, columnFormatter:b},
        {id:"artist", name:"ARTIST", field:"ArtistName", cssClass:"albumArtist", formatter:a, behavior:"selectAndMove", sortable:true, columnFormatter:b}
    ], artist:[
        {id:"artist", name:"ARTIST", field:"ArtistName", cssClass:"artist-row", formatter:function (k, m, n, o, r) {
            k = '<a href="' + r.toUrl() + '">' + r.ArtistName + "</a>";
            $("<span></span>").localeDataString("BY_ARTIST", {artist:k});
            return['<a href="', r.toUrl(), '" class="image insetBorder height30"><img src="', r.getImageURL(30), '" width="30" height="30" class="avatar" /></a><a href="', r.toUrl(), '" class="title ellipsis">', r.ArtistName, "</a>"].join("")
        }, behavior:"selectAndMove", sortable:true, columnFormatter:b}
    ], playlist:[
        {id:"playlist", name:"PLAYLIST", field:"PlaylistName", cssClass:"playlist", formatter:function (k, m, n, o, r) {
            m = r.isSubscribed() ? "subscribed" : "";
            n = GS.page.activePage.objType == "subscribed" ? "alternate" : "";
            k = r && r.NumSongs && r.Artists ? true : false;
            o = r.isSubscribed() ? "Unsubscribe" : "Subscribe";
            m = r.UserID === GS.user.UserID ? "" : ['<a class="subscribe ', m, n, '" rel="', r.PlaylistID, '"><span>', o, "</span></a>"].join("");
            if (k) {
                k = r.Artists.split(",");
                n = k.length;
                k.splice(3, k.length);
                n = n > k.length ? "..." : "";
                return['<a href="', _.cleanUrl(r.PlaylistName, r.PlaylistID, "playlist"), '" class="image insetBorder height30"><img src="',
                    r.getImageURL(30), '" width="30" height="30" class="albumart" /></a>', m, '<p><span class="title"><a class="v-ellip" href="', _.cleanUrl(r.PlaylistName, r.PlaylistID, "playlist"), '">', _.cleanText(r.PlaylistName), " (", r.NumSongs, ' Songs) </a></span><span class="artists">', k.join(", "), n, "</span></p>"].join("")
            } else return['<a href="', _.cleanUrl(r.PlaylistName, r.PlaylistID, "playlist"), '" class="image insetBorder height30"><img src="', r.getImageURL(30), '" width="30" height="30" class="albumart" /></a>', m,
                '<p><span class="title"><a class="v-ellip" href="', _.cleanUrl(r.PlaylistName, r.PlaylistID, "playlist"), '">', _.cleanText(r.PlaylistName), "</a></span></p>"].join("")
        }, behavior:"selectAndMove", sortable:true, columnFormatter:b},
        {id:"username", name:"AUTHOR", field:"UserName", cssClass:"playlistAuthor", formatter:a, behavior:"selectAndMove", sortable:true, columnFormatter:b}
    ], user:[
        {id:"username", name:"USER", field:"Name", cssClass:"user", formatter:function (k, m, n, o, r) {
            k = r.isFavorite ? " following" : "";
            m = r.isFavorite ?
                    "UNFOLLOW" : "FOLLOW";
            k = r.UserID === GS.user.UserID ? "" : ['<a class="follow ', k, '" data-follow-userid="', r.UserID, '"><span data-translate-text="' + m + '">', $.localize.getString(m), "</span></a>"].join("");
            m = _.cleanUrl(r.Name, r.UserID, "user");
            n = '<div class="status ' + r.getVipPackage() + '"></div>';
            return['<a href="', m, '" class="who image">', n, '<img src="', r.getImageURL(30), '" width="30" height="30" class="avatar" /></a>', k, '<a href="', m, '" class="username">', r.Name, '</a><span class="location">', r.Country, "</span>"].join("")
        },
            behavior:"selectAndMove", sortable:true, columnFormatter:b}
    ], albumFilter:[
        {id:"album", name:"ALBUM", field:"AlbumName", cssClass:"cell-title", formatter:c, behavior:"selectAndMove", sortable:false, collapsable:true, columnFormatter:b}
    ], artistFilter:[
        {id:"artist", name:"ARTIST", field:"ArtistName", cssClass:"cell-title", formatter:c, behavior:"selectAndMove", sortable:false, collapsable:true, columnFormatter:b}
    ], event:[
        {id:"date", name:"DATE", field:"StartTime", cssClass:"cell-title", formatter:function (k, m, n, o, r) {
            k = r.StartTime.split(" ");
            m = k[1] ? k[1].split(":") : "00:00:00";
            k = k[0].split("-");
            newDate = new Date(parseInt(k[0], 10), parseInt(k[1], 10) - 1, parseInt(k[2], 10), parseInt(m[0], 10), parseInt(m[1], 10), parseInt(m[2], 10));
            return['<div class="field event_calendar" title="', newDate.format("D M j Y"), '"><span class="field month" >', newDate.format("M"), '</span><span class="field day" >', newDate.format("j"), "</span></div>"].join("")
        }, behavior:"none", sortable:false, columnFormatter:b, minWidth:40, maxWidth:45},
        {id:"artist", name:"ARTISTS", field:"ArtistName",
            cssClass:"cell-title", formatter:function (k, m, n) {
            k = (n || "").split(", ");
            m = "";
            n = [];
            for (var o = 0; o < k.length; o++) {
                m = o === k.length - 1 ? "" : ",&nbsp;";
                n.push([k[o], m].join(""))
            }
            return['<div class="filter"><a class="field url event_tickets" title="', $.localize.getString("BUY_TICKETS"), '">', $.localize.getString("BUY_TICKETS"), '</a><span class="field artist ellipsis">', n.join(""), "</span></div>"].join("")
        }, behavior:"none", sortable:false, columnFormatter:b},
        {id:"location", name:"LOCATION", field:"Location", cssClass:"cell-title",
            formatter:function (k, m, n, o, r) {
                return['<div class="filter"><span class="field ellipsis venue" title="', r.VenueName, '">', r.VenueName, '</span><span class="field ellipsis city" title="', r.City, '">', r.City, "</span></div>"].join("")
            }, behavior:"none", sortable:false, columnFormatter:b}
    ], topSongs:[
        {id:"song", name:"TRACK", field:"SongName", cssClass:"song", formatter:h, behavior:"selectAndMove", sortable:false, columnFormatter:b},
        {id:"album", name:"ALBUM", field:"AlbumName", cssClass:"album", formatter:a, behavior:"selectAndMove",
            sortable:true, columnFormatter:b}
    ], station:[
        {id:"station", name:"STATIONS", field:"StationTitle", cssClass:"station", formatter:function (k, m, n, o, r) {
            return['<a class="play rowOption" data-translate-title="STATION_ROW_PLAY_TITLE" title="', $.localize.getString("STATION_ROW_PLAY_TITLE"), '" data-tagid="', r.TagID, '"></a><span class="field ellipsis stationName" data-translate-text="', n, '" title="', $.localize.getString(n), '">', $.localize.getString(n), "</span>"].join("")
        }, behavior:"selectAndMove", sortable:true,
            columnFormatter:b}
    ]}, options:{enableCellNavigation:true, enableCellRangeSelection:true, onCellRangeSelected:function () {
        console.log("cell range select", arguments)
    }, onSelectedRowChanged:function () {
        console.log("selectd row change", arguments)
    }, forceFitColumns:true, rowHeight:25, editable:false, enableAddRow:false, rowCssClasses:function (k, m, n) {
        var o = "";
        if (k && k.IsVerified == 1)o = "verified"; else if (k && k.IsVerified == 0.5)o = "verifiedDivider";
        if (m == n - 1)o += " slick-row-last";
        return o
    }, isSelectable:function (k) {
        return k.IsVerified ===
                0.5 ? false : true
    }, dragProxy:function (k) {
        var m = k;
        if (k.length > 1)if (k[0]instanceof GS.Models.Song)m = _.getString("SELECTION_SONGS_COUNT", {count:k.length}); else if (k[0]instanceof GS.Models.Playlist)m = _.getString("SELECTION_PLAYLIST_COUNT", {count:k.length}); else if (k[0]instanceof GS.Models.Album)m = _.getString("SELECTION_ALBUM_COUNT", {count:k.length}); else {
            if (k[0]instanceof GS.Models.Artist)m = _.getString("SELECTION_ARTIST_COUNT", {count:k.length})
        } else if (k instanceof Array)m = k[0].toProxyLabel ? k[0].toProxyLabel() :
                k[0];
        return['<div class="status"></div><span class="info"><span class="text">', m, "</span></span>"].join("")
    }, disableMultiSelect:false}, rowHeights:{song:25, album:41, artist:41, playlist:41, user:41, event:41, station:25}, columnsByName:{song:"song", SongName:"song", album:"album", AlbumName:"album", artist:"artist", ArtistName:"artist", playlist:"playlist", PlaylistName:"playlist", user:"user", Name:"user", TrackNum:"track", tracknum:"track", track:"track", event:"user", Event:"user"}, defaultSort:{song:"ArtistName", album:"TrackNum",
        artist:"Popularity", user:"Name", playlist:"PlaylistName"}, defaultMultiSorts:{SongName:["SongName", "SongID", "GridKey"], ArtistName:["ArtistName", "AlbumName", "TrackNum", "SongName", "SongID", "GridKey"], AlbumName:["AlbumName", "TrackNum", "SongName", "SongID", "GridKey"], TrackNum:["TrackNum", "SongName", "SongID"], Popularity:["Popularity", "Weight", "NumPlays", "ArtistName", "AlbumName", "TrackNum", "SongName", "SongID"]}, numericColumns:{Rank:true, Sort:true, TrackNum:true, Popularity:true, Weight:true, NumPlays:true, Score:true,
        IsVerified:true, GridKey:true, GeoDist:true}, forcedSortDirections:{TSAdded:false, TSFavorited:false, Popularity:false, TrackNum:true}, init:function () {
        this._super();
        window.ctrlDown = false;
        $(document).keydown(this.callback(function (k) {
            if (!window.ctrlDown && (k.ctrlKey || k.metaKey || k.shiftKey || k.keyCode == 16 || k.keyCode == 17)) {
                $("div.gs_grid.songs .grid-canvas").addClass("noLinks");
                window.ctrlDown = true
            }
        }));
        $(document).keyup(this.callback(function (k) {
            if (window.ctrlDown && (!(k.ctrlKey || k.metaKey || k.shiftKey) || k.keyCode ==
                    16 || k.keyCode == 17)) {
                $("div.gs_grid.songs .grid-canvas").removeClass("noLinks");
                window.ctrlDown = false
            }
        }))
    }, resizeTimer:null, resizeAfterRender:function () {
        this.resizeTimer && clearTimeout(this.resizeTimer);
        this.resizeTimer = setTimeout(function () {
            GS.resize();
            $(".gs_grid").resize()
        }, 500)
    }}, {dataView:null, grid:null, idProperty:null, selectedRowIDs:[], currentRow:0, filter:{artistIDs:false, albumIDs:false, onlyVerified:false}, sortCol:"", sortCols:[], sortDir:1, origSortDir:1, onInitSort:true, sortNumeric:false, pastSorts:{},
        searchString:"", data:null, columns:null, options:null, type:null, SMALL_GRID_WIDTH:600, resizeSelf:function () {
            if (this.element)this.element.hasClass("songList") ? this.element.css({height:Math.min(200, Math.max(25, (this.data || []).length * this.options.rowHeight)), width:this.element.parent().innerWidth()}) : this.element.css({height:Math.min(this.element.parent().height(), $("#page").height()), width:this.element.parent().width()});
            this.grid && this.grid.resizeAndRender()
        }, init:function (k, m, n, o, r, A) {
            function w(E, x) {
                var y,
                        H, I, p, q = 1, s = false, u = false;
                if (t.options.isFilter || t.options.useVerifiedSort)t.sortCols = ["IsVerified", t.sortCol];
                for (I = 0; I < t.sortCols.length; I++) {
                    p = t.sortCols[I];
                    q = p === "IsVerified" ? t.sortDir ? -1 : 1 : 1;
                    try {
                        if (t.Class.numericColumns[p]) {
                            y = parseFloat(E[p], 10);
                            H = parseFloat(x[p], 10);
                            if (isNaN(y))y = 0;
                            if (isNaN(H))H = 0;
                            if (p === "TrackNum") {
                                if (y !== 0 && H === 0)return t.sortDir ? -1 : 1;
                                if (H !== 0 && y === 0)return t.sortDir ? 1 : -1
                            }
                        } else {
                            y = E[p].toString().toLowerCase();
                            H = x[p].toString().toLowerCase()
                        }
                        if (y !== H)return(y > H ? 1 : -1) * q
                    } catch (C) {
                        if (_.notDefined(E) ||
                                isNaN(E))s = true;
                        if (_.notDefined(x) || isNaN(x))u = true;
                        if (s && !u)return-1;
                        if (!s && u)return 1;
                        return 0
                    }
                }
                return 0
            }

            r = _.orEqual(r, "song");
            o = _.orEqual(o, {});
            o.rowHeight = _.orEqual(o.rowHeight, GS.Controllers.GridController.rowHeights[r]);
            o.allowDragSort = _.orEqual(o.allowDragSort, false);
            o.allowDropOn = _.orEqual(o.allowDropOn, false);
            o.allowDuplicates = _.orEqual(o.allowDuplicates, false);
            o.useVerifiedSort = _.orEqual(o.useVerifiedSort, false);
            o.searchText = _.orEqual(o.searchText, "searchText");
            o = $.extend({}, GS.Controllers.GridController.options,
                    o);
            if (o.allowDragSort)o.autoDragScroll = true;
            this.subscribe("gs.auth." + r + ".update", this.callback(r + "Change"));
            this.subscribe("gs.auth.favorites." + r + "s.update", this.callback(r + "FavoritesChange"));
            this.subscribe("gs.player.queue.change", this.callback("queueChange"));
            var B = GS.player.getCurrentQueue();
            this.element.toggleClass("hasSongs", B && B.songs && B.songs.length > 0);
            this.data = m;
            this.columns = n;
            this.options = o;
            this.type = r;
            this.idProperty = this.grid = this.dataView = null;
            this.selectedRowIDs = [];
            this.currentRow =
                    0;
            this.filter = _.orEqual(o.filters, {artistIDs:false, albumIDs:false, onlyVerified:false});
            this.sortCol = _.orEqual(o.sortCol, GS.Controllers.GridController.defaultSort[r]);
            this.sortCols = _.orEqual(GS.Controllers.GridController.defaultMultiSorts[this.sortCol], $.makeArray(this.sortCol));
            this.origSortDir = this.sortDir = (this.sortDir = _.orEqual(o.sortDir, 1)) ? true : false;
            this.onInitSort = _.orEqual(o.onInitSort, false);
            this.sortNumeric = GS.Controllers.GridController.numericColumns[this.sortCol] ? true : false;
            this.pastSorts =
            {};
            this.searchString = "";
            this.allowDragSort = _.orEqual(o.allowDragSort, false);
            this.allowDropOn = _.orEqual(o.allowDropOn, false);
            var t = this;
            this.idProperty = _.orEqual(A, _.ucwords(r) + "ID");
            this.dataView = new Slick.Data.DataView;
            this.grid = new Slick.Grid($(k), this.dataView.rows, this.columns, this.options);
            this.dataView.setAllowDuplicates(this.options.allowDuplicates);
            this.grid.onContextMenu = function (E, x) {
                E.preventDefault();
                var y = t.grid.getSelectedRows().sort(function (p, q) {
                    return p - q
                }), H = [];
                if (!(y.length > 1) ||
                        y.indexOf(x) === -1) {
                    t.currentRow = x;
                    t.grid.setSelectedRows([x]);
                    t.grid.onSelectedRowsChanged();
                    y = [x]
                }
                switch (t.type) {
                    case "artist":
                        H = GS.Models.Artist.getOneFromCache(t.dataView.rows[x].ArtistID).getContextMenu();
                        break;
                    case "album":
                        H = GS.Models.Album.getOneFromCache(t.dataView.rows[x].AlbumID).getContextMenu();
                        break;
                    case "song":
                        if (y.length > 1) {
                            H = [];
                            for (var I = 0; I < y.length; I++)H.push(t.dataView.rows[y[I]].SongID);
                            H = t.getContextMenuMultiselectForSong(H)
                        } else H = t.getContextMenuForSong(t.dataView.rows[x].SongID);
                        break;
                    case "playlist":
                        H = GS.Models.Playlist.getOneFromCache(t.dataView.rows[x].PlaylistID).getContextMenu();
                        break;
                    case "station":
                        H = GS.Models.Station.getOneFromCache(t.dataView.rows[x].StationID).getContextMenu();
                        break;
                    case "user":
                        H = GS.Models.User.getOneFromCache(t.dataView.rows[x].UserID).getContextMenu();
                        break
                }
                $(E.target).jjmenu(E, H, null, {xposition:"mouse", yposition:"mouse", show:"show", className:"contextmenu", shouldLog:true})
            };
            this.grid.onDblClick = function (E, x) {
                var y = t.dataView.rows[x];
                if (!($(E.target).parents(".options").length >
                        0))if (!$(E.target).is("a.play"))if (t.options.isNowPlaying && y.queueSongID)GS.player.playSong(y.queueSongID); else if (y.SongID) {
                    var H = GS.Controllers.PageController.getActiveController().getPlayContext();
                    GS.player.addSongAndPlay(y.SongID, H);
                    H = {songID:y.SongID, rank:parseInt(x, 10) + 1};
                    if (y.ppVersion)H.ppVersion = y.ppVersion;
                    GS.getGuts().logEvent("doubleClickToPlay", H)
                } else y.StationID && GS.player.setAutoplay(true, y.StationID)
            };
            this.grid.onKeyDown = function (E) {
                if (E.which === 65 && (E.ctrlKey || E.metaKey)) {
                    E = [];
                    t.selectedRowIDs =
                            [];
                    for (var x = 0; x < t.dataView.rows.length; x++) {
                        E.push(x);
                        t.selectedRowIDs.push(t.dataView.rows[x].id)
                    }
                    t.currentRow = t.dataView.rows.length - 1;
                    t.grid.setSelectedRows(_.arrUnique(E));
                    t.grid.onSelectedRowsChanged();
                    return true
                }
                if (t.handleKeyPress(E))return true;
                return $(E.target).is("input,textarea,select") ? true : false
            };
            this.grid.onSelectedRowsChanged = function () {
                t.selectedRowIDs = [];
                var E, x, y = t.grid.getSelectedRows().sort(function (I, p) {
                    return I - p
                }), H = {};
                if (t.options.isFilter) {
                    if (y.length === 1 && y[0] === 0 && t.dataView.getItemByIdx(0)[t.idProperty] ===
                            -1)y = [];
                    E = y.indexOf(0);
                    if (E > -1) {
                        y.splice(E, 1);
                        t.grid.setSelectedRows(y);
                        t.grid.onSelectedRowsChanged();
                        return
                    }
                    y.length === 0 ? $(".slick-row[row=0]", t.element).addClass("selected") : $(".slick-row[row=0]", t.element).removeClass("selected")
                }
                E = 0;
                for (l = y.length; E < l; E++)if (x = t.dataView.rows[y[E]]) {
                    t.selectedRowIDs.push(x[t.idProperty]);
                    H[x[t.idProperty]] = true
                }
                t.selectedRowIDs = _.arrUnique(t.selectedRowIDs);
                if (t.options.isFilter)if (t.type === "album") {
                    if (y.length === 0)$(".gs_grid.songs").controller().filter.albumIDs =
                            false; else $(".gs_grid.songs").controller().filter.albumIDs = H;
                    $(".gs_grid.songs").controller().dataView.refresh()
                } else if (t.type === "artist") {
                    if (y.length === 0) {
                        $(".gs_grid.songs").controller().filter.artistIDs = false;
                        $(".gs_grid.albums").controller().filter.artistIDs = false
                    } else {
                        $(".gs_grid.songs").controller().filter.artistIDs = H;
                        $(".gs_grid.albums").controller().filter.artistIDs = H
                    }
                    $(".gs_grid.songs").controller().dataView.refresh();
                    $(".gs_grid.albums").controller().dataView.refresh();
                    $(".gs_grid.albums").controller().grid.onSelectedRowsChanged()
                }
                t.currentRow =
                        _.orEqual(t.grid.getSelectedRows()[y.length - 1], 0);
                $.publish("gs.grid.selectedRows", {len:t.selectedRowIDs.length, type:t.type})
            };
            $(".slick-header-column").click(function () {
                $(this).addClass("selected");
                $(this).siblings().removeClass("selected")
            });
            this.grid.onSort = function (E, x, y) {
                var H;
                if (_.notDefined(x))x = _.defined(t.pastSorts[E]) && E == t.sortCol ? !t.pastSorts[E] : true;
                t.sortColData = E;
                t.sortName = E.name ? E.name : null;
                t.sortCol = E.field ? E.field : E;
                t.sortCols = _.orEqual(GS.Controllers.GridController.defaultMultiSorts[t.sortCol],
                        $.makeArray(t.sortCol));
                t.sortDir = x ? true : false;
                t.element.find(".slick-sort-indicator").removeClass("slick-sort-indicator-asc").removeClass("slick-sort-indicator-desc");
                H = GS.Controllers.GridController.columnsByName[t.sortCol];
                forcedDir = GS.Controllers.GridController.forcedSortDirections[t.sortCol];
                if (_.defined(H))t.grid.setSortColumn(H, t.sortDir); else t.sortDir = _.defined(forcedDir) ? forcedDir : t.origSortDir;
                t.pastSorts[t.sortCol] = t.sortDir;
                t.sortNumeric = GS.Controllers.GridController.numericColumns[t.sortCol] ?
                        true : false;
                t.dataView.sort(w, t.sortDir);
                if (!y && E) {
                    y = $("button.dropdownButton.sort").find("span.label");
                    if (t.sortName) {
                        if (t.sortName == "PLAYLIST" || t.sortName == "USER")t.sortName = "NAME";
                        y.attr("data-translate-text", "SORT_BY_" + t.sortName);
                        y.text($.localize.getString("SORT_BY_" + t.sortName))
                    } else if (t.columns) {
                        H = t.columns.length;
                        for (var I = 0; I < H; I++)if (t.columns[I] && t.columns[I].field === t.sortCol) {
                            y.attr("data-translate-text", "SORT_BY_" + t.columns[I].name);
                            y.text($.localize.getString("SORT_BY_" + t.columns[I].name));
                            break
                        }
                    }
                    if (GS.page.activePageName === "UserMusicController" && GS.page.activePageIdentifier == GS.user.UserID)t.sortColData === "TSAdded" ? GS.store.remove("gs.sort.user.music") : GS.store.set("gs.sort.user.music", {sortCol:E, sortDir:x, onInitSort:false})
                }
            };
            t.dataView.onRowCountChanged.subscribe(function () {
                t.grid.updateRowCount()
            });
            t.dataView.onRowsChanged.subscribe(function (E) {
                t.grid.removeRows(E);
                t.grid.resizeAndRender();
                if (t.selectedRowIDs.length > 0) {
                    E = [];
                    for (var x, y = 0, H = t.selectedRowIDs.length; y < H; y++) {
                        x = t.dataView.getRowById(t.selectedRowIDs[y]);
                        x !== undefined && E.push(x)
                    }
                    t.currentRow = _.orEqual(x, 0);
                    t.grid.setSelectedRows(_.arrUnique(E));
                    t.grid.onSelectedRowsChanged()
                }
            });
            t.grid.onBeforeMoveRows = function () {
                if (t.allowDragSort)return true;
                return false
            };
            t.grid.onMoveRows = function (E, x) {
                var y = [], H = [], I = [], p = t.dataView.getItems(), q, s, u;
                if (!(!t.allowDragSort || t.sortCol !== "Sort"))if (t.options.playlistID)(y = GS.Models.Playlist.getOneFromCache(t.options.playlistID)) && y.moveSongsTo(E, x); else {
                    q = p.slice(0, x);
                    s = p.slice(x, p.length);
                    for (u = 0; u < E.length; u++) {
                        p[E[u]].Sort =
                                u;
                        y.push(p[E[u]])
                    }
                    E.sort().reverse();
                    for (u = 0; u < E.length; u++) {
                        p = E[u];
                        p < x ? q.splice(p, 1) : s.splice(p - x, 1)
                    }
                    p = q.concat(y.concat(s));
                    for (u = 0; u < p.length; u++)p[u].Sort = u + 1;
                    t.data = p;
                    for (u = 0; u < E.length; u++)H.push(q.length + u);
                    H = _.arrUnique(H);
                    t.currentRow = H[H.length - 1];
                    t.dataView.beginUpdate();
                    t.grid.setSelectedRows(H);
                    t.grid.onSelectedRowsChanged();
                    t.dataView.setItems(t.data, t.idProperty);
                    t.dataView.endUpdate();
                    t.dataView.refresh();
                    if (t.options.isNowPlaying) {
                        q = x;
                        for (u = 0; u < y.length; u++) {
                            I.push(y[u].queueSongID);
                            H = $("#queue .queueSong:nth-child(" + x + ")");
                            H.after($("#" + y[u].queueSongID).remove());
                            x += 1
                        }
                        GS.player.moveSongsTo(I, q)
                    }
                }
            };
            if (t.allowDragSort || t.allowDropOn) {
                o = t.grid.getOptions();
                var v = $("#grid .slick-viewport"), D = o.scrollPane ? $(o.scrollPane) : v, F = function (E, x) {
                    var y = E.clientY - v.find(".grid-canvas").offset().top;
                    if (v.within(E.clientX, E.clientY).length > 0) {
                        $(x.proxy).addClass("valid").removeClass("invalid");
                        if (t.allowDragSort) {
                            y = Math.max(0, Math.min(Math.round(y / o.rowHeight), m ? m.length : 0));
                            if (y !== x.gridInsertIndex) {
                                if (t.onBeforeMoveRows &&
                                        t.onBeforeMoveRows(t.grid.getSelectedRows(), y) === false) {
                                    $("div.slick-reorder-guide").css("top", -1000).show();
                                    x.canMove = false
                                } else {
                                    $("div.slick-reorder-guide").css({top:y * o.rowHeight + o.padding}).show();
                                    x.canMove = true
                                }
                                x.gridInsertIndex = y
                            }
                        } else {
                            y = $(".slick-row").within(x.clientX, x.clientY).eq(0);
                            if (y.length) {
                                y.addClass("hover").siblings().removeClass("hover");
                                x.gridInsertIndex = parseInt(y.attr("row"), 10)
                            }
                        }
                    } else {
                        $(x.proxy).addClass("invalid").removeClass("valid");
                        $("div.slick-reorder-guide").hide()
                    }
                    if (o.autoDragScroll) {
                        var H =
                                D.within(E.clientX, E.clientY).length > 0;
                        y = Math.ceil(D.height() * 0.2);
                        var I = o.rowHeight * (m ? m.length : 0);
                        if (H)if (!($("#shortcuts").within(E.clientX, E.clientY).length > 0 || $("#footer").within(E.clientX, E.clientY).length > 0))if (x.gridAutoScrollWaitTimeout) {
                            H = function () {
                                var q = (new Date).valueOf();
                                if (x.gridAutoScrollHasWaited && (!x.gridAutoScrollLast || q - x.gridAutoScrollLast >= 200)) {
                                    x.gridAutoScrollLast = q;
                                    D.scrollTop(Math.max(0, D.scrollTop() - 41))
                                }
                            };
                            var p = function () {
                                var q = (new Date).valueOf();
                                if (x.gridAutoScrollHasWaited &&
                                        (!x.gridAutoScrollLast || q - x.gridAutoScrollLast >= 200)) {
                                    x.gridAutoScrollLast = q;
                                    D.scrollTop(Math.min(I, D.scrollTop() + 41))
                                }
                            };
                            if (D.offset().top + y > E.clientY) {
                                H();
                                clearInterval(x.gridAutoScrollInterval);
                                x.gridAutoScrollInterval = setInterval(H, 200)
                            } else if (D.offset().top + D.height() - y < E.clientY) {
                                p();
                                clearInterval(x.gridAutoScrollInterval);
                                x.gridAutoScrollInterval = setInterval(p, 200)
                            } else {
                                clearTimeout(x.gridAutoScrollWaitTimeout);
                                x.gridAutoScrollWaitTimeout = false;
                                x.gridAutoScrollHasWaited = false;
                                clearInterval(x.gridAutoScrollInterval);
                                x.gridAutoScrollInterval = false
                            }
                        } else x.gridAutoScrollWaitTimeout = setTimeout(function () {
                            x.gridAutoScrollHasWaited = true;
                            x.gridAutoScrollWaitTimeout = false
                        }, 500)
                    }
                };
                D.data("ignoreForOverDrop", true).bind("dropinit",
                        function () {
                            this.updateDropOnDrag = F
                        }).bind("dropstart",
                        function (E, x) {
                            if (!x.draggedItems) {
                                this.updateDropOnDrag = null;
                                return false
                            }
                            $("<div class='slick-reorder-guide'/>").css({position:"absolute", zIndex:"99998", width:v.innerWidth() - o.padding * 2, top:-1000, right:o.padding}).appendTo(v);
                            x.gridInsertIndex =
                                    -1;
                            x.gridAutoScrollHasWaited = false;
                            x.gridAutoScrollWaitTimeout = false
                        }).bind("dropend",
                        function (E, x) {
                            v.find(".slick-reorder-guide").remove();
                            v.find(".slick-row").removeClass("hover");
                            clearInterval(x.gridAutoScrollInterval);
                            x.gridAutoScrollInterval = false
                        }).bind("drop", function (E, x) {
                            function y(I, p) {
                                p = _.orEqual(p, new GS.Models.PlayContext);
                                var q, s = [], u;
                                for (q = 0; q < I.length; q++)s.push(I[q].SongID);
                                if (t.allowDropOn)(q = t.dataView.getItemByIdx(x.gridInsertIndex)) && q instanceof GS.Models.Playlist && q.addSongs(s,
                                        null, true); else if (t.options.playlistID) {
                                    q = GS.Models.Playlist.getOneFromCache(t.options.playlistID);
                                    u = x.gridInsertIndex !== -1 ? x.gridInsertIndex : null;
                                    q.addSongs(s, u)
                                } else {
                                    u = x.gridInsertIndex !== -1 ? x.gridInsertIndex : GS.player.INDEX_DEFAULT;
                                    GS.player.addSongsToQueueAt(s, u, false, p)
                                }
                            }

                            var H;
                            if (v.within(E.clientX, E.clientY).length > 0)if (x.draggedItemsSource == "grid" && t.grid.onMoveRows && x.canMove) {
                                t.grid.onMoveRows(t.grid.getSelectedRows(), x.gridInsertIndex);
                                GS.getGuts().gaTrackEvent("grid", "dragSuccess")
                            } else {
                                x.draggedItemsType =
                                        x.draggedItemsType || _.guessDragType(x.draggedItems);
                                switch (x.draggedItemsType) {
                                    case "song":
                                        y(x.draggedItems, x.draggedItemsContext);
                                        break;
                                    case "album":
                                        for (H = 0; H < x.draggedItems.length; H++)x.draggedItems[H].getSongs(function (I) {
                                            I.sort(GS.Models.Album.defaultSongSort);
                                            y(I, new GS.Models.PlayContext(GS.player.PLAY_CONTEXT_ALBUM, x.draggedItems[H]))
                                        }, null, true, {async:false});
                                        break;
                                    case "artist":
                                        for (H = 0; H < x.draggedItems.length; H++)x.draggedItems[H].getSongs(function (I) {
                                            I.sort(GS.Models.Artist.defaultSongSort);
                                            y(I, new GS.Models.PlayContext(GS.player.PLAY_CONTEXT_ARTIST, x.draggedItems[H]))
                                        }, false, null, {async:false});
                                        break;
                                    case "playlist":
                                        for (H = 0; H < x.draggedItems.length; H++)x.draggedItems[H].getSongs(function (I) {
                                            y(I, new GS.Models.PlayContext(GS.player.PLAY_CONTEXT_PLAYLIST, x.draggedItems[H]))
                                        }, null, {async:false});
                                        break;
                                    case "user":
                                        for (H = 0; H < x.draggedItems.length; H++)x.draggedItems[H].getFavoritesByType("Song", function (I) {
                                                    y(I, new GS.Models.PlayContext(GS.player.PLAY_CONTEXT_USER, x.draggedItems[H]))
                                                }, null,
                                                {async:false});
                                        break;
                                    default:
                                        console.error("grid drop, invalid drag type", x.draggedItemsType);
                                        return
                                }
                            }
                        })
            }
            t.dataView.beginUpdate();
            t.dataView.setItems(t.data, t.idProperty);
            t.dataView.setFilter(function (E) {
                if (t.options.isFilter && E.isFilterAll)return true;
                if (t.searchString != "" && (!E.hasOwnProperty(t.options.searchText) || E[t.options.searchText].toLowerCase().indexOf(t.searchString) == -1))return false;
                if (t.filter.hasOwnProperty("onlyVerified") && t.filter.onlyVerified && E.IsVerified === 0)return false;
                if (t.filter.artistIDs &&
                        !t.filter.artistIDs[E.ArtistID])return false;
                if (t.filter.albumIDs && !t.filter.albumIDs[E.AlbumID])return false;
                return true
            });
            t.sortCol !== "" && t.grid.onSort(t.sortCol, t.sortDir, t.onInitSort);
            $(window).resize();
            t.dataView.endUpdate();
            if (t.options.isFilter) {
                t.grid.setSelectedRows([0]);
                t.grid.onSelectedRowsChanged()
            }
            this.Class.resizeAfterRender()
        }, update:function () {
        }, songChange:function (k) {
            var m = $("#page").is(".gs_page_playlist") ? GS.Controllers.PageController.getActiveController() : false;
            m = m ? m.playlist.songIDLookup[k.SongID] :
                    this.dataView.getItemById(k[this.idProperty]);
            if (!m)return false;
            var n = ["IsVerified", "TSAdded", "TSFavorited", "Sort", "Popularity"];
            for (var o in k)if (k.hasOwnProperty(o) && n.indexOf(o) == -1)m[o] = k[o];
            this.dataView.updateItem(m[this.idProperty], m)
        }, albumChange:function (k) {
            var m = this.dataView.getItemById(k[this.idProperty]);
            if (!m)return false;
            for (var n in k)if (k.hasOwnProperty(n))m[n] = k[n];
            this.dataView.updateItem(m.AlbumID, m)
        }, artistChange:function (k) {
            var m = this.dataView.getItemById(k[this.idProperty]);
            if (!m)return false;
            for (var n in k)if (k.hasOwnProperty(n))m[n] = k[n];
            this.dataView.updateItem(m.ArtistID, m)
        }, playlistChange:function (k) {
            var m = this.dataView.getItemById(k[this.idProperty]);
            if (m) {
                for (var n in k)if (k.hasOwnProperty(n))m[n] = k[n];
                this.dataView.updateItem(m.PlaylistID, m)
            }
        }, userChange:function (k) {
            var m = this.dataView.getItemById(k[this.idProperty]);
            if (!m)return false;
            for (var n in k)if (k.hasOwnProperty(n))m[n] = k[n];
            this.dataView.updateItem(m.UserID, m)
        }, songFavoritesChange:function () {
            this.data =
                    this.dataView.getItems();
            for (var k = 0; k < this.data.length; k++)if (GS.user.favorites.songs[this.data[k].SongID]) {
                this.data[k].isFavorite = 1;
                this.data[k].fromLibrary = 1;
                this.dataView.updateItem(this.data[k].SongID, this.data[k])
            }
            this.dataView.beginUpdate();
            this.dataView.setItems(this.data, "SongID");
            this.dataView.endUpdate()
        }, albumFavoritesChange:function () {
            this.data = this.dataView.getItems();
            for (var k = 0; k < this.data.length; k++)if (GS.user.favorites.albums[this.data[k].AlbumID]) {
                this.data[k].isFavorite = 1;
                this.dataView.updateItem(this.data[k].SongID,
                        this.data[k])
            }
            this.dataView.beginUpdate();
            this.dataView.setItems(this.data, "AlbumID");
            this.dataView.endUpdate()
        }, artistFavoritesChange:function () {
            this.data = this.dataView.getItems();
            for (var k = 0; k < this.data.length; k++)if (GS.user.favorites.artists[this.data[k].ArtistID])this.data[k].isFavorite = 1;
            this.dataView.beginUpdate();
            this.dataView.setItems(this.data, "ArtistID");
            this.dataView.endUpdate()
        }, playlistFavoritesChange:function () {
            this.data = this.dataView.getItems();
            for (var k = 0; k < this.data.length; k++)if (GS.user.favorites.playlists[this.data[k].PlaylistID])this.data[k].isFavorite =
                    1;
            this.dataView.beginUpdate();
            this.dataView.setItems(this.data, "PlaylistID");
            this.dataView.endUpdate()
        }, userFavoritesChange:function () {
            this.data = this.dataView.getItems();
            for (var k = 0; k < this.data.length; k++)if (GS.user.favorites.users[this.data[k].UserID])this.data[k].isFavorite = 1
        }, queueChange:function (k) {
            k || (k = GS.player.getCurrentQueue());
            if (this.element) {
                this.element.toggleClass("hasSongs", k && k.songs && k.songs.length > 0);
                k && k.songs && k.songs.length > 0 ? $(".grid-canvas a.play").attr("data-translate-title",
                        "SONG_ROW_ADD_SONG_ADD_TO_PLAYING_TITLE").attr("title", $.localize.getString("SONG_ROW_ADD_SONG_ADD_TO_PLAYING_TITLE")) : $(".grid-canvas a.play").attr("data-translate-title", "SONG_ROW_ADD_SONG_PLAY_TITLE").attr("title", $.localize.getString("SONG_ROW_ADD_SONG_PLAY_TITLE"))
            }
        }, getContextMenuForSong:function (k) {
            var m = GS.Controllers.PageController.getActiveController().getPlayContext(), n = GS.Models.Song.getOneFromCache(k), o = GS.getGuts().extractSongItemInfo(this), r = [
                {title:$.localize.getString("CONTEXT_PLAY_SONG_NOW"),
                    action:{type:"fn", callback:function () {
                        GS.player.addSongAndPlay(k, m)
                    }, log:this.callback(function () {
                        GS.getGuts().onContextMenuClick("contextPlaySongNow", "rightClickSingleSong", false, o)
                    })}, customClass:"last jj_menu_item_hasIcon jj_menu_item_play"},
                {title:$.localize.getString("CONTEXT_PLAY_SONG_NEXT"), action:{type:"fn", callback:function () {
                    GS.player.addSongsToQueueAt([k], GS.player.INDEX_NEXT, false, m)
                }, log:this.callback(function () {
                    GS.getGuts().onContextMenuClick("contextPlaySongNext", "rightClickSingleSong",
                            false, o)
                })}, customClass:"last jj_menu_item_hasIcon jj_menu_item_play_next"},
                {title:$.localize.getString("CONTEXT_PLAY_SONG_LAST"), action:{type:"fn", callback:function () {
                    GS.player.addSongsToQueueAt([k], GS.player.INDEX_LAST, false, m)
                }, log:this.callback(function () {
                    GS.getGuts().onContextMenuClick("contextPlaySongLast", "rightClickSingleSong", false, o)
                })}, customClass:"last jj_menu_item_hasIcon jj_menu_item_play_last"},
                {customClass:"separator"}
            ];
            if (n)r = r.concat(n.getContextMenu({menuType:"rightClickSingleSong",
                gridController:this}));
            var A = GS.getGuts();
            if (A.currentTest && A.currentTest.name == "gridRowPlay" && (A.currentTest.currentGroup == 2 || A.currentTest.currentGroup == 3 || A.currentTest.currentGroup == 4))r.push({customClass:"separator"}, {title:"Song Page", action:{type:"fn", callback:function () {
                GS.router.setHash(n.toUrl())
            }, log:this.callback(function () {
                GS.getGuts().onContextMenuClick("contextNavigateSongPage", "rightClickSingleSong", false, o)
            })}, customClass:"last jj_menu_item_hasIcon jj_menu_item_song_page"});
            return r
        },
        getContextMenuMultiselectForSong:function (k) {
            var m = GS.Controllers.PageController.getActiveController().getPlayContext(), n = GS.getGuts().extractMultiSongInfo(this, k), o = {menuType:"rightClickMultiSong", multiClick:true, gridController:this}, r = [
                {title:$.localize.getString("CONTEXT_PLAY_SONGS_NOW"), customClass:"jj_menu_item_hasIcon jj_menu_item_play", action:{type:"fn", callback:function () {
                    GS.player.addSongsToQueueAt(k, GS.player.INDEX_DEFAULT, true, m)
                }, log:this.callback(function () {
                    GS.getGuts().onContextMenuClick("contextPlaySongsNow",
                            "rightClickMultiSong", true, n)
                })}},
                {title:$.localize.getString("CONTEXT_PLAY_SONGS_NEXT"), customClass:"jj_menu_item_hasIcon jj_menu_item_play_next", action:{type:"fn", callback:function () {
                    GS.player.addSongsToQueueAt(k, GS.player.INDEX_NEXT, false, m)
                }, log:this.callback(function () {
                    GS.getGuts().onContextMenuClick("contextPlaySongsNext", "rightClickMultiSong", true, n)
                })}},
                {title:$.localize.getString("CONTEXT_PLAY_SONGS_LAST"), customClass:"jj_menu_item_hasIcon jj_menu_item_play_last", action:{type:"fn", callback:function () {
                    GS.player.addSongsToQueueAt(k,
                            GS.player.INDEX_LAST, false, m)
                }, log:this.callback(function () {
                    GS.getGuts().onContextMenuClick("contextPlaySongsLast", "rightClickMultiSong", true, n)
                })}},
                {customClass:"separator"}
            ], A = true;
            if (GS.user.library)for (i in k) {
                if (k.hasOwnProperty(i)) {
                    songID = k[i];
                    if (parseInt(songID) && !GS.user.library.songs[songID]) {
                        A = false;
                        break
                    }
                }
            } else A = false;
            A ? r.push({title:$.localize.getString("CONTEXT_REMOVE_FROM_LIBRARY"), customClass:"jj_menu_item_hasIcon jj_menu_item_remove_music", action:{type:"fn", callback:function () {
                GS.user.removeFromLibrary(k)
            },
                log:this.callback(function () {
                    GS.getGuts().onContextMenuClick("contextRemoveFromLibrary", "rightClickMultiSong", true, n)
                })}}) : r.push({title:$.localize.getString("CONTEXT_ADD_TO_LIBRARY"), customClass:"jj_menu_item_hasIcon jj_menu_item_music", action:{type:"fn", callback:function () {
                GS.user.addToLibrary(k)
            }, log:this.callback(function () {
                GS.getGuts().onContextMenuClick("contextAddToLibrary", "rightClickMultiSong", true, n)
            })}});
            r.push({customClass:"separator"});
            _.isEmpty(GS.user.playlists) ? r.push({title:$.localize.getString("CONTEXT_NEW_PLAYLIST"),
                customClass:"jj_menu_item_hasIcon jj_menu_item_new_playlist", action:{type:"fn", callback:function () {
                    GS.getLightbox().open("newPlaylist", k)
                }}}) : r.push({title:$.localize.getString("CONTEXT_ADD_TO_PLAYLIST"), type:"sub", customClass:"jj_menu_item_hasIcon jj_menu_item_playlists", src:GS.Models.Playlist.getPlaylistsMenu(k, function (w) {
                w.addSongs(k, null, true)
            }, null, null, o)});
            r.push({customClass:"separator"}, {title:$.localize.getString("CONTEXT_SHARE_SONGS"), customClass:"jj_menu_item_hasIcon jj_menu_item_share",
                action:{type:"fn", callback:function () {
                    GS.getLightbox().open("widget", {type:"manySongs", id:k})
                }, log:this.callback(function () {
                    GS.getGuts().onContextMenuClick("contextShareSongs", "rightClickMultiSong", true, n)
                })}}, {customClass:"separator"}, {title:$.localize.getString("CONTEXT_REPLACE_ALL_SONGS"), customClass:"jj_menu_item_hasIcon jj_menu_item_now_playing", action:{type:"fn", callback:function () {
                GS.player.addSongsToQueueAt(k, GS.player.INDEX_REPLACE, GS.player.isPlaying, m)
            }, log:this.callback(function () {
                GS.getGuts().onContextMenuClick("contextReplaceAllSongs",
                        "rightClickMultiSong", true, n)
            })}});
            return r
        }, "input.search keyup":function (k) {
            Slick.GlobalEditorLock.cancelCurrentEdit();
            if (e.which == 27)k.value = "";
            this.searchString = k.value.toLowerCase();
            this.dataView.refresh()
        }, ".grid-canvas click":function (k, m) {
            if ($(m.target).parents(".slick-row").length === 0) {
                self.currentRow = 0;
                this.grid.setSelectedRows([]);
                this.grid.onSelectedRowsChanged()
            }
        }, "* keydown":function (k, m) {
            this.handleKeyPress(m)
        }, ".slick-collapse-indicator click":function (k, m) {
            m.preventDefault();
            var n =
                    $(k).parents("div.page_column"), o = GS.page.getActiveController().Class, r = n.attr("id") + "Collapse";
            o[r] || (o[r] = {});
            n.toggleClass("collapsed");
            n.addClass("suppressAutoCollapse");
            if (n.hasClass("collapsed")) {
                n.addClass("manualCollapse").removeClass("manualOpen");
                $(".page_column_fixed.collapsed").width(this.grid.getScrollWidth());
                o[r].manualCollapse = true;
                o[r].manualOpen = false;
                o[r].collapsed = true
            } else {
                n.addClass("manualOpen").removeClass("manualCollapse");
                $(".page_column_fixed").width(175);
                o[r].manualOpen =
                        true;
                o[r].manualCollapse = false;
                o[r].collapsed = false
            }
            o.storeFilterCollapseState();
            GS.resize();
            $(this.element).resize()
        }, handleKeyPress:function (k) {
            if ((k.which === 38 || k.which === 40) && k.shiftKey) {
                var m = this.grid.getSelectedRows().sort(function (r, A) {
                    return r - A
                });
                _.orEqual(m[m.length - 1], 1);
                var n, o;
                n = this.currentRow + (k.which === 38 ? -1 : 1);
                n = Math.max(0, Math.min(this.dataView.rows.length - 1, n));
                if ($.inArray(n, m) === -1) {
                    m.push(n);
                    this.selectedRowIDs.push(this.dataView.getItemByIdx(n).SongID);
                    this.currentRow = n;
                    this.grid.setSelectedRows(_.arrUnique(m));
                    this.grid.onSelectedRowsChanged()
                } else if (k.which === 38) {
                    if (n < this.currentRow) {
                        o = $.inArray(this.currentRow, m);
                        _.arrRemove(m, o, o);
                        this.currentRow = n;
                        o = $.inArray(this.currentRow, m);
                        _.arrRemove(m, o, o);
                        m.push(this.currentRow);
                        this.grid.setSelectedRows(_.arrUnique(m));
                        this.grid.onSelectedRowsChanged()
                    }
                } else if (n > this.currentRow) {
                    o = $.inArray(this.currentRow, m);
                    _.arrRemove(m, o, o);
                    this.currentRow = n;
                    o = $.inArray(this.currentRow, m);
                    _.arrRemove(m, o, o);
                    m.push(this.currentRow);
                    this.grid.setSelectedRows(_.arrUnique(m));
                    this.grid.onSelectedRowsChanged()
                }
                k.preventDefault();
                return true
            }
            if (k.which === 13) {
                GS.player.addSongsToQueueAt(this.selectedRowIDs, GS.player.INDEX_DEFAULT, true);
                self.currentRow = 0;
                this.grid.setSelectedRows([]);
                this.grid.onSelectedRowsChanged()
            }
            return false
        }, "#grid.songs a.songLink, #grid.feeds div.songs a.songLink click":function (k, m) {
            m.preventDefault();
            var n = parseInt($(k).attr("rel"), 10);
            if (n && _.defined(m.which) && !$(k).closest(".grid-canvas").hasClass("noLinks")) {
                var o = $(k).data("clickCount");
                o || (o =
                        0);
                o++;
                o == 1 && setTimeout(this.callback(function () {
                    if ($(k).data("clickCount") == 1)if (k[0].href) {
                        var w = $(k).attr("href");
                        if (w.indexOf("#") > 1) {
                            w = w.split("#");
                            GS.router.setHash(w[1])
                        } else GS.router.setHash($(k).attr("href"))
                    } else GS.Models.Song.getSong(n, this.callback(function (B) {
                        if (B) {
                            B = B.toUrl();
                            GS.router.setHash(B);
                            var t = parseInt(this.grid.getSelectedRows()[0]) + 1, v = t <= this.data.length ? this.data[t - 1].ppVersion : 0;
                            GS.getGuts().handleFieldClick(B, t, n, v)
                        }
                    }));
                    $(k).data("clickCount", 0)
                }), 300);
                $(k).data("clickCount",
                        o);
                if (o = $(k).attr("href")) {
                    var r = parseInt(this.grid.getSelectedRows()[0]) + 1, A = r <= this.data.length ? this.data[r - 1].ppVersion : 0;
                    GS.getGuts().handleFieldClick(o, r, n, A)
                }
            } else if (!_.defined(m.which))return false
        }, "#grid .grid-canvas.noLinks mouseenter":function (k, m) {
            if (window.ctrlDown && !m.shiftKey && !m.ctrlKey && !m.metaKey) {
                $("#grid .grid-canvas").removeClass("noLinks");
                window.ctrlDown = false
            }
        }, "#grid.radioStations .station a click":function (k, m) {
            m.stopPropagation();
            var n = k.attr("data-tagid");
            GS.player.setAutoplay(true,
                    n);
            return false
        }, "#grid.songs a.field click":function (k) {
            k = $(k).attr("href");
            var m = this.grid.getSelectedRows()[0];
            if (k) {
                var n = parseInt(m) + 1;
                m = this.dataView.rows[m].SongID;
                var o = n <= this.data.length ? this.data[n - 1].ppVersion : 0;
                GS.getGuts().handleFieldClick(k, n, m, o)
            }
        }})
})();
GS.Controllers.BaseController.extend("GS.Controllers.GUTSController", {isGSSingleton:true, segments:[
    {targetRange:[0.08, 0.09], dateRange:["2012-02-09", "2012-02-16"], name:"signupDropdown", groups:["a"]},
    {targetRange:[0.1, 0.11], dateRange:["2012-02-09", "2012-02-16"], name:"buttonBroadcast", groups:["a"]},
    {targetRange:[0.12, 0.13], dateRange:["2012-02-21", "2012-02-28"], name:"peterTagRadio", groups:["a"]},
    {targetRange:[0.2, 0.21], dateRange:["2012-02-22", "2012-02-29"], name:"relocateArtists", groups:["a"]},
    {targetRange:[0.14,
        0.19], dateRange:["2012-02-22", "2012-02-29"], name:"gridRowPlay", groups:["a", "b", "c", "d", "e"]}
], loggingStatusDuration:6048E5}, {shouldLog:false, server:"/guts", appID:"html", context:false, debug:false, abTest:null, bufferLength:10, localLogs:[], searchClickLpid:"searchClick", loggedNormally:false, eligibleForABTest:false, abTestBucket:null, currentTest:null, currentGroup:null, loggingStatusExpirationDate:null, init:function () {
    this.context = {};
    this.server = _.orEqual(gsConfig.gutsServer, false);
    this.setLoggingStatus();
    if (this.debug = false) {
        this.bufferLength = 1;
        this.shouldLog = true
    }
    this.currentPage = {};
    this.currentPage.pageType = "home";
    this.currentPage.section = "";
    this.currentPage.subpage = "";
    this.currentPage.id = "";
    if (gsConfig.isPreview) {
        this.appID = "preview";
        this.shouldLog = true
    }
    var b = _.browserDetect();
    this.beginContext({sessionID:GS.service.sessionID});
    this.beginContext({initTime:(new Date).getTime()});
    GS.user && GS.user.UserID && GS.user.UserID > 0 && this.beginContext({userID:GS.user.UserID});
    window.chrome && window.chrome.app &&
            window.chrome.app.isInstalled ? this.gaTrackEvent("chromeApp", "isInstalled") : this.gaTrackEvent("chromeApp", "notInstalled");
    this.logEvent("init", {browser:b.browser, browserVersion:b.version, os:navigator.platform, ip:gsConfig.remoteAddr, locale:GS.getLocale().locale});
    this._super()
}, setLoggingStatus:function () {
    var b, a, c, h, g = GS.Controllers.GUTSController.segments;
    h = store.get("currentTest");
    var k = store.get("currentGroup");
    if (h) {
        b = store.get("abTestBucket");
        a = store.get("eligibleForABTest");
        c = store.get("loggedNormally");
        if (typeof b == "number" && b >= 0 && b <= 1 && a && c == false && h.name && typeof k == "number")for (b = 0; b < g.length; b++)if (g[b].name == h.name && h.dateRange) {
            g = new Date;
            b = new Date(h.dateRange[0]);
            var m = new Date(h.dateRange[1]);
            if (g > b && g < m) {
                this.eligibleForABTest = a;
                this.loggedNormally = c;
                this.currentTest = h;
                this.currentGroup = k;
                this.appID = "html-" + this.currentTest.name;
                this.beginContext({abtest:this.currentTest.name, group:this.currentGroup});
                this.shouldLog = true;
                return
            }
            break
        }
        this.clearLoggingStatus()
    }
    b = store.get("abTestBucket");
    a = store.get("eligibleForABTest");
    c = store.get("loggedNormally");
    if (h = store.get("loggingStatusExpirationDate"))h = new Date(h);
    k = Math.random();
    g = new Date;
    if (h && g > h) {
        this.clearLoggingStatus();
        c = store.get("loggedNormally");
        a = store.get("eligibleForABTest");
        b = store.get("abTestBucket");
        store.get("currentTest");
        store.get("currentGroup")
    }
    if (b && a && c == false) {
        this.abTestBucket = b;
        this.setCurrentTest()
    } else {
        if (typeof c == "undefined" || c == null) {
            c = k <= 0.1;
            store.set("loggedNormally", c)
        }
        if (this.loggedNormally = c) {
            this.eligibleForABTest =
                    false;
            this.shouldLog = true;
            store.set("eligibleForABTest", false)
        } else if (typeof a == "undefined" || a == null) {
            this.eligibleForABTest = k > 0.1 && k <= 0.2;
            store.set("eligibleForABTest", this.eligibleForABTest)
        } else this.eligibleForABTest = a;
        this.abTestBucket = this.eligibleForABTest ? Math.random() : null;
        store.set("abTestBucket", this.abTestBucket);
        this.loggingStatusExpirationDate = new Date(g.getTime() + GS.Controllers.GUTSController.loggingStatusDuration);
        store.set("loggingStatusExpirationDate", this.loggingStatusExpirationDate);
        this.abTestBucket && this.setCurrentTest()
    }
}, forceABTest:function (b, a) {
    if (b && typeof a == "number") {
        this.currentTest = {};
        this.currentTest.name = b;
        this.currentGroup = a
    }
}, clearLoggingStatus:function () {
    store.set("loggedNormally", null);
    store.set("eligibleForABTest", null);
    store.set("abTestBucket", null);
    store.set("currentTest", null);
    store.set("currentGroup", null);
    store.set("loggingStatusExpirationDate", null);
    this.shouldLog = false
}, setCurrentTest:function () {
    if (this.abTestBucket)for (var b = GS.Controllers.GUTSController.segments,
                                       a, c = new Date, h, g, k = 0; k < b.length; k++) {
        a = b[k];
        h = new Date(a.dateRange[0]);
        g = new Date(a.dateRange[1]);
        if (a.targetRange[0] <= this.abTestBucket && a.targetRange[1] >= this.abTestBucket && h <= c && g >= c) {
            this.currentTest = a;
            store.set("currentTest", a);
            this.currentGroup = Math.min(Math.floor((this.abTestBucket - a.targetRange[0]) / ((a.targetRange[1] - a.targetRange[0]) / a.groups.length)), a.groups.length - 1);
            store.set("currentGroup", this.currentGroup);
            this.beginContext({abtest:a.name, group:this.currentGroup});
            this.appID = "html-" +
                    this.currentTest.name;
            this.shouldLog = true;
            return a
        }
    }
    return null
}, beginContext:function (b) {
    _.forEach(b, function (a, c) {
        if (b.hasOwnProperty(c))this.context[c] = b[c]
    }, this)
}, endContext:function (b) {
    _.defined(this.context[b]) && delete this.context[b]
}, doLogEvent:function (b, a) {
    var c = this.currentTest;
    if (c && c.dateRange && c.dateRange.length == 2)if (new Date > new Date(c.dateRange[1])) {
        this.clearLoggingStatus();
        this.setLoggingStatus();
        if (!this.shouldLog)return
    }
    var h = {time:(new Date).getTime(), lpID:b, state:{}, context:{}};
    currentContext = this.context;
    _.forEach(currentContext, function (g, k) {
        if (currentContext.hasOwnProperty(k))if ($.isArray(currentContext[k])) {
            this.context[k] = [];
            _.forEach(currentContext[k], function (m, n) {
                this.push(n)
            }, this.context[k])
        } else this.context[k] = _.orEqual(currentContext[k], "").toString()
    }, h);
    _.forEach(a, function (g, k) {
        if (a.hasOwnProperty(k))h.state[k] = _.orEqual(g, "").toString()
    }, h);
    this.localLogs.push(h);
    if (this.debug)this.forceSend(); else this.checkSendCondition() && this.sendLogs()
}, logEvent:function (b, a) {
    this.shouldLog && this.doLogEvent(b, a)
}, forceLogEvent:function (b, a) {
    this.doLogEvent(b, a)
}, checkSendCondition:function () {
    return this.localLogs.length >= this.bufferLength
}, forceSend:function () {
    this.sendLogs(true)
}, sendLogsTimeout:false, sendLogsWait:3E4, sendLogs:function (b) {
    clearTimeout(this.sendLogsTimeout);
    if (b)this._internalSend(false); else this.sendLogsTimeout = setTimeout(this.callback(this._internalSend), this.sendLogsWait)
}, _internalSend:function (b) {
    b = _.orEqual(b, true);
    if (this.localLogs.length > 0) {
        var a =
                this.toTransmissionFormat(this.localLogs);
        this.debug && console.log(a);
        this.currentTest ? $.ajax({contentType:"text/xml", type:"POST", data:a, url:"/guts-ab.php", cache:false, async:b, success:function () {
        }, error:function () {
        }}) : $.ajax({contentType:"text/xml", type:"POST", data:a, url:this.server, cache:false, async:b, success:function () {
        }, error:function () {
        }});
        this.localLogs = []
    }
}, toTransmissionFormat:function (b) {
    var a = {result:(new Date).getTime() + "\n", appID:this.appID};
    _.forEach(b, function (c, h) {
        var g = /\:/g, k = /\\/g,
                m = b[h];
        this.result += this.appID + "\t";
        this.result += m.lpID + "\t";
        var n = m.context;
        _.forEach(n, function (r, A) {
            if (n.hasOwnProperty(A))this.result += A + ":" + n[A].replace(k, "\\\\").replace(g, "\\:") + "\t"
        }, this);
        var o = m.state;
        _.forEach(o, function (r, A) {
            if (o.hasOwnProperty(A))this.result += A + ":" + o[A].replace(k, "\\\\").replace(g, "\\:") + "\t"
        }, this);
        this.result += m.time + "\n"
    }, a);
    return a.result
}, handlePageLoad:function (b, a) {
    var c = {};
    c.destinationPageType = b;
    switch (b) {
        case "home":
            if (a && a.redeemingPromoCard)c.reason = "redeem";
            break;
        case "user":
            switch (a.length) {
                case 2:
                    c.destinationPageID = a.id;
                    break;
                case 3:
                    c.destinationPageID = a.id;
                    c.destinationSubpageType = a.section;
                    break;
                case 4:
                    c.destinationPageID = a.id;
                    c.destinationSubpageType = a.subpage;
                    break
            }
            c.destinationSubpageType = _.orEqual(c.destinationSubpageType, "profile");
            break;
        case "playlist":
        case "album":
        case "artist":
            c.destinationPageID = a.id;
            c.destinationSubpageType = b == "album" && !a.subpage ? "tracklist" : b == "artist" && !a.subpage ? "overview" : a.subpage;
            break;
        case "search":
            c.destinationSubpageType =
                    a.type == "everything" ? "everything" : a.type;
            break;
        case "popular":
            c.destinationSubpageType = a.pageType;
            break;
        case "song":
            c.destinationPageID = a.token;
            c.destinationSubpageType = a.subpage;
            break;
        case "notFound":
            this.logEvent("pageNotFound", {pageSought:a.page});
            c.destinationPageType = "home";
            c.reason = "pageNotFound";
            break;
        case "settings":
            c.destinationSubpageType = _.orEqual(a.subpage, "profile");
            break;
        case "surveys":
            if (a.subpage)c.destinationSubpageType = a.subpage;
            break;
        case "signup":
            if (a.subpage)c.destinationSubpageType =
                    a.subpage;
            break;
        case "explore":
            if (a.subpage && a.subpage == "popular") {
                c.destinationPageType = "popular";
                c.destinationSubpageType = a.type || "daily"
            } else c.destinationSubpageType = a.subpage || "featured";
            break;
        case "music":
            if (a.subpage)c.destinationSubpageType = a.subpage;
        default:
            c.destinationPageType = b;
            break
    }
    if (this.pageParamsAreDifferent(c)) {
        this.logEvent("loadPage", c);
        this.beginContext({currentPageType:c.destinationPageType});
        c.destinationSubpageType ? this.beginContext({currentSubpage:c.destinationSubpageType}) :
                this.endContext("currentSubpage");
        c.destinationPageID ? this.beginContext({currentPageID:c.destinationPageID}) : this.endContext("currentPageID")
    }
}, updateCurrentPage:function (b) {
    this.currentPage.pageType = b.type;
    this.currentPage.id = b.id;
    this.currentPage.section = b.section;
    this.currentPage.subpage = b.subpage
}, logPageLoad:function (b) {
    b.id ? this.logEvent("loadPage", {type:b.type, id:b.id}) : this.logEvent("loadPage", {type:b.type});
    this.beginContext({currentPageType:b.type});
    this.endContext("currentSubpage")
}, logSubpageLoad:function (b) {
    this.logEvent("loadSubpage",
            {type:b.type});
    this.beginContext({currentSubpage:b.type})
}, handleFieldClick:function (b, a, c, h) {
    a = {songID:c, rank:a};
    if (h != null && h.length > 0)a.ppVersion = h;
    h = "";
    h = b.indexOf("artist") > -1 ? "OLartistPageLoad" : b.indexOf("album") > -1 ? "OLalbumPageLoad" : "OLSongPageLoad";
    GS.getGuts().logEvent(h, a)
}, handleFeedEventClick:function (b) {
    var a = {};
    switch ($(b)[0].tagName) {
        case "A":
            feedEvent = $(b).parents(".event");
            if ($(b).attr("href")) {
                var c = $(b).attr("href").split("/");
                a.clickedType = c[1];
                a.clickedID = c[3]
            } else a.clickedType =
                    $(b).attr("class");
            break;
        case "LI":
            feedEvent = $(b).parents(".event");
            b = $(b).attr("class").split(" ");
            b = b[b.length - 1];
            if (b == "option")a.clickedType = "playSongs"; else if (b == "show")a.clickedType = "showSongs";
            break;
        default:
            break
    }
    a.rank = $(feedEvent).index() + 1;
    var h = $(feedEvent).attr("class");
    c = h.split(" ");
    a.whoseFeed = c[2].split("user")[1];
    _.forEach(c, function (n, o) {
        if (c[o].indexOf("type") > -1)a.eventType = c[o].substring(4, c[o].length)
    }, a);
    var g = {};
    $('.what>a[class!="showSongs"]', feedEvent).each(function () {
        var n =
                $(this).attr("href");
        if (n !== undefined) {
            n = n.split("/");
            var o = n[1];
            if (g[o])g[o] += 1; else g[o] = 1;
            a[o + g[o]] = n[3]
        }
    });
    var k = {};
    $("#feed>li").each(function () {
        h = $(this).attr("class");
        c = h.split(" ");
        var n = c[1].substring(4, c[1].length);
        if (k[n])k[n] += 1; else k[n] = 1
    });
    var m = "";
    _.forEach(k, function (n, o) {
        m = m + o + ";" + n + ","
    }, m);
    m = m.slice(0, m.length - 1);
    a.counts = m;
    this.logEvent("feedEventClick", a)
}, objectListPlayAdd:function (b, a, c) {
    var h, g;
    switch (c) {
        case "play":
            h = "OLPlayClick";
            break;
        case "add":
            h = "OLAddClick";
            break;
        default:
            break
    }
    var k;
    a = $("#grid .slick-row.selected", a);
    if (a.length > 0) {
        g = "";
        $(a).each(function () {
            k = parseInt($(this).attr("row"), 10);
            isNaN(k) || (g = g + (k + 1) + ",")
        });
        g = g.slice(0, g.length - 1)
    } else g = "all";
    this.logEvent(h, {songIDs:b, ranks:g})
}, songItemLibraryClick:function (b) {
    this.logEvent("OLlibraryClick", b)
}, songItemFavoriteClick:function (b) {
    this.logEvent("OLfavoriteClick", b)
}, songsRemovedFromQueue:function (b) {
    var a = b.details.items;
    if (b) {
        var c = "";
        _.forEach(a, function (h, g) {
            c = c + g[h].songID + ","
        }, c);
        c = c.slice(0, c.length - 1);
        GS.getGuts().logEvent("songsRemovedFromQueue",
                {songIDs:c})
    }
}, handleSearchSidebarClick:function (b, a, c) {
    if (a = b.attr("href")) {
        a = a.split("/");
        var h = a[1], g = a[3];
        if ($(b).hasClass("image"))if (c == "user") {
            h = "user";
            this.logEvent("searchSidebarClick", {section:c, linkType:h, username:a[1], imageClick:"true"})
        } else this.logEvent("searchSidebarClick", {section:c, linkType:h, id:g, imageClick:"true"}); else this.logEvent("searchSidebarClick", {section:c, linkType:h, id:g})
    } else if (b.hasClass("searchLink")) {
        h = "seeAll";
        this.logEvent("searchSidebarClick", {section:c, linkType:h})
    }
},
    handleSearchSidebarEventClick:function (b) {
        if (b.hasClass("searchLink"))this.logEvent("searchSidebarClick", {section:"event", linkType:"seeAll"}); else(b = b.attr("href")) && this.logEvent("searchSidebarClick", {section:"event", linkType:"event", href:b})
    }, handleAutoplayOff:function () {
        this.forceLogEvent("autoplayOff", {});
        this.endContext("autoplay");
        this.endContext("autoplaySeedSongs")
    }, isSearchPage:function () {
        var b = $("#page").controller();
        if (b)return"GS.Controllers.Page.SearchController" == b.Class.fullName;
        return false
    },
    onContextMenuClick:function (b, a, c, h, g) {
        if (b && a && typeof c !== "undefined" && h && this.isSearchPage())if (c) {
            if (h && h.songIDs && h.ranks) {
                var k = h.songIDs, m = h.ranks, n = h.ppVersions;
                c = {};
                var o = k.length;
                if ((c = m.length == o) && n)c = n.length == o;
                if (c) {
                    c = {menuType:a, multiClick:"brokenDown"};
                    for (var r = 0; r < o; r++) {
                        var A = m[r], w = k[r];
                        if (n)c.ppVersions = h.ppVersions[r];
                        if (g)c.playlistID = g;
                        this.logSearchSingleSongClick(b, A, w, c)
                    }
                    k = h.songIDs.join();
                    m = h.ranks.join();
                    c = {menuType:a, multiClick:"multi"};
                    if (h.ppVersions)c.ppVersions = h.ppVersions.join();
                    if (g)c.playlistID = g;
                    this.logSearchMultiSongClick(b, m, k, c)
                }
            }
        } else if (h && h.songID && h.rank) {
            w = h.songID;
            A = h.rank;
            c = {menuType:a, multiClick:"single"};
            if (h.ppVersion)c.ppVersion = h.ppVersion;
            if (g)c.playlistID = g;
            this.logSearchSingleSongClick(b, A, w, c)
        }
    }, logSearchSingleSongClick:function (b, a, c, h) {
        if (b && a && c) {
            var g = {};
            if (h)g = h;
            g.clickType = b;
            g.rank = a;
            g.songID = c;
            GS.getGuts().logEvent(this.searchClickLpid, g)
        }
    }, logSearchMultiSongClick:function (b, a, c, h) {
        if (b && a && c) {
            var g = {};
            if (h)g = h;
            g.clickType = b;
            g.ranks = a;
            g.songIDs =
                    c;
            GS.getGuts().logEvent(this.searchClickLpid, g)
        }
    }, extractSongItemInfo:function (b) {
        if (b) {
            var a = b.grid.getSelectedRows(), c = "", h = "";
            c = "";
            h = {};
            if (a.length == 1) {
                c = a[0];
                h = b.selectedRowIDs[0];
                h = {rank:c + 1, songID:h};
                if (b.data[c])if (c = b.data[c].ppVersion)h.ppVersion = c;
                return h
            }
        } else return null
    }, logMultiSongDrag:function (b, a) {
        if (a.songIDs && a.songIDs.length > 0 && a.ranks && a.ranks.length > 0) {
            var c, h = a.songIDs.length;
            for (c = 0; c < h; c++)a.ppVersions && a.ppVersions[c] ? this.logSearchSingleSongClick("drag", a.ranks[c], a.songIDs[c],
                    {ppVersion:a.ppVersions[c]}) : this.logSearchSingleSongClick("drag", a.ranks[c], a.songIDs[c])
        }
        GS.getGuts().logEvent(b, a)
    }, extractMultiSongInfo:function (b, a) {
        if (b && a) {
            var c = b.grid.getSelectedRows().sort(_.numSortA), h = [], g = [];
            _.forEach(c, function (k) {
                h.push(k + 1);
                (k = b.dataView.rows[k].ppVersion) && g.push(k)
            });
            c = {songIDs:a, ranks:h};
            if (g.length > 0)c.ppVersions = g;
            return c
        } else return null
    }, handleExtrasDeviceButtonClick:function (b) {
        this.logEvent("extrasDeviceButtonClick", {device:$(b).attr("rel").split("_")[2]})
    },
    logQueueSaveInitiated:function () {
        this.logEvent("queueSaveInitiated", {})
    }, pageParamsAreDifferent:function (b) {
        if (!this.context.currentPageType || !this.context.currentSubpage || !this.context.currentPageID)return true;
        if (b && b.destinationPageType && b.destinationSubpageType && b.destinationPageID) {
            if (this.context.currentPageType != b.destinationPageType)return true;
            if (this.context.currentSubpage != b.destinationSubpageType)return true;
            if (this.context.currentPageID != b.destinationPageID)return true;
            return false
        } else return true
    },
    artistPageSidebarClick:function (b, a, c) {
        a = {};
        a.section = c;
        if (b.hasClass("view_more"))a.linkType = "seeAll"; else {
            a.linkType = "notSeeAll";
            if (b = b.attr("href")) {
                var h = b.split("/");
                switch (c) {
                    case "similarArtists":
                        a.linkType = "artist";
                        a.id = h[3];
                        break;
                    case "fans":
                        a.linkType = "user";
                        a.id = h[3];
                        break;
                    case "events":
                        a.linkType = "event";
                        a.href = b;
                        break;
                    default:
                        break
                }
            }
        }
        this.logEvent("artistPageSidebarClick", a)
    }, gaTrackEvent:function (b, a, c, h) {
        if (_.notDefined(b) || _.notDefined(a))console.warn("guts.gaTrackEvent: bad category or action",
                b, a); else {
            c = "" + _.orEqual(c, "");
            h = parseFloat("" + _.orEqual(h, ""), 10);
            if (isNaN(h) || h == "")h = null;
            if (window._gaq && window._gaq.push)if (c && h)window._gaq.push(["_trackEvent", b, a, c, h]); else if (c)window._gaq.push(["_trackEvent", b, a, c]); else h ? window._gaq.push(["_trackEvent", b, a, null, h]) : window._gaq.push(["_trackEvent", b, a])
        }
    }});
(function () {
    var b = 0;
    GS.Controllers.BaseController.extend("GS.Controllers.FacebookController", {isGSSingleton:true, preSetup:function () {
        var a = GS.Controllers.BaseController.singletonCallback, c = $.subscribe;
        c("gs.auth.update", a("facebook", "update"));
        c("gs.auth.favorites.songs.add", a("facebook", "onFavoriteSong"));
        c("gs.auth.playlists.add", a("facebook", "onPlaylistCreate"));
        c("gs.player.nowplaying", a("facebook", "onNowPlaying"));
        c("gs.player.playing.continue", a("facebook", "onSongPlaying"));
        c("gs.player.playstatus",
                a("facebook", "onPlayStatusChange"));
        c("gs.theme.set", a("facebook", "parseTheme"))
    }}, {APPLICATION_ID:"111132365592157", SERVICE_ID:4, FACEBOOK_ONLY_SERVICE_ID:16, PERMISSIONS:"offline_access,publish_stream,email,user_about_me,user_likes,user_interests,user_location,user_birthday,publish_actions", REQUIRED_PERMISSIONS:"offline_access,publish_stream,email,user_about_me,user_location,user_birthday", PUBLISH_PERMISSION:"publish_stream", USER_ACTIONS:"publish_actions", WALL_FAVORITES:8, WALL_PLAYLIST_CREATE:16,
        SCROBBLING_OFF_FLAG:32, AUTO_RATE_LIMIT:18E6, MINIMUM_DURATION:15, profile:null, friends:null, registeredWithFacebook:false, facebookUserID:false, loggedIntoFacebook:false, flags:0, lastError:null, facebookLoaded:false, connectStatus:"unknown", connected:false, onLoginSaveData:null, initialXFBML:null, onUpdateCallback:null, lastUser:null, friendPermissions:{}, userPermissions:{}, forceLogin:false, subXFBML:null, canUpdate:false, scrobblingEnabled:false, currentListening:null, loginOnLoad:null, init:function () {
            this.LISTEN_APPLICATION_ID =
                    "111132365592157";
            if (window.location.host.indexOf("grooveshark.com") > -1 && this.APPLICATION_ID !== this.LISTEN_APPLICATION_ID || !this.APPLICATION_ID)this.APPLICATION_ID = this.LISTEN_APPLICATION_ID;
            this._super()
        }, appReady:function () {
            b = this.subscribe("gs.cowbell.ready", this.callback("commReady"))
        }, commReady:function () {
            if (_.browserDetect().browser != "msie" || _.browserDetect().version > 6) {
                window.fbAsyncInit = GS.getFacebook().callback("initFacebook");
                window.fbLoadAttempts = 0;
                var a = function () {
                    if ($.browser.msie && this.readyState) {
                        if (this.readyState ===
                                "complete" || this.readyState === "loaded") {
                            this.onload = this.onreadystatechange = null;
                            setTimeout(function () {
                                window.FB && GS.getFacebook().initFacebook()
                            }, 10)
                        }
                    } else {
                        this.onload = this.onreadystatechange = null;
                        setTimeout(function () {
                            window.FB && GS.getFacebook().initFacebook()
                        }, 10)
                    }
                };
                window.loadFacebook = function () {
                    try {
                        if (document.getElementById("fb-root") && document.getElementById("fb-root").getElementsByTagName("script").length) {
                            document.getElementById("fb-root").removeChild(document.getElementById("fb-root").getElementsByTagName("script")[0]);
                            document.getElementById("fb-root") && document.getElementById("fb-root").getElementsByTagName("div").length && document.getElementById("fb-root").removeChild(document.getElementById("fb-root").getElementsByTagName("div")[0]);
                            window.FB = null;
                            GS.getFacebook().facebookloaded = false
                        }
                        var c = document.createElement("script");
                        c.async = true;
                        c.src = document.location.protocol + "//connect.facebook.net/en_US/all.js?20120211";
                        c.onload = c.onreadystatechange = a;
                        document.getElementById("fb-root").appendChild(c);
                        window.fbLoadAttempts++;
                        window.facebookLoadTimeout = setTimeout(function () {
                            if ((!window.FB || !GS.getFacebook().facebookloaded) && window.fbLoadAttempts < 3)window.loadFacebook(); else if (!window.FB && window.fbLoadAttempts >= 3)$.publish("gs.notification", {type:"error", message:$.localize.getString("POPUP_UNABLE_LOAD_FACEBOOK")}); else GS.getFacebook().facebookloaded || GS.getFacebook().initFacebook()
                        }, 2E4)
                    } catch (h) {
                        console.error("Could not load Facebook Connect JS. Fatal Error: ", h);
                        GS.getFacebook().lastError = h;
                        $.publish("gs.notification",
                                {type:"error", message:$.localize.getString("POPUP_UNABLE_LOAD_FACEBOOK")})
                    }
                };
                window.loadFacebook()
            }
            if (b) {
                $.unsubscribe(b);
                b = 0
            }
        }, initFacebook:function () {
            if (window.FB && window.FB.init && (!window.FB._apiKey || !this.facebookLoaded)) {
                FB.init({appId:this.APPLICATION_ID, status:false, cookie:false, xfbml:false, oauth:true, channelUrl:"//" + window.location.hostname + "/channel.html"});
                this.facebookLoaded = true;
                window.facebookLoadTimeout && clearTimeout(window.facebookLoadTimeout);
                var a = _.browserDetect();
                if (a.browser ==
                        "chrome" && a.version < 15) {
                    FB.XD._origin = window.location.protocol + "//" + document.domain + "/" + FB.guid();
                    FB.XD.Flash.init();
                    FB.XD._transport = "flash"
                } else if (a.browser == "opera") {
                    FB.XD._transport = "fragment";
                    FB.XD.Fragment._channelUrl = window.location.protocol + "//" + window.location.host + "/"
                } else if (a.browser == "msie" && a.version == 8) {
                    FB.XD._origin = window.location.protocol + "//" + document.domain + "/" + FB.guid();
                    FB.XD.Flash.init();
                    FB.XD._transport = "flash"
                }
                FB.getLoginStatus(this.callback(this.onFacebookLoginStatus, true));
                FB.Event.subscribe("auth.statusChange", this.callback(this.onFacebookLoginStatus, false));
                FB.Event.subscribe("edge.create", function (c) {
                    window._gaq && window._gaq.push && window._gaq.push(["_trackSocial", "facebook", "like", c]);
                    if (GS.page && GS.page.activePage && GS.page.activePage.likeWidth == "48px") {
                        GS.page.activePage.likeWidth = "77px";
                        GS.page.activePage.likeWidthCache[GS.page.activePage.fbUrl] = "77px";
                        $("#page_content_social_buttons .fblike").css("width", GS.page.activePage.likeWidth)
                    }
                });
                FB.Event.subscribe("edge.remove",
                        function (c) {
                            window._gaq && window._gaq.push && window._gaq.push(["_trackSocial", "facebook", "unlike", c])
                        });
                if (!window.document.getElementById("theme_home") || window.location.hash && window.location.hash.indexOf("/s/") > -1) {
                    $.publish("gs.facebook.xfbml.ready", true);
                    GS.getFacebook().initialXFBML = true;
                    this.subXFBML = $.subscribe("gs.facebook.xfbml.ready", this.callback(this.parseTheme))
                } else this.parseTheme();
                setTimeout(this.callback(function () {
                    if (FB.Auth._loadState == "loading") {
                        FB.Auth._loadState = null;
                        FB.getLoginStatus(this.callback(this.onFacebookLoginStatus,
                                true));
                        this.update()
                    }
                }), 1E4);
                console.log("FB initialized");
                if (this.loginOnLoad)this.login(this.loginOnLoad.callback, this.loginOnLoad.errback, this.loginOnLoad.flags); else {
                    this.canUpdate = true;
                    this.update()
                }
            }
        }, parseTheme:function () {
            if (window.FB)window.document.getElementById("theme_home") && FB.XFBML.parse(window.document.getElementById("theme_home"), this.callback(function () {
                this.subXFBML && $.unsubscribe(this.subXFBML);
                setTimeout(function () {
                    $.publish("gs.facebook.xfbml.ready")
                }, 100);
                GS.getFacebook().initialXFBML =
                        true
            })); else this.initFacebook()
        }, update:function () {
            if (this.canUpdate) {
                this.canUpdate = false;
                if (this.facebookLoaded && GS.user && GS.user.isLoggedIn && GS.user.UserID > 0 && (GS.user.Flags & this.SERVICE_ID || GS.user.Flags & this.FACEBOOK_ONLY_SERVICE_ID)) {
                    this.registeredWithFacebook = GS.user.Flags & this.FACEBOOK_ONLY_SERVICE_ID;
                    GS.service.getUserFacebookData(this.callback("onUserFacebookData", null, null))
                } else if (this.facebookLoaded)GS.user && GS.user.isLoggedIn && this.onLoginSaveData && this.onLoginSaveData === GS.user.Email ?
                        this.save(0, null, this.callback(function (a) {
                            this.lastError = a;
                            $.publish("gs.notification", {type:"error", message:$.localize.getString("POPUP_UNABLE_SAVE_FACEBOOK")});
                            this.showReAuthLightbox()
                        })) : this.clearInfo();
                setTimeout(this.callback(function () {
                    this.canUpdate = true
                }), 0)
            }
        }, cleanSession:function (a) {
            if (a.accessToken.indexOf("|") >= 0) {
                a = a.accessToken.split("|");
                var c = a[1].split("-"), h = {};
                h.facebookUserID = c[1];
                h.sessionKey = c[0];
                h.accessToken1 = a[0];
                h.accessToken3 = a[2];
                return h
            } else return false
        }, onFacebookLoginStatus:function (a, c) {
            if (c) {
                this.connectStatus = c.status;
                switch (this.connectStatus) {
                    case "connected":
                        this.loggedIntoFacebook = true;
                        break;
                    case "notConnected":
                        this.loggedIntoFacebook = true;
                        break;
                    case "unknown":
                    default:
                        if (!a && GS.airbridge && GS.airbridge.isDesktop && GS.user && GS.user.isLoggedIn && (GS.user.Flags & this.SERVICE_ID || GS.user.Flags & this.FACEBOOK_ONLY_SERVICE_ID)) {
                            this.connectStatus = "connected";
                            GS.service.getUserFacebookData(this.callback("onUserFacebookData", null, null))
                        } else this.loggedIntoFacebook = false;
                        break
                }
                var h =
                        this.connected;
                this.connected = this.loggedIntoFacebook && c.authResponse && c.authResponse.userID ? c.authResponse.userID == this.facebookUserID : false;
                if (!a)if (!this.connected && h && (!GS.airbridge || !GS.airbridge.isDesktop)) {
                    h = this.facebookUserID;
                    this.clearInfo();
                    this.connected = false;
                    this.facebookUserID = h;
                    FB.api("/?id=" + this.facebookUserID, this.callback("onGetMyProfile", null, null));
                    $.publish("gs.notification", {type:"error", message:$.localize.getString("POPUP_LOGOUT_FACEBOOK")})
                }
                $.publish("gs.facebook.status.update");
                if ($.isFunction(this.onUpdateCallback)) {
                    this.onUpdateCallback();
                    this.onUpdateCallback = null
                }
            }
        }, onUserFacebookData:function (a, c, h) {
            try {
                if (window.FB && h && h.FacebookUserID) {
                    var g = h.AccessToken1 ? h.AccessToken1 + "|" + h.SessionKey + "-" + h.FacebookUserID + "|" + h.AccessToken3 : h.AccessTokenEx;
                    this.facebookUserID = h.FacebookUserID;
                    this.flags = h.Flags;
                    if ((this.flags & this.SCROBBLING_OFF_FLAG) == 0)this.scrobblingEnabled = true;
                    var k = FB.getAuthResponse();
                    if (GS.airbridge && GS.airbridge.isDesktop && (!k || !k.accessToken))FB.Auth.setAuthResponse({accessToken:g,
                        expiresIn:0, signedRequest:"", userID:h.FacebookUserID}, "connected");
                    if (k && k.userID && k.userID == this.facebookUserID) {
                        k.accessToken != g && this.save(h.Flags);
                        this.connected = true;
                        FB.api("/me", this.callback("onGetMyProfile", a, c))
                    } else FB.api("/?id=" + this.facebookUserID, this.callback("onGetMyProfile", a, c));
                    this.onUpdateCallback = this.callback(function () {
                        if (!this.connected && this.scrobblingEnabled)$.publish("gs.facebook.notification.cannotPost", {notifLocale:"POPUP_LOGIN_FACEBOOK_FLAGS_LISTEN"}); else if (!this.connected &&
                                (this.flags & this.WALL_FAVORITES) > 0 || (this.flags & this.WALL_PLAYLIST_CREATE) > 0)$.publish("gs.facebook.notification.cannotPost"); else {
                            if ((this.flags & this.WALL_FAVORITES) > 0 || (this.flags & this.WALL_PLAYLIST_CREATE) > 0)this.checkUserPermissions(this.PUBLISH_PERMISSION, this.callback(function (n) {
                                n || $.publish("gs.facebook.notification.cannotPost", {notifLocale:"POPUP_LOGIN_FACEBOOK_FLAGS_PERMS", successButton:"NOTIF_FACEBOOK_CONNECT_BUTTON"})
                            }), this.callback(function (n) {
                                if (n && n.error_code == 190) {
                                    this.showReAuthLightbox();
                                    this.scrobblingEnabled = false
                                } else if (this.scrobblingEnabled) {
                                    $.publish("gs.facebook.notification.cannotPost", {notifLocale:"POPUP_LOGIN_FACEBOOK_FLAGS_LISTEN"});
                                    this.scrobblingEnabled = false
                                } else this.flags >= 8 && $.publish("gs.facebook.notification.cannotPost")
                            }));
                            this.flags & this.SCROBBLING_OFF_FLAG || this.checkUserPermissions(this.USER_ACTIONS, this.callback(function (n) {
                                if (!n) {
                                    $.publish("gs.facebook.notification.cannotPost", {notifLocale:"POPUP_LOGIN_FACEBOOK_FLAGS_LISTEN_PERMS", cancelButton:"NOTIF_FACEBOOK_LISTENS_DISABLE",
                                        successButton:"SURE"});
                                    this.scrobblingEnabled = false
                                }
                            }), function (n) {
                                n && n.error_code == 190 ? this.showReAuthLightbox() : $.publish("gs.facebook.notification.cannotPost", {notifLocale:"POPUP_LOGIN_FACEBOOK_FLAGS_LISTEN", successButton:"NOTIF_FACEBOOK_CONNECT_BUTTON"});
                                this.scrobblingEnabled = false
                            })
                        }
                    });
                    FB.getLoginStatus(this.callback(this.onFacebookLoginStatus, false))
                } else {
                    GS.user.Flags = (GS.user.Flags | this.SERVICE_ID) - this.SERVICE_ID;
                    if (this.registeredWithFacebook)GS.user.Flags = (GS.user.Flags | this.FACEBOOK_ONLY_SERVICE_ID) -
                            this.FACEBOOK_ONLY_SERVICE_ID;
                    this.connected = false;
                    $.isFunction(c) && c()
                }
            } catch (m) {
                this.connected = false;
                $.isFunction(c) && c()
            }
        }, onAuthFacebookUser:function (a, c, h) {
            if (h)if (h.userID == 0)this.register(a, c); else {
                this.connected = this.loggedIntoFacebook;
                $.isFunction(a) && a(h);
                GS.getGuts().logEvent("facebookAuthenticated", {authenticated:true})
            } else $.isFunction(c) && c({error:"POPUP_SIGNUP_LOGIN_FORM_FACEBOOK_ERROR"})
        }, showReAuthLightbox:function () {
            GS.getLightbox().close();
            GS.getLightbox().open({type:"reAuthFacebook",
                view:{header:"POPUP_FACEBOOK_REAUTH_TITLE", message:"POPUP_FACEBOOK_REAUTH_MESSAGE", buttonsRight:[
                    {label:"POPUP_REAUTH_SUBMIT", className:"submit"}
                ], buttonsLeft:GS.getFacebook().registeredWithFacebook ? [] : [
                    {label:"POPUP_FACEBOOK_REAUTH_CANCEL", className:"close"}
                ]}, callbacks:{".submit":function () {
                    var a = GS.getFacebook().flags;
                    GS.getFacebook().logout(function () {
                        GS.getFacebook().login(function () {
                            GS.getLightbox().close()
                        }, null, a)
                    })
                }, ".close":function () {
                    GS.getFacebook().logout(function () {
                        GS.getLightbox().close()
                    })
                }}})
        },
        showInvalidPermissionsLightbox:function (a) {
            if ($.isFunction(a)) {
                GS.getLightbox().close();
                GS.getLightbox().open({type:"invalidPermissionsFacebook", view:{header:"POPUP_FACEBOOK_PERMS_TITLE", message:"POPUP_FACEBOOK_PERMS_MESSAGE", buttonsRight:[
                    {label:"POPUP_REAUTH_AUTH_SUBMIT", className:"submit"}
                ], buttonsLeft:[
                    {label:"POPUP_FACEBOOK_PERMS_CANCEL", className:"close"}
                ]}, callbacks:{".submit":function () {
                    a()
                }, ".close":function () {
                    GS.getFacebook().logout(function () {
                        GS.getLightbox().close()
                    })
                }}})
            }
        }, authErrors:[608,
            450, 451, 452, 453, 454, 455, 200, 190, 10], queryFQL:function (a, c, h, g) {
            FB.api({method:"fql.query", query:a}, this.callback(function (k) {
                if (k.error_code) {
                    if ($.isFunction(h))h(k); else g && $.inArray(k.error_code, this.authErrors) && this.showReAuthLightbox();
                    if (g) {
                        k = k.error_code + " (" + g + ")";
                        GS.getGuts().forceLogEvent("facebookFQLErr", {errCode:k})
                    }
                } else $.isFunction(c) && c(k)
            }))
        }, register:function (a, c) {
            if (window.FB && FB.getAuthResponse() && FB.getAuthResponse().userID)this.queryFQL("select uid,name,first_name,last_name,profile_url,username,about_me,birthday_date,sex,email,locale from user where uid = me()",
                    function (h) {
                        if (h && h[0]) {
                            var g = {id:h[0].uid, name:h[0].name, first_name:h[0].first_name, last_name:h[0].last_name, link:h[0].profile_url, birthday:h[0].birthday_date, about:h[0].profile_blurb, gender:h[0].sex, email:h[0].email, locale:h[0].locale};
                            GS.getFacebook().gotProfileForRegister(a, c, h[0].username ? h[0].username : "", g)
                        } else GS.getFacebook().gotProfileForRegister(a, c)
                    }, function () {
                        var h = FB.getAccessToken();
                        FB.getLoginStatus(GS.getFacebook().callback(function (g) {
                            if (!g.authResponse || g.authResponse.accessToken !=
                                    h) {
                                this.onFacebookLoginStatus(false, g);
                                this.login(a, c)
                            }
                        }), true)
                    }, 4); else $.isFunction(c) && c({error:"POPUP_SIGNUP_LOGIN_FORM_FACEBOOK_ERROR"})
        }, gotProfileForRegister:function (a, c, h, g) {
            if (g && !g.error)GS.service.getUsernameSuggestions(h, g.name ? g.name : "", g.id, this.callback("usernameSuggestSuccess", a, c, g), this.callback("usernameSuggestFailed", a, c, g)); else c && c({error:"POPUP_SIGNUP_LOGIN_FORM_FACEBOOK_ERROR"})
        }, usernameSuggestSuccess:function (a, c, h, g) {
            c = "";
            if (g && g.length > 0)c = g[0];
            this.openRegisterLightbox(a,
                    c, h)
        }, usernameSuggestFailed:function (a, c, h) {
            a && c ? c({error:"POPUP_SIGNUP_LOGIN_FORM_FACEBOOK_ERROR"}) : this.openRegisterLightbox(null, "", h)
        }, openRegisterLightbox:function (a, c, h) {
            a = {isFacebook:!_.isEmpty(h), username:c, session:this.cleanSession(FB.getAuthResponse()), fbFlags:0, message:$.localize.getString("POPUP_SIGNUP_LOGIN_FORM_FACEBOOK_NOT_FOUND")};
            if (!a.session) {
                c = FB.getAuthResponse();
                a.session = {facebookUserID:c.userID, accessTokenEx:c.accessToken}
            }
            if (h) {
                if (h.birthday) {
                    c = h.birthday.split("/");
                    a.month =
                            c[0];
                    a.day = c[1];
                    a.year = parseInt(c[2])
                }
                a.fname = h.name ? h.name : "";
                if (h.gender == "female")a.sex = "F"; else if (h.gender == "male")a.sex = "M";
                a.email = h.email ? h.email : ""
            }
            GS.user.defaultFromService = a;
            GS.getLightbox().close();
            GS.page.activePageName == "SignupController" ? GS.page.activePage.update(a) : GS.router.setHash("/signup");
            GS.getGuts().logEvent("facebookRegistered", {registered:true})
        }, serviceLogout:function (a) {
            FB.logout(function () {
                FB.Auth.setAuthResponse({accessToken:null, expiresIn:0, signedRequest:"", userID:null},
                        "unknown");
                $.isFunction(a) && a()
            })
        }, login:function (a, c, h) {
            if (window.FB && window.FB.login)if (GS.airbridge && GS.airbridge.isDesktop)this.connectStatus == "connected" && !this.forceLogin ? FB.getLoginStatus(this.callback("onAIRLogin", a, c, h)) : FB.login(this.callback("onAIRLogin", a, c, h), {scope:this.PERMISSIONS}); else this.connectStatus == "connected" && !this.forceLogin ? FB.getLoginStatus(this.callback("onLogin", a, c, h)) : FB.login(this.callback("onLogin", a, c, h), {scope:this.PERMISSIONS}); else if (this.facebookLoaded)c &&
            c({error:"POPUP_SIGNUP_LOGIN_FORM_FACEBOOK_ERROR"}); else this.loginOnLoad = {callback:a, errback:c, flags:h}
        }, onAIRLogin:function (a, c, h, g) {
            window.setTimeout(function () {
                GS.getFacebook().onLogin(a, c, h, g)
            }, 300)
        }, onLogin:function (a, c, h, g) {
            g.authResponse && this.checkUserPermissions(this.REQUIRED_PERMISSIONS, this.callback(function (k) {
                if (k)if (GS.user.isLoggedIn) {
                    if (!this.connected && this.facebookUserID && this.facebookUserID != g.authResponse.userID)this.friends = this.profile = null;
                    this.save(h ? h : 0, a, c)
                } else(k = this.cleanSession(g.authResponse)) ?
                        GS.service.authenticateFacebookUser(k.facebookUserID, k.sessionKey, k.accessToken1, k.accessToken3, null, this.callback("onAuthFacebookUser", a, c), function () {
                            $.isFunction(c) && c({error:"POPUP_SIGNUP_LOGIN_FORM_FACEBOOK_ERROR"})
                        }) : GS.service.authenticateFacebookUser(g.authResponse.userID, "", "", "", g.authResponse.accessToken, this.callback("onAuthFacebookUser", a, c), function () {
                    $.isFunction(c) && c({error:"POPUP_SIGNUP_LOGIN_FORM_FACEBOOK_ERROR"})
                }); else GS.getFacebook().showInvalidPermissionsLightbox(GS.getFacebook().callback(function () {
                    GS.airbridge &&
                            GS.airbridge.isDesktop ? FB.login(this.callback("onAIRLogin", a, c, h), {scope:this.REQUIRED_PERMISSIONS}) : FB.login(this.callback("onLogin", a, c, h), {scope:this.REQUIRED_PERMISSIONS})
                }))
            }), function () {
                $.isFunction(c) && c({error:"POPUP_SIGNUP_LOGIN_FORM_FACEBOOK_ERROR"});
                FB.getLoginStatus(GS.getFacebook().callback("onFacebookLoginStatus", false), true)
            })
        }, save:function (a, c, h) {
            if (window.FB && FB.getAccessToken() && GS.user.isLoggedIn) {
                var g = FB.getAuthResponse(), k = this.cleanSession(g);
                if (GS.user.Flags & this.SERVICE_ID ||
                        GS.user.Flags & this.FACEBOOK_ONLY_SERVICE_ID) {
                    k ? GS.service.updateUserFacebookData(k.facebookUserID, k.sessionKey, k.accessToken1, k.accessToken3, a ? a : 0, null, this.callback("onSaveUserFacebookData", c, h), h) : GS.service.updateUserFacebookData(g.userID, "", "", "", a ? a : 0, g.accessToken, this.callback("onSaveUserFacebookData", c, h), h);
                    if (!(a & this.SCROBBLING_OFF_FLAG) && (this.flags & this.SCROBBLING_OFF_FLAG) > 0)this.scrobblingEnabled = true
                } else {
                    k ? GS.service.saveUserFacebookData(k.facebookUserID, k.sessionKey, k.accessToken1,
                            k.accessToken3, a ? a : 0, null, this.callback("onSaveUserFacebookData", c, h), h) : GS.service.saveUserFacebookData(g.userID, "", "", "", a ? a : 0, g.accessToken, this.callback("onSaveUserFacebookData", c, h), h);
                    if (!(a & this.SCROBBLING_OFF_FLAG))this.scrobblingEnabled = true
                }
                this.flags = a;
                if (this.flags & this.SCROBBLING_OFF_FLAG)this.scrobblingEnabled = false; else this.checkUserPermissions(this.USER_ACTIONS, this.callback(function (m) {
                    if (m)this.scrobblingEnabled = true; else {
                        $.publish("gs.facebook.notification.cannotPost", {notifLocale:"POPUP_LOGIN_FACEBOOK_FLAGS_LISTEN_PERMS",
                            cancelButton:"NOTIF_FACEBOOK_LISTENS_DISABLE", successButton:"SURE"});
                        this.scrobblingEnabled = false
                    }
                }), function () {
                    $.publish("gs.facebook.notification.cannotPost", {notifLocale:"POPUP_LOGIN_FACEBOOK_FLAGS_LISTEN_PERMS", cancelButton:"NOTIF_FACEBOOK_LISTENS_DISABLE", successButton:"SURE"});
                    this.scrobblingEnabled = false
                })
            }
        }, onSaveUserFacebookData:function (a, c, h) {
            if (h == 1 && window.FB) {
                this.facebookUserID = FB.getAuthResponse().userID;
                this.connected = true;
                FB.api("/me", this.callback("onGetMyProfile", a, c));
                if (!(GS.user.Flags &
                        this.SERVICE_ID) && !(GS.user.Flags & this.FACEBOOK_ONLY_SERVICE_ID) && this.lastUser !== GS.user.UserID) {
                    !$("#lightbox_wrapper:visible").length && GS.page.activePageName != "SettingsController" && GS.getLightbox().open("newFacebookUser");
                    GS.getGuts().logEvent("facebookNewSave", {newSave:true})
                }
                GS.user.Flags |= this.SERVICE_ID
            } else if (h == -1)if (GS.user.Flags & this.SERVICE_ID || GS.user.Flags & this.FACEBOOK_ONLY_SERVICE_ID)GS.service.getUserFacebookData(this.callback("onUserFacebookData", a, function () {
                c("FACEBOOK_PROBLEM_CONNECTING_ERROR_MSG")
            }),
                    function () {
                        c("FACEBOOK_PROBLEM_CONNECTING_ERROR_MSG")
                    }); else c && c({error:"FACEBOOK_DUPLICATE_ACCOUNT_ERROR_MSG", signupError:4096}); else c && c({error:"POPUP_SIGNUP_LOGIN_FORM_FACEBOOK_ERROR"})
        }, onGetMyProfile:function (a, c, h) {
            if (h && h.id) {
                this.profile = h;
                $.publish("gs.facebook.profile.update");
                a && a()
            } else {
                this.connected = false;
                this.lastError = h;
                GS.user && GS.user.isLoggedIn && h.error && h.error.type == "OAuthException" && this.APPLICATION_ID == this.LISTEN_APPLICATION_ID && this.showReAuthLightbox();
                c && c()
            }
        }, logout:function (a) {
            if (GS.user.isLoggedIn)this.profile &&
                    this.profile.id ? GS.service.removeUserFacebookData(this.profile.id, this.callback("onLogout", a)) : GS.service.removeUserFacebookData(false, this.callback("onLogout", a)); else {
                this.clearInfo();
                $.isFunction(a) && a()
            }
        }, onLogout:function (a) {
            if (!this.registeredWithFacebook) {
                GS.user.Flags = (GS.user.Flags | this.SERVICE_ID) - this.SERVICE_ID;
                this.lastUser = GS.user.UserID
            }
            this.clearInfo(a);
            this.forceLogin = true
        }, clearInfo:function (a) {
            this.profile = {};
            this.friends = null;
            this.friendPermissions = {};
            this.userPermissions = {};
            this.registeredWithFacebook =
                    this.connected = false;
            this.onLoginSaveData = this.loginOnLoad = null;
            this.facebookUserID = false;
            this.flags = 0;
            this.scrobblingEnabled = false;
            this.onUpdateCallback = a;
            FB.getLoginStatus(this.callback("onFacebookLoginStatus", false), true);
            $.isFunction(this.onUpdateCallback) && setTimeout(this.callback(function () {
                if ($.isFunction(this.onUpdateCallback)) {
                    this.onUpdateCallback();
                    this.onUpdateCallback = null
                }
            }), 1E4);
            $.publish("gs.facebook.profile.update")
        }, onFavoriteSong:function (a, c, h) {
            if (this.connected && (h || (this.flags &
                    this.WALL_FAVORITES) > 0)) {
                var g = this.callback(function () {
                    $.isFunction(a.toUrl) ? this.postLink("me", "http://grooveshark.com" + a.toUrl().replace("#!/", "/"), c, "song", h ? "notif" : "auto", this.callback("initiateRateLimit"), this.callback("onFailedPostEvent"), !h, a) : GS.Models.Song.getSong(_.orEqualEx(a.SongID, a.songID, a), this.callback(function (k) {
                        if ($.isFunction(k.toUrl))this.postLink("me", "http://grooveshark.com" + k.toUrl().replace("#!/", "/"), c, "song", h ? "notif" : "auto", this.callback("initiateRateLimit"), this.callback("onFailedPostEvent"),
                                !h, k)
                    }), this.onFailedPostEvent)
                });
                this.autoRateLimited && !h ? setTimeout(function () {
                    $.publish("gs.facebook.notification.rateLimited", {callback:g, type:"song"})
                }, 300) : g()
            }
        }, onPlaylistCreate:function (a, c, h) {
            if (this.connected && (h || (this.flags & this.WALL_PLAYLIST_CREATE) > 0)) {
                var g = this.callback(function () {
                    this.postLink("me", "http://grooveshark.com" + a.toUrl().replace("#!/", "/"), c, "playlist", h ? "notif" : "auto", this.callback("initiateRateLimit"), this.callback("onFailedPostEvent"), !h, a)
                });
                this.autoRateLimited &&
                        !h ? setTimeout(function () {
                    $.publish("gs.facebook.notification.rateLimited", {callback:g, type:"playlist"})
                }, 300) : g()
            }
        }, onSubscribePlaylist:function (a, c) {
            this.connected && this.postLink("me", "http://grooveshark.com" + a.toUrl().replace("#!/", "/"), c, "playlist", "notif", this.callback("initiateRateLimit"), this.callback("onFailedPostEvent"), false, a)
        }, onFollowUser:function (a, c) {
            this.connected && this.postLink("me", "http://grooveshark.com" + a.toUrl().replace("#!/", "/"), c, "user", "notif", this.callback("initiateRateLimit"),
                    this.callback("onFailedPostEvent"), false, a)
        }, onFailedPostEvent:function () {
            $.publish("gs.facebook.notification.sent", {params:{type:"error", hideUndo:true}, data:{}, notifData:{}})
        }, initiateRateLimit:function () {
            this.autoRateLimited && window.clearTimeout(this.autoRateLimited);
            this.autoRateLimited = setTimeout(this.callback(function () {
                this.autoRateLimited = null
            }), this.AUTO_RATE_LIMIT)
        }, postToFeed:function (a, c, h, g, k, m, n, o, r) {
            a = _.orEqual(a, "me");
            this.postToFacebook("/" + a + "/feed", a, c, h, g, k, m, n, false, r)
        }, postLink:function (a, c, h, g, k, m, n, o, r) {
            a = _.orEqual(a, "me");
            this.postToFacebook("/" + a + "/links", a, c, h, g, k, m, n, o, r)
        }, postToFacebook:function (a, c, h, g, k, m, n, o, r, A) {
            if (this.connected) {
                var w = {};
                w.link = h;
                w.message = g;
                w.access_token = FB.getAccessToken();
                w.type = _.orEqual(k, "song");
                w.ref = _.orEqual(m, "");
                h = $.extend(w, {hideUndo:!r, object:A});
                FB.api(a, "post", w, this.callback("onPostAPIReturn", h, a, c, n, o))
            } else $.isFunction(o) && o("No facebook session.")
        }, onPostAPIReturn:function (a, c, h, g, k, m) {
            m.error ? this.onFailedPost(c, k, m.error, h, a) : this.onFeedPost(a,
                    g, h, m)
        }, onFeedPost:function (a, c, h, g) {
            g.target = h;
            a.type && $.publish("gs.facebook.notification.sent", {params:a, data:g, notifData:{}});
            c && c();
            GS.getGuts().forceLogEvent("facebookShareAPI", {userID:GS.user.UserID, success:1})
        }, onFailedPost:function (a, c, h, g, k) {
            this.lastError = h;
            $.isFunction(c) && c(h);
            if (h.type == "OAuthException" && (h.message.indexOf("User not visible") > -1 || h.message.indexOf("Requires extended permission") > -1))h.message += " (Target: " + g + ")"; else if (k && h.type == "OAuthException" && h.message.indexOf("Param message must be non-blank text") >
                    -1)h.message += " (Message: " + _.cleanText(k.message) + ")"; else if (k && h.type == "OAuthException" && h.message.indexOf("An active access token must be used to query information") > -1)h.message = "An active access token needed.";
            if (GS.airbridge && GS.airbridge.isDesktop)h.message += " (Desktop)";
            h.message += FB.getAccessToken() && FB.getAccessToken() !== "" ? " (" + FB.getAccessToken().substring(0, 10) + ")" : " (No Access Token)";
            if (this.connected)h.message += " (Connected)";
            if (this.facebookUserID)h.message += " (FBUID: " + this.facebookUserID +
                    ")";
            GS.getGuts().forceLogEvent("facebookShareErrMessage", {message:h.message, type:h.type});
            GS.getGuts().forceLogEvent("facebookShareAPI", {userID:GS.user.UserID, success:0})
        }, removeEvent:function (a) {
            if (window.FB && this.connected && a && a.id) {
                var c = (a.target == "me" ? FB.getAuthResponse().userID : a.user) + "_" + a.id;
                FB.api("/" + c + "?method=delete", this.callback("onRemoveEvent", a))
            }
        }, onRemoveEvent:function (a, c) {
            if (c == true)$.publish("gs.facebook.notification.removed", {data:c, params:a}); else {
                this.onFailedPost(null, null,
                        c);
                $.publish("gs.notification", {type:"error", message:$.localize.getString("NOTIF_FACEBOOK_UNDO_FAILED")})
            }
        }, onNowPlaying:function (a) {
            if (!(!this.connected || !this.scrobblingEnabled || !FB.getAccessToken())) {
                if (!this.currentListening || a.queueSongID != this.currentListening.song.queueSongID || a.SongID != this.currentListening.song.SongID) {
                    this.currentListening && this.currentListening.id && this.currentListening.secondsListened < this.MINIMUM_DURATION && this.deleteListen(this.currentListening.id);
                    this.currentListening =
                    {song:a, secondsListened:0, id:null, tries:0}
                } else if (GS.player.repeatMode == GS.player.REPEAT_ONE && a.queueSongID == this.currentListening.song.queueSongID) {
                    this.currentListening.secondsListened = 0;
                    if (this.currentListening.id) {
                        this.deleteListen(this.currentListening.id, this.callback(function () {
                            delete this.currentListening.id;
                            this.currentListening.tries = 0;
                            this.postListen(this.currentListening.song, this.callback("onNowPlayingComplete"))
                        }));
                        return
                    }
                } else return;
                a && this.postListen(a, this.callback("onNowPlayingComplete"))
            }
        },
        onNowPlayingComplete:function (a, c) {
            if (!c || !c.id) {
                if (this.currentListening.tries > 1)if (c.error && c.error.message && (c.error.message.indexOf("Timeline is not activated") !== -1 || c.error.message.indexOf("Requires extended permission") !== -1)) {
                    $.publish("gs.facebook.notification.cannotPost", {notifLocale:"POPUP_LOGIN_FACEBOOK_FLAGS_LISTEN_PERMS_FAILED", cancelButton:"NOTIF_FACEBOOK_LISTENS_DISABLE", successButton:"SURE", error:true});
                    this.scrobblingEnabled = false
                } else this.onFailedPost("scrobble", function () {
                    $.publish("gs.notification",
                            {type:"error", message:$.localize.getString("POPUP_FAIL_LISTENS_FACEBOOK")})
                }, c.error)
            } else this.currentListening.id = c.id
        }, onSongPlaying:function (a) {
            if (this.connected && this.scrobblingEnabled) {
                a = a.activeSong;
                if (!this.currentListening || a.queueSongID != this.currentListening.song.queueSongID || a.SongID != this.currentListening.song.SongID)this.currentListening = {song:a, secondsListened:0, id:null, tries:0}; else this.currentListening.secondsListened += 0.5
            }
        }, onPlayStatusChange:function (a) {
            if (this.connected && this.scrobblingEnabled &&
                    this.currentListening && this.currentListening.song)switch (a.status) {
                case GS.player.PLAY_STATUS_FAILED:
                case GS.player.PLAY_STATUS_PAUSED:
                case GS.player.PLAY_STATUS_NONE:
                    a = GS.player.getPlaybackStatus();
                    if (a.position)this.currentListening.secondsListened = Math.round(a.position / 1E3);
                    if (this.currentListening.id && this.currentListening.secondsListened < this.MINIMUM_DURATION)this.deleteListen(this.currentListening.id, this.callback(function () {
                        delete this.currentListening.id;
                        this.currentListening.tries = 0
                    })); else if (this.currentListening.id &&
                            !this.currentListening.paused) {
                        var c = new Date;
                        this.updateListenEndTime(this.currentListening.id, c);
                        this.currentListening.paused = true
                    }
                    break;
                case GS.player.PLAY_STATUS_PLAYING:
                    if (this.currentListening.id) {
                        if (this.currentListening.paused) {
                            c = new Date;
                            if (this.currentListening.expires && this.currentListening.expires - c < 0)this.deleteListen(this.currentListening.id, this.callback(function () {
                                delete this.currentListening.id;
                                this.currentListening.tries = 0;
                                this.postListen(this.currentListening.song, this.callback("onNowPlayingComplete"))
                            }));
                            else {
                                c = new Date;
                                c.setTime(c.getTime() + a.duration - 1E3 * this.currentListening.secondsListened);
                                this.updateListenEndTime(this.currentListening.id, c)
                            }
                        }
                    } else this.postListen(this.currentListening.song, this.callback("onNowPlayingComplete"));
                    this.currentListening.paused = false;
                    break
            }
        }, postListen:function (a, c) {
            if (!(this.currentListening && (this.currentListening.posting || this.currentListening.tries > 1))) {
                if (this.currentListening) {
                    this.currentListening.posting = true;
                    this.currentListening.tries++
                }
                var h = GS.player.getPlaybackStatus();
                setTimeout(this.callback(function () {
                    var g = {}, k = a.toUrl().replace("#!/", "/");
                    if (k.toLowerCase() == "/notfound")$.publish("gs.notification", {type:"error", message:$.localize.getString("POPUP_FAIL_LISTENS_FACEBOOK")}); else {
                        g.song = "http://grooveshark.com" + k;
                        g.access_token = FB.getAccessToken();
                        if (a.AlbumID && a.AlbumName)g.album = "http://grooveshark.com" + _.cleanUrl(a.AlbumName, a.AlbumID, "album").replace("#!/", "/");
                        if (a.ArtistID && a.ArtistName)g.album = "http://grooveshark.com" + _.cleanUrl(a.ArtistName, a.ArtistID,
                                "artist").replace("#!/", "/");
                        if (h.duration) {
                            g.expires_in = Math.round((h.duration - h.position) / 1E3);
                            k = new Date;
                            this.currentListening.expires = k.setTime(k.getTime() + h.duration)
                        }
                        FB.api("/me/grooveshark:listen", "post", g, this.callback(function (m) {
                            $.isFunction(c) && c(a, m);
                            delete this.currentListening.posting;
                            GS.getGuts().logEvent("facebookScrobbleSuccess", {userID:GS.user.UserID})
                        }))
                    }
                }), 50)
            }
        }, updateListenEndTime:function (a, c) {
            function h(k) {
                return k < 10 ? "0" + k : k
            }

            var g = c.getUTCFullYear() + "-" + h(c.getUTCMonth() + 1) +
                    "-" + h(c.getUTCDate()) + "T" + h(c.getUTCHours()) + ":" + h(c.getUTCMinutes()) + ":" + h(c.getUTCSeconds()) + "Z";
            FB.api("/" + a + "?end_time=" + g, "post")
        }, deleteListen:function (a, c) {
            if (!this.currentListening.deleting) {
                this.currentListening.deleting = true;
                FB.api("/" + a + "?method=delete", this.callback("onDeleteListen", c))
            }
        }, onDeleteListen:function (a, c) {
            if (c)$.isFunction(a) && a(); else $.publish("gs.notification", {type:"error", message:$.localize.getString("POPUP_FAIL_LISTENS_FACEBOOK")});
            delete this.currentListening.deleting
        },
        getFriends:function (a) {
            if (this.friends)a(this.friends); else if (this.connected)FB.api("me/friends", this.callback("onFacebookGetFriends", a)); else $.isFunction(a) && a(null)
        }, onFacebookGetFriends:function (a, c) {
            if (c.data) {
                var h = [];
                $.each(c.data, function (g, k) {
                    h.push(k)
                });
                h.sort(function (g, k) {
                    var m = (g.name || "").toLowerCase(), n = (k.name || "").toLowerCase();
                    if (m < n)return-1; else if (m > n)return 1;
                    return 0
                });
                this.friends = h
            } else if (c.error) {
                this.lastError = c.error;
                $.publish("gs.notification", {type:"error", message:$.localize.getString("NOTIF_FACEBOOK_FINDFRIENDS_ERROR")});
                $.isFunction(a) && a(null)
            }
            $.isFunction(a) && a(this.friends)
        }, canPostToFriend:function (a, c) {
            (a = parseInt(a)) || $.isFunction(c) && c(false);
            if (this.friendPermissions[a] && typeof this.friendPermissions[a].canPost != "undefined")$.isFunction(c) && c(this.friendPermissions[a].canPost); else this.queryFQL("select can_post FROM user WHERE uid = " + a, this.callback(function (h) {
                if (h[0] && h[0]) {
                    if (this.friendPermissions[a])this.friendPermissions[a].canPost = h[0].can_post; else this.friendPermissions[a] = {canPost:h[0].can_post};
                    $.isFunction(c) && c(h[0].can_post)
                }
            }), function () {
            }, 2)
        }, checkUserPermissions:function (a, c, h) {
            if (this.userPermissions)if (a.indexOf(",") > 0) {
                for (var g = a.split(","), k = true, m = 0, n = g.length; m < n; m++)if (!this.userPermissions[g[m]] || this.userPermissions[g[m]] == "0") {
                    k = false;
                    break
                }
                if (k)if ($.isFunction(c)) {
                    c(true);
                    return
                }
            } else if (this.userPermissions[a] && this.userPermissions[a] != "0")if ($.isFunction(c)) {
                c(true);
                return
            }
            this.queryFQL("SELECT " + a + " FROM permissions WHERE uid = me()", this.callback(function (o) {
                if (o &&
                        o[0]) {
                    $.extend(this.userPermissions, o[0]);
                    for (var r in o[0])if (r && o[0].hasOwnProperty(r))if (o[0][r] == "0") {
                        $.isFunction(c) && c(false);
                        return
                    }
                    $.isFunction(c) && c(true)
                } else $.isFunction(c) && c(false)
            }), h, false)
        }, getFacebookDetails:function (a, c) {
            if (a.toUrl) {
                var h = "http://listen.grooveshark.com/" + a.toUrl().replace("#!/", "");
                GS.service.makeFacebookRequest("?ids=" + encodeURIComponent(h) + "&limit=100", null, "GET", function (g) {
                    try {
                        if (g) {
                            g = JSON.parse(g);
                            _.forEach(g, function (m) {
                                c(m)
                            })
                        }
                    } catch (k) {
                    }
                })
            }
        }, getGroovesharkUsersFromFriends:function (a) {
            this.getFriends(this.callback(function (c) {
                if ($.isArray(c)) {
                    var h =
                            [], g = [];
                    $.each(c, function (k, m) {
                        if (m && m.id) {
                            h.push(m.id);
                            g[m.id] = m.name
                        }
                    });
                    GS.service.getGroovesharkUsersFromFacebookUserIDs(h, this.callback("onGetGroovesharkUsers", g, a), function () {
                        $.publish("gs.notification", {type:"error", message:$.localize.getString("NOTIF_FACEBOOK_FINDFRIENDS_ERROR")});
                        $.isFunction(a) && a()
                    })
                } else {
                    $.publish("gs.notification", {type:"error", message:$.localize.getString("NOTIF_FACEBOOK_FINDFRIENDS_ERROR")});
                    $.isFunction(a) && a()
                }
            }))
        }, onGetGroovesharkUsers:function (a, c, h) {
            var g = [], k =
                    false;
            if (h) {
                $.each(h, function (m, n) {
                    if (n && n.UserID && n.FacebookUserID && GS.user.favorites.users && !GS.user.favorites.users[n.UserID]) {
                        n.FacebookName = a[n.FacebookUserID];
                        g.push(n)
                    } else if (GS.user.favorites.users && GS.user.favorites.users[n.UserID])k = true
                });
                if (g && g.length > 0)GS.getLightbox().open("gsUsersFromThirdParty", {users:g, isTwitter:false, isFacebook:true}); else k ? $.publish("gs.facebook.notification.findFriends", {message:"NOTIF_FACEBOOK_FINDFRIENDS_ALREADY", inviteFriends:false}) : $.publish("gs.facebook.notification.findFriends",
                        {message:"NOTIF_FACEBOOK_FINDFRIENDS_NONE", inviteFriends:true})
            } else $.publish("gs.notification", {type:"error", message:$.localize.getString("NOTIF_FACEBOOK_FINDFRIENDS_ERROR")});
            $.isFunction(c) && c()
        }})
})();
GS.Controllers.BaseController.extend("GS.Controllers.LastfmController", {isGSSingleton:true, preSetup:function () {
    var b = GS.Controllers.BaseController.singletonCallback, a = $.subscribe;
    a("gs.auth.update", b("lastfm", "update", true));
    a("gs.player.nowplaying", b("lastfm", "onNowPlaying"));
    a("gs.player.playing.continue", b("lastfm", "onSongPlaying"))
}}, {SERVICE_ID:2, API_KEY:"b1ecfd8a5f8ec4dbb4cdacb8f3638f6d", P_VERSION:"1.2.1", URL_USER_AUTH:"http://www.last.fm/api/auth", URL_AUDIOSCROBBLER:"http://ws.audioscrobbler.com/2.0/",
    CLIENT_ID:"gvs", CLIENT_VERSION:"1", MINIMUM_DURATION:240, SCROBBLING_FLAG:1, FAVORITES_FLAG:2, DEFAULT_FLAGS:1, authToken:null, sessionKey:null, username:null, sessionID:null, flags:0, scrobblingEnabled:false, lastError:null, nowPlaying:null, lastPlayed:null, currentListening:null, canUpdate:false, lastError:null, onUpdateSubcription:"gs.lastfm.profile.update", init:function () {
        if (!window.confirmLastfmConnection)window.confirmLastfmConnection = this.callback(function (b) {
            console.log("last.fm confirm connection", b);
            if (this.lastfmOpenerWindow) {
                this.lastfmOpenerWindow.close();
                this.lastfmOpenerWindow = null
            }
            try {
                b = JSON.parse(b)
            } catch (a) {
                this.lastError = "parseError";
                this.loginFailedCallback();
                return
            }
            GS.airbridge && GS.airbridge.isDesktop ? window.setTimeout(function () {
                GS.getLastfm().onLogin(b)
            }, 300) : this.onLogin(b)
        });
        this._super()
    }, appReady:function () {
        this.subscribe("gs.cowbell.ready", this.callback("commReady"))
    }, commReady:function () {
        this.canUpdate = true;
        this.update()
    }, update:function () {
        if (this.canUpdate) {
            this.canUpdate = false;
            GS.user && GS.user.isLoggedIn && GS.user.UserID > 0 && GS.user.Flags &
                    this.SERVICE_ID ? GS.service.getLastfmService(this.callback("onGetService"), this.callback("onGetService")) : this.clearInfo();
            setTimeout(this.callback(function () {
                this.canUpdate = true
            }), 0);
            this.loaded = true
        }
    }, onGetService:function (b) {
        if (b.Session) {
            this.username = b.LastfmUsername;
            this.sessionKey = b.Session;
            this.flags = 1;
            this.scrobblingEnabled = true;
            if (b.FlagScrb) {
                this.flags |= this.SCROBBLING_FLAG;
                this.scrobblingEnabled = true
            }
            if (b.FlagFav)this.flags |= this.FAVORITES_FLAG;
            this.connected = true;
            $.publish("gs.lastfm.profile.update")
        }
    },
    showReAuthLightbox:function () {
        GS.getLightbox().open({type:"reAuthLastfm", view:{header:"POPUP_LASTFM_REAUTH_TITLE", message:"POPUP_LASTFM_REAUTH_MESSAGE", buttonsRight:[
            {label:"POPUP_REAUTH_SUBMIT", className:"submit"}
        ], buttonsLeft:GS.getLastfm().registeredWithLastfm ? [] : [
            {label:"POPUP_LASTFM_REAUTH_CANCEL", className:"close"}
        ]}, callbacks:{".submit":function () {
            GS.getLastfm().logout(function () {
                GS.getLastfm().login(function () {
                    GS.getLightbox().close()
                })
            })
        }, ".close":function () {
            GS.getLastfm().logout(function () {
                GS.getLightbox().close()
            })
        }}})
    },
    login:function (b, a) {
        if (GS.user && GS.user.isLoggedIn) {
            this.loginSuccessCallback = b;
            this.loginFailedCallback = a;
            this.sessionKey = null;
            var c = "http://" + window.location.host + "/lastfmCallback.php?window=" + window.name, h = googleOpenIDPopup.getCenteredCoords(950, 700);
            this.lastfmOpenerWindow = window.open(this.URL_USER_AUTH + "?api_key=" + this.API_KEY + "&cb=" + c, "", "width=950,height=700,left=" + h[0] + ",top=" + h[1]);
            if (GS.airbridge && GS.airbridge.isDesktop)this.lastfmOpenerWindow.parentSandboxBridge = {confirmLastfmConnection:window.confirmLastfmConnection}
        } else a({error:"LASTFM_PROBLEM_NOT_LOGGED_IN_ERROR_MSG"})
    },
    onLogin:function (b) {
        if (b.error || !b.token) {
            this.lastError = b.error;
            this.loginFailedCallback()
        } else {
            if (!this.flags)this.flags = this.DEFAULT_FLAGS;
            if (GS.user.Flags & this.SERVICE_ID || GS.user.Flags & this.LASTFM_ONLY_SERVICE_ID)GS.service.updateLastfmService("", b.token, "", 0, 0, this.callback("onSaveLastfmService", this.loginSuccessCallback, this.loginFailedCallback), this.loginFailedCallback); else {
                GS.service.saveLastfmService("", b.token, "", this.flags, this.callback("onSaveLastfmService", this.loginSuccessCallback,
                        this.loginFailedCallback), this.loginFailedCallback);
                if ((this.flags & this.SCROBBLING_FLAG) > 0)this.scrobblingEnabled = true
            }
        }
    }, onSaveLastfmService:function (b, a, c) {
        if (c.result && c.lastfmData && c.lastfmData.user) {
            this.username = c.lastfmData.user;
            this.sessionKey = c.lastfmData.session;
            this.connected = true;
            $.publish("gs.lastfm.profile.update");
            GS.user.Flags |= this.SERVICE_ID;
            $.isFunction(a) && b()
        } else if (c.result == -1)if (GS.user.Flags & this.SERVICE_ID || GS.user.Flags & this.FACEBOOK_ONLY_SERVICE_ID)GS.service.getLastfmService(this.callback("onGetService",
                b, function () {
                    $.isFunction(a) && a({error:"LASTFM_PROBLEM_CONNECTING_ERROR_MSG"})
                }), function () {
            $.isFunction(a) && a({error:"LASTFM_PROBLEM_CONNECTING_ERROR_MSG"})
        }); else $.isFunction(a) && a({error:"LASTFM_DUPLICATE_ACCOUNT_ERROR_MSG"}); else $.isFunction(a) && a({error:"POPUP_SIGNUP_LOGIN_FORM_LASTFM_ERROR"})
    }, saveFlags:function (b, a, c) {
        var h = 0, g = 0;
        if (b & this.SCROBBLING_FLAG && !(this.flags & this.SCROBBLING_FLAG)) {
            h |= this.SCROBBLING_FLAG;
            this.scrobblingEnabled = true
        } else if (!(b & this.SCROBBLING_FLAG) && this.flags &
                this.SCROBBLING_FLAG)g |= this.SCROBBLING_FLAG;
        if (b & this.FAVORITES_FLAG && !(this.flags & this.FAVORITES_FLAG))h |= this.FAVORITES_FLAG; else if (!(b & this.FAVORITES_FLAG) && this.flags & this.FAVORITES_FLAG)g |= this.FAVORITES_FLAG;
        this.flags = b;
        GS.user.Flags & this.SERVICE_ID || GS.user.Flags & this.LASTFM_ONLY_SERVICE_ID ? GS.service.updateLastfmService("", this.sessionKey, this.username, h, g, this.callback("onSaveLastfmService", a, c), c) : GS.service.saveLastfmService("", this.sessionKey, this.username, h, this.callback("onSaveLastfmService",
                a, c), c)
    }, logout:function (b) {
        this.username ? GS.service.removeLastfmService(this.username, this.callback("onLogout", b)) : GS.service.removeLastfmService(false, this.callback("onLogout", b))
    }, onLogout:function (b) {
        GS.user.Flags = (GS.user.Flags | this.SERVICE_ID) - this.SERVICE_ID;
        this.clearInfo();
        $.isFunction(b) && b()
    }, clearInfo:function () {
        this.sessionKey = null;
        this.username = "";
        this.flags = null;
        this.scrobblingEnabled = this.connected = false;
        $.publish("gs.lastfm.profile.update")
    }, onNowPlaying:function (b) {
        if (!this.currentListening ||
                b.queueSongID != this.currentListening.queueSongID || b.SongID != this.currentListening.songID)this.currentListening = {songID:b.SongID, queueSongID:b.queueSongID, secondsListened:0, scrobbled:false}; else if (GS.player.repeatMode == GS.player.REPEAT_ONE && b.queueSongID == this.currentListening.queueSongID) {
            this.currentListening.scrobbled = false;
            this.currentListening.secondsListened = 0
        } else return;
        if ((this.flags & this.SCROBBLING_FLAG) > 0 && this.scrobblingEnabled && b) {
            this.nowPlaying = {track:b.SongName, artist:b.ArtistName,
                album:b.AlbumName, duration:b.EstimateDuration ? Math.round(b.EstimateDuration / 1E3) : 0, method:"track.updateNowPlaying", sk:this.sessionKey, api_key:this.API_KEY};
            if (b.TrackNum)this.nowPlaying.trackNumber = String(b.TrackNum);
            this.getJSON(this.URL_AUDIOSCROBBLER, this.nowPlaying, this.callback("onNowPlayingComplete"), this.callback("onNowPlayingFailed"), true)
        }
    }, onNowPlayingComplete:function (b) {
        if (!b || !b.nowplaying)this.onLastfmError("POPUP_FAIL_SCROBBLE_LASTFM", b);
        GS.getGuts().logEvent("lastfmScrobbleSuccess",
                {userID:GS.user.UserID})
    }, onLastfmError:function (b, a) {
        b || (b = "POPUP_FAIL_COMMUNICATE_LASTFM");
        (this.lastError = a) && a.error && a.error == 9 ? this.showReAuthLightbox() : $.publish("gs.notification", {type:"error", message:$.localize.getString(b)});
        GS.getGuts().forceLogEvent("lastfmScrobbleFailed", {userID:GS.user.UserID, message:a.message})
    }, onSongPlaying:function (b) {
        var a = b.activeSong;
        b = Math.round(b.duration / 1E3);
        if (!this.currentListening || a.queueSongID != this.currentListening.queueSongID || a.SongID != this.currentListening.songID)this.currentListening =
        {songID:a.SongID, queueSongID:a.queueSongID, secondsListened:0, scrobbled:false}; else this.currentListening.secondsListened += 0.5;
        if ((this.flags & this.SCROBBLING_FLAG) > 0 && this.scrobblingEnabled && a && b >= 30 && (this.currentListening.secondsListened >= this.MINIMUM_DURATION || this.currentListening.secondsListened >= b / 2) && !this.currentListening.scrobbled) {
            this.lastPlayed = {artist:a.ArtistName, track:a.SongName, timestamp:Math.round((new Date).getTime() / 1E3), duration:a.EstimateDuration ? Math.round(a.EstimateDuration /
                    1E3) : 0, album:a.AlbumName, method:"track.scrobble", sk:this.sessionKey, api_key:this.API_KEY};
            if (a.TrackNum)this.lastPlayed.trackNumber = String(a.TrackNum);
            this.currentListening.scrobbled = true;
            this.getJSON(this.URL_AUDIOSCROBBLER, this.lastPlayed, this.callback("onSongPlayingComplete"), this.callback("onNowPlayingFailed"), true)
        }
    }, onSongPlayingComplete:function (b) {
        if (!b || !b.scrobbles)this.onLastfmError("POPUP_FAIL_SCROBBLE_LASTFM", b);
        GS.getGuts().logEvent("lastfmScrobbleCompleteSuccess", {userID:GS.user.UserID})
    },
    getJSON:function (b, a, c, h, g) {
        if (b && a && c)if (g)GS.service.makeLastfmRequest(a, function (k) {
            try {
                k = JSON.parse(k)
            } catch (m) {
                k = null
            }
            c(k)
        }, h ? h : c); else {
            a.format = "json";
            $.ajax({url:b, data:a, success:c, error:h ? h : c, dataType:"jsonp", cache:true})
        }
    }});
(function () {
    var b = 0;
    GS.Controllers.BaseController.extend("GS.Controllers.GoogleController", {isGSSingleton:true}, {SERVICE_ID:64, GOOGLE_ONLY_SERVICE_ID:32, REQUIRED:"email,firstname,lastname", EXTENSIONS:{"openid.ns.ax":"http://openid.net/srv/ax/1.0", "openid.ax.mode":"fetch_request", "openid.ax.type.email":"http://axschema.org/contact/email", "openid.ax.type.firstname":"http://axschema.org/namePerson/first", "openid.ax.type.lastname":"http://axschema.org/namePerson/last", "openid.ax.required":"email,firstname,lastname",
        "openid.ui.icon":"true"}, googleOpener:null, googleOpenerWindow:null, googleOpenerInterval:null, connected:false, registeredWithGoogle:false, email:"", firstname:"", lastname:"", googleID:"", lastError:"", onLoginSaveData:null, googlePlusloaded:false, loginSuccessCallback:null, loginFailedCallback:null, init:function () {
        this.subscribe("gs.auth.update", this.callback("update"));
        if (!window.confirmGoogleConnection)window.confirmGoogleConnection = this.callback(function (a) {
            if (this.googleOpenerWindow) {
                this.googleOpenerWindow.close();
                this.googleOpenerWindow = null
            }
            try {
                a = JSON.parse(a)
            } catch (c) {
                this.lastError = "parseError";
                this.loginFailedCallback();
                return
            }
            if (a.mode == "cancel" || a.error == "cancel") {
                this.lastError = "cancel";
                this.onCancelledLogin()
            } else GS.airbridge && GS.airbridge.isDesktop ? window.setTimeout(function () {
                GS.getGoogle().onLogin(a)
            }, 300) : this.onLogin(a)
        });
        this._super()
    }, appReady:function () {
        b = this.subscribe("gs.cowbell.ready", this.callback("commReady"));
        this.googleOpener = googleOpenIDPopup.createPopupOpener({realm:"http://*.grooveshark.com",
            opEndpoint:"https://www.google.com/accounts/o8/ud", returnToUrl:"http://" + window.location.hostname + "/googleCallback.php?window=" + window.name, shouldEncodeUrls:true, extensions:this.EXTENSIONS});
        if (!window.name)window.name = gsConfig.windowName
    }, commReady:function () {
        if (_.browserDetect().browser != "msie" || _.browserDetect().version > 6) {
            window.goPLoadAttempts = 0;
            window.loadGooglePlus = function () {
                try {
                    var a = document.getElementById("go-root");
                    if (a && a.getElementsByTagName("script").length) {
                        a.removeChild(a.getElementsByTagName("script")[0]);
                        a.getElementsByTagName("div").length && a.removeChild(a.getElementsByTagName("div")[0]);
                        window.gapi = null;
                        GS.getGoogle().googlePlusloaded = false
                    }
                    var c = document.createElement("script");
                    c.async = true;
                    c.src = document.location.protocol + "//apis.google.com/js/plusone.js";
                    c.text = "{parsetags: 'explicit'}";
                    c.onload = c.onreadystatechange = function () {
                        if ($.browser.msie && this.readyState) {
                            if (this.readyState === "complete" || this.readyState === "loaded") {
                                this.onload = this.onreadystatechange = null;
                                setTimeout(function () {
                                    window.gapi &&
                                    GS.getGoogle().initGooglePlus()
                                }, 10)
                            }
                        } else {
                            this.onload = this.onreadystatechange = null;
                            setTimeout(function () {
                                window.gapi && GS.getGoogle().initGooglePlus()
                            }, 10)
                        }
                    };
                    document.getElementById("go-root").appendChild(c);
                    window.goPLoadAttempts++;
                    window.googlePlusLoadTimeout = setTimeout(function () {
                                if ((!window.gapi || !GS.getGoogle().googlePlusloaded) && window.goPLoadAttempts < 3)window.loadGooglePlus(); else!window.gapi && window.goPLoadAttempts >= 3 || window.gapi && !GS.getGoogle().googlePlusloaded && GS.getGoogle().initGooglePlus()
                            },
                            2E4)
                } catch (h) {
                    console.error("Could not load Google JS. Fatal Error: ", h);
                    GS.getGoogle().lastError = h
                }
            };
            window.loadGooglePlus()
        }
        this.update();
        b && $.unsubscribe(b)
    }, initGooglePlus:function () {
        this.googlePlusloaded = true;
        window.googlePlusLoadTimeout && clearTimeout(window.googlePlusLoadTimeout);
        this.parsePlusWidgets();
        $.subscribe("gs.theme.set", function () {
            window.document.getElementById("theme_home") && GS.getGoogle().parsePlusWidgets(window.document.getElementById("theme_home"))
        })
    }, parsePlusWidgets:function (a) {
        if (window.gapi)try {
            window.gapi.plusone.go(a ?
                    a : document.body)
        } catch (c) {
        }
    }, update:function () {
        if (GS.user && GS.user.isLoggedIn && GS.user.UserID > 0 && (GS.user.Flags & this.SERVICE_ID || GS.user.Flags & this.GOOGLE_ONLY_SERVICE_ID)) {
            this.registeredWithGoogle = (GS.user.Flags & this.GOOGLE_ONLY_SERVICE_ID) > 0;
            GS.service.getUserGoogleData(this.callback("onUserGoogleData", null, null))
        } else GS.user && GS.user.isLoggedIn && this.onLoginSaveData && this.onLoginSaveData == GS.user.Email ? GS.service.saveUserGoogleData(this.callback("onSaveUserGoogleData", null, null), function () {
            GS.getGoogle().clearInfo()
        }) :
                this.clearInfo()
    }, showReAuthLightbox:function () {
        GS.getLightbox().open({type:"reAuthGoogle", view:{header:"POPUP_GOOGLE_REAUTH_TITLE", message:"POPUP_GOOGLE_REAUTH_MESSAGE", buttonsRight:[
            {label:"POPUP_REAUTH_SUBMIT", className:"submit"}
        ], buttonsLeft:GS.getGoogle().registeredWithGoogle ? [] : [
            {label:"POPUP_GOOGLE_REAUTH_CANCEL", className:"close"}
        ]}, callbacks:{".submit":function () {
            GS.getGoogle().logout(function () {
                GS.getGoogle().login(function () {
                    GS.getLightbox().close()
                })
            })
        }, ".close":function () {
            GS.getGoogle().logout(function () {
                GS.getLightbox().close()
            })
        }}})
    },
        onUserGoogleData:function (a, c, h) {
            try {
                if (h && h.GoogleEmailAddress && h.GoogleID) {
                    this.email = h.GoogleEmailAddress;
                    this.googleID = h.GoogleID;
                    this.connected = true;
                    $.publish("gs.google.profile.update");
                    a && a()
                } else if (h && (!h.GoogleEmailAddress || !h.GoogleID))this.showReAuthLightbox(); else {
                    GS.user.Flags = (GS.user.Flags | this.SERVICE_ID) - this.SERVICE_ID;
                    if (this.registeredWithGoogle)GS.user.Flags = (GS.user.Flags | this.GOOGLE_ONLY_SERVICE_ID) - this.GOOGLE_ONLY_SERVICE_ID;
                    this.clearInfo();
                    $.isFunction(c) && c({error:"GOOGLE_MISSING_LOGIN_INFO_ERROR_MSG"})
                }
            } catch (g) {
                this.connected =
                        false;
                $.isFunction(c) && c({error:"GOOGLE_MISSING_LOGIN_INFO_ERROR_MSG"})
            }
        }, onAuthGoogleUser:function (a, c, h) {
            if (h)if (h.userID === 0)this.register(a, c); else {
                a(h);
                $.publish("gs.google.profile.update");
                GS.getGuts().logEvent("googleAuthenticated", {authenticated:true})
            } else c && c(h)
        }, onSaveUserGoogleData:function (a, c, h) {
            if (h == 1) {
                this.connected = true;
                $.publish("gs.google.profile.update");
                GS.user.Flags |= this.SERVICE_ID;
                $.isFunction(a) && a()
            } else if (h == -1)if (GS.user.Flags & this.SERVICE_ID || GS.user.Flags & this.GOOGLE_ONLY_SERVICE_ID)GS.service.getUserGoogleData(this.callback("onUserGoogleData",
                    a, function () {
                        c("GOOGLE_PROBLEM_CONNECTING_ERROR_MSG")
                    }), function () {
                c("GOOGLE_PROBLEM_CONNECTING_ERROR_MSG")
            }); else c && c({error:"GOOGLE_DUPLICATE_ACCOUNT_ERROR_MSG", signupError:4096}); else if (h == -2)c && c({error:"GOOGLE_MISSING_LOGIN_INFO_ERROR_MSG"}); else c && c({error:"POPUP_SIGNUP_LOGIN_FORM_GOOGLE_ERROR"})
        }, register:function (a, c) {
            var h = this.email.split("@")[0];
            if (h) {
                h = h.replace(/^[\.\-_]|[^a-zA-Z0-9\.\-_]|[\.\-_]$/g, "");
                h = h.replace(/([\.\-_]){2,}/g, "$1")
            }
            var g = this.firstname + " " + this.lastname, k = Math.floor(Math.random() *
                    997508) + 1005;
            g || h ? GS.service.getUsernameSuggestions(h, g, k, this.callback("usernameSuggestSuccess", a, c), this.callback("usernameSuggestFailed", a, c)) : this.usernameSuggestFailed("")
        }, usernameSuggestSuccess:function (a, c, h) {
            c = "";
            if (h && h.length > 0)c = h[0];
            this.openRegisterLightbox(a, c)
        }, usernameSuggestFailed:function (a, c) {
            a && c ? c({error:"POPUP_SIGNUP_LOGIN_FORM_GOOGLE_ERROR"}) : this.openRegisterLightbox(null, "")
        }, openRegisterLightbox:function (a, c) {
            var h = {isGoogle:true, googleData:{email:this.email, googleID:this.googleID},
                username:c, email:this.email, fname:this.firstname + " " + this.lastname, message:$.localize.getString("POPUP_SIGNUP_LOGIN_FORM_GOOGLE_NOT_FOUND")};
            GS.user.defaultFromService = h;
            GS.getLightbox().close();
            GS.page.activePageName == "SignupController" ? GS.page.activePage.update(h) : GS.router.setHash("/signup");
            GS.getGuts().logEvent("googleRegistered", {registered:true})
        }, login:function (a, c) {
            this.googleOpenerWindow = this.googleOpener.popup(450, 600);
            this.loginSuccessCallback = a;
            this.loginFailedCallback = c;
            if (GS.airbridge &&
                    GS.airbridge.isDesktop)this.googleOpenerWindow.parentSandboxBridge = {confirmGoogleConnection:window.confirmGoogleConnection}
        }, onLogin:function (a) {
            if (a.error) {
                this.lastError = a.error;
                this.loginFailedCallback()
            } else {
                if (a.firstName)this.firstname = a.firstName;
                if (a.lastName)this.lastname = a.lastName;
                if (a.email)this.email = a.email;
                if (a.googleID)this.googleID = a.googleID;
                if (GS.user.isLoggedIn)GS.user.Flags & this.SERVICE_ID || GS.user.Flags & this.GOOGLE_ONLY_SERVICE_ID ? GS.service.updateUserGoogleData(this.callback("onSaveUserGoogleData",
                        this.loginSuccessCallback, this.loginFailedCallback), this.loginFailedCallback) : GS.service.saveUserGoogleData(this.callback("onSaveUserGoogleData", this.loginSuccessCallback, this.loginFailedCallback), this.loginFailedCallback); else GS.service.authenticateGoogleUser(this.callback("onAuthGoogleUser", this.loginSuccessCallback, this.loginFailedCallback), this.loginFailedCallback)
            }
        }, onCancelledLogin:function () {
        }, onLogout:function (a) {
            if (!this.registeredWithGoogle)GS.user.Flags = (GS.user.Flags | this.SERVICE_ID) -
                    this.SERVICE_ID;
            this.clearInfo();
            $.publish("gs.google.profile.update");
            this.registeredWithGoogle && GS.auth.logout();
            $.isFunction(a) && a()
        }, clearInfo:function () {
            this.identity = null;
            this.lastname = this.firstname = this.email = "";
            this.registeredWithGoogle = this.connected = false;
            this.googleID = this.onLoginSaveData = null
        }, logout:function (a) {
            this.googleID ? GS.service.removeUserGoogleData(this.googleID, this.callback("onLogout", a)) : GS.service.removeUserGoogleData(false, this.callback("onLogout", a))
        }, serviceLogout:function () {
            var a =
                    googleOpenIDPopup.getCenteredCoords(890, 600);
            window.open("https://www.google.com/accounts/Logout", "", "width=890,height=600,status=1,location=1,resizable=yes,left=" + a[0] + ",top=" + a[1])
        }})
})();
(function () {
    var b = 0;
    GS.Controllers.BaseController.extend("GS.Controllers.TwitterController", {isGSSingleton:true, preSetup:function () {
        var a = GS.Controllers.BaseController.singletonCallback, c = $.subscribe;
        c("gs.auth.update", a("twitter", "update"))
    }}, {SERVICE_ID:4096, TWITTER_ONLY_SERVICE_ID:8192, twitterOpenerWindow:null, connected:false, registeredWithTwitter:false, profile:{}, oauthToken:"", oauthSecret:"", friendIDs:false, friends:{}, friendCount:0, followerIDs:false, followers:{}, followerCount:0, canUpdate:false,
        loginSuccessCallback:null, loginFailedCallback:null, twitterLoaded:false, lastError:null, init:function () {
            if (!window.confirmTwitterConnection)window.confirmTwitterConnection = this.callback(function (a) {
                if (this.twitterOpenerWindow)this.twitterOpenerWindow = null;
                try {
                    a = JSON.parse(a)
                } catch (c) {
                    this.lastError = "parseError";
                    this.loginFailedCallback();
                    return
                }
                if (a.mode == "cancel" || a.error == "cancel") {
                    this.lastError = "cancel";
                    this.onCancelledLogin()
                } else GS.airbridge && GS.airbridge.isDesktop ? window.setTimeout(function () {
                            GS.getTwitter().onLogin(a)
                        },
                        300) : this.onLogin(a)
            });
            this._super()
        }, appReady:function () {
            b = this.subscribe("gs.cowbell.ready", this.callback("commReady"));
            if (!window.name)window.name = gsConfig.windowName
        }, commReady:function () {
            if (_.browserDetect().browser != "msie" || _.browserDetect().version > 6) {
                window.twLoadAttempts = 0;
                window.loadTwitter = function () {
                    try {
                        if (document.getElementById("tw-root") && document.getElementById("tw-root").getElementsByTagName("script").length) {
                            document.getElementById("tw-root").removeChild(document.getElementById("tw-root").getElementsByTagName("script")[0]);
                            document.getElementById("tw-root") && document.getElementById("tw-root").getElementsByTagName("div").length && document.getElementById("tw-root").removeChild(document.getElementById("tw-root").getElementsByTagName("div")[0]);
                            window.twttr = null;
                            GS.getTwitter().twitterloaded = false
                        }
                        var a = document.createElement("script");
                        a.async = true;
                        a.src = document.location.protocol + "//platform.twitter.com/widgets.js";
                        a.onload = a.onreadystatechange = function () {
                            if ($.browser.msie && this.readyState) {
                                if (this.readyState === "complete" ||
                                        this.readyState === "loaded") {
                                    this.onload = this.onreadystatechange = null;
                                    setTimeout(function () {
                                        window.twttr && GS.getTwitter().initTwitter()
                                    }, 10)
                                }
                            } else {
                                this.onload = this.onreadystatechange = null;
                                setTimeout(function () {
                                    window.twttr && GS.getTwitter().initTwitter()
                                }, 10)
                            }
                        };
                        document.getElementById("tw-root").appendChild(a);
                        window.twLoadAttempts++;
                        window.twitterLoadTimeout = setTimeout(function () {
                            if ((!window.twttr || !GS.getTwitter().twitterloaded) && window.twLoadAttempts < 3)window.loadTwitter(); else!window.twttr && window.twLoadAttempts >=
                                    3 || window.twttr && !GS.getTwitter().twitterloaded && GS.getTwitter().initTwitter()
                        }, 2E4)
                    } catch (c) {
                        console.error("Could not load Twitter JS. Fatal Error: ", c);
                        GS.getTwitter().lastError = c
                    }
                };
                window.loadTwitter()
            }
            this.canUpdate = true;
            this.update();
            if (b) {
                $.unsubscribe(b);
                b = 0
            }
        }, initTwitter:function () {
            this.twitterLoaded = true;
            window.twitterLoadTimeout && clearTimeout(window.twitterLoadTimeout);
            twttr.events.bind("tweet", function (a) {
                if (a) {
                    var c;
                    if (a.target && a.target.nodeName == "IFRAME" && a.target.src) {
                        a = decodeURI(a.target.src).split("&");
                        for (var h = 0, g; g = a[h]; ++h)if (g.indexOf("url=") === 0)c = unescape(g.split("=")[1])
                    }
                    window._gaq && window._gaq.push && window._gaq.push(["_trackSocial", "twitter", "tweet", c])
                }
            });
            $.subscribe("gs.theme.set", this.parseWidgets)
        }, parseWidgets:function () {
            window.twttr && window.twttr.widgets.load()
        }, getTwitterShareMessage:function (a, c, h, g, k) {
            var m = this.callback(function (n) {
                n = n.tinySongURL;
                var o = new GS.Models.DataString;
                switch (a) {
                    case "song":
                        var r = c.SongName;
                        if (r.length > 40)r = r.substr(0, 40) + "...";
                        o.string = $.localize.getString("SHARE_TWITTER_SONG");
                        o.data = {SongName:r, ArtistName:c.ArtistName};
                        o = o.render();
                        break;
                    case "artist":
                        r = c.ArtistName;
                        if (r.length > 60)r = r.substr(0, 60) + "...";
                        o.string = $.localize.getString("SHARE_TWITTER_ARTIST");
                        o.data = {ArtistName:r};
                        o = o.render();
                        break;
                    case "album":
                        r = c.AlbumName;
                        if (r.length > 40)r = r.substr(0, 40) + "...";
                        o.string = $.localize.getString("SHARE_TWITTER_ALBUM");
                        o.data = {AlbumName:r, ArtistName:c.ArtistName};
                        o = o.render();
                        break;
                    case "playlist":
                        r = c.PlaylistName;
                        if (r.length > 40)r = r.substr(0, 40) + "...";
                        o.string = $.localize.getString("SHARE_TWITTER_PLAYLIST");
                        o.data = {PlaylistName:r, UserName:c.UserName};
                        o = o.render();
                        break;
                    default:
                        o = "";
                        break
                }
                if (o.length < 129 - n.length - 18)o += " #nowplaying";
                if (o.length < 128 - n.length - 18 && (new Date).format("D") === "Mon")o += " #musicmonday";
                if (o.length < 131 - n.length - 18 && (new Date).format("D") === "Tue")o += " #tunesday";
                g(o, n)
            });
            if (a == "playlist") {
                h = "http://tinysong.com/p/" + _.base62Encode(c.PlaylistID + "");
                m({tinySongURL:h})
            } else if (a == "song")GS.service.getDetailsForBroadcast(c.SongID, m, this.callback(function () {
                m({tinySongURL:h})
            })); else k ?
                    m({tinySongURL:h}) : this.getTinySongURL(h, this.callback(function (n) {
                m({tinySongURL:n})
            }))
        }, getTinySongURL:function (a, c) {
            $.ajax({url:"http://api.bitly.com/v3/shorten?login=grooveshark&apiKey=R_44014f5c4cfe09348eced3baebeadcc3&longUrl=" + a, dataType:"jsonp", success:this.callback(function (h) {
                h && h.data && h.data.url ? c(h.data.url) : c(a)
            }), error:this.callback(function () {
                c(a)
            })})
        }, update:function () {
            if (this.canUpdate) {
                this.canUpdate = false;
                if (GS.user && GS.user.isLoggedIn && (GS.user.Flags & this.SERVICE_ID || GS.user.Flags &
                        this.TWITTER_ONLY_SERVICE_ID)) {
                    this.registeredWithTwitter = (GS.user.Flags & this.TWITTER_ONLY_SERVICE_ID) > 0;
                    GS.service.getUserTwitterData(this.callback("onUserTwitterData", null, null))
                } else this.clearInfo();
                setTimeout(this.callback(function () {
                    this.canUpdate = true
                }), 0)
            }
        }, onUserTwitterData:function (a, c, h) {
            try {
                if (h) {
                    if (h.TwitterUserID && h.OAuthToken && h.OAuthSecret && h.twitterProfileURL) {
                        this.profile = {id_str:h.TwitterUserID};
                        this.oauthToken = h.OAuthToken;
                        this.oauthSecret = h.OAuthSecret;
                        this.getProfile(h.twitterProfileURL,
                                h.twitterProfileCallback)
                    } else this.showReAuthLightbox();
                    $.isFunction(a) && a(h)
                } else {
                    GS.user.Flags = (GS.user.Flags | this.SERVICE_ID) - this.SERVICE_ID;
                    if (this.registeredWithTwitter)GS.user.Flags = (GS.user.Flags | this.TWITTER_ONLY_SERVICE_ID) - this.TWITTER_ONLY_SERVICE_ID;
                    this.clearInfo();
                    $.isFunction(c) && c({error:"TWITTER_MISSING_LOGIN_INFO_ERROR_MSG"})
                }
            } catch (g) {
                this.connected = false;
                $.isFunction(c) && c({error:"TWITTER_MISSING_LOGIN_INFO_ERROR_MSG"})
            }
        }, showReAuthLightbox:function () {
            GS.getLightbox().close();
            GS.getLightbox().open({type:"reAuthTwitter", view:{header:"POPUP_TWITTER_REAUTH_TITLE", message:"POPUP_TWITTER_REAUTH_MESSAGE", buttonsRight:[
                {label:"POPUP_REAUTH_SUBMIT", className:"submit"}
            ], buttonsLeft:GS.getTwitter().registeredWithTwitter ? [] : [
                {label:"POPUP_TWITTER_REAUTH_CANCEL", className:"close"}
            ]}, callbacks:{".submit":function () {
                GS.getTwitter().logout(function () {
                    GS.getTwitter().login(function () {
                        GS.getLightbox().close()
                    })
                })
            }, ".close":function () {
                GS.getTwitter().logout(function () {
                    GS.getLightbox().close()
                })
            }}})
        },
        onAuthTwitterUser:function (a, c, h) {
            if (h && h.TwitterProfile && h.TwitterProfile.name) {
                this.profile = h.TwitterProfile;
                if (h.userID == 0)this.register(a, c); else {
                    $.isFunction(a) && a(h);
                    GS.getGuts().logEvent("twitterAuthenticated", {authenticated:true})
                }
            } else $.isFunction(c) && c({error:"TWITTER_MISSING_LOGIN_INFO_ERROR_MSG"})
        }, onSaveUserTwitterData:function (a, c, h) {
            if (h.result == 1) {
                this.getProfile(h.twitterProfileURL, h.twitterProfileCallback);
                $.isFunction(a) && a();
                if (!(GS.user.Flags & this.SERVICE_ID) && !(GS.user.Flags &
                        this.TWITTER_ONLY_SERVICE_ID)) {
                    $.publish("gs.twitter.notification.findFriends");
                    GS.getGuts().logEvent("twitterNewSave", {newSave:true})
                }
            } else if (h.result == -1)if (GS.user.Flags & this.SERVICE_ID || GS.user.Flags & this.TWITTER_ONLY_SERVICE_ID)GS.service.getUserTwitterData(this.callback("onUserTwitterData", a, function () {
                c("TWITTER_PROBLEM_CONNECTING_ERROR_MSG")
            })); else $.isFunction(c) && c({error:"TWITTER_DUPLICATE_ACCOUNT_ERROR_MSG"}); else if (h.result == -2)$.isFunction(c) && c({error:"TWITTER_MISSING_LOGIN_INFO_ERROR_MSG"});
            else c && c({error:"POPUP_SIGNUP_LOGIN_FORM_TWITTER_ERROR"})
        }, register:function (a, c) {
            var h = this.profile.screen_name, g = this.profile.name || "", k = this.profile.id_str;
            g || h ? GS.service.getUsernameSuggestions(h, g, k, this.callback("usernameSuggestSuccess", a, c), this.callback("usernameSuggestFailed", a, c)) : this.usernameSuggestFailed("")
        }, usernameSuggestSuccess:function (a, c, h) {
            c = "";
            if (h && h.length > 0)c = h[0];
            this.openRegisterLightbox(a, c)
        }, usernameSuggestFailed:function (a, c) {
            a && c ? c({error:"POPUP_SIGNUP_LOGIN_FORM_TWITTER_ERROR"}) :
                    this.openRegisterLightbox(null, "")
        }, openRegisterLightbox:function (a, c) {
            var h = {isTwitter:true, username:c, fname:this.profile.name, twitterData:{twitterUserID:this.profile.id_str, oauthToken:this.oauthToken, oauthSecret:this.oauthSecret}, message:$.localize.getString("POPUP_SIGNUP_LOGIN_FORM_TWITTER_NOT_FOUND")};
            GS.user.defaultFromService = h;
            GS.getLightbox().close();
            GS.page.activePageName == "SignupController" ? GS.page.activePage.update(h) : GS.router.setHash("/signup");
            GS.getGuts().logEvent("twitterRegistered",
                    {registered:true})
        }, login:function (a, c) {
            var h = googleOpenIDPopup.getCenteredCoords(650, 600);
            this.twitterOpenerWindow = window.open("http://" + window.location.host + "/twitterCallback.php?window=" + window.name, "", "width=650,height=600,left=" + h[0] + ",top=" + h[1]);
            this.loginSuccessCallback = a;
            this.loginFailedCallback = c;
            if (GS.airbridge && GS.airbridge.isDesktop)this.twitterOpenerWindow.parentSandboxBridge = {confirmTwitterConnection:window.confirmTwitterConnection}
        }, onLogin:function (a) {
            if (a.error) {
                this.lastError = a.error;
                this.loginFailedCallback()
            } else {
                if (a.oauth_token && a.oauth_token_secret) {
                    this.profile = a;
                    this.oauthToken = a.oauth_token;
                    this.oauthSecret = a.oauth_token_secret
                }
                if (GS.user.isLoggedIn)GS.user.Flags & this.SERVICE_ID || GS.user.Flags & this.TWITTER_ONLY_SERVICE_ID ? GS.service.updateUserTwitterData(this.profile.id_str, this.oauthToken, this.oauthSecret, this.callback("onSaveUserTwitterData", this.loginSuccessCallback, this.loginFailedCallback), this.loginFailedCallback) : GS.service.saveUserTwitterData(this.profile.id_str,
                        this.oauthToken, this.oauthSecret, this.callback("onSaveUserTwitterData", this.loginSuccessCallback, this.loginFailedCallback), this.loginFailedCallback); else GS.service.authenticateTwitterUser(this.profile.id_str, this.oauthToken, this.oauthSecret, this.callback("onAuthTwitterUser", this.loginSuccessCallback, this.loginFailedCallback), this.loginFailedCallback)
            }
        }, getProfile:function (a, c) {
            $.ajax({url:a, success:this.callback("onGetProfile"), error:this.callback(function (h) {
                this.lastError = h;
                this.showReAuthLightbox()
            }),
                dataType:"jsonp", jsonp:false, jsonpCallback:c, cache:true})
        }, onGetProfile:function (a) {
            if (a.id_str && a.profile_image_url) {
                this.profile = a;
                this.connected = true;
                $.publish("gs.twitter.profile.update")
            } else {
                this.lastError = a;
                this.showReAuthLightbox()
            }
        }, onCancelledLogin:function () {
        }, onLogout:function (a) {
            this.clearInfo();
            a && a()
        }, clearInfo:function () {
            this.connected = false;
            this.oauthSecret = this.oauthToken = null;
            this.profile = {};
            this.friendIDs = this.registeredWithTwitter = false;
            this.friends = {};
            this.friendCount = 0;
            this.followers =
            {};
            this.followersIDs = false;
            this.followerCount = 0;
            $.publish("gs.twitter.profile.update")
        }, logout:function (a) {
            this.profile && this.profile.id_str ? GS.service.removeUserTwitterData(this.profile.id_str, this.callback("onLogout", a)) : GS.service.removeUserTwitterData(null, this.callback("onLogout", a))
        }, serviceLogout:function () {
            var a = googleOpenIDPopup.getCenteredCoords(1E3, 580);
            window.open("https://twitter.com/logout", "", "width=1000,height=580,status=1,location=1,resizable=yes,left=" + a[0] + ",top=" + a[1])
        }, postTweet:function (a, c, h, g) {
            if (this.oauthToken && this.oauthSecret)GS.service.postTwitterStatus(a, this.oauthToken, this.oauthSecret, this.callback("onPostTweet", c, h, g), this.callback("onFailedPostTweet", g)); else $.isFunction(g) && g()
        }, onPostTweet:function (a, c, h, g) {
            if (g.success && g.response.id) {
                $.publish("gs.twitter.notification.sent", {type:a});
                $.isFunction(c) && c();
                GS.getGuts().forceLogEvent("twitterShareAPI", {userID:GS.user.UserID, success:1})
            } else this.onFailedPostTweet(h, g)
        }, onFailedPostTweet:function (a, c) {
            this.lastError = c;
            var h = {error:"POPUP_SHARE_TWITTER_ERROR"};
            if (c.response && c.response.error && c.response.error == "Status is over 140 characters.")h.error = "POPUP_SHARE_TWITTER_TOO_LONG";
            $.isFunction(a) && a(h);
            GS.getGuts().forceLogEvent("twitterShareAPI", {userID:GS.user.UserID, success:0})
        }, getFollowers:function (a, c) {
            this.followerIDs && this.followers && $.isFunction(a) ? a(this.followerIDs, this.followers) : GS.service.getTwitterFollowers(this.profile.id_str, this.oauthToken, this.oauthSecret, this.callback(function (h) {
                this.followers =
                {};
                this.followerCount = 0;
                if (h.requests.length && h.ids.length)_.forEach(h.requests, this.callback(function (g) {
                    $.ajax({url:g.url, success:this.callback("onGetFollowers", a, h.ids), error:c, dataType:"jsonp", jsonp:false, jsonpCallback:g.callback, cache:true})
                })); else $.isFunction(a) && a(h.ids, this.followers)
            }), this.callback(function (h) {
                this.lastError = h;
                $.publish("gs.notification", {type:"error", message:$.localize.getString("NOTIF_TWITTER_FOLLOWERS_ERROR")});
                $.isFunction(c) && c()
            }))
        }, onGetFollowers:function (a, c, h) {
            _.forEach(h,
                    function (g) {
                        GS.getTwitter().followers[g.id_str] = g;
                        GS.getTwitter().followerCount++
                    });
            $.publish("gs.twitter.followers.update");
            if (Math.ceil(c.length / 100) == Math.ceil(GS.getTwitter().followerCount / 100)) {
                GS.getTwitter().followerIDs = c;
                $.isFunction(a) && a(c, GS.getTwitter().followers)
            }
        }, getFollowing:function (a, c) {
            this.friendIDs && this.friends && $.isFunction(a) ? a(this.friendIDs, this.friends) : GS.service.getTwitterFriends(this.profile.id_str, this.oauthToken, this.oauthSecret, this.callback(function (h) {
                this.friends =
                {};
                this.friendCount = 0;
                if (h.requests && h.ids)_.forEach(h.requests, this.callback(function (g) {
                    $.ajax({url:g.url, success:this.callback("onGetFollowing", a, h.ids), error:c, dataType:"jsonp", jsonp:false, jsonpCallback:g.callback, cache:true})
                })); else $.isFunction(a) && a(h.ids, this.friends)
            }), this.callback(function (h) {
                this.lastError = h;
                $.publish("gs.notification", {type:"error", message:$.localize.getString("NOTIF_TWITTER_FINDFRIENDS_ERROR")});
                $.isFunction(c) && c()
            }))
        }, onGetFollowing:function (a, c, h) {
            _.forEach(h, function (g) {
                GS.getTwitter().friends[g.id_str] =
                        g;
                GS.getTwitter().friendCount++
            });
            $.publish("gs.twitter.friends.update");
            if (Math.ceil(c.length / 100) == Math.ceil(GS.getTwitter().friendCount / 100)) {
                GS.getTwitter().friendIDs = c;
                $.isFunction(a) && a(c, GS.getTwitter().friends)
            }
        }, getGroovesharkUsersFromFollowing:function (a) {
            this.getFollowing(this.callback(function (c) {
                if (c)GS.service.getGroovesharkUsersFromTwitterUserIDs(c, this.callback("onGetGroovesharkUsers", a), function () {
                    $.publish("gs.notification", {type:"error", message:$.localize.getString("NOTIF_TWITTER_FINDFRIENDS_ERROR")});
                    $.isFunction(a) && a()
                }); else {
                    $.publish("gs.notification", {type:"error", message:$.localize.getString("NOTIF_TWITTER_FINDFRIENDS_ERROR")});
                    $.isFunction(a) && a()
                }
            }), function () {
                $.publish("gs.notification", {type:"error", message:$.localize.getString("NOTIF_TWITTER_FINDFRIENDS_ERROR")});
                $.isFunction(a) && a()
            })
        }, onGetGroovesharkUsers:function (a, c) {
            var h = [], g = false;
            if (c) {
                $.each(c, function (k, m) {
                    if (m && m.UserID && m.TwitterUserID && GS.user.favorites.users && !GS.user.favorites.users[m.UserID]) {
                        m.TwitterProfile = GS.getTwitter().friends[m.TwitterUserID];
                        h.push(m)
                    } else if (GS.user.favorites.users && GS.user.favorites.users[m.UserID])g = true
                });
                if (h && h.length > 0)GS.getLightbox().open("gsUsersFromThirdParty", {users:h, isTwitter:true, isFacebook:false}); else g ? $.publish("gs.twitter.notification.findFriends", {message:"NOTIF_TWITTER_FINDFRIENDS_ALREADY", inviteFriends:false}) : $.publish("gs.twitter.notification.findFriends", {message:"NOTIF_TWITTER_FINDFRIENDS_NONE", inviteFriends:true})
            } else $.publish("gs.notification", {type:"error", message:$.localize.getString("NOTIF_TWITTER_FINDFRIENDS_ERROR")});
            $.isFunction(a) && a()
        }})
})();
GS.Controllers.BaseController.extend("GS.Controllers.ApiController", {onDocument:true}, {_songStatusCallback:"", _statusLookup:{0:"none", 1:"loading", 2:"loading", 3:"playing", 4:"paused", 5:"buffering", 6:"failed", 7:"completed"}, _protocolActions:["play", "add", "next"], _lastStatus:null, init:function () {
    this.subscribe("gs.player.playstatus", this.callback(this._doStatusCallback));
    this.subscribe("gs.player.song.change", this.callback(this._onSongChange));
    this._super()
}, getApplicationVersion:function () {
    return gsConfig.revision
}, getAPIVersion:function () {
    return 1.5
},
    executeProtocol:function (b) {
        var a = b.toLowerCase();
        if (a.indexOf("gs://") != -1) {
            b = b.substring(5);
            a = a.substring(5)
        }
        if (b.charAt(b.length - 1) == "/") {
            b = b.substring(0, b.length - 1);
            a = a.substring(0, a.length - 1)
        }
        a = a.split("/");
        var c = a.pop();
        if (this._protocolActions.indexOf(c) == -1) {
            a.push(c);
            c = ""
        }
        if (a[0] == "themes")GS.getLightbox().open("themes"); else {
            if (c) {
                b = b.substring(0, b.length - c.length - 1);
                var h = GS.player.INDEX_DEFAULT, g = false;
                switch (c) {
                    case "play":
                        g = true;
                        break;
                    case "next":
                        h = GS.player.INDEX_NEXT;
                        break
                }
                if (GS.player)switch (a[0]) {
                    case "s":
                        GS.Models.Song.getSong(a[2],
                                this.callback(function (k) {
                                    GS.player.addSongsToQueueAt(k.SongID, h, g)
                                }), null, false);
                        break;
                    case "song":
                        GS.Models.Song.getSongFromToken(a[2], this.callback(function (k) {
                            GS.player.addSongsToQueueAt(k.SongID, h, g)
                        }), null, false);
                        break;
                    case "album":
                        GS.Models.Album.getAlbum(a[2], this.callback(function (k) {
                            k.play(h, g)
                        }), null, false);
                        break;
                    case "playlist":
                        GS.Models.Playlist.getPlaylist(a[2], this.callback(function (k) {
                            k.play(h, g)
                        }), null, false);
                        break
                }
            }
            if (a[0] == "search") {
                a = a[a.length - 1];
                b = b.substring(0, b.length - a.length);
                b += "?q=" + a
            }
            GS.router.setHash("/" + b)
        }
    }, getCurrentSongStatus:function () {
        return this._buildCurrentPlayStatus()
    }, setSongStatusCallback:function (b) {
        if ($.isFunction(b))this._songStatusCallback = b; else if (_.isString(b)) {
            b = b.split(".");
            b = this._getObjectChain(window, b);
            if ($.isFunction(b))this._songStatusCallback = b
        }
        return this._buildCurrentPlayStatus()
    }, _getObjectChain:function (b, a) {
        var c = a.shift();
        return(c = b[c]) ? a.length ? this._getObjectChain(c, a) : c : null
    }, _doStatusCallback:function (b) {
        if (b && this._lastStatus)if (b.status ===
                this._lastStatus.status)if (!b.activeSong && !this._lastStatus.activeSong) {
            this._lastStatus = b;
            return
        } else if (b.activeSong && this._lastStatus.activeSong)if (b.activeSong.SongID === this._lastStatus.activeSong.SongID && b.activeSong.autoplayVote === this._lastStatus.activeSong.autoplayVote) {
            this._lastStatus = b;
            return
        }
        this._lastStatus = b;
        $.isFunction(this._songStatusCallback) && this._songStatusCallback(this._buildCurrentPlayStatus())
    }, _onSongChange:function (b) {
        if (!this._lastStatus || this._lastStatus.activeSong && this._lastStatus.activeSong.SongID ===
                b.SongID && this._lastStatus.activeSong.autoplayVote !== b.autoplayVote) {
            if (this._lastStatus)this._lastStatus.activeSong.autoplayVote = b.autoplayVote;
            $.isFunction(this._songStatusCallback) && this._songStatusCallback(this._buildCurrentPlayStatus())
        }
    }, _buildCurrentPlayStatus:function () {
        var b = {song:null, status:"none"};
        if (GS.player) {
            var a = GS.player.getPlaybackStatus();
            if (a)if (a.activeSong) {
                var c = GS.Models.Song.getOneFromCache(a.activeSong.SongID);
                b.song = {songID:a.activeSong.SongID, songName:a.activeSong.SongName.replace(/&amp\;/g,
                        "&"), artistID:a.activeSong.ArtistID, artistName:a.activeSong.ArtistName.replace(/&amp\;/g, "&"), albumID:a.activeSong.AlbumID, albumName:a.activeSong.AlbumName.replace(/&amp\;/g, "&"), trackNum:c ? c.TrackNum : 0, estimateDuration:a.activeSong.EstimateDuration, artURL:c ? c.getImageURL() : gsConfig.assetHost + "/webincludes/images/default/album_250.png", calculatedDuration:a.duration, position:a.position, vote:a.activeSong.autoplayVote};
                b.status = this._statusLookup[a.status]
            }
        }
        return b
    }, getPreviousSong:function () {
        var b =
                null;
        if (GS.player && GS.player.queue && GS.player.queue.previousSong) {
            b = GS.player.queue.previousSong;
            var a = GS.Models.Song.getOneFromCache(b.SongID);
            b = {songID:b.SongID, songName:b.SongName.replace(/&amp\;/g, "&"), artistID:b.ArtistID, artistName:b.ArtistName.replace(/&amp\;/g, "&"), albumID:b.AlbumID, albumName:b.AlbumName.replace(/&amp\;/g, "&"), trackNum:a ? a.TrackNum : 0, estimateDuration:b.EstimateDuration, artURL:a ? a.getImageURL() : gsConfig.assetHost + "/webincludes/images/default/album_250.png", vote:b.autoplayVote}
        }
        return b
    },
    getNextSong:function () {
        var b = null;
        if (GS.player && GS.player.queue && GS.player.queue.nextSong) {
            b = GS.player.queue.nextSong;
            var a = GS.Models.Song.getOneFromCache(b.SongID);
            b = {songID:b.SongID, songName:b.SongName.replace(/&amp\;/g, "&"), artistID:b.ArtistID, artistName:b.ArtistName.replace(/&amp\;/g, "&"), albumID:b.AlbumID, albumName:b.AlbumName.replace(/&amp\;/g, "&"), trackNum:a ? a.TrackNum : 0, estimateDuration:b.EstimateDuration, artURL:a ? a.getImageURL() : gsConfig.assetHost + "/webincludes/images/default/album_250.png",
                vote:b.autoplayVote}
        }
        return b
    }, addSongsByID:function (b, a) {
        GS.player && GS.player.addSongsToQueueAt(b, GS.player.INDEX_DEFAULT, a)
    }, addSongByToken:function (b, a) {
        GS.player && GS.Models.Song.getSongFromToken(b, this.callback(function (c) {
            GS.player.addSongsToQueueAt([c.SongID], GS.player.INDEX_DEFAULT, a)
        }), null, false)
    }, addAlbumByID:function (b, a) {
        GS.player && GS.Models.Album.getAlbum(b, this.callback(function (c) {
            c.play(GS.player.INDEX_DEFAULT, a)
        }), null, false)
    }, addPlaylistByID:function (b, a) {
        GS.player && GS.Models.Playlist.getPlaylist(b,
                this.callback(function (c) {
                    c.play(GS.player.INDEX_DEFAULT, a)
                }), null, false)
    }, play:function () {
        if (GS.player && GS.player.queue && GS.player.queue.activeSong)GS.player.isPaused ? GS.player.resumeSong() : GS.player.playSong(GS.player.queue.activeSong.queueSongID)
    }, pause:function () {
        GS.player && GS.player.pauseSong()
    }, seekToPosition:function (b) {
        GS.player && GS.player.seekTo(b)
    }, togglePlayPause:function () {
        if (GS.player)GS.player.isPaused ? GS.player.resumeSong() : GS.player.pauseSong()
    }, previous:function () {
        GS.player && GS.player.previousSong()
    },
    next:function () {
        GS.player && GS.player.nextSong()
    }, setVolume:function (b) {
        GS.player && GS.player.setVolume(b)
    }, getVolume:function () {
        if (GS.player)return GS.player.getVolume();
        return 0
    }, setIsMuted:function (b) {
        GS.player && GS.player.setIsMuted(b)
    }, getIsMuted:function () {
        if (GS.player)return GS.player.getIsMuted();
        return false
    }, voteCurrentSong:function (b) {
        GS.player && GS.player.queue && GS.player.queue.activeSong && GS.player.voteSong(GS.player.queue.activeSong.queueSongID, b)
    }, getVoteForCurrentSong:function () {
        if (GS.player &&
                GS.player.queue && GS.player.queue.activeSong)return GS.player.queue.activeSong.autoplayVote
    }, favoriteCurrentSong:function () {
        GS.player && GS.player.queue && GS.player.queue.activeSong && GS.user.addToSongFavorites(GS.player.queue.activeSong.SongID)
    }, addCurrentSongToLibrary:function () {
        GS.player && GS.player.queue && GS.player.queue.activeSong && GS.user.addToLibrary([GS.player.queue.activeSong.SongID])
    }, removeCurrentSongFromQueue:function () {
        GS.player && GS.player.queue && GS.player.queue.activeSong && GS.player.removeSongs([GS.player.queue.activeSong.queueSongID])
    }});
(function () {
    function b(c) {
        c = c.replace(/\_/g, " ");
        c = _.ucwords(c);
        c = c.replace(/\s/g, "");
        return["GS.Controllers.Page.", c, "Controller"].join("")
    }

    var a = {home:true, song:true, search:true, now_playing:true, settings:true, album:true, artist:true, music:true, user:true, user_music:true, playlist:true, surveys:true, signup:true, promotion:true, features:true};
    GS.Controllers.BaseController.extend("GS.Controllers.PageController", {activePage:null, activePageName:null, activePageIdentifier:null, activePageParams:null, SMALL_APP_LIMIT:1200,
        _element:null, getPageClass:function (c) {
            if (a[c])return GS.ClassLoader.get(b(c)); else {
                c = $.Deferred();
                c.resolve(undefined);
                return c.promise()
            }
        }, activate:function (c, h) {
            if (!this._element)this._element = $("#page");
            $(".slick-reorder-proxy").remove();
            $("#tooltip").stop().remove();
            $application = $("#application");
            if (this.activePageName === c.shortName && this.activePageIdentifier === h.identifier) {
                this.activePageParams = h.params;
                $.publish("gs.page.view", this.activePageName);
                return this.activePage
            }
            this.activePage && this.activePage.destroy();
            this.activePage = new c(this._element);
            this.activePageName = c.shortName;
            this.activePageIdentifier = h.identifier;
            this.activePageParams = h.params;
            switch (c.shortName) {
                case "HomeController":
                case "BoxeeController":
                    if (GS.user.settings.local.persistPinboard)GS.getSidebar().show(); else GS.getSidebar.prototype.inst && GS.getSidebar().hide();
                    $("#theme_home *").show();
                    GS.theme.themeCenter();
                    break;
                case "SignupController":
                    GS.getSidebar.prototype.inst && GS.getSidebar().hide();
                    $("#theme_home *").hide();
                    break;
                case "UserMusicController":
                    if (h.identifier ==
                            GS.user.UserID || GS.user.settings.local.persistPinboard)GS.getSidebar().show(); else GS.getSidebar.prototype.inst && GS.getSidebar().hide();
                    break;
                case "PlaylistController":
                    if (GS.user.settings.local.persistPinboard || GS.user.playlists[this.activePageIdentifier] && $("#application").width() > GS.page.SMALL_APP_LIMIT)GS.getSidebar().show(); else GS.getSidebar.prototype.inst && GS.getSidebar().hide();
                    $("#theme_home *").hide();
                    $("ul.ui-autocomplete").remove();
                    break;
                case "AlbumController":
                case "MusicController":
                case "ArtistController":
                case "SearchController":
                case "UserController":
                default:
                    if (GS.user.settings.local.persistPinboard)GS.getSidebar().show();
                    else GS.getSidebar.prototype.inst && GS.getSidebar().hide();
                    $("#theme_home *").hide();
                    $("ul.ui-autocomplete").remove();
                    break
            }
            if (c.shortName !== "HomeController" && GS.getAd()) {
                $("#sidebarCapital_160").removeClass("capital");
                GS.getAd().hideAdBar()
            }
            GS.getLocale();
            $("#theme_page_header").hide().removeClass("measure");
            $("#theme_page_header_expandable").height(0);
            $.publish("gs.page.view", this.activePageName);
            this.activePage.showPageLoading();
            return this.activePage
        }, titlePrepend:"Grooveshark - ", titlePostpend:" - Grooveshark",
        title:function (c, h) {
            h = typeof h === "undefined" ? true : h;
            document.title = h ? c + this.titlePostpend : this.titlePrepend + c
        }, ALLOW_LOAD:true, justDidConfirm:false, lastPage:"", confirmMessage:$.localize.getString("ONCLOSE_PAGE_CHANGES"), checkLock:function () {
            if (GS.Controllers.PageController.justDidConfirm || !GS.Controllers.PageController.ALLOW_LOAD && !confirm($.localize.getString("ONCLOSE_SAVE_PLAYLIST"))) {
                GS.Controllers.PageController.justDidConfirm = true;
                location.replace([location.protocol, "//", location.host, location.pathname,
                    GS.Controllers.PageController.lastPage].join(""));
                setTimeout(function () {
                    GS.Controllers.PageController.justDidConfirm = false
                }, 500);
                return false
            } else {
                GS.Controllers.PageController.justDidConfirm = false;
                GS.Controllers.PageController.ALLOW_LOAD = true;
                GS.Controllers.PageController.lastPage = location.hash;
                GS.Controllers.PageController.confirmMessage = $.localize.getString("ONCLOSE_PAGE_CHANGES");
                $.publish("gs.router.before");
                return true
            }
        }, getActiveController:function () {
            return this.activePage
        }, loadFilterCollapseState:function () {
            this.artistFiltersCollapse =
                    GS.store.get(this.shortName + "_artistFiltersCollapse");
            this.albumFiltersCollapse = GS.store.get(this.shortName + "_albumFiltersCollapse");
            if (!this.artistFiltersCollapse)this.artistFiltersCollapse = {collapsed:true, manualCollapse:true, manualOpen:false};
            if (!this.albumFiltersCollapse)this.albumFiltersCollapse = {collapsed:true, manualCollapse:true, manualOpen:false};
            this.storeFilterCollapseState()
        }, storeFilterCollapseState:function () {
            _.defined(this.artistFiltersCollapse) && GS.store.set(this.shortName + "_artistFiltersCollapse",
                    this.artistFiltersCollapse);
            _.defined(this.albumFiltersCollapse) && GS.store.set(this.shortName + "_albumFiltersCollapse", this.albumFiltersCollapse)
        }, refreshTimeout:null, refreshed:null, resetRefreshButton:function () {
            if ($("#page_content_pane .refresh")) {
                $("#page_content_pane .refresh").addClass("disabled");
                GS.page.refreshTimeout && clearTimeout(GS.page.refreshTimeout);
                GS.page.refreshTimeout = setTimeout(function () {
                            GS.page.refreshed = null;
                            GS.page.refreshTimeout = null;
                            $("#page_content_pane .refresh").removeClass("disabled")
                        },
                        6E4)
            }
        }, fromCorrectUrl:false}, {url:false, type:false, id:false, subpage:false, pageSearchHasFocus:false, slickbox:null, feed:null, header:{name:false, breadcrumbs:[], imageUrl:false, subpages:[], options:[], labels:[]}, list:{doPlayAddSelect:false, doSearchInPage:false, sortOptions:[], gridOptions:{data:[], columns:{}, options:{}}}, cache:{}, init:function () {
        this.subscribe("gs.grid.selectedRows", this.callback("changeSelectionCount"));
        this.subscribe("gs.grid.onsort", this.callback("gridOnSort"));
        this._super();
        $(document).keydown(this.callback(function (c) {
            if (!$(c.target).is("input,textarea,select,object")) {
                var h =
                        _.orEqual(c.keyCode, c.which), g = String.fromCharCode(h).replace(/\s+/g, ""), k = {17:true, 91:true, 93:true, 37:true, 38:true, 39:true, 40:true, 16:true}, m = {9:true, 19:true, 20:true, 27:true, 33:true, 34:true, 35:true, 36:true, 45:true, 46:true, 112:true, 113:true, 114:true, 115:true, 116:true, 117:true, 118:true, 119:true, 120:true, 121:true, 122:true, 123:true, 145:true};
                if (!$(c.target).is("input,textarea,select,object"))if (h == 8)history.back(); else if (g.length && g !== "" && !k[h] && !m[h] && !c.metaKey && !c.ctrlKey && !GS.getLightbox().isOpen) {
                    g =
                            $("#filter_search");
                    g.length ? g.select().focus() : $("#header_search input.search").select().focus()
                }
                if (String.fromCharCode(h) == " " && $(c.target).val().length === 0)return false
            }
        }));
        $("#tooltip.stayOpen").live({mouseenter:this.callback("delayCloseTooltip"), mouseleave:this.callback("closeTooltip")})
    }, destroy:function () {
        this.searchTimeout && clearTimeout(this.searchTimeout);
        this._super()
    }, index:function () {
        this.url = location.hash;
        this.element.html(this.view("index"))
    }, notFound:function () {
        GS.Controllers.PageController.activate("home",
                null).notFound()
    }, showPageLoading:function () {
        if (this.element) {
            this.element.html(this.view("/shared/pageLoading"));
            var c = this.element.find(".page_loading");
            c.css("marginLeft", c.width() / 2 * -1 + "px")
        }
    }, showGridLoading:function (c) {
        $el = _.orEqual(c, $("#grid"));
        $el.html(this.view("/shared/loadingIndicator"));
        c = this.element.find(".page_loading");
        c.css("marginLeft", c.width() / 2 * -1 + "px")
    }, changeSelectionCount:function (c) {
        if (c.type === "album" || c.type === "artist")$("input.search", this.element).val("").trigger("keyup");
        if (c.type === "song") {
            var h = _.isNumber(c.len) && c.len > 0 ? c.len : 0, g = $("#page .page_controls");
            if (h) {
                g.find(".play.count .label").localeDataString("SELECTION_PLAY_COUNT", {count:h});
                g.find(".addSongs.count .label").localeDataString("SELECTION_ADD_COUNT", {count:h});
                g.find(".deleteSongs.count .label").localeDataString("SELECTION_DELETE_COUNT", {count:h})
            } else {
                g.find(".play.count .label").localeDataString("SELECTION_PLAY_ALL");
                g.find(".addSongs.count .label").localeDataString("SELECTION_ADD_ALL");
                g.find(".deleteSongs.count .label").localeDataString("SELECTION_DELETE_ALL")
            }
            g.find(".music_options").toggleClass("hide",
                    h === 0);
            var k = $("#page").attr("class").split("_")[2];
            k = c.len > 0 ? "song" : k;
            var m = g.find("a[name=share]");
            m.parent().hide();
            var n = GS.shareTypes[k];
            if (n) {
                g.find("button.share").parent().show();
                $.each(n, function (o, r) {
                    m.filter("[rel=" + r + "]").show().parent().show().removeClass("hide")
                })
            } else g.find("button.share").parent().hide();
            n = g.find(".share .label");
            if (k === "song")h > 1 ? n.localeDataString("SHARE_SONGS") : n.localeDataString("SHARE_SONG"); else n.localeDataString("SHARE_" + k.toUpperCase());
            if (c.len != 1)k === "playlist" ?
                    g.find("li.shareOptions").show() : g.find("li.shareOptions .share_single").hide(); else {
                g.find("li.shareOptions").show();
                g.find("li.shareOptions share_single").show()
            }
            g.find("button.deleteSongs").parent().toggle(c.len > 0);
            $("#page").hasClass("gs_page_now_playing") && g.find("button.delete").toggle(c.len > 0)
        }
    }, correctUrl:function (c, h) {
        function g(k) {
            if ($.isFunction(k.toUrl)) {
                k = k.toUrl(h);
                if (window.location.hash !== k) {
                    var m = location.hash.match(/(?:&|\?)fb_comment_id=([a-zA-Z0-9\_\-]+)/);
                    if (m && m[1])k += m[0];
                    if (window.location.hash.replace(/src=\d/,
                            "") !== k.replace(/src=\d/, "")) {
                        GS.page.fromCorrectUrl = true;
                        GS.router.replaceHash(k)
                    }
                }
            }
        }

        if (c)$.isFunction(c.getPathName) ? c.getPathName(g) : g(c); else console.warn("invalid page.correctUrl obj", c, h)
    }, gridOnSort:function (c) {
        c && c.sortStoreKey && GS.store.set(c.sortStoreKey, c)
    }, getPlayContext:function () {
        var c;
        switch (this.type) {
            case "playlist":
                if (this.hasOwnProperty("playlist") && this.playlist instanceof GS.Models.Playlist)c = new GS.Models.PlayContext(GS.player.PLAY_CONTEXT_PLAYLIST, this.playlist);
                break;
            case "artist":
                if (this.hasOwnProperty("artist") &&
                        this.artist instanceof GS.Models.Artist)c = new GS.Models.PlayContext(GS.player.PLAY_CONTEXT_ARTIST, this.artist);
                break;
            case "album":
                if (this.hasOwnProperty("album") && this.album instanceof GS.Models.Album)c = new GS.Models.PlayContext(GS.player.PLAY_CONTEXT_ALBUM, this.album);
                break;
            case "user":
            case "music":
                if (this.hasOwnProperty("user") && (this.user instanceof GS.Models.User || this.user instanceof GS.Models.AuthUser))c = new GS.Models.PlayContext(GS.player.PLAY_CONTEXT_USER, this.user);
                break;
            case "popular":
                c =
                        new GS.Models.PlayContext(GS.player.PLAY_CONTEXT_POPULAR);
                break;
            default:
                if (this.hasOwnProperty("query"))c = new GS.Models.PlayContext(GS.player.PLAY_CONTEXT_SEARCH, {query:this.query, type:this.type ? this.type : "everything"});
                break
        }
        return _.orEqual(c, new GS.Models.PlayContext)
    }, setSort:function (c, h, g) {
        var k = $("#grid").controller(), m = GS.page.activePage;
        if (k)c == "Rank" ? k.dataView.setItems(k.data) : k.grid.onSort(c); else if (m.slickbox) {
            k = {};
            switch (m.type) {
                case "playlist":
                    switch (c) {
                        case "Rank":
                            k = {sortType:"relevance",
                                sortFunction:null};
                            break;
                        case "PlaylistName":
                            k = {sortType:"playlistName", sortFunction:_.getSort("PlaylistName", true)};
                            break
                    }
                    break;
                case "artist":
                    switch (c) {
                        case "Rank":
                            k = {sortType:"relevance", sortFunction:null};
                            break;
                        case "ArtistName":
                            k = {sortType:"artistName", sortFunction:_.getSort("ArtistName", true)};
                            break
                    }
                    break;
                case "album":
                    switch (c) {
                        case "Rank":
                            k = {sortType:"relevance", sortFunction:null};
                            break;
                        case "AlbumName":
                            k = {sortType:"albumName", sortFunction:_.getSort("AlbumName", true)};
                            break;
                        case "ArtistName":
                            k =
                            {sortType:"artistname", sortFunction:_.getSort("ArtistName", true)};
                            break
                    }
                    break;
                case "user":
                    switch (c) {
                        case "Rank":
                            k = {sortType:"byPicture", sortFunction:m.sortByPicture};
                            break;
                        case "Name":
                            k = {sortType:"username", sortFunction:_.getSort("Username", true)};
                            break
                    }
            }
            if (m.currentSort && k && m.currentSort.sortType == k.sortType || !m.currentSort.sortFunction && !k.sortFunction)return;
            m.slickbox.setSort(k.sortFunction);
            m.currentSort = k
        }
        c = h.find("span.label");
        c.attr("data-translate-text", g);
        c.text($.localize.getString(g))
    },
        getPlayMenu:function () {
            var c = this.getPlayContext(), h = this.getSongsIDsFromSelectedGridRows(), g = this.element;
            return[
                {title:$.localize.getString("PLAY_NOW"), action:{type:"fn", callback:function () {
                    h.length && GS.player.addSongsToQueueAt(h, GS.player.INDEX_DEFAULT, true, c)
                }, log:function () {
                    GS.getGuts().objectListPlayAdd(h, g, "play")
                }}, customClass:"jj_menu_item_hasIcon jj_menu_item_play"},
                {title:$.localize.getString("PLAY_NEXT"), action:{type:"fn", callback:function () {
                    h.length && GS.player.addSongsToQueueAt(h, GS.player.INDEX_NEXT,
                            false, c)
                }, log:function () {
                    GS.getGuts().objectListPlayAdd(h, g, "play")
                }}, customClass:"jj_menu_item_hasIcon jj_menu_item_play_next"},
                {title:$.localize.getString("PLAY_LAST"), action:{type:"fn", callback:function () {
                    h.length && GS.player.addSongsToQueueAt(h, GS.player.INDEX_LAST, false, c)
                }, log:function () {
                    GS.getGuts().objectListPlayAdd(h, g, "play")
                }}, customClass:"jj_menu_item_hasIcon jj_menu_item_play_last"},
                {customClass:"separator"},
                {title:$.localize.getString("REPLACE_QUEUE"), action:{type:"fn", callback:function () {
                    h.length &&
                    GS.player.addSongsToQueueAt(h, GS.player.INDEX_REPLACE, true, c)
                }, log:function () {
                    GS.getGuts().objectListPlayAdd(h, g, "play")
                }}, customClass:"jj_menu_item_hasIcon jj_menu_item_replace_playlist"},
                {title:$.localize.getString("START_RADIO"), action:{type:"fn", callback:function () {
                    if ($("#grid").controller().selectedRowIDs.length)h.length && GS.player.addSongsToQueueAt(h, GS.player.INDEX_REPLACE, true, c, true); else GS.player.addSongsToQueueAt(h[0], GS.player.INDEX_REPLACE, true, c, true)
                }, log:function () {
                    GS.getGuts().objectListPlayAdd(h,
                            g, "play")
                }}, customClass:"jj_menu_item_hasIcon jj_menu_item_new_station"}
            ]
        }, getAddMenu:function () {
            var c = this.getPlayContext(), h = this.getSongsIDsFromSelectedGridRows(), g = this.element, k = $("#grid").controller();
            k = k ? k.selectedRowIDs.length : 0;
            var m = [
                {title:$.localize.getString("CONTEXT_ADD_TO_QUEUE"), action:{type:"fn", callback:function () {
                    h.length && GS.player.addSongsToQueueAt(h, GS.player.INDEX_LAST, false, c)
                }, log:function () {
                    GS.getGuts().objectListPlayAdd(h, g, "add")
                }}, customClass:"jj_menu_item_hasIcon jj_menu_item_now_playing"}
            ];
            if (this.type && h.length && (this.type != "artist" || k !== 0) && !(this.type == "song" && this.song && this.song.fromLibrary) && GS.page.activePageName != "UserMusicController")m.push({title:$.localize.getString("CONTEXT_ADD_TO_LIBRARY"), action:{type:"fn", callback:function () {
                h.length && GS.user.addToLibrary(h)
            }, log:function () {
                GS.getGuts().objectListPlayAdd(h, g, "add")
            }}, customClass:"jj_menu_item_hasIcon jj_menu_item_music"});
            this.song && this.type == "song" && !this.song.isFavorite && m.push({title:$.localize.getString("CONTEXT_ADD_TO_FAVORITES"),
                action:{type:"fn", callback:function () {
                    h.length == 1 && GS.user.addToSongFavorites(h[0], true)
                }, log:function () {
                    GS.getGuts().objectListPlayAdd(h, this.element, "add")
                }}, customClass:"jj_menu_item_hasIcon jj_menu_item_favorites"});
            if (this.type != "artist" || k !== 0)m.push({title:$.localize.getString("CONTEXT_ADD_TO_PLAYLIST"), type:"sub", src:GS.Models.Playlist.getPlaylistsMenu(h, function (o) {
                o.addSongs(h, null, true)
            }, false, true), customClass:"jj_menu_item_hasIcon jj_menu_item_add_playlist"});
            if (this.song && this.type ==
                    "song") {
                var n = this.song.SongID;
                GS.user.getIsShortcut("song", n) ? m.push({title:$.localize.getString("CONTEXT_REMOVE_FROM_PINBOARD"), action:{type:"fn", callback:function () {
                    GS.user.removeFromShortcuts("song", n);
                    $("#page_header a[name=shortcut]").parent().show();
                    $("#page_header a[name=removeshortcut]").parent().hide()
                }}, customClass:"jj_menu_item_hasIcon jj_menu_remove_music"}) : m.push({title:$.localize.getString("CONTEXT_ADD_TO_PINBOARD"), action:{type:"fn", callback:function () {
                    GS.user.addToShortcuts("song",
                            n, songName, true);
                    $("#page_header a[name=shortcut]").parent().hide();
                    $("#page_header a[name=removeshortcut]").parent().show()
                }}, customClass:"jj_menu_item_hasIcon jj_menu_item_pinboard"})
            }
            return m
        }, getSortMenu:function () {
            return[]
        }, getOptionMenu:function () {
            return[]
        }, "input focus":function (c) {
            $(c).parent().parent().addClass("active")
        }, "textarea focus":function (c) {
            $(c).parent().parent().parent().addClass("active")
        }, "input blur":function (c) {
            $(c).parent().parent().removeClass("active")
        }, "textarea blur":function (c) {
            $(c).parent().parent().parent().removeClass("active")
        },
        lastClickEvent:null, doubleClickTime:500, "button click":function (c, h) {
            if (this.lastClickEvent && this.lastClickEvent.target == h.target && h.timeStamp - this.lastClickEvent.timeStamp < this.doubleClickTime) {
                h.stopImmediatePropagation();
                this.lastClickEvent = h;
                return false
            }
            this.lastClickEvent = h
        }, "button.radio click":function (c) {
            c = $(c).attr("data-artists").split(",");
            c.length && GS.player.setAutoplay(true, null, {seeds:c, seedArtistWeightRange:[110, 130], secondaryArtistWeightModifier:0.75})
        }, ".play.dropdownButton click":function (c, h) {
            c.jjmenu(h, this.getPlayMenu(), null, {xposition:"left", yposition:"auto", show:"default", className:"contextmenu", keepState:c, shouldLog:true})
        }, ".addSongs.dropdownButton click":function (c, h) {
            c.jjmenu(h, this.getAddMenu(), null, {xposition:"left", yposition:"auto", show:"default", className:"contextmenu", keepState:c, shouldLog:true})
        }, ".dropdownButton.sort click":function (c, h) {
            var g = this.getSortMenu();
            g && g.length ? c.jjmenu(h, g, null, {xposition:"left", yposition:"auto", show:"default", className:"contextmenu", keepState:c}) :
                    console.warn("no menu")
        }, ".shareOptions .share click":function () {
            var c = this.getSongsIDsFromSelectedGridRows(), h = c > 1 ? "song" : "manySongs", g = $("#grid").controller().grid, k = {};
            if (h == "song") {
                GS.getLightbox().open("share", {type:h, id:c[0]});
                k.ranks = g.getSelectedRows()[0] + 1;
                k.songIDs = this.getSongsIDsFromSelectedGridRows()[0]
            } else {
                GS.getLightbox().open("widget", {type:h, id:c});
                c = g.getSelectedRows();
                _.forEach(c, function (m, n, o) {
                    o[n] = m + 1
                });
                c.sort(_.numSortA);
                k.ranks = c.join();
                k.songIDs = this.getSongsIDsFromSelectedGridRows().join()
            }
            GS.getGuts().logEvent("OLShare",
                    k)
        }, ".dropdownButton.option click":function (c, h) {
            var g = this.getOptionMenu();
            c.jjmenu(h, g, null, {xposition:"left", yposition:"auto", show:"default", className:"contextmenu", keepState:c})
        }, ".dropdownButton.shop click":function (c, h) {
            var g = this.getShopMenu();
            c.jjmenu(h, g, null, {xposition:"left", yposition:"auto", show:"default", className:"contextmenu", keepState:c})
        }, ".play.playTop click":function () {
            var c = this.getSongsIDsFromSelectedGridRows();
            c.length && GS.player.addSongsToQueueAt(c, GS.Controllers.PlayerController.INDEX_DEFAULT,
                    true, this.getPlayContext());
            GS.getGuts().objectListPlayAdd(c, this.element, "play")
        }, "#page_header .upload click":function () {
            GS.user.isLoggedIn ? window.open("http://" + location.host + "/upload", "_blank") : GS.getLightbox().open("login")
        }, "#page .dropdownButton click":function () {
            function c(g) {
                if (g.target !== h.target) {
                    g.data.$groups.removeClass("active");
                    $(this).unbind("click", c)
                }
            }

            var h;
            return function (g, k) {
                h = k;
                var m = $("#page .btn_group"), n = $(g).closest(".btn_group");
                if (n.hasClass("active"))m.removeClass("active");
                else {
                    m.removeClass("active");
                    n.addClass("active");
                    $(document).unbind("click contextmenu", c).bind("click contextmenu", {$groups:m}, c)
                }
            }
        }(), ".display_toggles .slickbox click":function (c) {
            if (this.displayMethod != "slickbox") {
                this.displayResults("slickbox");
                GS.store.set("searchDisplay", "slickbox");
                $("#page_header .display_toggles button").removeClass("active");
                c.addClass("active")
            }
        }, ".display_toggles .grid click":function (c) {
            if (this.displayMethod != "grid") {
                this.displayResults("grid");
                GS.store.set("searchDisplay",
                        "grid");
                $("#page_header .display_toggles button").removeClass("active");
                c.addClass("active")
            }
        }, getSongsIDsFromSelectedGridRows:function () {
            var c = $("#grid").controller(), h = [];
            if (c && c.selectedRowIDs.length > 0)h = c.selectedRowIDs; else if (c)for (var g = 0; g < c.dataView.rows.length; g++) {
                if (h.length >= 1E3)break;
                h.push(c.dataView.rows[g].SongID)
            } else this.type === "song" && this.song && h.push(this.song.SongID);
            return h
        }, ".inPageFilter input keydown":function (c, h) {
            if (h.which == _.keys.ENTER && !c.parents("form").hasClass("inPageSearch")) {
                h.preventDefault();
                h.stopPropagation()
            } else if (h.which == _.keys.ESC && !c.parents("form").hasClass("inPageSearch")) {
                var g = $("#page_search_results");
                if (g.is(":visible")) {
                    g.hide();
                    $.publish("gs.menu.hide")
                } else {
                    c.siblings("a.remove").addClass("hide");
                    c.val("")
                }
            }
            c.siblings("a.remove").toggleClass("hide", !c.val().length);
            this.inpageFilter(c)
        }, ".inPageSearch input keydown":function (c, h) {
            var g = $("#page_search_results li.selected");
            switch (h.which) {
                case _.keys.ENTER:
                    c.parents("form").submit();
                    return;
                case _.keys.ESC:
                    g = $("#page_search_results");
                    if (g.is(":visible")) {
                        g.hide();
                        $.publish("gs.menu.hide")
                    } else {
                        c.siblings("a.remove").addClass("hide");
                        c.val("");
                        this.inpageSearch(c)
                    }
                    return;
                case _.keys.UP:
                    g.is(":first-child") ? $("#page_search_results li:last").addClass("selected") : g.prev().addClass("selected");
                    g.removeClass("selected");
                    return;
                case _.keys.DOWN:
                    g.is(":last-child") ? $("#page_search_results li:first").addClass("selected") : g.next().addClass("selected");
                    g.removeClass("selected");
                    return
            }
            c.siblings("a.remove").toggleClass("hide", !c.val().length);
            this.inpageSearch(c)
        }, filterTimeout:false, searchTimeout:false, searchTimeoutWait:100, inpageSearch:function (c) {
            clearTimeout(this.searchTimeout);
            this.searchTimeout = setTimeout(this.callback(function () {
                if (this.element) {
                    this.element.find(".gs_grid:last").controller();
                    var h = $.trim(c.val().toLowerCase());
                    if (h.length > 0)GS.service.getAutocomplete(h, "artist", this.callback("autocompleteSuccess"), this.callback("autocompleteFail")); else {
                        $("#page_search_results").hide();
                        $.publish("gs.menu.hide")
                    }
                }
            }), this.searchTimeoutWait)
        },
        inpageFilter:function (c) {
            clearTimeout(this.filterTimeout);
            this.filterTimeout = setTimeout(this.callback(function () {
                if (this.element) {
                    var h = this.element.find(".gs_grid:last").controller(), g = $.trim($(c).val().toLowerCase());
                    if (h) {
                        var k = g;
                        if ($("#page").is(".gs_page_search") && _.isString(this.query))if (g.indexOf(this.query.toLowerCase()) === 0)k = g.substring(this.query.length);
                        h.searchString = $.trim(k);
                        h.dataView.refresh()
                    } else if ($("#feed.events").length)if (g === "")$("#feed.events .event").show(); else {
                        (new Date).getTime();
                        $("#feed.events .event").each(function () {
                            var m = $(this);
                            m.text().toLowerCase().indexOf(g) !== -1 ? m.show() : m.hide()
                        });
                        (new Date).getTime()
                    } else this.slickbox && this.filterUsers(g)
                }
            }), this.searchTimeoutWait)
        }, ".inPageSearchBar input focus":function (c) {
            c.siblings(".placeholder").hide();
            this.pageSearchHasFocus = true
        }, ".inPageSearchBar input blur":function (c) {
            if (!c.val()) {
                c.siblings(".placeholder").show();
                c.siblings("a.remove").addClass("hide")
            }
            setTimeout(this.callback(function () {
                if (!this.pageSearchHasFocus) {
                    $("#page_search_results").hide();
                    $.publish("gs.menu.hide")
                }
            }), 500);
            this.pageSearchHasFocus = false
        }, ".inPageSearchBar .search-item a click":function (c) {
            $("#page_search_results li.selected").removeClass("selected");
            $(c).parent().addClass("selected");
            $(c).is(".search-item") && c.closest("input").val($(c).text());
            c.submit()
        }, ".inPageSearchBar a.icon click":function (c) {
            c.siblings("input").focus().select()
        }, ".inPageSearchBar a.remove click":function (c) {
            c.addClass("hide");
            var h = c.siblings("input");
            c = c.parents("form");
            h.val("").focus();
            $("#page_search_results").hide();
            $.publish("gs.menu.hide");
            c.hasClass("inPageSearch") && this.inpageSearch(h);
            c.hasClass("inPageFilter") && this.inpageFilter(h)
        }, ".inPageSearchBar submit":function (c, h) {
            h.preventDefault();
            GS.search = _.orEqual(GS.search, {});
            GS.search.type = $(c).attr("data-search-type") || "";
            var g = $("#page_search_results li.selected");
            GS.search.query = g.is(".search-item-result") ? g.find("a").text() : $("input[name=q]", c).val();
            if (GS.search.query && GS.search.query.length) {
                this.pageSearchHasFocus = false;
                GS.router.performSearch(GS.search.type,
                        GS.search.query)
            }
        }, autocompleteSuccess:function (c) {
            this.autocompleteResults = c;
            $("#page_search_results").html(this.view("/shared/pageSearchResults"));
            if (this.pageSearchHasFocus) {
                $("#page_search_results").show();
                $.publish("gs.menu.show")
            }
        }, autocompleteFail:function () {
            $("#page_search_results").hide().find(".search-item").remove();
            $.publish("gs.menu.hide")
        }, addAutocomplete:function (c) {
            c = _.orEqual(c, $("#page").attr("class"));
            c.match(".gs_page_") || (c = ".gs_page_" + c);
            $("input.search.autocomplete", this.element).autocomplete({scroll:true,
                matchSubset:false, selectFirst:false, source:function (h, g) {
                    if (h = $.trim(h.term || h)) {
                        var k = [], m = $("#searchBar_precomplete");
                        m.hide();
                        GS.service.getAutocomplete(h, "artist", function (n) {
                            if ($("#page").is(c)) {
                                n && n.length && $.each(n, function (r, A) {
                                    A.hasOwnProperty("Name") && A.hasOwnProperty("ArtistID") && k.push({label:A.Name.toString(), value:A.ArtistID})
                                });
                                if (c == ".gs_page_home" && k.length) {
                                    n = $("#searchBar_input input").val();
                                    var o = k[0].label;
                                    o = [o.substring(0, n.length), o.substring(n.length)];
                                    n == h && n.toLowerCase() ==
                                            o[0].toLowerCase() ? m.text(n + o[1]).show() : m.text("").hide()
                                } else m.text("").hide();
                                g(k)
                            }
                        }, function () {
                        })
                    }
                }, select:function (h, g) {
                    h.preventDefault();
                    c == ".gs_page_home" && parseInt(g.item.value, 10) ? GS.router.setHash("/artist/~/" + g.item.value) : $("input.search.autocomplete").val(g.item.label).submit()
                }, focus:function (h, g) {
                    h.preventDefault();
                    $("#searchBar_input input").val(g.item.label);
                    $("#searchBar_precomplete").hide()
                }, close:function () {
                    $("#searchBar_precomplete").show()
                }})
        }, getPlayOptionsMenuForFeeds:function (c) {
            return[
                {title:$.localize.getString("PLAY_NOW"),
                    action:{type:"fn", callback:function () {
                        c.playSongs(-1, true)
                    }}, customClass:"jj_menu_item_hasIcon jj_menu_item_play"},
                {title:$.localize.getString("PLAY_NEXT"), action:{type:"fn", callback:function () {
                    c.playSongs(-2, false)
                }}, customClass:"jj_menu_item_hasIcon jj_menu_item_play_next"},
                {title:$.localize.getString("PLAY_LAST"), action:{type:"fn", callback:function () {
                    c.playSongs(-3, false)
                }}, customClass:"jj_menu_item_hasIcon jj_menu_item_play_last"},
                {title:$.localize.getString("REPLACE_QUEUE"), action:{type:"fn",
                    callback:function () {
                        c.playSongs(-4, true)
                    }}, customClass:"jj_menu_item_hasIcon jj_menu_item_replace_playlist"}
            ]
        }, scroll:function (c) {
            $page = $(c);
            $controls = $(".page_controls");
            $sticky = $(".page_controls .sticky");
            $("#tooltip") && this.closeTooltip();
            if ($sticky.length) {
                $sticky.width($controls.width());
                $sticky.hasClass("fixed") || $controls.height($controls.height());
                if ($controls.offset().top < 59)$sticky.addClass("fixed"); else {
                    $sticky.removeClass("fixed");
                    $controls.height("auto")
                }
            }
        }, "#feed.events .play.dropdownButton click":function (c, h) {
            var g = $(c).closest(".event").data("event");
            g ? c.jjmenu(h, this.getPlayOptionsMenuForFeeds(g), null, {xposition:"left", yposition:"auto", show:"default", className:"contextmenu", keepState:c}) : console.warn("feed data not attached")
        }, "#feed.events button[name=play] click":function (c) {
            $(c).closest(".event").data("event").playSongs(-1, true)
        }, "#feed.events .event .songLink click":function (c, h) {
            h.preventDefault();
            var g = $(c).closest(".event");
            g = $(g).data("event");
            var k;
            g = GS.Models.Song.wrapCollection(g.data.songs);
            if (_.defined($(c).attr("data-songid"))) {
                k = parseInt($(c).attr("data-songid"), 10);
                k = GS.Models.Song.getOneFromCache(k)
            } else {
                var m = _.defined($(c).attr("data-song-index")) ? parseInt($(c).attr("data-song-index"), 10) : 0;
                if (g.length > 0)k = g[m]
            }
            (k = k && $.isFunction(k.toUrl) ? k.toUrl() : false) && GS.router.setHash(k)
        }, "#feed.events .event button.subscribe click":function (c) {
            var h = $(c).closest(".event").data("event").data.playlists[0].playlistID;
            GS.Models.Playlist.getPlaylist(h, this.callback("subscribePlaylist", c), this.callback("subscribePlaylistError"),
                    false)
        }, subscribePlaylist:function (c, h) {
            if (h.isSubscribed()) {
                GS.user.removeFromPlaylistFavorites(h.PlaylistID);
                c.find("span.label").localeDataString("PLAYLIST_SUBSCRIBE")
            } else {
                GS.user.addToPlaylistFavorites(h.PlaylistID);
                c.find("span.label").localeDataString("PLAYLIST_UNSUBSCRIBE")
            }
        }, subscribePlaylistError:function () {
            $.publish("gs.notification", {type:"error", message:$.localize.getString("NOTIF_FAVORITE_ERROR_GENERAL")})
        }, "#feed.events .event .showSongs click":function (c) {
            c = $(c).closest(".event");
            var h = $(c).data("event"), g = $(c).find(".songWrapper"), k = $(c).find(".songList");
            if (k.children().length)g.toggle(); else {
                var m = GS.Models.Song.wrapCollection(h.data.songs);
                g.css("visibility", "hidden").show();
                oldCols = GS.Controllers.GridController.columns.song.concat();
                h = [oldCols[0], oldCols[1], oldCols[2]];
                k.gs_grid(m, h, {sortCol:"Sort", padding:0});
                $(window).resize();
                g.css("visibility", "visible")
            }
            g = k.is(":visible") ? $.localize.getString("FEED_HIDE_SONGS") : $.localize.getString("FEED_VIEW_SONGS");
            $(c).find("button.showSongs .label").text(g)
        },
        "#feed.events .event .remove click":function (c) {
            var h = $(c).closest(".event");
            c = parseInt($(c).attr("rel"), 10);
            c == GS.user.UserID ? $(".warning", h).attr("data-translate-text", "FEED_REMOVE_ACTIVITY_WARNING").attr("rel", c).html($.localize.getString("FEED_REMOVE_ACTIVITY_WARNING")).show() : $(".warning", h).attr("data-translate-text", "FEED_HIDE_USER_WARNING").attr("rel", c).html($.localize.getString("FEED_HIDE_USER_WARNING")).show()
        }, "#feed.events .event .removeComment click":function (c) {
            var h = $(c).closest(".feedComment");
            c = $(c).attr("rel");
            $(".warning", h).attr("data-translate-text", "FEED_REMOVE_COMMENT_WARNING").attr("rel", c).html($.localize.getString("FEED_REMOVE_COMMENT_WARNING")).show()
        }, "#feed.events .event .warning .yesRemove click":function (c) {
            var h = $(c).closest(".event"), g = $(h).data("event");
            c = parseInt($(c).parent().attr("rel"), 10);
            if (c == GS.user.UserID) {
                h.remove();
                g.remove()
            } else {
                this.find("#feed .user_" + c).remove();
                GS.user.changeFollowFlags([
                    {userID:c, flags:1}
                ])
            }
            $(".warning", h).hide()
        }, "#feed.events .event .warning .noRemove click":function (c) {
            c =
                    $(c).closest(".event");
            $(".warning", c).hide()
        }, "#feed.events .event .warning .yesRemoveComment click":function (c) {
            var h = $(c).closest(".event"), g = $(c).closest(".feedComment");
            c = $(c).parents(".warning").attr("rel");
            var k = $(h).data("event");
            k.removeComment(c);
            g.remove();
            if (k.comments.length)k.comments.length == 1 ? h.find(".showCommentForm .label").html($.localize.getString("FEED_COMMENTS_COUNT_ONE")) : h.find(".showCommentForm .label").html(_.getString("FEED_COMMENTS_COUNT", {count:k.comments.length})); else {
                h.find(".commentWrapper").hide();
                h.find(".showCommentForm .label").html($.localize.getString("FEED_COMMENT"))
            }
        }, "#feed.events .event .warning .noRemoveComment click":function (c) {
            c = $(c).closest(".feedComment");
            $(".warning", c).hide()
        }, "#feed.events .event .showCommentForm click":function (c) {
            c = $(c).closest(".event");
            $(c).data("event");
            var h = $(c).find(".commentFormWrapper");
            $(c).find(".commentFormWrapper").hasClass("hide") || h.html(this.view("community/eventCommentForm"));
            h.find(".message").select()
        }, ".feedCommentForm .message keydown":function (c, h) {
            if (h.which == _.keys.ENTER)return false
        }, ".feedCommentForm .message keyup":function (c, h) {
            if (h.which == _.keys.ENTER) {
                h.preventDefault();
                h.stopPropagation();
                c.parents(".feedCommentForm").submit();
                return false
            }
        }, ".feedCommentForm submit":function (c, h) {
            h.preventDefault();
            var g = $(c).closest(".event"), k = $(g).data("event"), m = $("textarea[name=message]", g).val(), n = $(".feedCommentForm .error");
            m = $.trim(m);
            if (m.length) {
                n.hide();
                k.addComment(m, this.callback(this.commentSuccess, g), this.callback(this.commentFailed,
                        g))
            } else n.show().find(".message").html($.localize.getString("FEED_COMMENT_ERROR_EMPTY"))
        }, commentSuccess:function (c, h) {
            if (h) {
                var g = $(c).data("event");
                $(c).find(".commentFormWrapper").html("");
                $(c).find(".commentWrapper").append(this.view("community/eventComments", {comments:[g.comments[g.comments.length - 1]], event:g})).show();
                g.comments.length == 1 ? c.find(".showCommentForm .label").html($.localize.getString("FEED_COMMENTS_COUNT_ONE")) : c.find(".showCommentForm .label").html(_.getString("FEED_COMMENTS_COUNT",
                        {count:g.comments.length}))
            } else this.commentFailed(c, h)
        }, commentFailed:function (c, h) {
            $(".feedCommentForm .error").show().find(".message").html($.localize.getString("FEED_COMMENT_ERROR"));
            console.warn("commentFailed", h)
        }, "#feed.events .event .showMoreComments click":function (c) {
            var h = $(c).closest(".event"), g = $(h).data("event");
            $(h).find(".commentWrapper").html(this.view("community/eventComments", {comments:g.comments, event:g}));
            $(c).remove()
        }, ".feeds_loadMore click":function (c) {
            if (this.feed) {
                this.feed.next(this.callback("showNextFeedPage"));
                $(".showMore", c).hide().siblings().show()
            }
        }, showNextFeedPage:function (c) {
            if (c && c.length) {
                this.activity = c;
                $("#feed").append(this.view("/user/community/feedEvents"));
                for (var h = 0; h < c.length; h++) {
                    event = c[h];
                    $event = $("#feedEvent_" + event.eventID).data("event", event);
                    event.dataString && event.dataString.hookup($event.find("p.what"))
                }
            }
            $(".feeds_loadMore .loading").hide().siblings().show();
            this.feed.hasMore || $(".feeds_loadMore").hide()
        }, ".slick-row .song .options .favorite click":function (c) {
            var h = c.attr("rel"),
                    g = parseInt($(c).parents(".slick-row").attr("row"), 10), k = g + 1, m = "";
            if ($("#grid").controller())m = $("#grid").controller().data[g].ppVersion;
            g = {songID:h, rank:k};
            if (m)g.ppVersion = m;
            if (c.is(".isFavorite")) {
                GS.user.removeFromSongFavorites(h);
                c.removeClass("isFavorite")
            } else {
                GS.user.addToSongFavorites(h);
                c.addClass("isFavorite");
                GS.getGuts().songItemFavoriteClick(g)
            }
        }, ".slick-row .song .options .library click":function (c) {
            var h = c.attr("rel"), g = parseInt($(c).parents(".slick-row").attr("row"), 10), k = g + 1, m = $("#grid"),
                    n = "";
            if (m.controller()) {
                m = m.controller().data;
                if (m[g] && m[g].ppVersion)n = m[g].ppVersion
            }
            g = {songID:h, rank:k};
            if (n)g.ppVersion = n;
            if (c.parent().is(".inLibrary")) {
                GS.user.removeFromLibrary(h);
                c.parent().removeClass("inLibrary")
            } else {
                GS.user.addToLibrary([h]);
                c.parent().addClass("inLibrary");
                GS.getGuts().songItemLibraryClick(g)
            }
        }, ".slick-row .playlist .subscribe click":function (c) {
            var h = c.attr("rel");
            if (GS.Models.Playlist.getOneFromCache(h).isSubscribed()) {
                GS.user.removeFromPlaylistFavorites(h);
                c.removeClass("subscribed").find("span.label").text($.localize.getString("PLAYLIST_SUBSCRIBE"))
            } else {
                GS.user.addToPlaylistFavorites(h);
                c.addClass("subscribed").find("span.label").text($.localize.getString("PLAYLIST_UNSUBSCRIBE"))
            }
        }, ".slick-cell.song a.more click":function (c, h) {
            var g = $(c).attr("rel"), k = GS.Models.Song.getOneFromCache(g);
            g = $(c).parents(".slick-row").attr("row");
            var m = $(c).parents(".gs_grid").controller(), n = {}, o;
            if ($("#page").is(".gs_page_now_playing")) {
                o = k.queueSongID;
                n = {isQueue:true, flagSongCallback:function (A) {
                    GS.player.flagSong(o, A)
                }}
            }
            if ($("div.gridrow" + g).is(":visible")) {
                $("div.gridrow" + g).hide();
                c.removeClass("active-context")
            } else {
                n =
                {menuType:"songOptionMenu", multiClick:false, gridController:m};
                n = k.getContextMenu(n);
                var r = GS.getGuts();
                if (r.currentTest && r.currentTest.name == "gridRowPlay" && (r.currentTest.currentGroup == 2 || r.currentTest.currentGroup == 3 || r.currentTest.currentGroup == 4))n.push({customClass:"separator"}, {title:"Song Page", action:{type:"fn", callback:function () {
                    GS.router.setHash(k.toUrl())
                }, log:this.callback(function () {
                    GS.getGuts().onContextMenuClick("contextNavigateSongPage", menuType, false, songItemInfo)
                })}, customClass:"last jj_menu_item_hasIcon jj_menu_item_song_page"});
                c.addClass("active-context").jjmenu(h, n, null, {xposition:"left", yposition:"auto", show:"show", className:"rowmenu gridrow" + g, keepState:c, shouldLog:true})
            }
            m.currentRow = g;
            m.grid.setSelectedRows([g]);
            m.grid.onSelectedRowsChanged()
        }, playClickSongID:false, ".slick-cell.song a.play click":function (c, h) {
            var g = parseInt(c.attr("rel"), 10), k = GS.player.getCurrentQueue(), m = GS.player.isPlaying;
            isPaused = GS.player.isPaused;
            if (this.playClickSongID != g) {
                this.playClickSongID = g;
                var n = $(c).parents(".slick-row").attr("row");
                n = parseInt(n, 10) + 1;
                this.playClickSongID = g;
                n = parseInt($(c).parents(".slick-row").attr("row"), 10);
                n = n + 1;
                var o = "";
                if ($("#grid").controller()) {
                    var r = $("#grid").controller().data;
                    if (r[n - 1])o = r[n - 1].ppVersion
                }
                gutsInfo = o ? {songID:g, rank:n, ppVersion:o} : {songID:g, rank:n};
                n = $(c).parents(".slick-row").attr("row");
                n = parseInt(n, 10) + 1;
                if (c.parents(".slick-row.active").length && k.activeSong.SongID == g)if (!m && !isPaused) {
                    $(c).removeClass("paused");
                    GS.player.playSong(g)
                } else if (m) {
                    $(c).addClass("paused");
                    GS.player.pauseSong()
                } else {
                    $(c).removeClass("paused");
                    GS.player.resumeSong()
                } else if ($("#page").is(".gs_page_now_playing")) {
                    h.stopImmediatePropagation();
                    GS.player.playSong($(c).parents(".slick-row").attr("rel"))
                } else if ($(c).parents(".gs_grid.hasSongs").length) {
                    GS.player.addSongsToQueueAt([g], GS.player.INDEX_DEFAULT, false, this.getPlayContext());
                    GS.getGuts().logEvent("songItemAddButton", gutsInfo)
                } else {
                    GS.player.addSongAndPlay(g, this.getPlayContext());
                    GS.getGuts().logEvent("songItemPlayButton", gutsInfo)
                }
                setTimeout(this.callback(function () {
                    this.playClickSongID =
                            false
                }), 500);
                return false
            }
        }, ".slick-row.event .event_tickets click":function (c, h) {
            var g = c.parents(".slick-row").attr("row");
            g = $("#grid").controller().dataView.getItemByIdx(g);
            if (!$(h.target).is("a[href]") && g && g.TicketsURL) {
                window.open(g.TicketsURL, "_blank");
                GS.getGuts().gaTrackEvent("grid", "eventClick", g.TicketsURL);
                return false
            }
        }, "#searchForm, #homeSearch submit":function (c, h) {
            h.preventDefault();
            var g = $("input[name=q]", c).val();
            if (g.substring(0, 2).toLowerCase() == "gs")switch (g.toLowerCase()) {
                case "GS.google.lasterror":
                    alert(JSON.stringify(GS.getGoogle().lastError));
                    return false;
                case "GS.facebook.lasterror":
                    alert(JSON.stringify(GS.getFacebook().lastError));
                    return false;
                case "GS.lastfm.lasterror":
                    alert(JSON.stringify(GS.getLastfm().lastError));
                    return false
            } else if (g.toLowerCase() == "floppy music" || g.toLowerCase() == "floppy drive music")GS.getYoutube().loadFloppyMusic(); else if (g.toLowerCase() == "about:dubstep" || g.toLowerCase() == "how do i dubstep")GS.getYoutube().loadDubstep(); else if (g.toLowerCase() == "about:christmas") {
                GS.Models.Station.makeChristmasHappen();
                return
            }
            GS.search =
                    _.orEqual(GS.search, {});
            GS.search.query = g;
            GS.search.type = $(c).attr("data-search-type") || "";
            GS.search.query && GS.search.query.length && GS.router.performSearch(GS.search.type, GS.search.query);
            return false
        }, "a.searchLink click":function (c, h) {
            h.preventDefault();
            var g = c.data("searchtype"), k = c.data("searchquery");
            g = g ? g : "";
            k = k ? k : "";
            GS.router.performSearch(g, k)
        }, "#feed .what>a click":function (c, h) {
            GS.getGuts().handleFeedEventClick(c, h)
        }, "#feed li.option click":function (c, h) {
            GS.getGuts().handleFeedEventClick(c,
                    h)
        }, "#feed li.show click":function (c, h) {
            GS.getGuts().handleFeedEventClick(c, h)
        }, "#profile_artists a click":function (c, h) {
            GS.getGuts().handleSearchSidebarClick(c, h, "artist")
        }, "#profile_albums a click":function (c, h) {
            GS.getGuts().handleSearchSidebarClick(c, h, "album")
        }, "#profile_playlists a click":function (c, h) {
            GS.getGuts().handleSearchSidebarClick(c, h, "playlist")
        }, "#profile_users a click":function (c, h) {
            GS.getGuts().handleSearchSidebarClick(c, h, "user")
        }, "#profile_events a click":function (c, h) {
            GS.getGuts().handleSearchSidebarEventClick(c,
                    h)
        }, "a.follow, button.follow click":function (c) {
            var h = parseInt($(c).attr("data-follow-userid"), 10), g = _.orEqual($(c).attr("data-cachePrefix"), ""), k = "", m = function () {
                if (c.is(".following")) {
                    GS.user.removeFromUserFavorites(h);
                    c.removeClass("following").addClass("add");
                    k = "FOLLOW"
                } else {
                    GS.user.addToUserFavorites(h);
                    c.addClass("following").removeClass("add");
                    k = "FOLLOWING"
                }
                c.find("span.label").attr("data-translate-text", k).text($.localize.getString(k))
            };
            GS.Models.User.getOneFromCache(h, g) ? m() : GS.Models.User.getUser(h,
                    m, null, false)
        }, "a.signup, button.signup click":function () {
            GS.router.setHash("/signup")
        }, "a.login, button.login click":function () {
            GS.getLightbox().open("login")
        }, "a.uploadMusic, button.uploadMusic click":function () {
            GS.user.isLoggedIn ? window.open("http://" + location.host + "/upload", "_blank") : GS.getLightbox().open("login")
        }, "a.saveQueue, button.saveQueue click":function () {
            GS.player.saveQueue()
        }, "a.newPlaylist, button.newPlaylist click":function () {
            GS.getLightbox().open("newPlaylist")
        }, "a.inviteFriends, button.inviteFriends click":function () {
            GS.getLightbox().open("invite")
        },
        "select.launchStation change":function (c) {
            (c = $(c).val()) && GS.player.setAutoplay(true, c)
        }, "select change":function (c) {
            $(c).prev("span").text($(c).find("option:selected").html())
        }, "button.playRecent click":function () {
            if (this.feed)this.feed.play(GS.player.INDEX_DEFAULT, true); else this.user && this.user.profileFeed.play(GS.player.INDEX_DEFAULT, true)
        }, "button.playDropdownRecent click":function (c, h) {
            this.user && c.jjmenu(h, this.getPlayMenu(), null, {xposition:"left", yposition:"auto", show:"default", className:"contextmenu",
                keepState:c})
        }, "button.refresh click":function (c) {
            feedType = $(c).attr("data-feed-type");
            if (!GS.page.refreshed || GS.page.refreshed.type !== this.feed.type || GS.page.refreshed.user !== this.user.UserID) {
                switch (this.feed.type) {
                    case "profile":
                        this.user.UserID == GS.user.UserID ? this.loadMyProfile(GS.user) : this.loadProfile(this.user);
                        break;
                    case "community":
                        this.user.communityFeed.isDirty = true;
                        this.user.UserID == GS.user.UserID || this.UserID == -1 ? this.loadMyCommunity(this.user) : this.loadCommunity(this.user);
                        break
                }
                GS.page.refreshed =
                {type:this.feed.type, user:this.user.UserID};
                GS.page.resetRefreshButton()
            }
        }, "button.followArtist click":function (c) {
            var h = c.attr("data-artistid");
            GS.Models.Artist.getArtist(h, function () {
                if (GS.user.favorites.artists.hasOwnProperty(h)) {
                    GS.user.removeFromArtistFavorites(h, true);
                    c.attr("title", "");
                    $(".artistID" + h).removeClass("following").addClass("plus").find("span.label").attr("data-translate-text", "ARTIST_FOLLOW").text($.localize.getString("ARTIST_FOLLOW"))
                } else {
                    GS.user.addToArtistFavorites(h, true);
                    c.attr("title", $.localize.getString("UNFOLLOW"));
                    $(".artistID" + h).removeClass("plus").addClass("following").find("span.label").attr("data-translate-text", "ARTIST_FOLLOWING").text($.localize.getString("ARTIST_FOLLOWING"))
                }
            }, null, false)
        }, "button.subscribePlaylist click":function (c) {
            var h = c.attr("data-playlistid");
            GS.Models.Playlist.getPlaylist(h, function () {
                if (GS.user.favorites.playlists.hasOwnProperty(h)) {
                    GS.user.removeFromPlaylistFavorites(h, false);
                    $(".playlistID" + h).removeClass("subscribed").addClass("plus").find("span.label").attr("data-translate-text",
                            $.localize.getString("PLAYLIST_SUBSCRIBE")).text($.localize.getString("PLAYLIST_SUBSCRIBE"))
                } else {
                    GS.user.addToPlaylistFavorites(h, false);
                    $(".playlistID" + h).removeClass("plus").addClass("subscribed").find("span.label").attr("data-translate-text", $.localize.getString("PLAYLIST_SUBSCRIBED")).text($.localize.getString("PLAYLIST_SUBSCRIBED"))
                }
            }, null, false)
        }, "button.librarySong click":function (c) {
            c = c.attr("data-songid");
            if (GS.user.library.songs.hasOwnProperty(c)) {
                GS.user.removeFromLibrary(c, false);
                $(".songID" +
                        c).removeClass("inLibrary").addClass("plus").find("span.label").attr("data-translate-text", $.localize.getString("SONG_ADD_LIBRARY")).text($.localize.getString("SONG_ADD_LIBRARY"))
            } else {
                GS.user.addToLibrary(c, false);
                $(".songID" + c).removeClass("plus").addClass("inLibrary").find("span.label").attr("data-translate-text", $.localize.getString("SONG_IN_LIBRARY")).text($.localize.getString("SONG_IN_LIBRARY"))
            }
        }, currentTipElement:null, tooltipTimer:null, ".tooltip mouseover":function (c) {
            clearTimeout(this.toolTipTimer);
            if (this.currentTipElement != c.get(0)) {
                this.currentTipElement = c.get(0);
                c = $(c);
                var h = c.attr("data-tip-type"), g = null;
                g = null;
                var k = c.offset(), m = k.left + c.width() + 350 > $("body").width() ? "left" : "right", n = {};
                $("#tooltip").stop().remove();
                switch (h) {
                    case "song":
                        g = GS.Models.Song.getOneFromCache(c.attr("data-SongID"), c.attr("data-cachePrefix"));
                        break;
                    case "artist":
                        g = GS.Models.Artist.getOneFromCache(c.attr("data-ArtistID"), c.attr("data-cachePrefix"));
                        break;
                    case "playlist":
                        g = GS.Models.Playlist.getOneFromCache(c.attr("data-PlaylistID"),
                                c.attr("data-cachePrefix"));
                        break;
                    case "album":
                        g = GS.Models.Album.getOneFromCache(c.attr("data-AlbumID"), c.attr("data-cachePrefix"));
                        break;
                    case "video":
                        g = GS.Models.Video.getOneFromCache(c.attr("data-VideoID"), c.attr("data-cachePrefix"));
                        break;
                    case "feed":
                        g = GS.Models.FeedEvent.getOneFromCache(c.attr("data-EventID"));
                        m = "top";
                        n.index = c.attr("data-index");
                        break
                }
                if (g) {
                    g = $(this.view("/shared/tooltips/" + h, {data:g, direction:m, info:n}));
                    $("body").append(g.css({visibility:"hidden"}));
                    h = 0;
                    if (m == "left")g.css({top:k.top,
                        right:k.left - 5}); else if (m == "right")g.css({top:k.top, left:k.left + c.width() + 5}); else {
                        if (m == "top") {
                            h = Math.max(5, k.left + c.width() / 2 - g.width() / 2 - 6);
                            g.css({top:k.top - g.height() - 5, left:h})
                        } else {
                            h = Math.max(5, k.left + c.width() / 2 - g.width() / 2 - 6);
                            g.css({top:k.top + g.height(), left:h})
                        }
                        $("#tooltip_caret", g).css({left:k.left - h + 14})
                    }
                    $("body").append(g.hide().css({visibility:"visible"}).delay(500).fadeIn("fast"))
                }
            }
        }, ".tooltip mouseout":function () {
            this.toolTipTimer = setTimeout(this.callback("closeTooltip"), 750)
        }, delayCloseTooltip:function () {
            clearTimeout(this.toolTipTimer)
        },
        closeTooltip:function () {
            clearTimeout(this.tooltipTimer);
            this.tooltipTimer = this.currentTipElement = null;
            $("#tooltip").stop().fadeOut(50, function () {
                $(this).remove()
            })
        }, ".playBtn click":function (c, h) {
            h.preventDefault();
            var g = !(GS.player.queue && GS.player.queue.activeSong);
            if (c.attr("data-playlistid"))GS.Models.Playlist.getPlaylist(c.attr("data-playlistid"), function (m) {
                m.play(-1, true)
            }); else if (c.attr("data-songid"))if (c.attr("data-eventid") && this.feed && this.feed.cache && this.feed.cache[c.attr("data-eventid")]) {
                var k =
                        _.orEqual(c.attr("data-index"), 0);
                (k = GS.Models.Song.wrap(this.feed.cache[c.attr("data-eventid")].data.songs[k])) && GS.player.addSongsToQueueAt([k.SongID], -1, g)
            } else GS.player.addSongsToQueueAt([c.attr("data-songid")], -1, g); else c.attr("data-albumid") ? GS.Models.Album.getAlbum(c.attr("data-albumid"), function (m) {
                m.play(-1, true)
            }) : console.warn("Not a valid data attribute")
        }, ".songLink click":function (c, h) {
            h.preventDefault();
            var g;
            if (g = c.attr("data-songid"))(g = (g = GS.Models.Song.getOneFromCache(g) ? GS.Models.Song.getOneFromCache(g) :
                    GS.Models.Song.getSong(g)) && $.isFunction(g.toUrl) ? g.toUrl() : false) && GS.router.setHash(g)
        }, sliderOrBoxDragSetup:function (c, h) {
            c.unbind("draginit").unbind("dragstart").unbind("drag").unbind("dragend");
            c.bind("draginit",
                    function (g, k) {
                        var m = $(g.target).closest(h);
                        if (m.length === 0)return false;
                        k.draggedItemID = m.attr("data-dragid");
                        k.draggedItemsType = m.attr("data-dragtype");
                        if (!k.draggedItemID || !k.draggedItemsType)return false;
                        k.proxyOffsetX = g.clientX - m.offset().left;
                        k.proxyOffsetY = g.clientY - m.offset().top
                    }).bind("dragstart",
                    function (g, k) {
                        var m, n;
                        m = GS.Controllers.PageController.getActiveController();
                        k.draggedItemsContext = m.getPlayContext();
                        k.draggedItems = [];
                        k.draggedItemsSource = "grid";
                        switch (k.draggedItemsType) {
                            case "album":
                                n = GS.Models.Album.getOneFromCache(parseInt(k.draggedItemID, 10));
                                break;
                            case "playlist":
                                n = GS.Models.Playlist.getOneFromCache(parseInt(k.draggedItemID, 10));
                                break;
                            case "artist":
                                n = GS.Models.Artist.getOneFromCache(parseInt(k.draggedItemID, 10));
                                break;
                            case "user":
                                n = GS.Models.User.getOneFromCache(parseInt(k.draggedItemID,
                                        10));
                                break;
                            case "song":
                                n = GS.Models.Song.getOneFromCache(parseInt(k.draggedItemID, 10));
                                break
                        }
                        if (!n)return false;
                        k.draggedItems.push(n);
                        m = $('<div class="dragProxy slick-reorder-proxy"><div class="status"></div><span class="info"><span class="text"></span></span></div>').css({position:"absolute", zIndex:"99999", "min-height":"50px", "padding-right":"50px"}).appendTo("body").mousewheel(_.globalDragProxyMousewheel);
                        $.isFunction(n.toProxyLabel) ? m.find(".text").html(n.toProxyLabel()) : m.find(".text").html(n.toString());
                        k.proxyOffsetX = Math.floor(m.width() / 2) + 15;
                        k.proxyOffsetY = m.height() * 2 - 52;
                        $.publish("gs.drag.start", k);
                        return m
                    }).bind("drag",
                    function (g, k) {
                        k.clientX = g.clientX;
                        k.clientY = g.clientY;
                        $(k.proxy).css("top", g.clientY - k.proxyOffsetY).css("left", g.clientX - k.proxyOffsetX);
                        var m = false, n = false;
                        _.forEach(k.drop, function (o) {
                            $.isFunction(o.updateDropOnDrag) && o.updateDropOnDrag(g, k);
                            if (!m)if ($(o).within(g.clientX, g.clientY).length > 0)if ($(o).data("ignoreForOverDrop"))n = true; else {
                                n = false;
                                m = true
                            }
                        });
                        n || (m ? $(k.proxy).addClass("valid").removeClass("invalid") :
                                $(k.proxy).addClass("invalid").removeClass("valid"))
                    }).bind("dragend", function (g, k) {
                        $(k.proxy).remove();
                        $.publish("gs.drag.end", k)
                    })
        }, likeWidth:"48px", likeWidthCache:{}, loadLikeButtonCount:function (c, h) {
            if (!h && this.likeWidthCache[c]) {
                this.likeWidth = this.likeWidthCache[c];
                $("#page_content_social_buttons .fblike").css("width", this.likeWidth)
            }
            GS.getFacebook().queryFQL('SELECT total_count FROM link_stat WHERE url="' + c + '"', this.callback(function (g) {
                if (g[0].total_count) {
                    this.likeWidth = g[0].total_count >
                            1E4 ? "80px" : g[0].total_count > 1E3 ? "77px" : g[0].total_count > 100 ? "80px" : g[0].total_count > 10 ? "77px" : g[0].total_count > 0 ? "77px" : "48px";
                    $("#page_content_social_buttons .fblike").css("width", this.likeWidth);
                    this.likeWidthCache[c] = this.likeWidth
                }
            }), this.callback(function () {
                this.likeWidth = "48px";
                $("#page_content_social_buttons .fblike").css("width", this.likeWidth)
            }))
        }})
})();
GS.Controllers.BaseController.extend("GS.Controllers.RapLeafController", {isGSSingleton:true, preSetup:function () {
    $.subscribe("gs.auth.update", GS.Controllers.BaseController.singletonCallback("rapleaf", "update"))
}}, {personalizeMapTheme:{"4097253982":"10=2", "4097253968":"10=2", "4097253992":"10=3", "4097253999":"10=4", "4097254011":"10=5", "4097254001":"10=5", "4097254007":"10=5", "4097253897":"1=0", "4097253890":"1=1"}, personalizeMapSidebar:{"4097253982":"10=2", "4097253968":"10=2", "4097253992":"10=3", "4097253999":"10=4",
    "4097254011":"10=5", "4097254001":"10=5", "4097254007":"10=5", "4097253897":"1=0", "4097253890":"1=1"}, init:function () {
    this._super()
}, appReady:function () {
    this.onPersonalize()
}, update:function () {
    this.onPersonalize()
}, onPersonalize:function () {
    if (!GS.user.subscription.isPremium() && !GS.user.isLoggedIn) {
        var b = GS.store.get("webvisit");
        b ? this.updateParams(b) : $.getScript("http://rd.rlcdn.com/rd?type=js&site=108574", this.callback("onPersonalizeCallback"))
    }
}, updateParams:function (b) {
    for (var a = 0; a < b.theme.length; a++) {
        if (b.theme[a].indexOf("0=") ==
                0) {
            b.theme[a] = b.theme[a].replace("0=18-24", "10=2");
            b.theme[a] = b.theme[a].replace("0=25-34", "10=3");
            b.theme[a] = b.theme[a].replace("0=35-44", "10=4");
            b.theme[a] = b.theme[a].replace("0=50-", "10=5")
        }
        if (b.sidebar[a].indexOf("AgeRange=") == 0) {
            b.sidebar[a] = b.sidebar[a].replace("AgeRange=18-24", "10=2");
            b.sidebar[a] = b.sidebar[a].replace("AgeRange=25-34", "10=3");
            b.sidebar[a] = b.sidebar[a].replace("AgeRange=35-44", "10=4");
            b.sidebar[a] = b.sidebar[a].replace("AgeRange=50-", "10=5")
        } else if (b.sidebar[a].indexOf("Gender=M") ==
                0)b.sidebar[a] = b.sidebar[a].replace("Gender=M", "1=0"); else if (b.sidebar[a].indexOf("Gender=F") == 0)b.sidebar[a] = b.sidebar[a].replace("Gender=F", "1=1")
    }
    GS.store.set("webvisit", b)
}, onPersonalizeCallback:function () {
    if (_rlcdnsegs && _rlcdnsegs.length) {
        for (var b = {theme:[], sidebar:[]}, a = 0; a < _rlcdnsegs.length; a++)try {
            b.theme.push(this.personalizeMapTheme[_rlcdnsegs[a].toString()]);
            b.sidebar.push(this.personalizeMapSidebar[_rlcdnsegs[a].toString()])
        } catch (c) {
            console.warn("[ Personalize Out of Bounds ]")
        }
        GS.store.set("webvisit",
                b);
        a = {};
        a.params = b.sidebar.toString();
        jQuery.isEmptyObject(a) || GS.getGuts().logEvent("rapleafCollectedData", a)
    } else GS.store.remove("webvisit")
}});
GS.Controllers.BaseController.extend("GS.Controllers.KruxController", {isGSSingleton:true, preSetup:function () {
    var b = GS.Controllers.BaseController.singletonCallback;
    $.subscribe("gs.auth.update", b("krux", "update"));
    $.subscribe("gs.app.ready", b("krux", "update"))
}}, {ksgmnts:null, kuid:null, kruxTimeoutID:null, kruxMap:{lpza0398b:"k=lpza0398b"}, init:function () {
    this._super()
}, update:function () {
    this.onPersonalize()
}, onPersonalize:function () {
    if (GS.user.subscription.isPremium())clearTimeout(this.kruxTimeoutID);
    else {
        if (GS.user.isLoggedIn) {
            var b = {};
            if (GS.user.Sex)b["1"] = GS.user.Sex.toLowerCase() == "m" ? "0" : "1";
            if (GS.user.TSDOB) {
                var a = GS.user.TSDOB.split("-");
                if (a.length == 3) {
                    var c = new Date, h = c.getFullYear() - parseInt(a[0], 10);
                    if (parseInt(a[1], 10) > c.month)h -= 1; else if (parseInt(a[1], 10) == c.month && parseInt(a[2], 10) > c.date)h -= 1;
                    var g;
                    if (h >= 13 && h < 18)g = "1"; else if (h >= 18 && h < 25)g = "2"; else if (h >= 25 && h < 35)g = "3"; else if (h >= 35 && h < 50)g = "4"; else if (h >= 50)g = "5"
                }
                b["10"] = g;
                b["14"] = GS.getAd().encodeInteger(h)
            }
            try {
                b["0"] = GS.getAd().locales[GS.getLocale().locale]
            } catch (k) {
                b["0"] =
                        "0=1"
            }
            window.KRUXSetup = {pubid:"b5c2e077-e8aa-4ed6-9bf5-d6e958d0e2ca", site:"Grooveshark.com", section:"Listen", sub_section:"Rock", async:true, userAttributes:b}
        } else window.KRUXSetup = {pubid:"b5c2e077-e8aa-4ed6-9bf5-d6e958d0e2ca", site:"Grooveshark.com", async:true, loadSegments:true};
        b = !GS.user.isLoggedIn ? 1E4 : 100;
        this.kruxTimeoutID = setTimeout(this.callback(function () {
            $.ajax({cache:true, dataType:"script", url:"http://cdn.krxd.net/krux.js", success:this.callback("onKruxLoad")})
        }), b)
    }
}, onKruxLoad:function () {
    if (KRUX) {
        var b =
                KRUX.getSegments();
        if (b && b.length) {
            var a = {params:[]};
            this.ksgmnts = b.split(",");
            for (b = 0; b < this.ksgmnts.length; b++)try {
                this.kruxMap[this.ksgmnts[b].toString()] && a.params.push(this.kruxMap[this.ksgmnts[b].toString()])
            } catch (c) {
                console.warn("[ Krux Out of Bounds ]")
            }
            a.params.length && GS.store.set("krux", a)
        } else GS.store.set("krux", null)
    }
}});
GS.Controllers.BaseController.extend("GS.Controllers.PartyController", {isGSSingleton:true}, {partyPath:"http://party.joe.dev.grooveshark.com/u/", partyHash:null, shortURL:"", enabled:false, playlist:null, syncPlaylist:false, voteDowns:{}, voteDownGotoNext:6, init:function () {
    this._super()
}, enable:function (b) {
    this.enabled && this.disable();
    this.voteDowns = {};
    this.shortURL = "";
    this.syncPlaylist = false;
    if (GS.user.UserID > 0) {
        if (b && b.UserID == GS.user.UserID) {
            this.playlist = b;
            GS.player.clearQueue();
            this.playlist.play(-1,
                    true, false)
        }
        GS.service.getPartyHash(this.callback("onHashSuccess"), this.callback("onHashFail"))
    }
}, onHashSuccess:function (b) {
    this.partyHash = b;
    this.user = GS.user;
    this.enabled = true;
    $.publish("gs.player.party", b);
    b = "http://api.bitly.com/v3/shorten?login=grooveshark&apiKey=R_44014f5c4cfe09348eced3baebeadcc3&longUrl=" + this.getPartyUrl();
    $.ajax({url:b, dataType:"jsonp", success:this.callback(function (a) {
        this.shortURL = a.data.url;
        $.publish("gs.player.party.update", {playlist:this.playlist})
    })})
}, onHashFail:function () {
    console.warn("failed to get party hash -- not much of a party anymore")
},
    getPartyUrl:function (b) {
        if (this.enabled && this.partyHash) {
            if (!b && this.shortURL)return this.shortURL;
            return this.partyPath + this.partyHash
        }
    }, disable:function () {
        this.enabled = false;
        this.playlist = null;
        $.publish("gs.player.party", false)
    }, updateQueueFromBroadcast:function (b) {
        var a = [], c = [];
        if (b.data.songs)a = GS.Models.Song.wrapCollection(b.data.songs);
        for (var h = 0, g = a.length; h < g; h++)c.push(a[h].SongID);
        if (this.enabled)switch (b.action) {
            case "append":
                b = !Boolean(GS.player.getCurrentQueue().activeSong);
                GS.player.addSongsToQueueAt(c,
                        -3, b);
                this.playlist && this.syncPlaylist && this.playlist.addSongs(a, -1, true);
                break;
            case "voteDown":
                a = b.data.songID;
                c = GS.player && GS.player.currentSong;
                if (this.voteDowns[a])this.voteDowns[a]++; else this.voteDowns[a] = 1;
                if (this.voteDowns[a] >= this.voteDownGotoNext && c && c.SongID == a) {
                    this.voteDowns[a] = 0;
                    GS.player.nextSong()
                }
                break
        }
    }});
(function () {
    var b = {interactionLB:{id:"89099aa1c37d6b1a4607225be0d931ca", maxLength:120, length:1}, toolbooth:{id:"0513bbc13de156ddf22f311b174d4da5", maxLength:150, length:1}};
    GS.Controllers.BaseController.extend("GS.Controllers.EngagementsController", {isGSSingleton:true}, {JSON_ENDPOINT:"http://b.v11media.com/json/3.0", cache:{}, init:function () {
        this._super()
    }, getGender:function () {
        if (GS.user.Sex)return GS.user.Sex.toLowerCase();
        var a = GS.store ? GS.store.get("adhelper") : null;
        if (a)if (a.hasOwnProperty("gender")) {
            var c =
                    false;
            if (a.gender == 1536)c = "m"; else if (a.gender == 1537)c = "f";
            if (c)return c
        }
        if (a = GS.store ? GS.store.get("webvisit") : null)if (a.hasOwnProperty("sidebar")) {
            a = a.sidebar;
            for (c = 0; c < a.length; c++)if (a[c].substring(0, 2) == "1=")return a[c] == "1=0" ? "m" : "f"
        }
        return false
    }, getDOB:function () {
        if (GS.user.TSDOB)return GS.user.TSDOB;
        var a = GS.store ? GS.store.get("adhelper") : null;
        if (a) {
            if (a.hasOwnProperty("ageRange")) {
                var c = 0;
                switch (a.ageRange) {
                    case 29516:
                        c = Math.floor(Math.random() * 4 + 13);
                        break;
                    case 29517:
                        c = Math.floor(Math.random() *
                                6 + 18);
                        break;
                    case 30024:
                        c = Math.floor(Math.random() * 4 + 25);
                        break;
                    case 30025:
                        c = Math.floor(Math.random() * 4 + 30);
                        break;
                    case 29520:
                        c = Math.floor(Math.random() * 9 + 35);
                        break;
                    case 29521:
                        c = Math.floor(Math.random() * 9 + 45);
                        break;
                    case 29522:
                        c = Math.floor(Math.random() * 9 + 64);
                        break;
                    case 29523:
                        c = Math.floor(Math.random() * 15 + 65);
                        break
                }
            }
            if (c) {
                c = (new Date).getYear() - c;
                return c + "-01-01"
            }
        }
        if (a = GS.store ? GS.store.get("webvisit") : null)if (a.hasOwnProperty("sidebar")) {
            a = a.sidebar;
            for (var h = 0; h < a.length; h++)if (a[h].substring(0, 2) ==
                    "10") {
                switch (a[h]) {
                    case "10=1":
                        c = Math.floor(Math.random() * 4 + 13);
                        break;
                    case "10=2":
                        c = Math.floor(Math.random() * 6 + 18);
                        break;
                    case "10=3":
                        c = Math.floor(Math.random() * 9 + 25);
                        break;
                    case "10=4":
                        c = Math.floor(Math.random() * 14 + 35);
                        break;
                    case "10=5":
                        c = Math.floor(Math.random() * 30 + 50);
                        break
                }
                if (c) {
                    c = (new Date).getYear() - c;
                    return c + "-01-01"
                }
            }
        }
        return false
    }, getPlacementVideos:function (a, c, h) {
        if (b[a])if (h && this.cache[a])$.isFunction(c) && c(this.cache[a]); else {
            h = b[a];
            var g = this.JSON_ENDPOINT + "?k=" + h.id;
            g += "&ua=" + encodeURIComponent(navigator.userAgent);
            var k = this.getDOB();
            if (k)g += "&dob=" + k;
            if (k = this.getGender())g += "&gender=" + k;
            g += "&ip=" + gsConfig.remoteAddr;
            g += GS.user.UserID > 0 ? "&uid=" + GS.user.UserID : "&uid=" + GS.service.sessionID;
            $.ajax({url:g, dataType:"jsonp", timeout:8E3, success:this.callback("onVideos", c, h, a), error:this.callback("onVideos", c, h, a)})
        }
    }, onVideos:function (a, c, h, g) {
        c = this.filterVideos(g, c);
        this.cache[h] = c;
        $.isFunction(a) && a(c)
    }, filterVideos:function (a, c) {
        if (!a || !a.length)return[];
        var h = 0;
        if (c.maxLength)h = c.maxLength;
        var g = 0;
        if (c.minPrice)g =
                c.minPrice;
        for (var k = [], m = 0, n = a.length; m < n; m++)if (!(h && a[m].length > h))if (!(g && a[m].cpa && parseInt(a[m].cpa) < g)) {
            a[m].minsSecs = _.millisToMinutesSeconds(a[m].length * 1E3);
            k.push(a[m])
        }
        return k
    }})
})();
GS.Controllers.BaseController.extend("GS.Controllers.InviteInterface", {onDocument:false}, {userInfo:{}, googleContacts:null, facebookFriends:[], fbIDs:{}, slickbox:false, peopleError:null, people:null, onFollowersSuccess:function (b) {
    var a = [];
    $.each(b, this.callback(function (c, h) {
        a.push([h.Email, h.Name + " " + h.Email, h.Name, h.Name]);
        this.userInfo[h.UserID] = h;
        this.userInfo[h.Email] = h
    }));
    b = new $.TextboxList("#emails", {addOnBlur:true, bitsOptions:{editable:{growing:true, growingOptions:{maxWidth:$("#emails").innerWidth() -
            10}}}, plugins:{autocomplete:{placeholder:$.localize.getString("SHARE_EMAIL_PLACEHOLDER")}}, encode:this.callback(function (c) {
        for (var h = [], g = 0; g < c.length; g++)if (c[g][0])this.userInfo[c[g][0]] ? h.push(this.userInfo[c[g][0]].Email) : h.push(c[g][0]); else if (c[g][1])this.userInfo[c[g][1]] ? h.push(this.userInfo[c[g][1]].Email) : h.push(c[g][1]);
        return h.join(",")
    })});
    b.plugins.autocomplete.setValues(a);
    b.addEvent("bitAdd", this.callback(function (c) {
        c.getValue()[1] === "" && c.hide();
        if (this.userInfo[c.getValue()[1]] &&
                _.notDefined(c.getValue()[0])) {
            var h = this.userInfo[c.getValue()[1]];
            c.setValue([h.Email, h.Name + " " + h.Email, h.Name, h.Name]);
            c.show()
        }
    }));
    $("#services_content input.textboxlist-bit-editable-input").focus()
}, extractInviteEmails:function (b) {
    var a, c = [], h, g = $.trim(b).split(",");
    for (b = 0; b < g.length; b++) {
        h = $.trim(g[b]).split(" ");
        for (a = 0; a < h.length; a++) {
            h[a] = $.trim(h[a]);
            h[a] && c.push(h[a])
        }
    }
    return c
}, onFollowersFailed:function (b) {
    console.warn("failed grabbing contact info for followers", autocompleteTerms,
            b);
    $.publish("gs.notification", {type:"error", message:$.localize.getString("POPUP_FAIL_FANS_EMAIL_ONLY")})
}, onFacebookFriends:function (b) {
    this.facebookFriends = b || [];
    var a = [];
    $.each(this.facebookFriends, this.callback(function (c, h) {
        a.push([h.id, h.name, h.name])
    }));
    this.facebookLoaded = true;
    if (a.length > 0)this.friendsLoaded = true;
    if ($("a.facebook_service", "#invite_options").hasClass("active")) {
        $("#lightbox_pane", this.element).html(this.view("/lightbox/invite/facebook"));
        GS.getLightbox().positionLightbox();
        if (a.length > 0) {
            b = new $.TextboxList("#facebook_invite_list", {addOnBlur:true, bitsOptions:{editable:{growing:true, growingOptions:{maxWidth:$("#facebook_invite_list").innerWidth() - 10}}}, plugins:{autocomplete:{placeholder:$.localize.getString("SHARE_FACEBOOK_PLACEHOLDER")}}, encode:this.callback(function (c) {
                var h = [];
                if (c.length) {
                    for (var g = 0; g < c.length; g++)c[g][0] && h.push(c[g][0]);
                    this.element.find(".submit span").attr("data-translate-text", "SHARE_FACEBOOK_FRIENDS").html($.localize.getString("SHARE_FACEBOOK_FRIENDS"))
                } else this.element.find(".submit span").attr("data-translate-text",
                        "SHARE_FACEBOOK_WALL").html($.localize.getString("SHARE_FACEBOOK_WALL"));
                return h.join(",")
            })});
            b.plugins.autocomplete.setValues(a);
            b.addEvent("bitAdd", this.callback(function (c) {
                this.element.find(".error").hide();
                if (c.getValue()[1] === "")c.hide(); else {
                    var h = $("#facebook_invite_list").val().split(",");
                    if (h) {
                        var g = h.indexOf(c.getValue()[0]);
                        c.getValue()[0] && g >= 0 && g != h.length - 1 && c.hide();
                        if (c.getValue()[0])GS.getFacebook().canPostToFriend(c.getValue()[0], this.callback(function (k) {
                            if (!k) {
                                k = c.getValue()[1];
                                var m = $.localize.getString("POPUP_SHARE_ERROR_FACEBOOK_CANTPOST");
                                m = m.replace("{name}", k);
                                this.element.find(".error").show().find(".message").html(m);
                                c.remove();
                                if (h.length == 1) {
                                    this.submitKey = "SHARE_FACEBOOK_WALL";
                                    this.element.find(".submit span").html($.localize.getString(this.submitKey))
                                }
                                GS.getLightbox().positionLightbox()
                            }
                        })); else {
                            c.remove();
                            if (h.length == 1) {
                                this.submitKey = "SHARE_FACEBOOK_WALL";
                                this.element.find(".submit span").html($.localize.getString(this.submitKey))
                            }
                        }
                    }
                }
            }));
            $("#services_content input.textboxlist-bit-editable-input").focus()
        }
    }
},
    formSubmit:function () {
        var b = this, a = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$/i;
        this.peopleError = [];
        this.people = [];
        switch (this.submitType) {
            case "email":
                var c;
                c = $.trim($("textarea[name=emails]", this.element).val());
                var h = $("div.textboxlist", this.element).find(".textboxlist-bit").not(".textboxlist-bit-box-deletable").filter(":last").text();
                if (c !== "") {
                    c = this.extractInviteEmails(c);
                    _.forEach(c, function (m) {
                        m.match(a) ? b.people.push(m) : b.peopleError.push(m)
                    })
                }
                if (h) {
                    h = this.extractInviteEmails(h);
                    for (c = 0; c <
                            h.length; c++)h[c].match(a) ? this.people.push(h[c]) : this.peopleError.push(h[c])
                }
                if (this.people.length)GS.service.sendInvites(this.people, this.callback("sendInviteSuccess"), this.callback("sendInviteFailed")); else this.peopleError.length && this.invalidInviteEmail();
                break;
            case "googleLogin":
                h = $("input[name=google_username]", this.element).val();
                c = $("input[name=google_password]", this.element).val();
                GS.service.getGoogleAuthToken(h, c, this.callback("googAuthSuccess"), this.callback("googAuthFailed"));
                break;
            case "googleContacts":
                var g =
                        [];
                $(".contactsContainer input:checked", this.element).each(function () {
                    g.push(this.value)
                });
                g.length && GS.service.sendInvites(g, this.callback("sendInviteSuccess"), this.callback("sendInviteFailed"));
                break;
            case "facebook":
                h = $("#facebook_invite_list").val() ? $("#facebook_invite_list").val().split(",") : [];
                var k = _.orEqual($("textarea[name=facebookMessage]", this.element).val(), "");
                if (h.length > 0) {
                    GS.getFacebook().lastError = false;
                    _.forEach(h, this.callback(function (m) {
                        GS.getFacebook().lastError || GS.getFacebook().postToFeed(m,
                                "http://grooveshark.com/", k, "link", "invite", null, this.callback("facebookFailed"))
                    }));
                    if (!GS.getFacebook().lastError) {
                        h.length > 1 ? $.publish("gs.facebook.notification.sent", {params:{type:"invites", hideUndo:true}, data:{}, notifData:{}}) : $.publish("gs.facebook.notification.sent", {params:{type:"invite", hideUndo:true}, data:{}, notifData:{}});
                        this.facebookSuccess()
                    }
                } else if (GS.getFacebook().connected && window.FB && FB.getAccessToken())k != "" ? GS.getFacebook().postToFeed("me", "http://grooveshark.com/", k, "link", "invite",
                        this.callback("facebookSuccess"), this.callback("facebookFailed")) : GS.getFacebook().postLink("me", "http://grooveshark.com/", k, "link", "invite", this.callback("facebookSuccess"), this.callback("facebookFailed")); else if (GS.getFacebook().facebookLoaded && GS.getFacebook().connected)this.facebookFailed(); else {
                    window.open("http://www.facebook.com/sharer.php?u=http://grooveshark.com&t=Grooveshark&ref=invite");
                    this.facebookSuccessCallback()
                }
                break;
            case "twitter":
                h = $("textarea[name=twitterMessage]", this.element).val();
                if (GS.getTwitter().connected)GS.getTwitter().postTweet(h, "invite", this.callback("twitterSuccess"), this.callback("twitterFailed")); else {
                    h = h.replace(" " + this.tinysong.tinySongURL, "");
                    window.open("http://twitter.com/share?related=grooveshark&via=grooveshark&url=" + encodeURIComponent(this.tinysong.tinySongURL) + "&text=" + encodeURIComponent(h), "_blank");
                    GS.getLightbox().close()
                }
                break
        }
        return false
    }, sendInviteSuccess:function (b) {
        var a = [], c = [], h = [], g = [], k = "";
        if (b)for (var m in b)switch (b[m].status) {
            case "error":
                b[m].errorCode ==
                        -3 ? g.push(m) : a.push(m);
                break;
            case "followed":
                c.push(_.cleanText(b[m].FName));
                break;
            case "invited":
                h.push(m);
                break
        }
        if (c.length) {
            k = (new GS.Models.DataString($.localize.getString("POPUP_INVITE_FORM_RESPONSE_FOLLOWING"), {list:c.join(", ")})).render();
            $.publish("gs.notification", {type:"info", message:k})
        }
        if (h.length) {
            k = h.length > 5 ? (new GS.Models.DataString($.localize.getString("POPUP_INVITE_FORM_RESPONSE_INVITED_SUM"), {sum:String(h.length)})).render() : (new GS.Models.DataString($.localize.getString("POPUP_INVITE_FORM_RESPONSE_INVITED_LIST"),
                    {list:h.join(", ")})).render();
            $.publish("gs.notification", {type:"info", message:k})
        }
        if (g.length) {
            k = (new GS.Models.DataString($.localize.getString("POPUP_INVITE_FORM_RESPONSE_ALREADY_SENT"), {list:g.join(", ")})).render();
            $.publish("gs.notification", {type:"info", message:k})
        }
        if (a.length) {
            k = (new GS.Models.DataString($.localize.getString("POPUP_INVITE_FORM_RESPONSE_ERROR"), {list:a.join(", ")})).render();
            $.publish("gs.notification", {type:"error", message:k})
        }
        if (this.peopleError.length)this.invalidInviteEmail();
        else if (a.length + c.length + h.length + g.length == 0) {
            this.element.find(".message").attr("data-translate-text", "POPUP_INVITE_FORM_RESPONSE_UNKNOWN_ERROR").html($.localize.getString("POPUP_INVITE_FORM_RESPONSE_UNKNOWN_ERROR"));
            this.element.find(".error").show()
        } else this.sendInviteSuccessCallback()
    }, sendInviteFailed:function (b) {
        console.warn("invite failed", b);
        this.element.find(".message").attr("data-translate-text", "POPUP_INVITE_FORM_RESPONSE_UNKNOWN_ERROR").html($.localize.getString("POPUP_INVITE_FORM_RESPONSE_UNKNOWN_ERROR"));
        this.element.find(".error").show()
    }, invalidInviteEmail:function () {
        console.warn("invalid invite email");
        var b = $("div.textboxlist", this.element).find(".textboxlist-bit").not(".textboxlist-bit-box-deletable").filter(":last").text();
        b && this.people.indexOf(b) >= 0 && $("div.textboxlist", this.element).find(".textboxlist-bit").not(".textboxlist-bit-box-deletable").remove();
        _.forEach(this.people, function (a) {
            $("li.textboxlist-bit:contains('" + a + "')").remove()
        });
        this.element.find(".message").attr("data-translate-text",
                "POPUP_INVITE_FORM_RESPONSE_INVALID_EMAIL_ERROR").html($.localize.getString("POPUP_INVITE_FORM_RESPONSE_INVALID_EMAIL_ERROR"));
        this.element.find(".error").show()
    }, googAuthSuccess:function (b) {
        switch (parseInt(b.result.statusCode)) {
            case 1:
                b = String(b.result.rawResponse);
                b = b.substr(b.indexOf("Auth=") + 5);
                GS.service.getGoogleContacts(b, this.callback("googContactsSuccess"), this.callback("googContactsFailed"));
                break;
            case 2:
                this.element.find(".message").attr("data-translate-text", "POPUP_INVITE_GOOGAUTH_RESPONSE_AUTH_ERROR").html($.localize.getString("POPUP_INVITE_GOOGAUTH_RESPONSE_AUTH_ERROR"));
                this.element.find(".error").show();
                break;
            default:
                this.element.find(".message").attr("data-translate-text", "POPUP_INVITE_GOOGAUTH_RESPONSE_UNKNOWN_ERROR").html($.localize.getString("POPUP_INVITE_GOOGAUTH_RESPONSE_UNKNOWN_ERROR"));
                this.element.find(".error").show();
                break
        }
    }, googAuthFailed:function () {
        this.element.find(".message").attr("data-translate-text", "POPUP_INVITE_GOOGAUTH_RESPONSE_UNKNOWN_ERROR").html($.localize.getString("POPUP_INVITE_GOOGAUTH_RESPONSE_UNKNOWN_ERROR"));
        this.element.find(".error").show()
    },
    googContactsSuccess:function (b) {
        switch (parseInt(b.result.statusCode, 10)) {
            case 1:
                this.googleContacts = b.result.parsedResult;
                this.showOnlyNamedContacts = true;
                this.googContactsSuccessCallback();
                break;
            case 2:
                this.element.find(".message").attr("data-translate-text", "POPUP_INVITE_GOOGAUTH_RESPONSE_AUTH_ERROR").html($.localize.getString("POPUP_INVITE_GOOGAUTH_RESPONSE_AUTH_ERROR"));
                this.element.find(".error").show();
                break;
            default:
                this.element.find(".message").attr("data-translate-text", "POPUP_INVITE_GOOGAUTH_RESPONSE_UNKNOWN_ERROR").html($.localize.getString("POPUP_INVITE_GOOGAUTH_RESPONSE_UNKNOWN_ERROR"));
                this.element.find(".error").show();
                break
        }
    }, googContactsFailed:function (b) {
        console.warn("goog contacts failed", b);
        this.element.find(".message").attr("data-translate-text", "POPUP_INVITE_GOOGAUTH_RESPONSE_UNKNOWN_ERROR").html($.localize.getString("POPUP_INVITE_GOOGAUTH_RESPONSE_UNKNOWN_ERROR"));
        this.element.find(".error").show()
    }, facebookSuccess:function () {
        this.facebookSuccessCallback()
    }, facebookFailed:function () {
        this.element.find(".message").attr("data-translate-text", "POPUP_SHARE_FACEBOOK_ERROR").html($.localize.getString("POPUP_SHARE_FACEBOOK_ERROR"));
        this.element.find(".error").show()
    }, twitterSuccess:function () {
        this.twitterSuccessCallback()
    }, twitterFailed:function () {
        this.element.find(".message").attr("data-translate-text", "POPUP_SHARE_TWITTER_ERROR").html($.localize.getString("POPUP_SHARE_TWITTER_ERROR"));
        this.element.find(".error").show()
    }, "input keydown":function (b, a) {
        a.keyCode && a.keyCode == 13 && b.is("[name*=google]") && this.formSubmit()
    }, "input.googleContact click":function (b) {
        $(b).is(":checked") ? $(b).closest("li.contact").addClass("selected") :
                $(b).closest("li.contact").removeClass("selected")
    }, "button.uncheckAll click":function () {
        if (this.submitType == "facebook")this.facebookClearSelected(); else this.submitType == "googleContacts" && $(".google_contacts input", this.element).attr("checked", false)
    }, "button.checkAll click":function () {
        if (this.submitType == "facebook") {
            this.element.find(".submit span").attr("data-translate-text", "SEND_INVITE").html($.localize.getString("SEND_INVITE"));
            _.forEach(this.facebookFriends, function (b, a) {
                this.facebookFriends[a].selected =
                        true;
                this.fbIDs[b.id] = b.id
            }, this);
            this.slickbox.setItems(this.facebookFriends)
        } else this.submitType == "googleContacts" && $(".google_contacts input", this.element).attr("checked", true)
    }, updateFacebookForm:function () {
        $("#settings_facebook_form").html(this.view("/shared/inviteFacebook"));
        $("#settings_facebook_form .error").addClass("hide");
        $(window).resize()
    }, updateFacebookFormWithError:function (b) {
        if (typeof b == "object" && b.error)b = b.error;
        $("#settings_facebook_form .error").html($.localize.getString(b));
        $("#settings_facebook_form .error").removeClass("hide");
        $(window).resize()
    }, "#fbConnect-btn.fbConnect click":function () {
        var b = GS.getFacebook().flags;
        GS.getFacebook().logout(this.callback(function () {
            GS.getFacebook().login(null, this.callback(function (a) {
                a && a.error ? this.element.find(".error").show().find(".message").html($.localize.getString(a.error)) : this.element.find(".error").show().find(".message").html($.localize.getString("FACEBOOK_PROBLEM_CONNECTING_ERROR_MSG"));
                GS.getLightbox().positionLightbox()
            }),
                    b)
        }))
    }, "#fbConnect-btn.fbLogin click":function () {
        GS.getFacebook().login(null, this.callback(function (b) {
            b && b.error ? this.element.find(".error").show().find(".message").html($.localize.getString(b.error)) : this.element.find(".error").show().find(".message").html($.localize.getString("FACEBOOK_PROBLEM_CONNECTING_ERROR_MSG"));
            GS.getLightbox().positionLightbox()
        }))
    }, "#lightbox .error .message .resetPerms click":function (b, a) {
        a.preventDefault();
        var c = GS.getFacebook().flags;
        GS.getFacebook().logout(function () {
            GS.getFacebook().login(function () {
                        $("#lightbox").find(".error").hide()
                    },
                    this.callback(function () {
                        error && error.error ? this.element.find(".error").show().find(".message").html($.localize.getString(error.error)) : this.element.find(".error").show().find(".message").html($.localize.getString("FACEBOOK_PROBLEM_CONNECTING_ERROR_MSG"));
                        GS.getLightbox().positionLightbox()
                    }), c)
        })
    }, "#fbInvalid a.fbConnect click":function () {
        var b = GS.getFacebook().flags;
        GS.getFacebook().logout(this.callback(function () {
            GS.getFacebook().login(null, this.callback(function (a) {
                a && a.error ? this.element.find(".error").show().find(".message").html($.localize.getString(a.error)) :
                        this.element.find(".error").show().find(".message").html($.localize.getString("FACEBOOK_PROBLEM_CONNECTING_ERROR_MSG"));
                GS.getLightbox().positionLightbox()
            }), b)
        }))
    }, "#fbConnect-btn.fbChange click":function () {
        GS.getFacebook().serviceLogout(this.callback(function () {
            GS.getFacebook().login(null, this.callback(function (b) {
                b && b.error ? this.element.find(".error").show().find(".message").html($.localize.getString(b.error)) : this.element.find(".error").show().find(".message").html($.localize.getString("FACEBOOK_PROBLEM_CONNECTING_ERROR_MSG"));
                GS.getLightbox().positionLightbox()
            }))
        }))
    }, "#lightbox .error .changeFBLogin click":function () {
        GS.getFacebook().serviceLogout(this.callback(function () {
            GS.getFacebook().login(null, this.callback(function (b) {
                b && b.error ? this.element.find(".error").show().find(".message").html($.localize.getString(b.error)) : this.element.find(".error").show().find(".message").html($.localize.getString("FACEBOOK_PROBLEM_CONNECTING_ERROR_MSG"));
                GS.getLightbox().positionLightbox()
            }))
        }))
    }});
GS.Controllers.BaseController.extend("GS.Controllers.VipInterface", {onDocument:false, vipErrorCodes:{"GS-00":"VIP_ERROR_UNKNOWN", "GS-01":"VIP_ERROR_LOGIN", "GS-02":"VIP_ERROR_ALREADY_VIP", "CC-01":"VIP_ERROR_MISSING_NAME", "CC-02":"VIP_ERROR_UNKNOWN", "CC-03":"VIP_ERROR_MISSING_CC_INFO", "CC-04":"VIP_ERROR_ADDRESS", "CC-05":"VIP_ERROR_UNKNOWN", "CC-06":"VIP_ERROR_PAYMENT_PROCESSOR", "CC-07":"VIP_ERROR_SESSION_EXPIRED", "CC-08":"VIP_ERROR_INVALID_CC", "CC-09":"VIP_ERROR_MISSING_CVD", "CC-10":"VIP_ERROR_INVALID_CVD",
    "CC-11":"VIP_ERROR_ADDRESS1_TOO_LONG", "CC-000":"VIP_ERROR_GENERIC_PAYMENT_ERROR", "CC-000X":"VIP_ERROR_GENERIC_PAYMENT_ERROR", "CC-000-1":"VIP_ERROR_XML", "CC-001":"VIP_ERROR_CARD_DECLINED", "PP-01":"VIP_ERROR_UNKNOWN", "PP-02":"VIP_ERROR_UNKNOWN_PAYPAL", "PP-03":"VIP_ERROR_UNKNOWN", "PP-04":"VIP_ERROR_PAYPAL_CANCEL", "PP-000":"VIP_ERROR_PAYPAL_FAIL", "PP-000X":"VIP_ERROR_PAYPAL_FAIL", "PPX-001":"VIP_ERROR_PAYPAL_COUNTRY", "PC-01":"VIP_ERROR_NO_PROMOCODE", "PC-02":"VIP_ERROR_CODE_NOT_FOUND", "PC-03":"VIP_ERROR_CODE_REDEEMED",
    "RC-01":"VIP_ERROR_NOT_ENOUGH_POINTS"}, excludedCreditCardCountries:{BY:true, MM:true, CD:true, CI:true, CU:true, RS:true, IR:true, IQ:true, LB:true, LR:true, LY:true, KP:true, RW:true, SD:true, SY:true, VE:true, ZW:true, EG:true, ID:true, NG:true, PH:true, UA:true}, excludedRecurringCountries:{AF:true, AL:true, AM:true, AO:true, AT:true, AZ:true, BA:true, BD:true, BE:true, BG:true, BI:true, BY:true, CD:true, CF:true, CG:true, CK:true, CS:true, CU:true, DE:true, DZ:true, EG:true, ER:true, ET:true, GE:true, GT:true, HT:true, ID:true, IQ:true, IR:true,
    KG:true, KH:true, KP:true, KZ:true, LA:true, LR:true, LY:true, MD:true, MK:true, MM:true, MN:true, MY:true, NG:true, NR:true, PH:true, PK:true, RO:true, RU:true, RW:true, SD:true, SL:true, SR:true, SY:true, TJ:true, TM:true, UZ:true, VE:true, YE:true, ZW:true}}, {vipPackageNames:{plus:"plus", anywhere:"anywhere", lite:"lite", vip:"vip"}, vipPackagePrices:GS.user.subscription.getNewPricing(), showVipErrors:function (b) {
    if (b.errorID && b.message)b.error = [
        {errorID:b.errorID, message:b.message}
    ];
    var a, c = ['<ul class="errors">'];
    this.element.find(".error.response .message").html("");
    this.element.find(".error.response").hide();
    if (b.error && b.error.length) {
        _.forEach(b.error, this.callback(function (h) {
            if (a = $.trim($.localize.getString(GS.Controllers.VipInterface.vipErrorCodes[h.errorID])))c.push("<li>" + a + "</li>"); else {
                console.warn("unknown error in arr", h.errorID, h.message, GS.Controllers.VipInterface.vipErrorCodes[h.errorID]);
                a = _.isString(h.message) ? h.message : h.message[0];
                if (a.match("AVS"))a = $.localize.getString("VIP_ERROR_AVS"); else if (a.match("invalid XML"))a = $.localize.getString("VIP_ERROR_XML");
                else if (a.match("invalid card number"))a = $.localize.getString("VIP_ERROR_CARD_NUMBER"); else if (a.match("CVD check"))a = $.localize.getString("VIP_ERROR_CVD");
                a && c.push("<li>" + a + "</li>")
            }
        }));
        c.push("</ul>");
        b = this.element.find(".error").show().find(".message");
        b.html("<strong>" + $.localize.getString("POPUP_VIP_ERROR_MESSAGE") + "</strong> " + c.join(""))
    } else {
        this.element.find(".message").attr("data-translate-text", "VIP_ERROR_UNKNOWN").html($.localize.getString("VIP_ERROR_UNKNOWN"));
        this.element.find(".error").show()
    }
},
    "a.login click":function () {
        GS.getLightbox().close();
        GS.getLightbox().open("login")
    }});
GS.Controllers.PageController.extend("GS.Controllers.Page.HomeController", {}, {init:function (b, a) {
    this.update(a);
    this.subscribe("gs.app.resize", this.callback("resize"));
    this._super()
}, update:function () {
    if (!GS.getLightbox || !GS.getLightbox().isOpen)$("input.search.autocomplete", this.element).focus();
    !GS.user.isLoggedIn || GS.user.subscription.canHideAds() ? $(".home_upgrade").addClass("hide") : $(".home_upgrade").removeClass("hide");
    $.publish("gs.page.home.update")
}, index:function () {
    this._super();
    this.addAutocomplete("home");
    this.resize();
    this.subscribe("gs.app.resize", this.callback("resize"));
    this.subscribe("gs.auth.update", this.callback("update"));
    this.focusSearch();
    GS.Controllers.PageController.title("Listen to Free Music Online - Internet Radio - Free MP3 Streaming", false);
    $.publish("gs.page.home.view");
    GS.resize()
}, focusSearch:function () {
    if (!GS.getLightbox || !GS.getLightbox().isOpen)$("input.search.autocomplete", this.element).focus()
}, resize:function () {
    var b = $("#homeSearch"), a = 500;
    if (b.length) {
        a = Math.max(500, Math.min(400,
                $(this.element).width() - 200));
        b.width(a).css("marginLeft", -Math.round(a / 2))
    }
}, toggleHint:function (b, a) {
    var c = $("#searchBar_hint"), h = $("#searchBar_input input"), g = $("#searchBar_precomplete");
    if (a.type == "mousedown")h.val() === "" && a.button != 2 ? c.show() : c.hide(); else if (a.type == "keyup" || a.type == "keydown") {
        var k = _.orEqual(a.keyCode, a.which), m = String.fromCharCode(k).replace(/[\b]/g, "");
        if (String.fromCharCode(k).replace(/[\s]/g, "").length > 0)h.val() === "" && m.length < 1 ? c.show() : c.hide();
        if (a.type == "keydown") {
            g.hide();
            if (k == _.keys.TAB) {
                a.preventDefault();
                c = g.text();
                c.length && h.val(c)
            }
        }
    } else h.val() === "" ? c.show().removeClass("faded") : c.hide();
    h.val() === "" && g.text("")
}, "#homeSearch submit":function (b, a) {
    if ($("input[name=q]", b).val() === "") {
        a.stopImmediatePropagation();
        return false
    }
    return true
}, "#searchButton click":function () {
    $("#searchBar_input .search").val() ? $("#homeSearch").submit() : $("#searchBar_input span").trigger("click")
}, "#searchBar_input span click":function () {
    this.focusSearch()
}, "#homePage keydown":function () {
    this.focusSearch()
},
    "input.search.autocomplete mousedown":function (b, a) {
        return this.toggleHint(b, a)
    }, "input.search.autocomplete keydown":function (b, a) {
        return this.toggleHint(b, a)
    }, "input.search.autocomplete keyup":function (b, a) {
        return this.toggleHint(b, a)
    }, "input.search.autocomplete focusout":function (b, a) {
        if ($("#searchBar_input input").hasClass("focused")) {
            setTimeout(function () {
                $("input.search.autocomplete", "#page").focus()
            }, 0);
            $("#searchBar_input input").removeClass("focused");
            return true
        } else return this.toggleHint(b,
                a)
    }, "a.about click":function () {
        GS.getLightbox().open("about")
    }, "a.themes click":function () {
        GS.getLightbox().open("themes")
    }, "a.upgrade click":function () {
        GS.getLightbox().open("vipPerks")
    }, "a.station click":function (b, a) {
        a.stopPropagation();
        var c = b.attr("data-tagid");
        GS.player.setAutoplay(true, c);
        return false
    }, notFound:function () {
        this.element.html(this.view("not_found"));
        this.addAutocomplete("home");
        this.resize();
        this.subscribe("gs.app.resize", this.callback("resize"));
        this.subscribe("gs.auth.update",
                this.callback("update"));
        GS.Controllers.PageController.title("Unable To Find What You're Looking For")
    }});
GS.Controllers.PageController.extend("GS.Controllers.Page.SongController", {}, {type:"song", scrollToComment:false, index:function (b, a) {
    this.url = location.hash;
    this.token = b || "";
    this.subpage = a || "overview";
    this.token ? GS.Models.Song.getSongFromToken(this.token, this.callback("loadSong")) : GS.router.notFound()
}, loadSong:function (b) {
    if (b.validate()) {
        this.song = b;
        if (!b.fanbase)b.fanbase = GS.Models.Fanbase.wrap({objectID:b.SongID, objectType:"song"});
        this.correctUrl(this.song, this.subpage === "overview" ? "" : this.subpage);
        this.id = this.song.SongID;
        this.fbCommentsUrl = "http://listen.grooveshark.com/" + this.song.toUrl().replace("#!/", "");
        this.fbUrl = "http://grooveshark.com/" + this.song.toUrl().replace("#!/", "").split("?")[0];
        this.header.name = this.song.SongName;
        this.header.breadcrumbs = [
            {text:this.song.ArtistName, url:_.cleanUrl(this.song.ArtistName, this.song.ArtistID, "artist")},
            {text:this.song.AlbumName, url:_.cleanUrl(this.song.AlbumName, this.song.AlbumID, "album")}
        ];
        this.header.subpages = ["overview"];
        this.header.options = false;
        this.list.doPlayAddSelect = true;
        this.list.doSearchInPage = true;
        this.list.sortOptions = [
            {text:"Track", column:"TrackNum"},
            {text:"Popularity", column:"Popularity"},
            {text:"Song Name", column:"Name"},
            {text:"Artist Name", column:"ArtistName"}
        ];
        this.element.html(this.view("index"));
        switch (this.subpage) {
            case "overview":
            default:
                this.song.album = GS.Models.Album.getOneFromCache(this.song.AlbumID);
                this.triedUnverified = this.song.album ? this.song.album.songsLoaded && this.song.album.songsUnverifiedLoaded : false;
                GS.Controllers.PageController.title(this.song.getTitle());
                $("#page_header button.share").parent().show();
                if (window.FB && FB.XFBML && this.fbUrl && GS.getFacebook().initialXFBML)FB.XFBML.parse(window.document.getElementById("page_content"), this.callback("onPageLoaded")); else if (this.fbUrl) {
                    var a;
                    a = this.subscribe("gs.facebook.xfbml.ready", this.callback(function () {
                        FB.XFBML.parse(window.document.getElementById("page_content_pane"), this.callback("onPageLoaded"));
                        $.unsubscribe(a)
                    }))
                }
                this.fans = [];
                this.fansLoaded = false;
                this.song.fanbase.getFans(this.callback("loadSidebarFans"),
                        this.callback("loadSidebarFans"), false);
                break
        }
        b.getVideos(this.callback("loadVideos"), this.callback("loadVideosFailed"));
        GS.Models.Artist.getArtist(this.song.ArtistID, this.callback("loadDigests"));
        GS.service.getSongRecentListeners(this.song.SongID)
    } else GS.router.notFound()
}, onPageLoaded:function () {
    setTimeout(this.callback(function () {
        if ($("#page_content_social_buttons").length) {
            $("#page_content .comments").removeClass("loadingFBComments");
            $("#page_content_social_buttons .fblike").css("width", this.likeWidth);
            this.loadLikeButtonCount(this.fbUrl);
            FB.XFBML.parse(window.document.getElementById("fbLike"), this.callback(function () {
                setTimeout(function () {
                    $.publish("gs.facebook.xfbml.ready")
                }, 100);
                this.scrollToComment && this.scrollToFBComment();
                $("#page_content_social_buttons .fblike").css("width", this.likeWidth)
            }));
            GS.resize();
            GS.getTwitter().getTwitterShareMessage("song", this.song, this.fbUrl, this.callback(function (b, a) {
                var c = $(document.createElement("a"));
                c.attr("data-text", b.replace('"', '"'));
                c.attr("data-url",
                        a);
                c.attr("data-via", "grooveshark");
                c.attr("data-count", "none");
                c.addClass("twitter-share-button");
                c.text("Tweet");
                $("#page_content_social_buttons .tweetButton").empty().append(c);
                GS.getTwitter().parseWidgets()
            }));
            GS.getGoogle().parsePlusWidgets($("#page_content_social_buttons .googlePlusButton").get(0))
        }
    }), 10)
}, loadDigests:function (b) {
    this.artist = b;
    this.artist.getTunipopID(this.callback(function () {
    }));
    this.artist.getSongs(this.callback("loadAlbumDigest"));
    GS.service.artistGetSimilarArtists(this.artist.ArtistID,
            this.callback("loadSimilarDigest"));
    GS.service.getSongkickEventsFromArtists([this.artist.ArtistID], [this.artist.ArtistName], this.callback("loadEventsDigest"));
    if (!GS.user.subscription.canHideAds()) {
        GS.getAd().updateRotationCount();
        GS.getAd().buildAd($("#songCapital_300"), 300, 250, ["p=song_overview"]);
        GS.getAd().buildAd($("#songCapital_728"), 728, 90, ["p=song_overview"])
    }
}, loadAlbumDigest:function () {
    if (this.artist && this.artist.albums) {
        var b = _.toArray(this.artist.albums).sort(GS.Models.Album.prettySort).slice(0,
                6);
        b.length && $("#album_digest").html(this.view("/artist/album_digest", {artist:this.artist, albums:b}))
    }
}, loadSimilarDigest:function (b) {
    this.similarArtists = GS.Models.Artist.wrapCollection(b.SimilarArtists);
    this.similarArtists.length && this.element.find("#similarArtists_digest").html(this.view("/artist/similarArtists_digest"))
}, loadEventsDigest:function (b) {
    if (b && b.length) {
        b.sort(_.getSort("StartTime", -1));
        b = b.slice(0, 5);
        $("#events_digest").html(this.view("/artist/event_digest", {artist:this.artist, events:b}))
    }
},
    loadVideos:function (b) {
        if (this.subpage === "overview")if (b && b.length) {
            this.videos = b;
            $("#song_videos").html(this.view("song_videos", {videos:b}))
        }
    }, loadVideosFailed:function () {
        if (this.subpage === "overview")if (this.fans.length) {
            this.sliderObject = this.videos = this.fans;
            this.sliderObject.name = '<span data-translate-text="FANS">' + $.localize.getString("FANS") + "</span>";
            this.sliderWidth = this.fans.length * 140;
            this.sliderContents = this.fans;
            this.sliderRenderer = GS.Models.User.sliderRenderer;
            $("#song_subcontent").removeClass("loading").html(this.view("/shared/slider"))
        } else if (this.fansLoaded)$("#song_subcontent").removeClass("loading").hide();
        else this.loadSubFans = true
    }, loadSidebarFans:function (b) {
        this.fansLoaded = true;
        if (b) {
            var a = [];
            for (var c in b)if (b.hasOwnProperty(c)) {
                if (a.length >= 18)break;
                b[c].Picture && a.push(b[c])
            }
            this.fans = a;
            this.sidebarFans = true;
            $("#song_fans").html(this.view("/shared/sidebarFans", {fans:a, seeAll:false}));
            this.loadSubFans && this.loadVideosFailed()
        } else this.loadSubFans && $("#song_subcontent").removeClass("loading").hide()
    }, selectCurrentSong:function () {
        var b = this.element.find(".gs_grid").controller();
        if (b) {
            var a = b.dataView.getIdxById(this.song.SongID),
                    c = b.grid.getSelectedRows();
            c.push(a);
            b.selectedRowIDs.push(this.song.SongID);
            b.grid.setSelectedRows(c);
            b.grid.onSelectedRowsChanged()
        }
    }, scrollToFBComment:function () {
        this.scrollToComment = true
    }, ".slick-row.verifiedDivider click":function (b, a) {
        a.stopPropagation();
        var c = $("#grid").controller(), h;
        if (c) {
            if (!this.triedUnverified) {
                this.triedUnverified = true;
                this.song.getRelatedSongs(this.callback("loadRelatedGrid"), null, false)
            }
            if (c.filter.onlyVerified) {
                b.find(".showMore").addClass("showingMore").attr("data-translate-text",
                        "SEARCH_RESULTS_SHOW_LESS").html($.localize.getString("SEARCH_RESULTS_SHOW_LESS"));
                c.filter.onlyVerified = false
            } else {
                b.find(".showMore").removeClass("showingMore").attr("data-translate-text", "SEARCH_RESULTS_SHOW_MORE").html($.localize.getString("SEARCH_RESULTS_SHOW_MORE"));
                c.filter.onlyVerified = 1
            }
            (h = c.grid) && h.onSort(c.sortCol, c.sortDir)
        }
    }, ".page_content_profile_options .share click":function () {
        GS.getLightbox().open("share", {type:"song", id:this.song.SongID})
    }, "a.songLink click":function (b, a) {
        a.preventDefault();
        var c = parseInt($(b).attr("rel"), 10);
        c && GS.Models.Song.getSong(c, function (h) {
            h && GS.router.setHash(h.toUrl())
        })
    }, "a.video click":function (b) {
        b = parseInt($(b).attr("rel"), 10);
        GS.getLightbox().open("video", {videos:this.videos, index:b, autoSkipToNextVideo:false, renderSection:false})
    }, ".capitalSliderBtn click":function (b) {
        b = $(b);
        b.scrollLeft(0);
        $(b).hasClass("capitalSliderNext") ? $(".capitalView_728").animate({scrollLeft:$(".capitalView_728").scrollLeft() + 200}, 500) : $(".capitalView_728").animate({scrollLeft:$(".capitalView_728").scrollLeft() -
                200}, 500)
    }, ".capitalSliderBtn mouseup":function (b) {
        b = $(b);
        b.scrollLeft(0);
        console.warn("hereeee")
    }, getOptionMenu:function () {
        var b = [], a = this.song.SongID;
        songName = this.song.SongName;
        GS.user.getIsShortcut("song", a) ? b.push({title:$.localize.getString("CONTEXT_REMOVE_FROM_PINBOARD"), action:{type:"fn", callback:function () {
            GS.user.removeFromShortcuts("song", a);
            $("#page_header a[name=shortcut]").parent().show();
            $("#page_header a[name=removeshortcut]").parent().hide()
        }}, customClass:"jj_menu_item_hasIcon jj_menu_remove_music"}) :
                b.push({title:$.localize.getString("CONTEXT_ADD_TO_PINBOARD"), action:{type:"fn", callback:function () {
                    GS.user.addToShortcuts("song", a, songName, true);
                    $("#page_header a[name=shortcut]").parent().hide();
                    $("#page_header a[name=removeshortcut]").parent().show()
                }}, customClass:"jj_menu_item_hasIcon jj_menu_item_pinboard"});
        return b
    }, getShopMenu:function () {
        var b = [], a = this.song.SongID;
        songName = this.song.SongName;
        b.push({title:$.localize.getString("CONTEXT_BUY_SONG"), action:{type:"fn", callback:function () {
            GS.getLightbox().open("buySong",
                    a)
        }, log:function () {
            GS.getGuts().onContextMenuClick("contextBuySong", "songOptionsMenu", false, null)
        }}, customClass:"jj_menu_item_hasIcon jj_menu_item_download"});
        if (this.artist && (GS.service.country.ID === 0 || GS.service.country.ID == 1 || GS.service.country.ID == 223) && this.artist.tunipopID && !isNaN(this.artist.tunipopID) && this.artist.tunipopID > 0)b.push({title:$.localize.getString("CONTEXT_BUY_MERCH"), action:{type:"fn", callback:function () {
            GS.getLightbox().open("tunipop", {songID:a})
        }, log:function () {
            GS.getGuts().onContextMenuClick("contextBuyMerch",
                    "songOptionsMenu", false, null)
        }}, customClass:"jj_menu_item_hasIcon jj_menu_item_buy_merch"});
        return b
    }, getPlayMenu:function () {
        var b = this.getPlayContext(), a = [this.song.SongID], c = this.element;
        return[
            {title:$.localize.getString("PLAY_NOW"), action:{type:"fn", callback:function () {
                a.length && GS.player.addSongsToQueueAt(a, GS.player.INDEX_DEFAULT, true, b)
            }, log:function () {
                GS.getGuts().objectListPlayAdd(a, c, "play")
            }}, customClass:"jj_menu_item_hasIcon jj_menu_item_play"},
            {title:$.localize.getString("PLAY_NEXT"),
                action:{type:"fn", callback:function () {
                    a.length && GS.player.addSongsToQueueAt(a, GS.player.INDEX_NEXT, false, b)
                }, log:function () {
                    GS.getGuts().objectListPlayAdd(a, c, "play")
                }}, customClass:"jj_menu_item_hasIcon jj_menu_item_play_next"},
            {title:$.localize.getString("PLAY_LAST"), action:{type:"fn", callback:function () {
                a.length && GS.player.addSongsToQueueAt(a, GS.player.INDEX_LAST, false, b)
            }, log:function () {
                GS.getGuts().objectListPlayAdd(a, c, "play")
            }}, customClass:"jj_menu_item_hasIcon jj_menu_item_play_last"},
            {customClass:"separator"},
            {title:$.localize.getString("REPLACE_QUEUE"), action:{type:"fn", callback:function () {
                a.length && GS.player.addSongsToQueueAt(a, GS.player.INDEX_REPLACE, true, b)
            }, log:function () {
                GS.getGuts().objectListPlayAdd(a, c, "play")
            }}, customClass:"jj_menu_item_hasIcon jj_menu_item_replace_playlist"},
            {title:$.localize.getString("START_RADIO"), action:{type:"fn", callback:function () {
                a.length && GS.player.addSongsToQueueAt(a, GS.player.INDEX_REPLACE, true, b, true)
            }, log:function () {
                GS.getGuts().objectListPlayAdd(a, c, "play")
            }},
                customClass:"jj_menu_item_hasIcon jj_menu_item_new_station"}
        ]
    }});
GS.Controllers.PageController.extend("GS.Controllers.Page.SearchController", {cache:{}}, {defaultType:"song", validTypes:{song:true, playlist:true, user:true, event:true, album:true, artist:true}, query:"", queryAsTag:"", tagID:0, type:"", ppOverride:false, originalUsers:null, searchUsers:null, startTimes:{}, currentFilterStr:null, currentSort:null, prefetchSize:3, displayMethod:"grid", suggestedArtistSlickbox:null, videoResults:[], GENRE_TAGS:{"40s":2837, "50s":1087, "60s":266, "70s":588, "80s":55, "8bit":2145, "90s":9, acapella:4263,
    acidjazz:3519, acoustic:105, alternativerock:1259, ambient:75, americana:922, anime:120, banda:4264, bass:585, beach:912, beat:1475, bhangra:130, blackmetal:4265, bluegrass:96, blues:230, bluesrock:1106, britpop:534, celtic:513, chanson:3692, chillout:251, chinese:4266, christian:439, christianmetal:4267, christianrock:4268, christmas:703, classical:750, classiccountry:4269, classicrock:3529, club:1038, contemporarychristian:4270, country:80, crunk:748, cumbia:4271, dance:71, dancehall:269, darkwave:2139, dcima:4272, deathmetal:4273,
    desi:2512, disco:899, disney:623, dnb:273, downtempo:153, dub:3501, dubstep:2563, electro:162, electronic:123, electronica:67, electropop:893, emo:131, eurodance:4028, experimental:191, flamenco:85, folk:122, folkrock:925, funk:397, funky:398, goa:2556, gospel:1489, grime:268, grunge:134, hardcore:245, hardstyle:4274, heavymetal:1054, hiphop:29, house:48, indie:136, indiefolk:1221, indiepop:573, indierock:1138, industrial:275, island:2294, jazz:43, jazzblues:4275, jazzfusion:4276, jesus:1356, jpop:568, jrock:434, jungle:248, kpop:1765, lounge:765,
    mathrock:4277, medieval:2585, meditation:700, melodic:929, merengue:84, metal:17, metalcore:705, minimal:2177, motown:4278, mpb:819, neofolk:1139, neosoul:4279, noise:171, nujazz:3518, numetal:1103, oi:4280, oldies:102, opera:1535, orchestra:2760, pagode:3606, pop:56, poppunk:1333, poprock:3468, posthardcore:1332, postrock:422, powermetal:4063, progressive:97, progressiverock:4137, psychedelic:1168, psychobilly:3909, punkrock:1754, ragga:4281, rap:3, rave:271, rb:4282, reggae:160, reggaeton:940, relax:1941, rnb:877, rock:12, rockabilly:1086,
    rocksteady:4283, rootsreggae:4284, rumba:3454, salsa:81, samba:4285, schlager:3162, screamo:166, sertanejo:4286, singersongwriter:923, ska:100, skapunk:1110, smoothjazz:3855, softrock:1311, soul:520, soundtrack:72, southernrock:1298, surf:1408, swing:1032, symphonicmetal:4287, synthpop:163, tango:2868, techno:47, tejano:789, texascountry:4288, thrashmetal:4289, trance:69, triphop:158, turkish:689, underground:468, vallenato:89, videogame:115, vocal:6, world:313, zydeco:4290}, index:function (b, a) {
    this.ppOverride = _.orEqual(GS.user.searchVersion,
            false);
    var c = GS.getGuts();
    if (c.currentTest && c.currentTest.name == "interleaving_htp_htp4")this.ppOverride = "Interleaving_HTP_HTP4";
    if (a.indexOf("ppVersion:", 0) === 0) {
        c = a.split(/\s+/);
        this.ppOverride = c[0].split(":")[1];
        a = c.splice(1, c.length).join(" ")
    }
    this.query = _.orEqual(a, "").replace(/\s+/g, " ");
    this.cleanQuery = _.cleanText(this.query);
    this.type = _.orEqual(b, "song");
    this.queryAsTag = a.replace(/[-\s]*/g, "").toLowerCase();
    this.isTagSearch = false;
    if (this.GENRE_TAGS.hasOwnProperty(this.queryAsTag) && this.type ==
            "song") {
        this.isTagSearch = true;
        this.tagID = this.GENRE_TAGS[this.queryAsTag]
    }
    if (this.type && !this.validTypes[this.type])this.type = this.defaultType;
    GS.search.lastSearch = GS.search.search;
    GS.search.lastType = GS.search.type;
    GS.search.search = this.query;
    (GS.search.type = this.type) ? GS.Controllers.PageController.title("All " + _.ucwords(this.type) + " Results: " + this.query) : GS.Controllers.PageController.title("Search: " + this.query);
    this.displayMethod = _.orEqual(GS.store.get("searchDisplay"), "grid");
    this.element.html(this.view("index"));
    this.showGridLoading();
    if (this.query === "") {
        this.element.find(".gs_grid." + (b + "s")).html(this.view("noResults"));
        $(".gs_grid input[name=q]", this.element).val(this.query);
        $("#searchForm input").select();
        this.addAutocomplete("search");
        GS.resize();
        GS.getGuts().logEvent("search", {type:this.type || "song", searchString:this.query, searchTime:0, numResults:0});
        GS.getGuts().beginContext({mostRecentSearch:this.query, mostRecentSearchType:this.type || "song", mostRecentSearchVersion:""})
    } else {
        $("#page_search a.remove").removeClass("hide");
        $.localize.ready ? this.detectRadio() : this.subscribe("gs.locale.ready", this.callback(function () {
            this.detectRadio()
        }));
        this.startTimes.song = (new Date).getTime();
        this.getResults(false, this.type || "song", this.callback(function () {
            var h = (new Date).getTime();
            this.startTimes.artist = h;
            this.startTimes.album = h;
            this.startTimes.playlist = h;
            this.startTimes.user = h;
            this.getResults(this.callback(function (g) {
                $("#page_nav_option_artist .count").text(g ? g.length : 0);
                this.artists = g && g.length ? g.slice(0, 3) : [];
                $("#searchArtists").html(this.view("topArtists"));
                if (!GS.user.subscription.canHideAds()) {
                    g = ["q=" + this.query, "t=" + (this.type || "song"), "p=search_" + this.type];
                    this.artists && this.artists[0] && g.push("7=" + this.artists[0].ArtistID, "8=" + this.artists[0].ArtistName);
                    GS.getAd().updateRotationCount();
                    GS.getAd().buildAd($("#searchCapital_300"), 300, 250, g);
                    GS.getAd().buildAd($("#searchCapital_728"), 728, 90, g)
                }
            }), "artist");
            this.type != "artist" && this.getResults(this.callback(function (g) {
                this.artists = g && g.length ? g.slice(0, 3) : [];
                $("#profile_artists").html(this.view("topArtists"))
            }),
                    "artist");
            this.type != "album" && this.getResults(this.callback(function (g) {
                this.albums = g && g.length ? g.slice(0, 3) : [];
                $("#profile_albums").html(this.view("topAlbums"))
            }), "album");
            this.type != "playlist" && this.getResults(this.callback(function (g) {
                this.playlists = g && g.length ? g.slice(0, 3) : [];
                $("#profile_playlists").html(this.view("topPlaylists"))
            }), "playlist");
            this.type != "user" && this.getResults(this.callback(function (g) {
                g.sort(this.sortByPicture);
                this.users = g && g.length ? g.slice(0, 3) : [];
                $("#profile_users").html(this.view("topUsers"))
            }),
                    "user");
            this.type != "event" && this.getResults(this.callback(function (g) {
                this.events = g && g.length ? g.slice(0, 3) : [];
                $("#profile_events").html(this.view("topEvents"))
            }), "event");
            this.suggest()
        }), true, this.isTagSearch);
        this.slickbox = $("#suggested_artists_slickbox").slickbox({itemHeight:112, itemWidth:90, maxHorizontalGap:50, minHorizontalGap:20, verticalGap:30, hidePositionInfo:true, drawAll:true, padding:10, displayRows:1, itemRenderer:function (h) {
            var g = '<div class="suggested_artist">';
            g += '<a href="#!/' + h.URL + '" class="artistImage insetBorder height90"><img height="90" src="' +
                    h.ImageURL + '" /></a>';
            g += '<a class="name ellipsis" href="#!/' + h.URL + '">' + h.ArtistName + "</a></div>";
            return g
        }}, [
            {ArtistName:"Amy Winehouse", URL:"artist/Amy+Winehouse/1798", ImageURL:"http://images.grooveshark.com/static/artists/90_1798.jpg"},
            {ArtistName:"Billie Holiday", URL:"billie_holiday", ImageURL:"http://images.grooveshark.com/static/artists/90_1850.jpg"},
            {ArtistName:"Duffy", URL:"artist/Duffy/361038", ImageURL:"http://images.grooveshark.com/static/artists/90_361038.jpg"},
            {ArtistName:"Estelle", URL:"artist/Estelle/6820",
                ImageURL:"http://images.grooveshark.com/static/artists/90_6820.jpg"}
        ]);
        this.type == "song" && this.query != "adele" && GS.getYoutube().search(this.query, 10, this.callback("displayVideoResults"), this.callback("getVideoResultsError"))
    }
}, "#suggested_artists_slickbox .suggested_artist click":function (b) {
    GS.getGuts().logEvent("adeleArtistClick", {artist:$(b).children("a.name").text()})
}, "#adele_suggested_radio .startRadio click":function (b) {
    GS.getGuts().logEvent("adeleRadioClick", {stationID:$(b).attr("data-tagid")})
},
    getResults:function (b, a, c, h, g) {
        var k = this.type, m = "", n = this.callback(function (r, A, w) {
            if (r === this.query) {
                var B, t;
                r = {sortCol:"Score", sortDir:0};
                GS.Controllers.Page.SearchController.cache[A] = w;
                if ($.isArray(w.result)) {
                    if ($.isArray(k) && k.length === 1)k = k[0];
                    k = k.substring(0, k.length - 1);
                    t = GS.Models[_.ucwords(k)].wrapCollection(w.result, {ppVersion:""})
                }
                if (t && t.length) {
                    k = k.toLowerCase();
                    if (k === "song") {
                        B = GS.Controllers.GridController.columns.song.concat();
                        B = [B[0], B[1], B[2]];
                        for (var v = [], D = 0; D < t.length && D < this.prefetchSize; D++)v.push(t[D].SongID);
                        GS.player.prefetchStreamKeys(v)
                    } else {
                        B = GS.Controllers.GridController.columns[k];
                        if (k === "event") {
                            r = {sortCol:"StartTime", sortDir:1, rowCssClasses:function () {
                                return"event"
                            }};
                            for (v = 0; v < t.length; v++) {
                                t[v].EventID = v;
                                t[v].StartTime = parseInt(t[v].StartTime);
                                if (t[v].StartTime)t[v].StartTime = (new Date(t[v].StartTime * 1E3)).format("Y-m-d G:i:s");
                                t[v].ArtistName = t[v].ArtistName || t[v].Artists
                            }
                        }
                    }
                    if ($.isFunction(b))b(t, A); else {
                        this.items = t;
                        this.options = r;
                        this.columns = B;
                        this.displayResults(this.displayMethod)
                    }
                } else if ($.isFunction(b))b(t,
                        A); else {
                    A = (new Date).getTime() - this.startTimes[k.toLowerCase()];
                    k = this.type ? this.type + "s" : "songs";
                    this.element.find(".gs_grid." + k.toLowerCase()).html(this.view("noResults"));
                    this.addAutocomplete("search");
                    GS.resize()
                }
                if (h) {
                    A = (new Date).getTime() - this.startTimes[k];
                    GS.search.version = w.version;
                    GS.search.server = _.orEqual(w.server, "not set");
                    t = {type:this.type || "song", searchString:this.query, searchVersion:w.version, searchTime:A, numResults:t ? t.length : 0};
                    if (this.isTagSearch) {
                        t.isTagSearch = true;
                        t.tag = this.queryAsTag
                    }
                    GS.getGuts().logEvent("search",
                            t);
                    t = {mostRecentSearch:this.query, mostRecentSearchType:this.type || "song", mostRecentSearchVersion:w.version};
                    if (this.isTagSearch)t.mostRecentTagSearched = this.queryAsTag;
                    GS.getGuts().beginContext(t);
                    !this.isTagSearch && GS.getGuts().context.hasOwnProperty("mostRecentTagSearched") && GS.getGuts().endContext("mostRecentTagSearched");
                    GS.getGuts().handlePageLoad("search", {type:this.type || "song"})
                }
                if (this.type == "song" && k == "song" && !GS.user.searchVersion)GS.user.searchVersion = w.assignedVersion;
                $.isFunction(c) &&
                c()
            }
        }), o = this.callback(function (r, A, w) {
            w = {result:w};
            n(r, A, w)
        });
        k = _.orEqual(a, k);
        k = $.isArray(k) ? k : _.ucwords(k) + "s";
        m = k + ":" + this.query + ":" + this.ppOverride;
        if (a == "song" && g) {
            m = "tagSearch:" + m;
            GS.service.tagRadioGetAllSongs(this.tagID, this.callback(o, this.query, m), this.callback(n, this.query, m))
        } else GS.Controllers.Page.SearchController.cache[m] ? n(this.query, m, GS.Controllers.Page.SearchController.cache[m]) : GS.service.getResultsFromSearch(this.query, k, this.ppOverride, this.callback(n, this.query, m), this.callback(n,
                this.query, m))
    }, displayResults:function (b) {
        if (b != this.displayMethod)if (this.displayMethod == "grid") {
            $("#grid").controller().destroy();
            $("#grid").addClass("gs_grid")
        } else if (this.displayMethod == "slickbox") {
            this.slickbox.destroy();
            this.slickbox = null
        }
        if (this.type == "song" || this.type == "event" || this.type == "" || b == "grid") {
            this.options.scrollPane = $("#page");
            this.options.padding = 0;
            if (this.type === "user") {
                this.items = this.items.sort(this.sortByPicture);
                this.options.sortCol = false
            } else if (this.type === "artist" || this.type ==
                    "event")this.options.disableMultiSelect = true;
            this.element.find("#grid").gs_grid(this.items, this.columns, this.options, this.type)
        } else this.type == "user" ? this.renderSlickBox(this.type, this.items, {sortType:"byPicture", sortFunction:this.sortByPicture}) : this.renderSlickBox(this.type, this.items, this.currentSort);
        this.displayMethod = b
    }, displayVideoResults:function (b) {
        if ((this.videoResults = b) && this.videoResults.length) {
            $("#searchVideos").removeClass("hide");
            $("#videoResults").slickbox({scrollPane:"#page_content",
                padding:0, itemRenderer:GS.Models.Video.searchItemRenderer, itemWidth:120, itemHeight:120, maxHorizontalGap:50, minHorizontalGap:20, verticalGap:30, hidePositionInfo:true, displayRows:1}, this.videoResults)
        }
    }, "#videoResults .slickbox-item-content click":function (b) {
        b = $("#videoResults ol li").index($(b).parents(".slickbox-item"));
        var a = this.videoResults[b];
        GS.getLightbox().open("video", {videos:this.videoResults, index:b, autoSkipToNextVideo:false, renderSection:false});
        GS.getGuts().forceLogEvent("videoResultPlay",
                {youtubeID:a.VideoID, title:a.Title, author:a.Author})
    }, getVideoReultsError:function () {
        console.warn("error with video search")
    }, suggest:function () {
        if ($("#page_content").is(".search")) {
            if (!window.google)window.google = {};
            if (!window.google.ac)window.google.ac = {};
            window.google.ac.h = this.callback(function (a) {
                var c = false;
                if (a[1].length > 0) {
                    a = a[1];
                    c = a[0][0].replace(/(?:\s?lyrics[^\s]*$|\<\/?[a-zA-Z]+\>)/g, "")
                }
                c && this.suggestSuccess("eg", c)
            });
            var b = "http://google.com/complete/search?output=json&q=" + $.trim(this.query) +
                    " lyrics&client=serp";
            $.ajax({url:b, dataType:"jsonp", jsonp:false, jsonpCallback:"window.google.ac.h", success:function () {
            }, error:function () {
            }})
        }
    }, suggestSuccess:function (b, a) {
        if ((a = _.uncleanText($.trim(a))) && $.trim(this.query).toLowerCase() !== a) {
            this.querySuggest = a;
            this.suggestSource = b;
            $("#didYouMean a").text(a).attr("title", a).data({searchquery:a, searchtype:this.type ? this.type : ""});
            $("#page_subheader").removeClass("hide");
            GS.resize();
            GS.getGuts().gaTrackEvent("search", "suggest", this.suggestSource);
            GS.getGuts().logEvent("suggest", {suggest:this.querySuggest, source:this.suggestSource, numSongs:$("#grid").controller() ? $("#grid").controller().dataView.rows.length : 0})
        }
    }, ".didYouMean a.remove click":function () {
        $("#page_subheader").remove();
        GS.resize()
    }, ".didYouMean a click":function () {
        var b = $("#grid").controller();
        b = b && b.dataView ? b.dataView.rows.length : 0;
        GS.getGuts().gaTrackEvent("search", "suggestClick", this.suggestSource, b);
        GS.getGuts().logEvent("suggestClick", {suggest:this.querySuggest, source:this.suggestSource,
            numSongs:b})
    }, detectRadio:function () {
        if ($("#page_content").is(".search")) {
            var b = GS.Models.Station.getStationByName(this.query.toLowerCase());
            if (b) {
                var a = new GS.Models.DataString;
                a.string = $.localize.getString("SEARCH_START_RADIO");
                a.data = {name:$.localize.getString(b.StationTitle)};
                $("#page_content_pane .radio_suggestion").removeClass("hide");
                $("#page_content_pane .radio_suggestion a.startRadio").attr("rel", b.StationID).html("<span>" + a.render() + "</span>")
            }
        }
    }, ".radio_artist_suggestion .startRadio click":function (b) {
        GS.player.setAutoplay(true,
                b.attr("data-tagid"))
    }, ".radio_suggestion .startRadio click":function (b) {
        GS.player.setAutoplay(true, b.attr("rel"))
    }, renderSlickBox:function (b, a, c) {
        switch (b) {
            case "user":
                this.currentFilterStr = this.query;
                this.originalUsers = a.concat();
                this.renderUsers(this.originalUsers, c);
                break;
            case "playlist":
                this.renderPlaylists(a, c);
                break;
            case "album":
                this.renderAlbums(a, c);
                break;
            case "artist":
                this.renderArtists(a, c);
                break
        }
    }, renderAlbums:function (b, a) {
        this.currentSort = _.orEqual(a, {sortType:"relevance", sortFunction:null});
        $("#grid").html("").css("height", "auto").addClass("albums");
        this.slickbox = $("#grid").slickbox({sortFunction:this.currentSort.sortFunction, scrollPane:"#page", padding:0, itemRenderer:GS.Models.Album.itemRenderer, itemWidth:250, itemHeight:70, maxHorizontalGap:50, minHorizontalGap:10, verticalGap:15, dragAs:"album", dragItemID:"AlbumID"}, b);
        this.sliderOrBoxDragSetup(this.slickbox, ".slickbox-item")
    }, renderPlaylists:function (b, a) {
        this.currentSort = _.orEqual(a, {sortType:"relevance", sortFunction:null});
        $("#grid").html("").css("height",
                "auto").addClass("playlistList");
        this.slickbox = $("#grid").slickbox({sortFunction:this.currentSort.sortFunction, scrollPane:"#page", padding:0, itemRenderer:GS.Models.Playlist.itemRenderer, itemWidth:250, itemHeight:70, maxHorizontalGap:50, minHorizontalGap:10, verticalGap:15, dragAs:"playlist", dragItemID:"PlaylistID"}, b);
        this.sliderOrBoxDragSetup(this.slickbox, ".slickbox-item")
    }, renderArtists:function (b, a) {
        this.currentSort = _.orEqual(a, {sortType:"relevance", sortFunction:null});
        $("#grid").html("").css("height",
                "auto").addClass("artistList");
        this.slickbox = $("#grid").slickbox({sortFunction:this.currentSort.sortFunction, scrollPane:"#page", padding:0, itemRenderer:GS.Models.Artist.itemRenderer, itemWidth:250, itemHeight:70, maxHorizontalGap:50, minHorizontalGap:10, verticalGap:15, dragAs:"artist", dragItemID:"ArtistID"}, b);
        this.sliderOrBoxDragSetup(this.slickbox, ".slickbox-item")
    }, renderUsers:function (b, a) {
        this.currentSort = _.orEqual(a, {sortType:"relevance", sortFunction:null});
        var c = $("body").width() <= 1024 || $("body").height() <=
                800;
        $("#grid").html("").css("height", "auto").addClass("userlist");
        this.slickbox = $("#grid").slickbox({sortFunction:this.currentSort.sortFunction, scrollPane:"#page", padding:0, listClass:c ? "smallUserView" : "", itemRenderer:GS.Models.User.itemRenderer, itemWidth:c ? 175 : 130, itemHeight:c ? 50 : 185, maxHorizontalGap:50, minHorizontalGap:20, verticalGap:15}, b)
    }, getSortMenu:function () {
        switch (this.type) {
            case "song":
                return this.getSongSortMenu();
            case "playlist":
                return this.getPlaylistSortMenu();
            case "user":
                return this.getUserSortMenu();
            case "event":
                return this.getEventSortMenu();
            case "album":
            case "artist":
                return this.getArtistAlbumSortMenu();
            default:
                return[]
        }
    }, getSongSortMenu:function () {
        var b = this.setSort;
        return[
            {title:$.localize.getString("SORT_BY_RELEVANCE"), action:{type:"fn", callback:function () {
                b("Rank", triggerElement, "SORT_BY_RELEVANCE")
            }}, customClass:"jj_menu_item_blank"},
            {title:$.localize.getString("SORT_BY_SONG"), action:{type:"fn", callback:function () {
                b("SongName", triggerElement, "SORT_BY_SONG")
            }}, customClass:"jj_menu_item_blank"},
            {title:$.localize.getString("SORT_BY_ARTIST"), action:{type:"fn", callback:function () {
                b("ArtistName", triggerElement, "SORT_BY_ARTIST")
            }}, customClass:"jj_menu_item_blank"},
            {title:$.localize.getString("SORT_BY_ALBUM"), action:{type:"fn", callback:function () {
                b("AlbumName", triggerElement, "SORT_BY_ALBUM")
            }}, customClass:"jj_menu_item_blank"},
            {title:$.localize.getString("SORT_BY_POPULARITY"), action:{type:"fn", callback:function () {
                b("Popularity", triggerElement, "SORT_BY_POPULARITY")
            }}, customClass:"jj_menu_item_blank"}
        ]
    },
    getPlaylistSortMenu:function () {
        var b = this.setSort;
        return[
            {title:$.localize.getString("SORT_BY_RELEVANCE"), action:{type:"fn", callback:function () {
                b("Rank", triggerElement, "SORT_BY_RELEVANCE")
            }}, customClass:"jj_menu_item_blank"},
            {title:$.localize.getString("SORT_BY_NAME"), action:{type:"fn", callback:function () {
                b("PlaylistName", triggerElement, "SORT_BY_NAME")
            }}, customClass:"jj_menu_item_blank"}
        ]
    }, getEventSortMenu:function () {
        var b = this.setSort;
        return[
            {title:$.localize.getString("SORT_BY_SOONEST_DATE"), action:{type:"fn",
                callback:function () {
                    b("StartTime", triggerElement, "SORT_BY_SOONEST_DATE")
                }}, customClass:"jj_menu_item_blank"},
            {title:$.localize.getString("SORT_BY_RELEVANCE"), action:{type:"fn", callback:function () {
                b("Rank", triggerElement, "SORT_BY_RELEVANCE")
            }}, customClass:"jj_menu_item_blank"}
        ]
    }, getUserSortMenu:function () {
        var b = this.setSort;
        return[
            {title:$.localize.getString("SORT_BY_RELEVANCE"), action:{type:"fn", callback:function () {
                b("Rank", triggerElement, "SORT_BY_RELEVANCE")
            }}, customClass:"jj_menu_item_blank"},
            {title:$.localize.getString("SORT_BY_NAME"),
                action:{type:"fn", callback:function () {
                    b("Name", triggerElement, "SORT_BY_NAME")
                }}, customClass:"jj_menu_item_blank"}
        ]
    }, getArtistAlbumSortMenu:function () {
        var b = this.setSort;
        return[
            {title:$.localize.getString("SORT_BY_RELEVANCE"), action:{type:"fn", callback:function () {
                b("Rank", triggerElement, "SORT_BY_RELEVANCE")
            }}, customClass:"jj_menu_item_blank"}
        ]
    }, sortByPicture:function (b, a) {
        return!b.Picture && a.Picture ? 1 : b.Picture && !a.Picture ? -1 : GS.user.favorites.users && !GS.user.favorites.users[b.UserID] && GS.user.favorites.users[a.UserID] ?
                1 : GS.user.favorites.users && GS.user.favorites.users[b.UserID] && !GS.user.favorites.users[a.UserID] ? -1 : 0
    }, filterUsers:function (b) {
        if (this.currentFilterStr != b) {
            this.currentFilterStr = b;
            this.type == "user" && this.originalUsers && this.renderUsers(this.originalUsers.filter(this.callback("filterUsersFunction")), this.currentSort)
        }
    }, filterUsersFunction:function (b) {
        return(b.Username.toLowerCase() + " " + b.Name.toLowerCase()).indexOf(this.currentFilterStr.toLowerCase()) !== -1
    }, ".removeAdsLink click":function () {
        GS.getLightbox().open("vipPerks")
    }});
GS.Controllers.BaseController.extend("GS.Controllers.LightboxController", {onElement:"#lightbox_wrapper", isGSSingleton:true}, {priorities:{sessionBad:12, SESSION_BAD:12, maintenance:11, DOWN_FOR_MAINTENANCE:11, invalidClient:10, INVALID_CLIENT:10, badHost:8, BAD_HOST:8, interactionTime:7, INTERACTION_TIMER:7, vipRequiredLogin:5, VIP_REQUIRED_LOGIN:5, vipOnlyFeature:3, VIP_ONLY_FEATURE:3, feedback:2, signup:2, SIGNUP:2, vipSignup:1, VIP_SIGNUP:1, visualizer:-1}, notCloseable:function () {
    return!!this.options.notCloseable
},
    queue:[], queuedOptions:{}, curType:null, isOpen:false, priority:0, init:function () {
        this.subscribe("gs.app.resize", this.callback(this.positionLightbox));
        $(document).keydown(this.callback(function (b) {
            b.which == _.keys.ESC && this.isOpen && !this.notCloseable() && this.close()
        }));
        this.currentPriority = NaN;
        this._super()
    }, appReady:function () {
        if (gsConfig.lightboxOnInit) {
            this.open(gsConfig.lightboxOnInit.type, gsConfig.lightboxOnInit.defaults);
            gsConfig.lightboxOnInit = false
        }
    }, positionLightbox:function () {
        var b, a;
        return function () {
            if (this.isOpen &&
                    this.container) {
                a = a || $("#main");
                b = b || $("#lightbox");
                var c = this.container.find("#lightbox_content");
                if (this.curType !== "signup") {
                    c.css({height:"auto"});
                    b.css({width:"auto"})
                }
                var h = Math.max(b.width(), 400), g = Math.min(Math.max(b.height(), 100), $(document.body).height() - 70);
                h = Math.round(a.width() / 2 - h / 2);
                var k = Math.max(35, Math.round(a.height() / 2 - g / 2)), m = c.height(), n = this.element.find("#lightbox_header:visible").outerHeight() + this.element.find("#lightbox_footer:visible").outerHeight(), o = 0;
                c.find(".measure").each(function () {
                    o +=
                            $(this).height()
                });
                g = Math.min(Math.max(150, parseInt(g - n, 10)));
                g < m && !c.hasClass("fixed_content") && c.height(g).find(".lightbox_pane_content").height(c.height() - c.find("#pane_footer").outerHeight() - o);
                $("#lightbox_nav").height($("#lightbox_pane").height());
                this.element.css({top:k, left:h});
                this.queuedOptions[this.curType] && this.queuedOptions[this.curType].showPlayerControls && this.overlay.height($(window).height() - $("#player").height());
                $.publish("lightbox.position")
            }
        }
    }(), getContainer:function (b, a) {
        var c =
                this.element.find("." + b);
        if (c.length === 0) {
            c = $('<div class="lbcontainer"/>').addClass(b);
            b === "generic" && c.addClass(a.type);
            c.appendTo($("#lightbox"))
        }
        return c
    }, open:function (b, a) {
        if (typeof b === "object") {
            a = b;
            b = "generic"
        }
        this.options = a || {};
        var c = this.queue.indexOf(b), h = _.orEqual(this.priorities[b], 0);
        if (this.curType === b)return false;
        this.queuedOptions[b] = a;
        if (!isNaN(this.currentPriority) && h < this.currentPriority)this.queue.indexOf(b) === -1 && this.queue.push(b); else {
            if (this.curType) {
                this.close(false, true);
                this.queue.indexOf(this.curType) === -1 && this.queue.push(this.curType)
            }
            if (!(this.queue.length && c !== -1 && c > -1)) {
                this.curType = b;
                this.currentPriority = h;
                this.isOpen = true;
                this.queue.indexOf(b) === -1 && this.queue.unshift(b);
                var g = this;
                GS.ClassLoader.get(["GS.Controllers.Lightbox.", $.String.classize(b), "Controller"].join("")).then(function () {
                    if (g.curType === b && g.isOpen) {
                        g.overlay = g.overlay || $("#lightbox_overlay");
                        g.overlay.height("100%");
                        g.container = g.getContainer(b, a);
                        g.notCloseable() ? $("#lightbox_close").hide() :
                                $("#lightbox_close").show();
                        $.browser.mozilla && parseInt($.browser.version, 10) < 6 ? $("#theme_home .flash object").each(function (k, m) {
                            m.style.visibility = "hidden"
                        }) : $("#theme_home .flash object").hide();
                        $("div.capital iframe").hide().parent().hide();
                        g.element.add(g.overlay).add(g.container).show();
                        g.container[$.String.underscore("gs_lightbox_" + b)](a);
                        g.positionLightbox();
                        g.container.find(".focusFirst").focus();
                        b === "generic" ? g.trackLightboxView(a.type) : g.trackLightboxView(b)
                    }
                })
            }
        }
    }, close:function (b, a) {
        var c,
                h;
        b = _.orEqual(b, false);
        a = _.orEqual(a, false);
        if (b) {
            h = this.queue.indexOf(b);
            if (h != -1) {
                c = this.queue.splice(h, 1);
                delete this.queuedOptions[b]
            }
            if (b !== this.curType)return
        }
        b || (c = this.queue.shift());
        if (_.defined(c)) {
            (h = this.container.hide().controller()) && h.destroy();
            this.element.find(".lbcontainer." + c).empty()
        }
        if (!a) {
            this.queuedOptions[c] && this.queuedOptions[c].onComplete && this.queuedOptions[c].onComplete();
            this.curType = false;
            this.currentPriority = NaN;
            if (this.queue.length > 0) {
                this.queue = this.sortQueueByPriority(this.queue);
                c = this.queue.shift();
                h = this.queuedOptions[c];
                try {
                    this.open(c, h)
                } catch (g) {
                    console.warn("error opening next lightbox", g);
                    this.curType = false;
                    this.currentPriority = NaN;
                    this.isOpen = false;
                    this.element.add(this.overlay).hide();
                    $.browser.mozilla && parseInt($.browser.version, 10) < 6 ? $("#theme_home .flash object").each(function (k, m) {
                        m.style.visibility = "visible"
                    }) : $("#theme_home .flash object").show()
                }
            } else {
                this.curType = false;
                this.currentPriority = NaN;
                this.isOpen = false;
                this.element.add(this.overlay).hide();
                $.browser.mozilla &&
                        parseInt($.browser.version, 10) < 6 ? $("#theme_home .flash object").each(function (k, m) {
                    m.style.visibility = "visible"
                }) : $("#theme_home .flash object").show()
            }
            $("div.capital iframe").show().parent().show();
            $("#theme_share_header").hide();
            $.publish("gs.lightbox.close")
        }
    }, sortQueueByPriority:function (b) {
        b.sort(this.callback(function (a, c) {
            var h = _.orEqual(this.priorities[a], 0), g = _.orEqual(this.priorities[c], 0);
            return h == g ? 0 : h > g ? 1 : -1
        })).reverse();
        return b
    }, trackLightboxView:function (b) {
        b = "#!/lb/" + b;
        if (window._gaq &&
                window._gaq.push) {
            b = encodeURI(b);
            window._gaq.push(["_trackPageview", b])
        }
    }, ".close click":function () {
        GS.getLightbox().close()
    }, "select focus":function (b) {
        b.parents(".input_wrapper").addClass("active")
    }, "select blur":function (b) {
        b.parents(".input_wrapper").removeClass("active");
        b.change()
    }, "select keydown":function (b) {
        b.change()
    }, "select change":function (b) {
        $(b).prev("span").text($(b).find("option:selected").html())
    }, "input focus":function (b) {
        $(b).parent().parent().addClass("input_wrapper_active")
    },
    "textarea focus":function (b) {
        $(b).parent().parent().parent().addClass("textarea_wrapper_active")
    }, "input blur":function (b) {
        $(b).parent().parent().removeClass("input_wrapper_active")
    }, "textarea blur":function (b) {
        $(b).parent().parent().parent().removeClass("textarea_wrapper_active")
    }});
GS.Controllers.BaseController.extend("GS.Controllers.Lightbox.GenericController", {onDocument:false, viewDefaults:{buttonsLeft:[], buttonsRight:[], showFooter:true}}, {init:function (b, a) {
    this.update(a);
    _.forEach(this.options.callbacks, function (c, h) {
        this.delegate(this.element, h, "click", c)
    }, this);
    this.delegate(this.element, ".submit", "click", function (c) {
        GS.getLightbox().close();
        c.preventDefault()
    })
}, update:function (b) {
    this._super(b);
    this.options.view = $.extend(true, {}, this.options.view, GS.Controllers.Lightbox.GenericController.viewDefaults);
    this.options.view.showFooter = this.options.view.buttonsLeft.length > 0 || this.options.view.buttonsRight.length > 0;
    this.element.html(this.view("/lightbox/generic", this.options.view, {first:function (a) {
        return a === 0 ? "first" : ""
    }, last:function (a, c) {
        return a === c - 1 ? "last" : ""
    }, button:function (a) {
        var c = [], h = {"class":"btn btn_style4 " + (a.className || "")};
        if (a.href)h.href = a.href;
        if (a.disabled)h.disabled = "disabled";
        var g = a.href ? "a" : "button";
        c.push(this.tag(g, h));
        c.push(this.tag("div"));
        a.labelHTML ? c.push(this.tag("span"),
                a.labelHTML, this.tagEnd("span")) : c.push(this.localeTag("span", a.label));
        c.push(this.tagEnd("div"));
        c.push(this.tagEnd(g));
        return c.join("")
    }}));
    $.isFunction(b.loadCallback) && b.loadCallback(this.element)
}, "#lightbox_footer button.closeBtn click":function (b, a) {
    if ($(b).hasClass("disabled")) {
        a.stopPropagation();
        a.preventDefault();
        return false
    }
    GS.getLightbox().close()
}, "form submit":function (b, a) {
    a.preventDefault()
}});
(function (b) {
    function a(w) {
        w = w.replace("#!/", "");
        var B = b("<img />");
        B.load(
                function () {
                    B.remove()
                }).error(function () {
                    B.remove()
                });
        B.attr("src", "http://t.fuziontech.net/tp/landing.gif?p=" + w + "&r=" + (new Date).valueOf() + Math.floor(Math.random() * 10)).appendTo("body")
    }

    function c(w) {
        if (_.defined(w.inviteCode)) {
            gsConfig.inviteCode = w.inviteCode;
            var B = (new Date).valueOf() + 12096E5;
            try {
                GS.store.set("lastInviteCode", {inviteCode:w.inviteCode, expires:B})
            } catch (t) {
            }
        }
        if (w.hasOwnProperty("password")) {
            B = {};
            if (w.hasOwnProperty("code"))B.resetCode =
                    w.code;
            GS.getLightbox().open("forget", B)
        }
        w.hasOwnProperty("invite") && GS.getLightbox().open("invite");
        w.hasOwnProperty("signup") && GS.getLightbox().open("signup");
        if (w.hasOwnProperty("login"))if (!GS.user || !GS.user.isLoggedIn)GS.getLightbox().open("login");
        if (w.hasOwnProperty("testAds"))GS.getAd().useTestAds = true;
        w.hasOwnProperty("unsubscribeClearvoiceEmail") && GS.getLightbox().open("surveyResult", {gsResult:-999, ResultCode:"Unsub"});
        w.hasOwnProperty("activateClearvoiceEmail") && GS.getLightbox().open("surveyResult",
                {gsResult:-999, ResultCode:"Activate"});
        if (w.hasOwnProperty("measurePerformance")) {
            var v = false, D = function () {
                if (b("#grid ul.options").length) {
                    top.hasLoaded("search");
                    GS.player.addSongsToQueueAt([b("#grid ul.options:first").attr("rel")], -1, true);
                    setTimeout(F, 1)
                } else setTimeout(D, 1)
            }, F = function () {
                if (GS.player.isPlaying && !GS.player.isLoading && !v) {
                    v = true;
                    top.hasLoaded("play")
                } else setTimeout(F, 1)
            };
            if (window.top && window != top && b.isFunction(top.hasLoaded)) {
                top.hasLoaded("page");
                setTimeout(D, 1);
                GS.router.setHash("/search?q=eminem")
            }
        }
    }

    function h(w, B) {
        extraGutsParams = _.orEqual(B, false);
        var t = _.defined(w.search), v = _.defined(w.notFound), D = {identifier:null, params:w};
        r = D;
        o = "home";
        GS.router.page.getPageClass(o).then(function (F) {
            if (o === "home" && r === D)if (v) {
                GS.router.page.activate(F, D).notFound();
                GS.getGuts().handlePageLoad("notFound", w)
            } else {
                GS.router.page.activate(F, D).index(t);
                GS.getGuts().handlePageLoad("home", B ? parse : {})
            }
        })
    }

    function g(w) {
        var B = new n(w.splat, "login", "id", "section", "subpage", "objType"), t, v;
        if (B.section == "playlists") {
            B.objType =
                    B.subpage;
            B.subpage = B.section;
            B.section = "music";
            B.length = B.objType ? 5 : 4
        }
        if (B.section == "music") {
            o = "user_music";
            r = t = {identifier:B.id, params:B};
            GS.router.page.getPageClass(o).then(function (D) {
                if (o === "user_music" && r === t) {
                    v = GS.router.page.activate(D, t);
                    switch (B.length) {
                        case 3:
                            v.index(B.id, "");
                            break;
                        case 4:
                            v[B.subpage](B.id);
                            break;
                        case 5:
                            v[B.subpage](B.id, B.objType);
                            break;
                        default:
                            GS.router.notFound()
                    }
                    GS.getGuts().handlePageLoad("user", B)
                }
            })
        } else {
            o = "user";
            r = t = {identifier:B.id, params:B};
            GS.router.page.getPageClass(o).then(function (D) {
                if (o ===
                        "user" && r === t) {
                    v = GS.router.page.activate(D, t);
                    switch (B.length) {
                        case 2:
                            v.index(B.id);
                            break;
                        case 3:
                            v[B.section](B.id, "");
                            break;
                        case 4:
                            v[B.section](B.id, B.subpage);
                            break;
                        default:
                            GS.router.notFound()
                    }
                    GS.getGuts().handlePageLoad("user", B)
                }
            })
        }
    }

    function k(w) {
        var B = w.splat.shift(), t = new n(w.splat, "name", "id", "subpage"), v, D;
        o = B;
        r = v = {identifier:t.id};
        GS.router.page.getPageClass(o).then(function (F) {
            if (o === B && r === v) {
                D = GS.router.page.activate(F, v);
                switch (t.length) {
                    case 2:
                    case 3:
                        D.index(t.id, t.subpage, w.play);
                        break;
                    default:
                        this.notFound()
                }
                GS.getGuts().handlePageLoad(B, t)
            }
        })
    }

    function m(w, B) {
        var t = w.indexOf("/");
        return t !== -1 ? w.substring(0, t) + "/" + B + w.substring(t) : w + "/" + B
    }

    function n() {
        var w = b.makeArray(arguments), B = w.shift()[0], t = this;
        if (_.isEmpty(B))t.length = 0; else {
            B = B.replace(/\/$/, "").split("/");
            t.length = B.length;
            var v;
            _.forEach(B, function (D, F) {
                v = w[F];
                t[v] = D
            })
        }
    }

    if (typeof window._comscore != "object")window._comscore = [];
    GS.router = new (function () {
        function w(t) {
            var v = t.indexOf("#");
            if (v != -1)return t.indexOf("#!") !==
                    v ? "#!" + t.substring(v + 1) : t.substring(v);
            v = t.indexOf("/");
            return v !== 0 ? "#!/" + t : "#!" + t
        }

        var B = this;
        this._routes = [];
        this._history = [];
        this._nextHashShift = this._historyIndex = 0;
        this._pageNameCache = {};
        this.hasForward = this.hasBack = false;
        this.setHash = function (t) {
            t = w(t);
            window.location.hash = t
        };
        this.replaceHash = function (t) {
            t = w(t);
            window.location.replace(window.location.protocol + "//" + window.location.hostname + "/" + t)
        };
        this.get = function (t, v, D) {
            D = _.orEqual(D, this);
            if (!(t instanceof RegExp) && !_.isString(t))console.error("invalid route, must be String or RegExp");
            else {
                if (_.isString(t))t = RegExp("^" + t + "$");
                this._routes.push({path:t, callback:v, context:D})
            }
        };
        this.notFound = function () {
            this.replaceHash("notFound")
        };
        this.back = function () {
            this.navHistory(-1)
        };
        this.forward = function () {
            this.navHistory(1)
        };
        this.navHistory = function (t) {
            var v = this._historyIndex + t;
            if (v >= 0 && v < this._history.length) {
                this._nextHashShift = t;
                this.setHash(this._history[v])
            }
        };
        this.performSearch = function (t, v) {
            v = v.toString();
            if (v.indexOf("http://") === 0 && v.indexOf("tinysong") == -1) {
                v = v.substring(7);
                this.setHash(v)
            } else {
                t =
                        t.toLowerCase();
                v = encodeURIComponent(v);
                v = v.replace(/%20/g, "+");
                t ? this.setHash("/search/" + t + "?q=" + v) : this.setHash("/search?q=" + v)
            }
        };
        this.cachePageName = function (t, v, D) {
            this._pageNameCache[t] = {type:v, id:D}
        };
        this.run = function () {
            this.page = GS.Controllers.PageController;
            this.before = this.page.checkLock;
            b(window).hashchange(function () {
                var t = location.hash;
                if (t && t.length)t = location.href.substring(location.href.indexOf("#"));
                B._onHashChange(t)
            });
            b(window).trigger("hashchange")
        };
        this._onHashChange = function (t) {
            if (b.isFunction(this.before))if (!this.before())return;
            window._gaq && _gaq.push && _gaq.push(["_trackPageview", t]);
            var v = {c1:2, c2:"8187464", c4:(location.protocol + "//" + location.host + "/" + t).replace("#!/", "")};
            window.COMSCORE && COMSCORE.beacon ? COMSCORE.beacon(v) : window._comscore.push(v);
            a(t);
            if (this._nextHashShift !== 0) {
                v = this._historyIndex + this._nextHashShift;
                if (v >= 0 && v < this._history.length && this._history[v] == t)this._historyIndex = v; else this._nextHashShift = 0
            }
            if (this._nextHashShift === 0) {
                this._history = this._history.slice(0, this._historyIndex + 1);
                t && this._history.push(t);
                this._historyIndex = this._history.length - 1
            }
            this._nextHashShift = 0;
            v = this._parseQueryString(t);
            var D = t.replace(A, "");
            if (t = this._getRouteForPath(D)) {
                D = D.match(t.path);
                D.shift();
                v.splat = D;
                if (b.isFunction(t.callback)) {
                    t.callback.call(t.context, v);
                    c(v)
                }
                this.hasBack = this._history.length && this._historyIndex > 0;
                this.hasForward = this._history.length && this._historyIndex < this._history.length - 1;
                b.publish("gs.router.history.change")
            } else this.notFound()
        };
        this._getRouteForPath = function (t) {
            var v, D, F;
            D = 0;
            for (F = this._routes.length; D <
                    F; D++)if (this._routes[D].path.test(t)) {
                v = this._routes[D];
                break
            }
            return v
        };
        this._parseQueryString = function (t) {
            var v = {}, D = /\+/g, F, E, x;
            if (t = t.match(A)) {
                t = t[1].split("&");
                E = 0;
                for (x = t.length; E < x; E++) {
                    F = t[E].split("=");
                    if (F[0] === "q" || F[0] === "query")F[1] = F[1].replace(D, "%20");
                    v = this._parseParamPair(v, decodeURIComponent(F[0]), decodeURIComponent(F[1]))
                }
            }
            return v
        };
        this._parseParamPair = function (t, v, D) {
            if (t[v])if (_isArray(t[v]))t[v].push(D); else t[v] = [t[v], D]; else t[v] = D;
            return t
        };
        this._getTypeIDForPageName = function (t) {
            var v =
                    b.Deferred(), D, F, E;
            _.defined(this._pageNameCache[t]) ? v.resolve(this._pageNameCache[t]) : GS.service.getItemByPageName(t, function (x) {
                if (x && x.type)if (E = x[x.type]) {
                    E.PageName = t;
                    switch (x.type) {
                        case "user":
                            D = GS.Models.User.wrap(E);
                            F = D.UserID;
                            break;
                        case "artist":
                            D = GS.Models.Artist.wrap(E);
                            F = D.ArtistID;
                            break;
                        case "album":
                            D = GS.Models.Album.wrap(E);
                            F = D.AlbumID;
                            break;
                        case "theme":
                            D = E;
                            F = E.themeID;
                            break;
                        default:
                            console.warn("unknown type for PageName", x.type, t);
                            v.reject(x);
                            return
                    }
                    B._pageNameCache[t] = {type:x.type,
                        id:F, item:D};
                    v.resolve(B._pageNameCache[t])
                } else v.reject(x); else v.reject(x)
            }, function (x) {
                v.reject(x)
            });
            return v.promise()
        }
    });
    var o = "", r = null;
    GS.router.get("", function (w) {
        h(w)
    });
    GS.router.get(/^#!?\/$/, function (w) {
        h(w)
    });
    GS.router.get(/^#!?\/notFound\/?$/, function (w) {
        w.notFound = true;
        h(w)
    });
    GS.router.get(/^#!?\/user\/(.*)\/?$/, g);
    GS.router.get(/^#!?\/playlist\/(.*)\/?/, function (w) {
        var B = new n(w.splat, "name", "id", "subpage"), t, v;
        o = "playlist";
        r = t = {identifier:B.id, params:B};
        GS.router.page.getPageClass(o).then(function (D) {
            if (o ===
                    "playlist" && r === t) {
                v = GS.router.page.activate(D, t);
                switch (B.length) {
                    case 2:
                    case 3:
                        D = _.orEqual(B.subpage, "music");
                        v.index(B.id, D, w.play);
                        B.subpage = D;
                        break;
                    default:
                        this.notFound()
                }
                GS.getGuts().handlePageLoad("playlist", B)
            }
        })
    });
    GS.router.get(/^#!?\/s(?:ong)?\/(.*)\/?/, function (w) {
        var B = new n(w.splat, "name", "token", "subpage");
        if (w.fbComment && GS.page.activePage && GS.page.activePage.token === B.token)return false;
        var t, v;
        o = "song";
        r = t = {identifier:B.token, params:B};
        GS.router.page.getPageClass(o).then(function (D) {
            if (o ===
                    "song" && r === t) {
                v = GS.router.page.activate(D, t);
                switch (B.length) {
                    case 2:
                    case 3:
                        var F = _.orEqual(B.subpage, "overview");
                        v.index(B.token, F);
                        break;
                    default:
                        this.notFound()
                }
                B.subpage = F;
                GS.getGuts().handlePageLoad("song", B)
            }
        })
    });
    GS.router.get(/^#!?\/(album|artist|promotion)\/(.*)\/?/, k);
    GS.router.get(/^#!\/redeem\/?(.*)\/?/, function (w) {
        w = new n(w.splat, "type", "code");
        w.redeemingPromoCard = true;
        h(w);
        GS.getLightbox().open("redeem", {type:w.type, code:w.code})
    });
    GS.router.get(/^#!?\/login(?:$|\/(.*)\/?)/, function (w) {
        w =
                new n(w.splat, "type");
        h(w);
        GS.getLightbox().open("login", {type:w.type})
    });
    GS.router.get(/^#!?\/themes(?:$|\/(.*)\/?)/, function (w) {
        w = new n(w.splat, "type");
        h(w);
        GS.getLightbox().open("themes", {type:w.type})
    });
    GS.router.get(/^#!?\/(theme)\/(.*)\/?/, function (w) {
        w.splat.shift();
        w = new n(w.splat, "name", "themeid", "type");
        GS.theme.loadFromDFPManual(w.themeid);
        h(w)
    });
    GS.router.get(/^#!?\/boxee(?:$|\/(.*)\/?)/, function (w) {
        w = new n(w.splat, "type");
        h(w);
        GS.getLightbox().open("feature", {feature:"boxee"})
    });
    GS.router.get(/^#!?\/perks(?:$|\/(.*)\/?)/,
            function (w) {
                w = new n(w.splat, "type");
                h(w);
                GS.theme.setCurrentTheme(163, true);
                GS.getLightbox().open("vipPerks")
            });
    GS.router.get(/^#!?\/(sessions)/, function () {
        GS.theme.setCurrentTheme(247, true);
        h({})
    });
    GS.router.get(/^#!?\/(censorship)$/, function () {
        h({});
        GS.player.powerHourTimeout = 29E3;
        GS.player.enablePowerMode();
        var w = b("#altStyle");
        b("body").addClass("sopa");
        w.attr("href", "/webincludes/css/sopa.css")
    });
    GS.router.get(/^#!?\/search(?:$|\/(.*)\/?)/, function (w) {
        var B = new n(w.splat, "type"), t, v;
        o = "search";
        r = t = {identifier:(B.type || "everything") + (w.q || w.query), params:B};
        GS.router.page.getPageClass(o).then(function (D) {
            if (o === "search" && r === t) {
                v = GS.router.page.activate(D, t);
                v.index(B.type, w.q || w.query);
                if (B.type)B.subpage = B.type; else B.type = "everything"
            }
        })
    });
    GS.router.get(/^#!?\/surveys(?:$|\/(.*)\/?|\/(.*)\/(.*)\/?)/, function (w) {
        var B = new n(w.splat, "subpage", "id"), t, v;
        o = "surveys";
        r = t = {};
        GS.router.page.getPageClass(o).then(function (D) {
            if (o === "surveys" && r === t) {
                v = GS.router.page.activate(D, t);
                if (!B.subpage)B.subpage =
                        "index";
                if (!B.id)B.id = false;
                v.index(B.subpage, B.id);
                GS.getGuts().handlePageLoad("surveys", B)
            }
        })
    });
    GS.router.get(/^#!\/(?:music|explore)(?:$|\/(.*)\/?)/, function (w) {
        var B = new n(w.splat, "subpage", "type", "id"), t, v;
        o = "music";
        r = t = {params:B};
        GS.router.page.getPageClass(o).then(function (D) {
            if (o === "music" && r === t) {
                v = GS.router.page.activate(D, t);
                if (!B.type)B.type = false;
                v.index(B.subpage, B.type, B);
                GS.getGuts().handlePageLoad("music", B)
            }
        })
    });
    GS.router.get(/^#!?\/(.*)\/?$/, function (w) {
        var B = new n(w.splat, "page",
                "subpage", "type"), t, v, D, F = this;
        t = B.page;
        if (B.page == "popular") {
            F.replaceHash("music/popular");
            B.page = "music";
            B.subpage = "popular";
            t = "music"
        }
        if (B.page == "community")F.setHash(GS.user.toUrl("community")); else {
            o = t;
            r = v = {params:B};
            F.page.getPageClass(o).then(function (E) {
                if (o === t && r === v)if (_.defined(E)) {
                    D = GS.router.page.activate(E, v);
                    D.index(B.subpage)
                } else F._getTypeIDForPageName(B.page).done(
                        function (x) {
                            switch (x.type) {
                                case "user":
                                    w.splat[0] = m(w.splat[0], x.id);
                                    g(w);
                                    break;
                                case "artist":
                                case "album":
                                    w.splat[1] =
                                            m(w.splat[0], x.id);
                                    w.splat[0] = x.type;
                                    k(w);
                                    break;
                                case "theme":
                                    F.setHash("/theme/" + (x.item.themeName ? x.item.themeName : "x") + "/" + x.id);
                                    break;
                                default:
                                    console.warn("cant handle pageName type", x);
                                    F.notFound();
                                    break
                            }
                        }).fail(function () {
                            F.notFound()
                        })
            })
        }
    });
    GS.router.get(/^#!?(?:[a-z0-9A-Z])/, function () {
        if (GS.page.activePage)if (GS.page.activePage) {
            var w = GS.page.activePage.url;
            w = w.replace(/(&|\?)fb_comment_id=([a-zA-Z0-9\_\-]+)/, "$1fbComment");
            var B = GS.page.activePage.element.controller();
            B.scrollToFBComment &&
            B.scrollToFBComment();
            location.replace(w)
        }
    });
    var A = /\?([^#]*)$/
})(jQuery);
(function (b) {
    function a() {
        if (!arguments.callee.prototype.locked) {
            var v = +new Date;
            if (o && v - o <= 100) {
                if (!A) {
                    r = setTimeout(arguments.callee, 101);
                    A = true
                }
            } else {
                A = false;
                o = v;
                var D = b("#application").width(), F = b("#header"), E = b("#footer"), x = b("#previewNotification"), y = b("#page");
                v = b("#page_wrapper");
                var H = b("#page_sidebar"), I = b("#page_header"), p = b("#page_content"), q = b("#capitalSidebar");
                page_controls = b(".page_controls");
                sticky_controls = b(".page_controls .sticky");
                b("#content").add("#sidebar").add(v).css({height:k.height() -
                        F.height() - E.height() - x.outerHeight()});
                b("#sidebar_pinboard").css({height:b("#sidebar").height() - b("#sidebar_music_navigation").height() - b("#sidebar_pinboard_header").height() - 1});
                v.css({width:D - b("#sidebar").width() - q.width()});
                y.css({height:v.height() - b("#page_footer").height() - b("#theme_page_header.measure").height(), width:v.width() - H.width()});
                sticky_controls.width(page_controls.width());
                if (p.hasClass("scrollable") || p.hasClass("grid"))p.css({height:y.height() - I.outerHeight()});
                F = {all:y.find(".noResults"),
                    panes:y.find(".noResults_pane")};
                F.panes.css({height:b("#page.gs_page_search").length > 0 ? 250 : p.height()});
                b(".noResults_block_column").removeClass("js-center").css({margin:0});
                b(".noResults_block_center").removeClass("hide");
                if (F.all.width() <= 550) {
                    b(".noResults_block_center").addClass("hide");
                    b(".noResults_block_column").addClass("js-center")
                }
                F.all.css({top:Math.max((F.panes.height() - F.all.height()) / 2, 0)});
                p.find(".page_column_fluid").each(function () {
                    var s = 0, u = p.width();
                    b(this).siblings(".page_column").each(function () {
                        var C =
                                b(this);
                        C.height(p.height());
                        if (C.hasClass("page_filter")) {
                            if (!C.hasClass("suppressAutoCollapse"))if (D < m && !C.hasClass("manualOpen"))C.addClass("collapsed"); else if (D < n && s > 0 && !C.hasClass("manualOpen"))C.addClass("collapsed"); else C.hasClass("manualCollapse") || C.removeClass("collapsed");
                            C.removeClass("suppressAutoCollapse");
                            if (C.hasClass("collapsed")) {
                                var G = C.find(".gs_grid").controller();
                                G && G.grid && C.width(G.grid.getScrollWidth())
                            } else C.width(175)
                        }
                        s += C.outerWidth()
                    });
                    b(this).css({width:u - s, height:p.height()})
                });
                b(".js-center").each(function () {
                    var s = b(this);
                    s.css({marginLeft:Math.max(0, (s.parent().width() - s.outerWidth()) / 2)})
                });
                b.browser.msie && b.browser.version === "7.0" && b("#kinesisFrame").length && b("#kinesisFrame").height(v.height());
                arguments.callee.prototype.locked = true;
                b.publish("gs.app.resize");
                b(".gs_grid").each(function (s, u) {
                    u = b(u);
                    if (b.isFunction(u.controller)) {
                        var C = u.controller();
                        C && b.isFunction(C.resizeSelf) && u.controller().resizeSelf()
                    }
                });
                arguments.callee.prototype.locked = false
            }
        }
    }

    function c(v) {
        if (v) {
            if (GS.getAd().lastIdleTime) {
                b.publish("gs.state.active");
                GS.getAd().lastIdleTime = null
            }
            switch (v.type) {
                case "keydown":
                    if (v.keyCode == "13" || v.ctrlKey && v.keyCode == "37" || v.ctrlKey && v.keyCode == "38" || v.ctrlKey && v.keyCode == "39" || v.ctrlKey && v.keyCode == "40")GS.getAd().adAction(v);
                    break;
                default:
                    GS.getAd().adAction(v);
                    break
            }
        }
    }

    function h() {
        var v = document.title || "";
        if (v.indexOf("#") != -1)v = v.substring(0, v.indexOf("#"));
        if (document.title != v && v !== "")document.title = v
    }

    function g() {
        b("head").pinify({applicationName:"Grooveshark", favIcon:"/webincludes/images/favicon64.ico",
            navColor:"#f77f00", startUrl:"http://" + window.location.host, tooltip:"Launch Grooveshark", window:"width=100%;height=100%"});
        var v = [
            {name:"Explore", url:"/#!/music", icon:gsConfig.assetHost + "/webincludes/images/pinned/explore.ico"},
            {name:"Search", url:"/#!/", icon:gsConfig.assetHost + "/webincludes/images/pinned/search.ico"}
        ], D = function () {
            F({title:GS.user && GS.user.isLoggedIn ? GS.user.Name : "Grooveshark", items:[
                {name:"My Profile", url:GS.user.toUrl(), icon:gsConfig.assetHost + "/webincludes/images/pinned/profile.ico"},
                {name:"My Music", url:GS.user.toUrl("music"), icon:gsConfig.assetHost + "/webincludes/images/pinned/music.ico"},
                {name:"Community", url:GS.user.toUrl("communuity"), icon:gsConfig.assetHost + "/webincludes/images/pinned/community.ico"}
            ].concat(v)})
        }, F = function (q) {
            window.external.msSiteModeClearJumplist();
            window.external.msSiteModeCreateJumplist(q.title);
            b.each(q.items, function (s, u) {
                window.external.msSiteModeAddJumpListItem(u.name, u.url, u.icon, u.target || "self")
            });
            window.external.msSiteModeShowJumplist()
        };
        b.subscribe("gs.auth.update",
                D);
        D();
        var E = {previous:1, play:2, next:3, library:4, radio:5, smile:6, frown:7};
        b.pinify.createThumbbarButtons({buttons:[
            {icon:gsConfig.assetHost + "/webincludes/images/pinned/previous.ico", name:"Previous", click:function () {
                GS.player && GS.player.previousSong()
            }},
            {icon:gsConfig.assetHost + "/webincludes/images/pinned/play.ico", name:"Play", click:function () {
                if (GS.player)if (GS.player.isPaused) {
                    GS.player.resumeSong();
                    setTimeout(function () {
                        window.external.msSiteModeShowButtonStyle(E.play, 0)
                    }, 5)
                } else if (GS.player.isPlaying ||
                        GS.player.isLoading) {
                    GS.player.pauseSong();
                    setTimeout(function () {
                        window.external.msSiteModeShowButtonStyle(E.play, 1)
                    }, 5)
                } else {
                    GS.player.queue.activeSong && GS.player.playSong(GS.player.queue.activeSong.queueSongID);
                    setTimeout(function () {
                        window.external.msSiteModeShowButtonStyle(E.play, 0)
                    }, 5)
                }
            }, alternateStyle:{icon:gsConfig.assetHost + "/webincludes/images/pinned/pause.ico", name:"Pause"}},
            {icon:gsConfig.assetHost + "/webincludes/images/pinned/next.ico", name:"Next", click:function () {
                GS.player && GS.player.nextSong()
            }},
            {icon:gsConfig.assetHost + "/webincludes/images/pinned/mymusic_add.ico", name:"Add to My Music", click:function () {
                GS.player.queue.activeSong && GS.user.library && GS.user.library.songs && GS.user.library.songs[GS.player.queue.activeSong.SongID] ? GS.user.removeFromLibrary(GS.player.queue.activeSong.SongID) : GS.user.addToLibrary([GS.player.queue.activeSong.SongID])
            }, alternateStyle:{icon:gsConfig.assetHost + "/webincludes/images/pinned/mymusic_remove.ico", name:"Remove from My Music"}},
            {icon:gsConfig.assetHost + "/webincludes/images/pinned/radio_off.ico",
                name:"Start Radio", click:function () {
                var q = GS.player.queue.autoplayEnabled;
                GS.player.setAutoplay(!GS.player.queue.autoplayEnabled);
                q || setTimeout(function () {
                    window.external.msSiteModeShowButtonStyle(E.radio, 0)
                }, 5)
            }, alternateStyle:{icon:gsConfig.assetHost + "/webincludes/images/pinned/radio_on.ico", name:"Stop Radio"}}
        ]});
        var x = {}, y = function (q, s, u) {
            if (x[q] === undefined || x[q] !== u) {
                window.external.msSiteModeUpdateThumbBarButton(q, true, u);
                x[q] = u
            }
        }, H = 0;
        b.subscribe("gs.player.playstatus", function (q) {
            if (q.status !=
                    H) {
                switch (q.status) {
                    case GS.player.PLAY_STATUS_INITIALIZING:
                    case GS.player.PLAY_STATUS_LOADING:
                    case GS.player.PLAY_STATUS_PLAYING:
                        setTimeout(function () {
                            window.external.msSiteModeShowButtonStyle(E.play, 1)
                        }, 10);
                        break;
                    case GS.player.PLAY_STATUS_COMPLETED:
                    case GS.player.PLAY_STATUS_PAUSED:
                    case GS.player.PLAY_STATUS_NONE:
                    case GS.player.PLAY_STATUS_FAILED:
                        setTimeout(function () {
                            window.external.msSiteModeShowButtonStyle(E.play, 0)
                        }, 10);
                        break
                }
                H = q.status
            }
        });
        var I = function (q) {
            if (q) {
                window.external.msSiteModeShowButtonStyle(E.radio,
                        1);
                p = true
            } else {
                window.external.msSiteModeShowButtonStyle(E.radio, 0);
                p = false
            }
        }, p = false;
        b.subscribe("gs.player.autoplay.update", function () {
            if (GS.player.queue)if (GS.player.queue.autoplayEnabled && GS.player.queue.autoplayEnabled != p)I(true); else GS.player.queue.autoplayEnabled != p && I(false)
        });
        y(E.previous, true, true);
        window.external.msSiteModeShowButtonStyle(E.play, 0);
        y(E.play, true, true);
        y(E.next, true, true);
        window.external.msSiteModeShowButtonStyle(E.library, 0);
        y(E.library, true, false);
        window.external.msSiteModeShowButtonStyle(E.radio,
                0);
        y(E.radio, true, true);
        b.subscribe("gs.player.currentSong", function (q) {
            if (q) {
                typeof GS.player.queue.autoplayEnabled !== "undefined" && GS.player.queue.autoplayEnabled != p && I(GS.player.queue.autoplayEnabled);
                GS.player.queue.activeSong && GS.user.library && GS.user.library.songs && GS.user.library.songs[GS.player.queue.activeSong.SongID] ? window.external.msSiteModeShowButtonStyle(E.library, 1) : window.external.msSiteModeShowButtonStyle(E.library, 0);
                y(E.library, true, true)
            } else {
                window.external.msSiteModeShowButtonStyle(E.library,
                        0);
                y(E.library, true, false)
            }
        });
        if (GS.IE.isPinned && gsConfig.runMode == "production")GS.getGuts().gaTrackEvent("ie9Pinned", "isPinned"); else GS.IE.canPin && gsConfig.runMode == "production" && GS.getGuts().gaTrackEvent("ie9Pinned", "notPinned")
    }

    var k = b(window), m = 844, n = 1060, o = 0, r = 0, A = false;
    k.resize(a);
    if (b.browser.msie)window.onbeforeunload = function () {
        GS.user.isLoggedIn && GS.user.storeData();
        GS.theme && GS.theme.savePreferences();
        GS.getNotice && GS.getNotice().saveSeenPromoNotifications()
    }; else k.bind("unload", function () {
        GS.user.isLoggedIn &&
        GS.user.storeData();
        GS.theme && GS.theme.savePreferences();
        GS.getNotice && GS.getNotice().saveSeenPromoNotifications()
    });
    b("body").konami(function () {
        b.publish("gs.playlist.play", {playlistID:40563861, playOnAdd:true})
    });
    b("body").bind("mousedown", c);
    b("body").bind("keydown", c);
    b.browser.msie && b(document).bind("propertychange", function () {
        event.propertyName == "title" && h()
    });
    GS.windowResizeTimeout = null;
    GS.windowResizeWait = 10;
    setTimeout(function () {
        k.resize()
    }, 0);
    if (window.gsViewBundles)GS.Controllers.BaseController.viewBundles =
            window.gsViewBundles;
    if (window.gsBundleVersions)GS.Controllers.BaseController.bundleVersions = window.gsBundleVersions;
    if (window.gsPageBundle && b.isPlainObject(gsPageBundle))for (var w in gsPageBundle)if (gsPageBundle.hasOwnProperty(w))b.View.preCached[w] = gsPageBundle[w];
    window.reportUploadComplete = window.uploadComplete = function () {
        window.GS && GS.user && GS.user.uploadComplete()
    };
    GS.airbridge = GS.Controllers.AirbridgeController.instance();
    w = function (v) {
        return function () {
            var D = arguments.callee.prototype.inst;
            if (D)return D;
            arguments.callee.prototype.inst = true;
            arguments.callee.prototype.inst = D = GS.Controllers[v].instance();
            D.appReady && b.isReady && D.appReady();
            D.commReady && GS.service.currentToken && D.commReady();
            return D
        }
    };
    GS.service = GS.Controllers.ServiceController.instance();
    GS.auth = GS.Controllers.AuthController.instance();
    GS.getLightbox = w("LightboxController");
    GS.getNotice = w("NotificationsController");
    GS.header = GS.Controllers.HeaderController.instance();
    GS.getSidebar = w("SidebarController");
    GS.theme = GS.Controllers.ThemeController.instance();
    GS.player = GS.Controllers.PlayerController.instance();
    GS.getYoutube = w("YoutubeController");
    GS.getVimeo = w("VimeoController");
    GS.getAd = w("AdController");
    GS.getGuts = w("GUTSController");
    GS.getLocale = w("LocaleController");
    GS.getFacebook = w("FacebookController");
    GS.getLastfm = w("LastfmController");
    GS.getGoogle = w("GoogleController");
    GS.getTwitter = w("TwitterController");
    GS.getRapleaf = w("RapLeafController");
    GS.getKrux = w("KruxController");
    GS.getParty = w("PartyController");
    GS.getEngagements = w("EngagementsController");
    GS.page = GS.Controllers.PageController;
    GS.features = GS.Models.Feature.Features;
    GS.search = {search:"", type:"", lastSearch:"", lastType:"", version:""};
    GS.resize = a;
    GS.rand = Math.random();
    GS.shareTypes = {album:["email", "facebook", "stumbleupon", "twitter", "widget"], playlist:["email", "facebook", "stumbleupon", "twitter", "reddit", "widget"], song:["email", "facebook", "stumbleupon", "twitter", "reddit", "widget"], manySongs:["widget"]};
    GS.gotoUpgradePage = function () {
        GS.router.setHash("/settings/subscriptions")
    };
    window.Grooveshark =
            GS.Controllers.ApiController.instance();
    b(document).bind("keydown", "ctrl+a", function (v) {
        var D = [], F = b(".gs_grid:last").controller();
        if (!b(v.target).is("input,select,textarea") && F) {
            for (v = 0; v < F.dataView.rows.length; v++) {
                D.push(v);
                F.selectedRowIDs.push(F.dataView.rows[v].id)
            }
            F.grid.setSelectedRows(D);
            F.grid.onSelectedRowsChanged();
            return false
        }
    });
    (function () {
        var v = new b.Event("remove"), D = b.fn.remove;
        b.fn.remove = function () {
            b(this).trigger(v);
            D.apply(this, arguments)
        }
    })();
    w = true;
    var B = _.browserDetect();
    switch (B.browser) {
        case "chrome":
            if (B.version >= 6)w = false;
            if (Boolean(navigator.userAgent.match(/GoogleTV/i))) {
                GS.getLightbox().open("unsupportedBrowser", {isUncertain:true});
                w = false
            }
            break;
        case "safari":
            if (B.version >= 5)w = false;
            if (Boolean(navigator.userAgent.match(/luakit/i))) {
                GS.getLightbox().open("unsupportedBrowser", {isUncertain:true});
                w = false
            }
            break;
        case "msie":
            if (B.version >= 7 && B.version <= 9)w = false;
            if (B.version <= 6) {
                GS.getLightbox().open("unsupportedBrowser", {isChromeFrame:true});
                w = false
            }
            break;
        case "firefox":
            if (B.version >=
                    3)w = false;
            break;
        case "mozilla":
            if (B.version >= 1.9)w = false;
            break;
        case "opera":
            if (B.version >= 11)w = false;
            break;
        case "adobeair":
            w = false;
            break
    }
    w && GS.getLightbox().open("unsupportedBrowser", {browser:B});
    window.playSongFromAd = function (v) {
        try {
            v = v || [];
            typeof v == "object" && v.constructor == Array || (v = [v]);
            GS.player.addSongsToQueueAt(v, null, true)
        } catch (D) {
        }
    };
    b(function () {
        function v() {
            var F = "";
            try {
                if (window.getSelection)F = window.getSelection(); else if (document.getSelection)F = document.getSelection(); else if (document.selection)F =
                        document.selection.createRange().text; else return""
            } catch (E) {
                console.log("getText failed:", E);
                return""
            }
            return F.toString()
        }

        var D = null;
        b("body").mouseup(function () {
            D = v();
            f = D.length;
            var F = 0, E = D.replace(/\s/g, " ");
            E = E.split(" ");
            for (z = 0; z < E.length; z++)E[z].length > 0 && F++;
            d = F;
            D !== null && d < 60 && f > 3 && _gaq.push(["_trackEvent", "user", "copyText", D])
        })
    });
    w = function () {
        var v = {canPin:false, isPinned:false, firstPin:false, firstVisit:false};
        try {
            if ("external"in window && "msIsSiteMode"in window.external) {
                v.canPin = true;
                if (window.external.msIsSiteMode()) {
                    v.isPinned = true;
                    if ("msIsSiteModeFirstRun"in window.external && window.external.msIsSiteModeFirstRun(true) !== 0)v.firstPin = true; else v.firstVisit = GS.store.get("visitedIE9") || b.cookie("visitedIE9") ? false : true
                }
            }
        } catch (D) {
        }
        return v
    }();
    var t = true;
    w.canPin && b.subscribe("gs.app.ready", function () {
        var v = document.createElement("script");
        v.type = "text/javascript";
        v.async = true;
        v.src = gsConfig.assetHost + "/gs/resources/jquery.pinify.min.js";
        v.onload = v.onreadystatechange = function () {
            if (this.readyState &&
                    (this.readyState == "complete" || this.readyState !== "loaded") && t) {
                setTimeout(function () {
                    g(GS.IE)
                }, 100);
                t = false
            }
        };
        document.body.appendChild(v)
    });
    GS.IE = w;
    b(document).ready(function () {
        var v = b("body,#main,#page_wrapper,#mainContainer");
        v.scrollTop(0);
        document.body.scroll = "no";
        v.scroll(function (D) {
            if (b(this).scrollTop() > 0) {
                console.warn("Fixing Scroll", D.target);
                b(this).scrollTop(0)
            }
            return false
        });
        b.browser.msie && h();
        b.drop({mode:"mouse"});
        GS.isReady = true;
        b.publish("gs.app.ready");
        GS.player.isReady && GS.player.playerSetup();
        GS.router.run()
    })
})(jQuery);
var oldUnload = false;
if (window.onbeforeunload)oldUnload = window.onbeforeunload;
window.onbeforeunload = function (b) {
    GS.player.storeQueue();
    GS.getGuts().forceSend();
    var a;
    b = b || window.event;
    if (!GS.user.isLoggedIn && GS.user.isDirty) {
        a = $.localize.getString("ONCLOSE_PROMPT_LOGIN");
        GS.getLightbox().open("login", {extraMessage:"ONCLOSE_PROMPT_LOGIN"})
    }
    if (GS.player.isPlaying)a = $.localize.getString("ONCLOSE_PLAYING");
    if (!GS.Controllers.PageController.ALLOW_LOAD)a = GS.Controllers.PageController.confirmMessage;
    if (oldUnload) {
        var c = oldUnload;
        oldUnload = false;
        c()
    }
    if (a) {
        if (b)b.returnValue = a;
        return a
    }
};
